
LSM6DSL_V0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004334  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004580  08004580  00005580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004588  08004588  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004590  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000248  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c042  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a22  00000000  00000000  000120ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00013af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000790  00000000  00000000  000144a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f078  00000000  00000000  00014c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e330  00000000  00000000  00033cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c292b  00000000  00000000  00041fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010490b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce4  00000000  00000000  00104950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00107634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044bc 	.word	0x080044bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080044bc 	.word	0x080044bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb71 	bl	800096c <HAL_Init>




  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f835 	bl	80002f8 <SystemClock_Config>




  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f903 	bl	8000498 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f8d1 	bl	8000438 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000296:	f000 f88f 	bl	80003b8 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a4:	f000 fe5c 	bl	8000f60 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE BEGIN 3 */

	  // Read gyroscope data
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);
 80002a8:	f107 020a 	add.w	r2, r7, #10
 80002ac:	f107 010c 	add.w	r1, r7, #12
 80002b0:	f107 030e 	add.w	r3, r7, #14
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f957 	bl	8000568 <LSM6DSL_ReadGyro>

	  // Read accelerometer data
	  LSM6DSL_ReadAccel(&accel_x, &accel_y, &accel_z);
 80002ba:	1d3a      	adds	r2, r7, #4
 80002bc:	1db9      	adds	r1, r7, #6
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f97c 	bl	80005c0 <LSM6DSL_ReadAccel>

	  // send data over uart
	  DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);
 80002c8:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80002cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80002d0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80002d4:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 80002d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80002e0:	9201      	str	r2, [sp, #4]
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	462b      	mov	r3, r5
 80002e6:	4622      	mov	r2, r4
 80002e8:	f000 f996 	bl	8000618 <DataOver_UART>

	  //delay
	  HAL_Delay(500);
 80002ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002f0:	f000 fba2 	bl	8000a38 <HAL_Delay>
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);
 80002f4:	bf00      	nop
 80002f6:	e7d7      	b.n	80002a8 <main+0x28>

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a6      	sub	sp, #152	@ 0x98
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000302:	2228      	movs	r2, #40	@ 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f003 fc58 	bl	8003bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2258      	movs	r2, #88	@ 0x58
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fc4a 	bl	8003bbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000328:	2302      	movs	r3, #2
 800032a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2310      	movs	r3, #16
 8000332:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000344:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000348:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000356:	4618      	mov	r0, r3
 8000358:	f001 faa2 	bl	80018a0 <HAL_RCC_OscConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000362:	f000 f993 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	230f      	movs	r3, #15
 8000368:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	2302      	movs	r3, #2
 800036c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000376:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fae0 	bl	8002948 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800038e:	f000 f97d 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000392:	2322      	movs	r3, #34	@ 0x22
 8000394:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f002 fcf1 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003ac:	f000 f96e 	bl	800068c <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3798      	adds	r7, #152	@ 0x98
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_I2C1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_I2C1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_I2C1_Init+0x74>)
 80003c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000434 <MX_I2C1_Init+0x7c>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_I2C1_Init+0x74>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_I2C1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f2:	480e      	ldr	r0, [pc, #56]	@ (800042c <MX_I2C1_Init+0x74>)
 80003f4:	f000 fdcc 	bl	8000f90 <HAL_I2C_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003fe:	f000 f945 	bl	800068c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000402:	2100      	movs	r1, #0
 8000404:	4809      	ldr	r0, [pc, #36]	@ (800042c <MX_I2C1_Init+0x74>)
 8000406:	f001 f9b3 	bl	8001770 <HAL_I2CEx_ConfigAnalogFilter>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000410:	f000 f93c 	bl	800068c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000414:	2100      	movs	r1, #0
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_I2C1_Init+0x74>)
 8000418:	f001 f9f5 	bl	8001806 <HAL_I2CEx_ConfigDigitalFilter>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 f933 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000078 	.word	0x20000078
 8000430:	40005400 	.word	0x40005400
 8000434:	00201d2b 	.word	0x00201d2b

08000438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800043c:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	@ (8000494 <MX_USART2_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047a:	4805      	ldr	r0, [pc, #20]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800047c:	f002 fea2 	bl	80031c4 <HAL_UART_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000486:	f000 f901 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200000cc 	.word	0x200000cc
 8000494:	40004400 	.word	0x40004400

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	@ 0x28
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b29      	ldr	r3, [pc, #164]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b26      	ldr	r3, [pc, #152]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a25      	ldr	r2, [pc, #148]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b23      	ldr	r3, [pc, #140]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <MX_GPIO_Init+0xc8>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000518:	f000 fd22 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000522:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	480c      	ldr	r0, [pc, #48]	@ (8000564 <MX_GPIO_Init+0xcc>)
 8000534:	f000 fb8a 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000538:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 fb7a 	bl	8000c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	@ 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800

08000568 <LSM6DSL_ReadGyro>:

/**
  * @brief LSM6DSL_ReadGyro Initialization Function
  */
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]

    // Read 6 bytes of gyro data (OUTX_L_G to OUTZ_H_G)
    uint8_t p_buf_tx_G[] = { LSM6DSL_ACC_GYRO_OUTX_L_G, LSM6DSL_ACC_GYRO_OUTX_H_G,
 8000574:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <LSM6DSL_ReadGyro+0x50>)
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057e:	6018      	str	r0, [r3, #0]
 8000580:	3304      	adds	r3, #4
 8000582:	8019      	strh	r1, [r3, #0]
    						LSM6DSL_ACC_GYRO_OUTY_L_G, LSM6DSL_ACC_GYRO_OUTY_H_G,
							LSM6DSL_ACC_GYRO_OUTZ_L_G, LSM6DSL_ACC_GYRO_OUTZ_H_G };
//    HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDR, p_buf_tx, 6, HAL_MAX_DELAY);
    HAL_I2C_Master_Receive(&hi2c1, LSM6DSL_ADDR, p_buf_tx_G, sizeof(p_buf_tx_G), HAL_MAX_DELAY);
 8000584:	f107 0210 	add.w	r2, r7, #16
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2306      	movs	r3, #6
 8000590:	216b      	movs	r1, #107	@ 0x6b
 8000592:	480a      	ldr	r0, [pc, #40]	@ (80005bc <LSM6DSL_ReadGyro+0x54>)
 8000594:	f000 fd98 	bl	80010c8 <HAL_I2C_Master_Receive>


    // Combine low and high bytes to get 16-bit gyroscope values
    *gx = (int16_t)(LSM6DSL_ACC_GYRO_OUTX_L_G | LSM6DSL_ACC_GYRO_OUTX_H_G << 8);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f242 3222 	movw	r2, #8994	@ 0x2322
 800059e:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(LSM6DSL_ACC_GYRO_OUTY_L_G | LSM6DSL_ACC_GYRO_OUTY_H_G << 8);
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	f242 5224 	movw	r2, #9508	@ 0x2524
 80005a6:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(LSM6DSL_ACC_GYRO_OUTZ_L_G | LSM6DSL_ACC_GYRO_OUTZ_H_G << 8);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f242 7226 	movw	r2, #10022	@ 0x2726
 80005ae:	801a      	strh	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	080044d4 	.word	0x080044d4
 80005bc:	20000078 	.word	0x20000078

080005c0 <LSM6DSL_ReadAccel>:

/**
  * @brief LSM6DSL_ReadAccel Initialization Function
  */
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]

    // Read 6 bytes of accelerometer data (OUTX_L_XL to OUTZ_H_XL)
    uint8_t p_buf_tx_XL[] = { LSM6DSL_ACC_GYRO_OUTX_L_XL, LSM6DSL_ACC_GYRO_OUTX_H_XL,
 80005cc:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <LSM6DSL_ReadAccel+0x50>)
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d6:	6018      	str	r0, [r3, #0]
 80005d8:	3304      	adds	r3, #4
 80005da:	8019      	strh	r1, [r3, #0]
        						LSM6DSL_ACC_GYRO_OUTY_L_XL, LSM6DSL_ACC_GYRO_OUTY_H_XL,
    							LSM6DSL_ACC_GYRO_OUTZ_L_XL, LSM6DSL_ACC_GYRO_OUTZ_H_XL };

    HAL_I2C_Master_Receive(&hi2c1, LSM6DSL_ADDR, p_buf_tx_XL, sizeof(p_buf_tx_XL), HAL_MAX_DELAY);
 80005dc:	f107 0210 	add.w	r2, r7, #16
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2306      	movs	r3, #6
 80005e8:	216b      	movs	r1, #107	@ 0x6b
 80005ea:	480a      	ldr	r0, [pc, #40]	@ (8000614 <LSM6DSL_ReadAccel+0x54>)
 80005ec:	f000 fd6c 	bl	80010c8 <HAL_I2C_Master_Receive>

    // Combine low and high bytes to get 16-bit accelerometer values
    *ax = (int16_t)(LSM6DSL_ACC_GYRO_OUTX_L_XL | LSM6DSL_ACC_GYRO_OUTX_H_XL << 8);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f642 1228 	movw	r2, #10536	@ 0x2928
 80005f6:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(LSM6DSL_ACC_GYRO_OUTY_L_XL | LSM6DSL_ACC_GYRO_OUTY_H_XL << 8);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	f642 322a 	movw	r2, #11050	@ 0x2b2a
 80005fe:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(LSM6DSL_ACC_GYRO_OUTZ_L_XL | LSM6DSL_ACC_GYRO_OUTZ_H_XL << 8);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f642 522c 	movw	r2, #11564	@ 0x2d2c
 8000606:	801a      	strh	r2, [r3, #0]
}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	080044dc 	.word	0x080044dc
 8000614:	20000078 	.word	0x20000078

08000618 <DataOver_UART>:

/**
  * @brief UART_Transmit Data
  */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b0a3      	sub	sp, #140	@ 0x8c
 800061c:	af06      	add	r7, sp, #24
 800061e:	4604      	mov	r4, r0
 8000620:	4608      	mov	r0, r1
 8000622:	4611      	mov	r1, r2
 8000624:	461a      	mov	r2, r3
 8000626:	4623      	mov	r3, r4
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	4603      	mov	r3, r0
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	807b      	strh	r3, [r7, #2]
 8000632:	4613      	mov	r3, r2
 8000634:	803b      	strh	r3, [r7, #0]
	// Prepare data string
	char uart_buff[96];
	int buff_length;

	buff_length = snprintf(uart_buff, sizeof(uart_buff),
 8000636:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 800063a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800063e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000642:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000646:	f9b7 0088 	ldrsh.w	r0, [r7, #136]	@ 0x88
 800064a:	f9b7 408c 	ldrsh.w	r4, [r7, #140]	@ 0x8c
 800064e:	f107 050c 	add.w	r5, r7, #12
 8000652:	9404      	str	r4, [sp, #16]
 8000654:	9003      	str	r0, [sp, #12]
 8000656:	9102      	str	r1, [sp, #8]
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	4633      	mov	r3, r6
 800065e:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <DataOver_UART+0x6c>)
 8000660:	2160      	movs	r1, #96	@ 0x60
 8000662:	4628      	mov	r0, r5
 8000664:	f003 fa76 	bl	8003b54 <sniprintf>
 8000668:	66f8      	str	r0, [r7, #108]	@ 0x6c
									"Acce: x=%d y=%d z=%d | Gyro: x=%d y=%d z=%d \r\n",
									ax, ay, az, gx, gy, gz);

	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 800066a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800066c:	b29a      	uxth	r2, r3
 800066e:	f107 010c 	add.w	r1, r7, #12
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <DataOver_UART+0x70>)
 8000678:	f002 fdf2 	bl	8003260 <HAL_UART_Transmit>

}
 800067c:	bf00      	nop
 800067e:	3774      	adds	r7, #116	@ 0x74
 8000680:	46bd      	mov	sp, r7
 8000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000684:	080044e4 	.word	0x080044e4
 8000688:	200000cc 	.word	0x200000cc

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <HAL_MspInit+0x44>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <HAL_MspInit+0x44>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <HAL_MspInit+0x44>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <HAL_MspInit+0x44>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_MspInit+0x44>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_MspInit+0x44>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ce:	2007      	movs	r0, #7
 80006d0:	f000 fa88 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a26      	ldr	r2, [pc, #152]	@ (8000798 <HAL_I2C_MspInit+0xb8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d145      	bne.n	800078e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000744:	2304      	movs	r3, #4
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000752:	f000 fa7b 	bl	8000c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000756:	2380      	movs	r3, #128	@ 0x80
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000766:	2304      	movs	r3, #4
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <HAL_I2C_MspInit+0xc0>)
 8000772:	f000 fa6b 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 800077c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_I2C_MspInit+0xbc>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	@ 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40005400 	.word	0x40005400
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a17      	ldr	r2, [pc, #92]	@ (8000820 <HAL_UART_MspInit+0x7c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d128      	bne.n	8000818 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <HAL_UART_MspInit+0x80>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a16      	ldr	r2, [pc, #88]	@ (8000824 <HAL_UART_MspInit+0x80>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <HAL_UART_MspInit+0x80>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <HAL_UART_MspInit+0x80>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <HAL_UART_MspInit+0x80>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <HAL_UART_MspInit+0x80>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f6:	230c      	movs	r3, #12
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000806:	2307      	movs	r3, #7
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000814:	f000 fa1a 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	@ 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40004400 	.word	0x40004400
 8000824:	40021000 	.word	0x40021000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 f8bb 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f003 f988 	bl	8003bcc <__errno>
 80008bc:	4603      	mov	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <_sbrk+0x64>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20010000 	.word	0x20010000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	20000154 	.word	0x20000154
 80008f0:	200002a8 	.word	0x200002a8

080008f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000950 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800091c:	f7ff ffea 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	@ (8000964 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000946:	f003 f947 	bl	8003bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094a:	f7ff fc99 	bl	8000280 <main>

0800094e <LoopForever>:

LoopForever:
    b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000950:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800095c:	08004590 	.word	0x08004590
  ldr r2, =_sbss
 8000960:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000964:	200002a4 	.word	0x200002a4

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>
	...

0800096c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <HAL_Init+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <HAL_Init+0x28>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f931 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff fe86 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f93b 	bl	8000c32 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f911 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000158 	.word	0x20000158

08000a20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000158 	.word	0x20000158

08000a38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff47 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5c 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e160      	b.n	8000f1e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8152 	beq.w	8000f18 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80ac 	beq.w	8000f18 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f3c <HAL_GPIO_Init+0x2f0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8000f3c <HAL_GPIO_Init+0x2f0>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f3c <HAL_GPIO_Init+0x2f0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd8:	4a59      	ldr	r2, [pc, #356]	@ (8000f40 <HAL_GPIO_Init+0x2f4>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e02:	d025      	beq.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a4f      	ldr	r2, [pc, #316]	@ (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d01f      	beq.n	8000e4c <HAL_GPIO_Init+0x200>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f48 <HAL_GPIO_Init+0x2fc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d019      	beq.n	8000e48 <HAL_GPIO_Init+0x1fc>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4d      	ldr	r2, [pc, #308]	@ (8000f4c <HAL_GPIO_Init+0x300>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x1f8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1f4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4b      	ldr	r2, [pc, #300]	@ (8000f54 <HAL_GPIO_Init+0x308>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1f0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8000f58 <HAL_GPIO_Init+0x30c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e34:	2306      	movs	r3, #6
 8000e36:	e00c      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e38:	2307      	movs	r3, #7
 8000e3a:	e00a      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	e008      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e40:	2304      	movs	r3, #4
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x206>
 8000e50:	2300      	movs	r3, #0
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e62:	4937      	ldr	r1, [pc, #220]	@ (8000f40 <HAL_GPIO_Init+0x2f4>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e94:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e9a:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ebe:	4a27      	ldr	r2, [pc, #156]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec4:	4b25      	ldr	r3, [pc, #148]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <HAL_GPIO_Init+0x310>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f ae97 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	48001000 	.word	0x48001000
 8000f54:	48001400 	.word	0x48001400
 8000f58:	48001800 	.word	0x48001800
 8000f5c:	40010400 	.word	0x40010400

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e08d      	b.n	80010be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff fb92 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2224      	movs	r2, #36	@ 0x24
 8000fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fe0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ff0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d107      	bne.n	800100a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e006      	b.n	8001018 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001016:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d108      	bne.n	8001032 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	e007      	b.n	8001042 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69d9      	ldr	r1, [r3, #28]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2220      	movs	r2, #32
 80010aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	461a      	mov	r2, r3
 80010d4:	460b      	mov	r3, r1
 80010d6:	817b      	strh	r3, [r7, #10]
 80010d8:	4613      	mov	r3, r2
 80010da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b20      	cmp	r3, #32
 80010e6:	f040 80db 	bne.w	80012a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_I2C_Master_Receive+0x30>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e0d4      	b.n	80012a2 <HAL_I2C_Master_Receive+0x1da>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001100:	f7ff fc8e 	bl	8000a20 <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2319      	movs	r3, #25
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f8f2 	bl	80012fc <I2C_WaitOnFlagUntilTimeout>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0bf      	b.n	80012a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2222      	movs	r2, #34	@ 0x22
 8001126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2210      	movs	r2, #16
 800112e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800114e:	b29b      	uxth	r3, r3
 8001150:	2bff      	cmp	r3, #255	@ 0xff
 8001152:	d90e      	bls.n	8001172 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800115e:	b2da      	uxtb	r2, r3
 8001160:	8979      	ldrh	r1, [r7, #10]
 8001162:	4b52      	ldr	r3, [pc, #328]	@ (80012ac <HAL_I2C_Master_Receive+0x1e4>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 face 	bl	800170c <I2C_TransferConfig>
 8001170:	e06d      	b.n	800124e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001180:	b2da      	uxtb	r2, r3
 8001182:	8979      	ldrh	r1, [r7, #10]
 8001184:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <HAL_I2C_Master_Receive+0x1e4>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fabd 	bl	800170c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001192:	e05c      	b.n	800124e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	6a39      	ldr	r1, [r7, #32]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f94b 	bl	8001434 <I2C_WaitOnRXNEFlagUntilTimeout>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e07c      	b.n	80012a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d034      	beq.n	800124e <HAL_I2C_Master_Receive+0x186>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d130      	bne.n	800124e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2200      	movs	r2, #0
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f880 	bl	80012fc <I2C_WaitOnFlagUntilTimeout>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e04d      	b.n	80012a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800120a:	b29b      	uxth	r3, r3
 800120c:	2bff      	cmp	r3, #255	@ 0xff
 800120e:	d90e      	bls.n	800122e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	22ff      	movs	r2, #255	@ 0xff
 8001214:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800121a:	b2da      	uxtb	r2, r3
 800121c:	8979      	ldrh	r1, [r7, #10]
 800121e:	2300      	movs	r3, #0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 fa70 	bl	800170c <I2C_TransferConfig>
 800122c:	e00f      	b.n	800124e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800123c:	b2da      	uxtb	r2, r3
 800123e:	8979      	ldrh	r1, [r7, #10]
 8001240:	2300      	movs	r3, #0
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 fa5f 	bl	800170c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001252:	b29b      	uxth	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d19d      	bne.n	8001194 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	6a39      	ldr	r1, [r7, #32]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f8a6 	bl	80013ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e01a      	b.n	80012a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2220      	movs	r2, #32
 8001272:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6859      	ldr	r1, [r3, #4]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_I2C_Master_Receive+0x1e8>)
 8001280:	400b      	ands	r3, r1
 8001282:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2220      	movs	r2, #32
 8001288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	e000      	b.n	80012a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80012a0:	2302      	movs	r3, #2
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	80002400 	.word	0x80002400
 80012b0:	fe00e800 	.word	0xfe00e800

080012b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d103      	bne.n	80012d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d007      	beq.n	80012f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	619a      	str	r2, [r3, #24]
  }
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800130c:	e03b      	b.n	8001386 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f91a 	bl	800154c <I2C_IsErrorOccurred>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e041      	b.n	80013a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d02d      	beq.n	8001386 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800132a:	f7ff fb79 	bl	8000a20 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d302      	bcc.n	8001340 <I2C_WaitOnFlagUntilTimeout+0x44>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d122      	bne.n	8001386 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4013      	ands	r3, r2
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	429a      	cmp	r2, r3
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	429a      	cmp	r2, r3
 800135c:	d113      	bne.n	8001386 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f043 0220 	orr.w	r2, r3, #32
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4013      	ands	r3, r2
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	429a      	cmp	r2, r3
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d0b4      	beq.n	800130e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ba:	e02f      	b.n	800141c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f8c3 	bl	800154c <I2C_IsErrorOccurred>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e02d      	b.n	800142c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d0:	f7ff fb26 	bl	8000a20 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d302      	bcc.n	80013e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d11a      	bne.n	800141c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d013      	beq.n	800141c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2220      	movs	r2, #32
 8001404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e007      	b.n	800142c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f003 0320 	and.w	r3, r3, #32
 8001426:	2b20      	cmp	r3, #32
 8001428:	d1c8      	bne.n	80013bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001444:	e071      	b.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f87e 	bl	800154c <I2C_IsErrorOccurred>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b20      	cmp	r3, #32
 8001466:	d13b      	bne.n	80014e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d138      	bne.n	80014e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b04      	cmp	r3, #4
 800147a:	d105      	bne.n	8001488 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b10      	cmp	r3, #16
 8001494:	d121      	bne.n	80014da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2210      	movs	r2, #16
 800149c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2204      	movs	r2, #4
 80014a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2220      	movs	r2, #32
 80014aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6859      	ldr	r1, [r3, #4]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	75fb      	strb	r3, [r7, #23]
 80014d8:	e002      	b.n	80014e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80014e0:	f7ff fa9e 	bl	8000a20 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d302      	bcc.n	80014f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d119      	bne.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d116      	bne.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b04      	cmp	r3, #4
 8001508:	d00f      	beq.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f043 0220 	orr.w	r2, r3, #32
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d002      	beq.n	800153e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d083      	beq.n	8001446 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	fe00e800 	.word	0xfe00e800

0800154c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d068      	beq.n	800164a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001580:	e049      	b.n	8001616 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d045      	beq.n	8001616 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800158a:	f7ff fa49 	bl	8000a20 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	429a      	cmp	r2, r3
 8001598:	d302      	bcc.n	80015a0 <I2C_IsErrorOccurred+0x54>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d13a      	bne.n	8001616 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015c2:	d121      	bne.n	8001608 <I2C_IsErrorOccurred+0xbc>
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015ca:	d01d      	beq.n	8001608 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80015cc:	7cfb      	ldrb	r3, [r7, #19]
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d01a      	beq.n	8001608 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015e2:	f7ff fa1d 	bl	8000a20 <HAL_GetTick>
 80015e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e8:	e00e      	b.n	8001608 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015ea:	f7ff fa19 	bl	8000a20 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b19      	cmp	r3, #25
 80015f6:	d907      	bls.n	8001608 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	f043 0320 	orr.w	r3, r3, #32
 80015fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001606:	e006      	b.n	8001616 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b20      	cmp	r3, #32
 8001614:	d1e9      	bne.n	80015ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b20      	cmp	r3, #32
 8001622:	d003      	beq.n	800162c <I2C_IsErrorOccurred+0xe0>
 8001624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0aa      	beq.n	8001582 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800166c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80016b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fdf7 	bl	80012b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <I2C_IsErrorOccurred+0x1bc>)
 80016d2:	400b      	ands	r3, r1
 80016d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80016fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	fe00e800 	.word	0xfe00e800

0800170c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	817b      	strh	r3, [r7, #10]
 800171a:	4613      	mov	r3, r2
 800171c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001724:	7a7b      	ldrb	r3, [r7, #9]
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800172c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4313      	orrs	r3, r2
 8001736:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800173a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	0d5b      	lsrs	r3, r3, #21
 8001746:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <I2C_TransferConfig+0x60>)
 800174c:	430b      	orrs	r3, r1
 800174e:	43db      	mvns	r3, r3
 8001750:	ea02 0103 	and.w	r1, r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	03ff63ff 	.word	0x03ff63ff

08001770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	d138      	bne.n	80017f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001790:	2302      	movs	r3, #2
 8001792:	e032      	b.n	80017fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	@ 0x24
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b20      	cmp	r3, #32
 800181a:	d139      	bne.n	8001890 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001826:	2302      	movs	r3, #2
 8001828:	e033      	b.n	8001892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2224      	movs	r2, #36	@ 0x24
 8001836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001858:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f001 b83a 	b.w	800293a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 816f 	beq.w	8001bba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018dc:	4bb5      	ldr	r3, [pc, #724]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d00c      	beq.n	8001902 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e8:	4bb2      	ldr	r3, [pc, #712]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d15c      	bne.n	80019ae <HAL_RCC_OscConfig+0x10e>
 80018f4:	4baf      	ldr	r3, [pc, #700]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d155      	bne.n	80019ae <HAL_RCC_OscConfig+0x10e>
 8001902:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001906:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001916:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0x94>
 800192e:	4ba1      	ldr	r3, [pc, #644]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e015      	b.n	8001960 <HAL_RCC_OscConfig+0xc0>
 8001934:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001938:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800194c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001950:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800195c:	4b95      	ldr	r3, [pc, #596]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001964:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001968:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800196c:	fa92 f2a2 	rbit	r2, r2
 8001970:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001974:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8111 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x318>
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 8108 	bne.w	8001bb8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f000 bfc6 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x12e>
 80019c0:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a7b      	ldr	r2, [pc, #492]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e036      	b.n	8001a3c <HAL_RCC_OscConfig+0x19c>
 80019ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x158>
 80019de:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a74      	ldr	r2, [pc, #464]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a71      	ldr	r2, [pc, #452]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e021      	b.n	8001a3c <HAL_RCC_OscConfig+0x19c>
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x184>
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a69      	ldr	r2, [pc, #420]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b67      	ldr	r3, [pc, #412]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a66      	ldr	r2, [pc, #408]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x19c>
 8001a24:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a62      	ldr	r2, [pc, #392]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b60      	ldr	r3, [pc, #384]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a5f      	ldr	r2, [pc, #380]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d059      	beq.n	8001b00 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7fe ffe8 	bl	8000a20 <HAL_GetTick>
 8001a50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a56:	f7fe ffe3 	bl	8000a20 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	d902      	bls.n	8001a6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f000 bf67 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
 8001a6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a70:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001a80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1fe>
 8001a98:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x22a>
 8001a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001ab2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001aba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ace:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001ad2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001ad6:	fa92 f2a2 	rbit	r2, r2
 8001ada:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001ade:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ae2:	fab2 f282 	clz	r2, r2
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	f042 0220 	orr.w	r2, r2, #32
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f002 021f 	and.w	r2, r2, #31
 8001af2:	2101      	movs	r1, #1
 8001af4:	fa01 f202 	lsl.w	r2, r1, r2
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ab      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1b6>
 8001afe:	e05c      	b.n	8001bba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7fe ff8e 	bl	8000a20 <HAL_GetTick>
 8001b04:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0a:	f7fe ff89 	bl	8000a20 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	@ 0x64
 8001b18:	d902      	bls.n	8001b20 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f000 bf0d 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
 8001b20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b24:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001b34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d102      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2b2>
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x2de>
 8001b52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b56:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_RCC_OscConfig+0x314>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b82:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001b8a:	fa92 f2a2 	rbit	r2, r2
 8001b8e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001b92:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b96:	fab2 f282 	clz	r2, r2
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f002 021f 	and.w	r2, r2, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ab      	bne.n	8001b0a <HAL_RCC_OscConfig+0x26a>
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_OscConfig+0x31a>
 8001bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 817f 	beq.w	8001ece <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd0:	4ba7      	ldr	r3, [pc, #668]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bdc:	4ba4      	ldr	r3, [pc, #656]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d173      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x430>
 8001be8:	4ba1      	ldr	r3, [pc, #644]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bf4:	d16c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x430>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001c08:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x386>
 8001c20:	4b93      	ldr	r3, [pc, #588]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e013      	b.n	8001c4e <HAL_RCC_OscConfig+0x3ae>
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c4a:	4b89      	ldr	r3, [pc, #548]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001c54:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001c58:	fa92 f2a2 	rbit	r2, r2
 8001c5c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001c60:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f042 0220 	orr.w	r2, r2, #32
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f002 021f 	and.w	r2, r2, #31
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3f6>
 8001c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d002      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f000 be52 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	21f8      	movs	r1, #248	@ 0xf8
 8001cac:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001cb4:	fa91 f1a1 	rbit	r1, r1
 8001cb8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001cbc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cc0:	fab1 f181 	clz	r1, r1
 8001cc4:	b2c9      	uxtb	r1, r1
 8001cc6:	408b      	lsls	r3, r1
 8001cc8:	4969      	ldr	r1, [pc, #420]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e0fe      	b.n	8001ece <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8088 	beq.w	8001df2 <HAL_RCC_OscConfig+0x552>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001cf4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fe87 	bl	8000a20 <HAL_GetTick>
 8001d12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d18:	f7fe fe82 	bl	8000a20 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 be06 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001d40:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4be>
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e013      	b.n	8001d86 <HAL_RCC_OscConfig+0x4e6>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d76:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d82:	4b3b      	ldr	r3, [pc, #236]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	2202      	movs	r2, #2
 8001d88:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d90:	fa92 f2a2 	rbit	r2, r2
 8001d94:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001d98:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0af      	beq.n	8001d18 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	21f8      	movs	r1, #248	@ 0xf8
 8001dce:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001dd6:	fa91 f1a1 	rbit	r1, r1
 8001dda:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001dde:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001de2:	fab1 f181 	clz	r1, r1
 8001de6:	b2c9      	uxtb	r1, r1
 8001de8:	408b      	lsls	r3, r1
 8001dea:	4921      	ldr	r1, [pc, #132]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e06d      	b.n	8001ece <HAL_RCC_OscConfig+0x62e>
 8001df2:	2301      	movs	r3, #1
 8001df4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001e04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fdff 	bl	8000a20 <HAL_GetTick>
 8001e22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f7fe fdfa 	bl	8000a20 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d902      	bls.n	8001e3e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	f000 bd7e 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001e50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <HAL_RCC_OscConfig+0x5d4>
 8001e68:	4b01      	ldr	r3, [pc, #4]	@ (8001e70 <HAL_RCC_OscConfig+0x5d0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	e016      	b.n	8001e9c <HAL_RCC_OscConfig+0x5fc>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e98:	4bbf      	ldr	r3, [pc, #764]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ea2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001eae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ac      	bne.n	8001e28 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8113 	beq.w	800210a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d07c      	beq.n	8001fee <HAL_RCC_OscConfig+0x74e>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	4ba2      	ldr	r3, [pc, #648]	@ (800219c <HAL_RCC_OscConfig+0x8fc>)
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fd7f 	bl	8000a20 <HAL_GetTick>
 8001f22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7fe fd7a 	bl	8000a20 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d902      	bls.n	8001f3e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f000 bcfe 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f5e:	2202      	movs	r2, #2
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f82:	2202      	movs	r2, #2
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 8001fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001faa:	2102      	movs	r1, #2
 8001fac:	6019      	str	r1, [r3, #0]
 8001fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f1a3 	rbit	r1, r3
 8001fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fc4:	6019      	str	r1, [r3, #0]
  return result;
 8001fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d09d      	beq.n	8001f28 <HAL_RCC_OscConfig+0x688>
 8001fec:	e08d      	b.n	800210a <HAL_RCC_OscConfig+0x86a>
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002010:	601a      	str	r2, [r3, #0]
  return result;
 8002012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002016:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800201a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	4b5d      	ldr	r3, [pc, #372]	@ (800219c <HAL_RCC_OscConfig+0x8fc>)
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fcf6 	bl	8000a20 <HAL_GetTick>
 8002034:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe fcf1 	bl	8000a20 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d902      	bls.n	8002050 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	f000 bc75 	b.w	800293a <HAL_RCC_OscConfig+0x109a>
 8002050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002054:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002058:	2202      	movs	r2, #2
 800205a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002060:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002078:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800207c:	2202      	movs	r2, #2
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002092:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b36      	ldr	r3, [pc, #216]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 80020be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020c8:	2102      	movs	r1, #2
 80020ca:	6019      	str	r1, [r3, #0]
 80020cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	fa93 f1a3 	rbit	r1, r3
 80020da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020de:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020e2:	6019      	str	r1, [r3, #0]
  return result;
 80020e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d197      	bne.n	800203a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 81a5 	beq.w	800246a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <HAL_RCC_OscConfig+0x8f8>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002154:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002158:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_RCC_OscConfig+0x900>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d121      	bne.n	80021b0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_RCC_OscConfig+0x900>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_RCC_OscConfig+0x900>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002176:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002178:	f7fe fc52 	bl	8000a20 <HAL_GetTick>
 800217c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e010      	b.n	80021a4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe fc4d 	bl	8000a20 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d908      	bls.n	80021a4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e3d1      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	10908120 	.word	0x10908120
 80021a0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b8d      	ldr	r3, [pc, #564]	@ (80023dc <HAL_RCC_OscConfig+0xb3c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0e8      	beq.n	8002182 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x92e>
 80021c0:	4b87      	ldr	r3, [pc, #540]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a86      	ldr	r2, [pc, #536]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e035      	b.n	800223a <HAL_RCC_OscConfig+0x99a>
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x958>
 80021de:	4b80      	ldr	r3, [pc, #512]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a7f      	ldr	r2, [pc, #508]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b7d      	ldr	r3, [pc, #500]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a7c      	ldr	r2, [pc, #496]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	e020      	b.n	800223a <HAL_RCC_OscConfig+0x99a>
 80021f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d10c      	bne.n	8002222 <HAL_RCC_OscConfig+0x982>
 8002208:	4b75      	ldr	r3, [pc, #468]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a74      	ldr	r2, [pc, #464]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	4b72      	ldr	r3, [pc, #456]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a71      	ldr	r2, [pc, #452]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0x99a>
 8002222:	4b6f      	ldr	r3, [pc, #444]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a6e      	ldr	r2, [pc, #440]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	4b6c      	ldr	r3, [pc, #432]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a6b      	ldr	r2, [pc, #428]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8081 	beq.w	800234e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7fe fbe8 	bl	8000a20 <HAL_GetTick>
 8002250:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	e00b      	b.n	800226e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fbe3 	bl	8000a20 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e365      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
 800226e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002272:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800229a:	2202      	movs	r2, #2
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022b4:	601a      	str	r2, [r3, #0]
  return result;
 80022b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0xa3a>
 80022d4:	4b42      	ldr	r3, [pc, #264]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	e013      	b.n	8002302 <HAL_RCC_OscConfig+0xa62>
 80022da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002306:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800230a:	2102      	movs	r1, #2
 800230c:	6011      	str	r1, [r2, #0]
 800230e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002312:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	fa92 f1a2 	rbit	r1, r2
 800231c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002320:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002324:	6011      	str	r1, [r2, #0]
  return result;
 8002326:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800232a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	fab2 f282 	clz	r2, r2
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f002 021f 	and.w	r2, r2, #31
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d084      	beq.n	8002256 <HAL_RCC_OscConfig+0x9b6>
 800234c:	e083      	b.n	8002456 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fb67 	bl	8000a20 <HAL_GetTick>
 8002352:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7fe fb62 	bl	8000a20 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e2e4      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
 8002370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002374:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002378:	2202      	movs	r2, #2
 800237a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002398:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800239c:	2202      	movs	r2, #2
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023b6:	601a      	str	r2, [r3, #0]
  return result;
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0xb44>
 80023d6:	4b02      	ldr	r3, [pc, #8]	@ (80023e0 <HAL_RCC_OscConfig+0xb40>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	e017      	b.n	800240c <HAL_RCC_OscConfig+0xb6c>
 80023dc:	40007000 	.word	0x40007000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002402:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4bb3      	ldr	r3, [pc, #716]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002410:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002414:	2102      	movs	r1, #2
 8002416:	6011      	str	r1, [r2, #0]
 8002418:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	fa92 f1a2 	rbit	r1, r2
 8002426:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800242a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800242e:	6011      	str	r1, [r2, #0]
  return result;
 8002430:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002434:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d180      	bne.n	8002358 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002456:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b9e      	ldr	r3, [pc, #632]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a9d      	ldr	r2, [pc, #628]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 825e 	beq.w	8002938 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b96      	ldr	r3, [pc, #600]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	f000 821f 	beq.w	80028c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b02      	cmp	r3, #2
 8002498:	f040 8170 	bne.w	800277c <HAL_RCC_OscConfig+0xedc>
 800249c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024c0:	601a      	str	r2, [r3, #0]
  return result;
 80024c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024ca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	461a      	mov	r2, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe fa9d 	bl	8000a20 <HAL_GetTick>
 80024e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	e009      	b.n	8002500 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fa98 	bl	8000a20 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e21c      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002508:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002524:	601a      	str	r2, [r3, #0]
  return result;
 8002526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800252e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0xcaa>
 8002544:	4b64      	ldr	r3, [pc, #400]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e027      	b.n	800259a <HAL_RCC_OscConfig+0xcfa>
 800254a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002552:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002578:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002590:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800259e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025a6:	6011      	str	r1, [r2, #0]
 80025a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	fa92 f1a2 	rbit	r1, r2
 80025b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ba:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80025be:	6011      	str	r1, [r2, #0]
  return result;
 80025c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025c4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	fab2 f282 	clz	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f002 021f 	and.w	r2, r2, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d182      	bne.n	80024ec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e6:	4b3c      	ldr	r3, [pc, #240]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	4937      	ldr	r1, [pc, #220]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002600:	4b35      	ldr	r3, [pc, #212]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a19      	ldr	r1, [r3, #32]
 8002614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002618:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	430b      	orrs	r3, r1
 8002622:	492d      	ldr	r1, [pc, #180]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002630:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002648:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800264c:	601a      	str	r2, [r3, #0]
  return result;
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002656:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002658:	fab3 f383 	clz	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002662:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe f9d7 	bl	8000a20 <HAL_GetTick>
 8002672:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002676:	e009      	b.n	800268c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe f9d2 	bl	8000a20 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e156      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
 800268c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002690:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026b0:	601a      	str	r2, [r3, #0]
  return result;
 80026b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_RCC_OscConfig+0xe3c>
 80026d0:	4b01      	ldr	r3, [pc, #4]	@ (80026d8 <HAL_RCC_OscConfig+0xe38>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e02a      	b.n	800272c <HAL_RCC_OscConfig+0xe8c>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002706:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800270a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b86      	ldr	r3, [pc, #536]	@ (8002944 <HAL_RCC_OscConfig+0x10a4>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002730:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002734:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002738:	6011      	str	r1, [r2, #0]
 800273a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800273e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	fa92 f1a2 	rbit	r1, r2
 8002748:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800274c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002750:	6011      	str	r1, [r2, #0]
  return result;
 8002752:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002756:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f43f af7f 	beq.w	8002678 <HAL_RCC_OscConfig+0xdd8>
 800277a:	e0dd      	b.n	8002938 <HAL_RCC_OscConfig+0x1098>
 800277c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002780:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027a0:	601a      	str	r2, [r3, #0]
  return result;
 80027a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	2300      	movs	r3, #0
 80027c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe f92d 	bl	8000a20 <HAL_GetTick>
 80027c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	e009      	b.n	80027e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe f928 	bl	8000a20 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0ac      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
 80027e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002800:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002804:	601a      	str	r2, [r3, #0]
  return result;
 8002806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800280a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800280e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_RCC_OscConfig+0xf8a>
 8002824:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_OscConfig+0x10a4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	e027      	b.n	800287a <HAL_RCC_OscConfig+0xfda>
 800282a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002832:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002854:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002858:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002862:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002870:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4b33      	ldr	r3, [pc, #204]	@ (8002944 <HAL_RCC_OscConfig+0x10a4>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800287e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002882:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002886:	6011      	str	r1, [r2, #0]
 8002888:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800288c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	fa92 f1a2 	rbit	r1, r2
 8002896:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800289a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800289e:	6011      	str	r1, [r2, #0]
  return result;
 80028a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028a4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d182      	bne.n	80027cc <HAL_RCC_OscConfig+0xf2c>
 80028c6:	e037      	b.n	8002938 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e02e      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_OscConfig+0x10a4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028e4:	4b17      	ldr	r3, [pc, #92]	@ (8002944 <HAL_RCC_OscConfig+0x10a4>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028f0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80028f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	429a      	cmp	r2, r3
 8002902:	d117      	bne.n	8002934 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002904:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002908:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800290c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002910:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002918:	429a      	cmp	r2, r3
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800291c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002928:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b09e      	sub	sp, #120	@ 0x78
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e162      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b90      	ldr	r3, [pc, #576]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d910      	bls.n	8002990 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	498b      	ldr	r1, [pc, #556]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b89      	ldr	r3, [pc, #548]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e14a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b82      	ldr	r3, [pc, #520]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	497f      	ldr	r1, [pc, #508]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80dc 	beq.w	8002b74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d13c      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xf6>
 80029c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80029d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_ClockConfig+0xa6>
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	e00f      	b.n	8002a0e <HAL_RCC_ClockConfig+0xc6>
 80029ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80029fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f042 0220 	orr.w	r2, r2, #32
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f002 021f 	and.w	r2, r2, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d17b      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0f3      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d13c      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x178>
 8002a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x128>
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_ClockConfig+0x148>
 8002a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a98:	fa92 f2a2 	rbit	r2, r2
 8002a9c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0220 	orr.w	r2, r2, #32
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d13a      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0b2      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x1a0>
 8002ae2:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e00d      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1bc>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af4:	2302      	movs	r3, #2
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	2202      	movs	r2, #2
 8002b06:	61ba      	str	r2, [r7, #24]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	fa92 f2a2 	rbit	r2, r2
 8002b0e:	617a      	str	r2, [r7, #20]
  return result;
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	fab2 f282 	clz	r2, r2
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f042 0220 	orr.w	r2, r2, #32
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f002 021f 	and.w	r2, r2, #31
 8002b22:	2101      	movs	r1, #1
 8002b24:	fa01 f202 	lsl.w	r2, r1, r2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e079      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	491a      	ldr	r1, [pc, #104]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fd ff6c 	bl	8000a20 <HAL_GetTick>
 8002b48:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fd ff68 	bl	8000a20 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e061      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_ClockConfig+0x260>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d214      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4906      	ldr	r1, [pc, #24]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <HAL_RCC_ClockConfig+0x25c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e040      	b.n	8002c26 <HAL_RCC_ClockConfig+0x2de>
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_RCC_ClockConfig+0x2e8>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	491a      	ldr	r1, [pc, #104]	@ (8002c30 <HAL_RCC_ClockConfig+0x2e8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd6:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <HAL_RCC_ClockConfig+0x2e8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4912      	ldr	r1, [pc, #72]	@ (8002c30 <HAL_RCC_ClockConfig+0x2e8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bea:	f000 f829 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bee:	4601      	mov	r1, r0
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf8:	22f0      	movs	r2, #240	@ 0xf0
 8002bfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	fa92 f2a2 	rbit	r2, r2
 8002c02:	60fa      	str	r2, [r7, #12]
  return result;
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	40d3      	lsrs	r3, r2
 8002c0e:	4a09      	ldr	r2, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x2ec>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	fa21 f303 	lsr.w	r3, r1, r3
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_RCC_ClockConfig+0x2f0>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <HAL_RCC_ClockConfig+0x2f4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd feba 	bl	8000998 <HAL_InitTick>
  
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3778      	adds	r7, #120	@ 0x78
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	08004514 	.word	0x08004514
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000004 	.word	0x20000004

08002c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d002      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x30>
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x36>
 8002c6e:	e029      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c72:	613b      	str	r3, [r7, #16]
      break;
 8002c74:	e029      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	0c9b      	lsrs	r3, r3, #18
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	4a15      	ldr	r2, [pc, #84]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e007      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cae:	4a0b      	ldr	r2, [pc, #44]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	613b      	str	r3, [r7, #16]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc6:	613b      	str	r3, [r7, #16]
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	693b      	ldr	r3, [r7, #16]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	007a1200 	.word	0x007a1200
 8002ce0:	0800452c 	.word	0x0800452c
 8002ce4:	0800453c 	.word	0x0800453c

08002ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000000 	.word	0x20000000

08002d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d06:	f7ff ffef 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d14:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	603a      	str	r2, [r7, #0]
  return result;
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	40d3      	lsrs	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08004524 	.word	0x08004524

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d4a:	f7ff ffcd 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d4e:	4601      	mov	r1, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d58:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	fa92 f2a2 	rbit	r2, r2
 8002d64:	603a      	str	r2, [r7, #0]
  return result;
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	40d3      	lsrs	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004524 	.word	0x08004524

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b092      	sub	sp, #72	@ 0x48
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80d4 	beq.w	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dac:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10e      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	61d3      	str	r3, [r2, #28]
 8002dc4:	4b48      	ldr	r3, [pc, #288]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b42      	ldr	r3, [pc, #264]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a41      	ldr	r2, [pc, #260]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fe17 	bl	8000a20 <HAL_GetTick>
 8002df2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fd fe13 	bl	8000a20 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	@ 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e1d6      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8084 	beq.w	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d07c      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2301      	movs	r3, #1
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	2300      	movs	r3, #0
 8002e84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e86:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d04b      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fd fdc3 	bl	8000a20 <HAL_GetTick>
 8002e9a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fd fdbf 	bl	8000a20 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e180      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d108      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ee2:	4b01      	ldr	r3, [pc, #4]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	e00d      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	10908100 	.word	0x10908100
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	4b9a      	ldr	r3, [pc, #616]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	2202      	movs	r2, #2
 8002f06:	613a      	str	r2, [r7, #16]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	fa92 f2a2 	rbit	r2, r2
 8002f0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	fab2 f282 	clz	r2, r2
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	f002 021f 	and.w	r2, r2, #31
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0b7      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	498c      	ldr	r1, [pc, #560]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f48:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a87      	ldr	r2, [pc, #540]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f60:	4b82      	ldr	r3, [pc, #520]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	f023 0203 	bic.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	497f      	ldr	r1, [pc, #508]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4978      	ldr	r1, [pc, #480]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f9c:	4b73      	ldr	r3, [pc, #460]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4970      	ldr	r1, [pc, #448]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fba:	4b6c      	ldr	r3, [pc, #432]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4969      	ldr	r1, [pc, #420]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	4961      	ldr	r1, [pc, #388]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	f023 0220 	bic.w	r2, r3, #32
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	495a      	ldr	r1, [pc, #360]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003014:	4b55      	ldr	r3, [pc, #340]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	4952      	ldr	r1, [pc, #328]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003032:	4b4e      	ldr	r3, [pc, #312]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	494b      	ldr	r1, [pc, #300]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003050:	4b46      	ldr	r3, [pc, #280]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4943      	ldr	r1, [pc, #268]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800306e:	4b3f      	ldr	r3, [pc, #252]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	493c      	ldr	r1, [pc, #240]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800308c:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	4934      	ldr	r1, [pc, #208]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030aa:	4b30      	ldr	r3, [pc, #192]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	492d      	ldr	r1, [pc, #180]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d4:	4925      	ldr	r1, [pc, #148]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	491e      	ldr	r1, [pc, #120]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	4916      	ldr	r1, [pc, #88]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	490f      	ldr	r1, [pc, #60]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003140:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	4907      	ldr	r1, [pc, #28]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800315e:	4b03      	ldr	r3, [pc, #12]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	e002      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003172:	4913      	ldr	r1, [pc, #76]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003174:	4313      	orrs	r3, r2
 8003176:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003184:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003190:	490b      	ldr	r1, [pc, #44]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003192:	4313      	orrs	r3, r2
 8003194:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80031a2:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ae:	4904      	ldr	r1, [pc, #16]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3748      	adds	r7, #72	@ 0x48
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e040      	b.n	8003258 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fadc 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	@ 0x24
 80031f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa86 	bl	800371c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8af 	bl	8003374 <UART_SetConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e01b      	b.n	8003258 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800322e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800323e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb05 	bl	8003860 <UART_CheckIdleState>
 8003256:	4603      	mov	r3, r0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003274:	2b20      	cmp	r3, #32
 8003276:	d177      	bne.n	8003368 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x24>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e070      	b.n	800336a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2221      	movs	r2, #33	@ 0x21
 8003294:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fd fbc3 	bl	8000a20 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d108      	bne.n	80032c8 <HAL_UART_Transmit+0x68>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e003      	b.n	80032d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d0:	e02f      	b.n	8003332 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	@ 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fb67 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03b      	b.n	800336a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003304:	b292      	uxth	r2, r2
 8003306:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	3302      	adds	r3, #2
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e007      	b.n	8003320 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1c9      	bne.n	80032d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fb31 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e005      	b.n	800336a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b92      	ldr	r3, [pc, #584]	@ (80035e8 <UART_SetConfig+0x274>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	6979      	ldr	r1, [r7, #20]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a80      	ldr	r2, [pc, #512]	@ (80035ec <UART_SetConfig+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d120      	bne.n	8003432 <UART_SetConfig+0xbe>
 80033f0:	4b7f      	ldr	r3, [pc, #508]	@ (80035f0 <UART_SetConfig+0x27c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d817      	bhi.n	800342c <UART_SetConfig+0xb8>
 80033fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0x90>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	08003421 	.word	0x08003421
 800340c:	08003427 	.word	0x08003427
 8003410:	0800341b 	.word	0x0800341b
 8003414:	2301      	movs	r3, #1
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0b5      	b.n	8003586 <UART_SetConfig+0x212>
 800341a:	2302      	movs	r3, #2
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e0b2      	b.n	8003586 <UART_SetConfig+0x212>
 8003420:	2304      	movs	r3, #4
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e0af      	b.n	8003586 <UART_SetConfig+0x212>
 8003426:	2308      	movs	r3, #8
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e0ac      	b.n	8003586 <UART_SetConfig+0x212>
 800342c:	2310      	movs	r3, #16
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e0a9      	b.n	8003586 <UART_SetConfig+0x212>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6f      	ldr	r2, [pc, #444]	@ (80035f4 <UART_SetConfig+0x280>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d124      	bne.n	8003486 <UART_SetConfig+0x112>
 800343c:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <UART_SetConfig+0x27c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003444:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003448:	d011      	beq.n	800346e <UART_SetConfig+0xfa>
 800344a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800344e:	d817      	bhi.n	8003480 <UART_SetConfig+0x10c>
 8003450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003454:	d011      	beq.n	800347a <UART_SetConfig+0x106>
 8003456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800345a:	d811      	bhi.n	8003480 <UART_SetConfig+0x10c>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <UART_SetConfig+0xf4>
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003464:	d006      	beq.n	8003474 <UART_SetConfig+0x100>
 8003466:	e00b      	b.n	8003480 <UART_SetConfig+0x10c>
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e08b      	b.n	8003586 <UART_SetConfig+0x212>
 800346e:	2302      	movs	r3, #2
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e088      	b.n	8003586 <UART_SetConfig+0x212>
 8003474:	2304      	movs	r3, #4
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e085      	b.n	8003586 <UART_SetConfig+0x212>
 800347a:	2308      	movs	r3, #8
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e082      	b.n	8003586 <UART_SetConfig+0x212>
 8003480:	2310      	movs	r3, #16
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e07f      	b.n	8003586 <UART_SetConfig+0x212>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5b      	ldr	r2, [pc, #364]	@ (80035f8 <UART_SetConfig+0x284>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d124      	bne.n	80034da <UART_SetConfig+0x166>
 8003490:	4b57      	ldr	r3, [pc, #348]	@ (80035f0 <UART_SetConfig+0x27c>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003498:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800349c:	d011      	beq.n	80034c2 <UART_SetConfig+0x14e>
 800349e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034a2:	d817      	bhi.n	80034d4 <UART_SetConfig+0x160>
 80034a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034a8:	d011      	beq.n	80034ce <UART_SetConfig+0x15a>
 80034aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ae:	d811      	bhi.n	80034d4 <UART_SetConfig+0x160>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <UART_SetConfig+0x148>
 80034b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034b8:	d006      	beq.n	80034c8 <UART_SetConfig+0x154>
 80034ba:	e00b      	b.n	80034d4 <UART_SetConfig+0x160>
 80034bc:	2300      	movs	r3, #0
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e061      	b.n	8003586 <UART_SetConfig+0x212>
 80034c2:	2302      	movs	r3, #2
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e05e      	b.n	8003586 <UART_SetConfig+0x212>
 80034c8:	2304      	movs	r3, #4
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e05b      	b.n	8003586 <UART_SetConfig+0x212>
 80034ce:	2308      	movs	r3, #8
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e058      	b.n	8003586 <UART_SetConfig+0x212>
 80034d4:	2310      	movs	r3, #16
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e055      	b.n	8003586 <UART_SetConfig+0x212>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a47      	ldr	r2, [pc, #284]	@ (80035fc <UART_SetConfig+0x288>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d124      	bne.n	800352e <UART_SetConfig+0x1ba>
 80034e4:	4b42      	ldr	r3, [pc, #264]	@ (80035f0 <UART_SetConfig+0x27c>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80034ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034f0:	d011      	beq.n	8003516 <UART_SetConfig+0x1a2>
 80034f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034f6:	d817      	bhi.n	8003528 <UART_SetConfig+0x1b4>
 80034f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034fc:	d011      	beq.n	8003522 <UART_SetConfig+0x1ae>
 80034fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003502:	d811      	bhi.n	8003528 <UART_SetConfig+0x1b4>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <UART_SetConfig+0x19c>
 8003508:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800350c:	d006      	beq.n	800351c <UART_SetConfig+0x1a8>
 800350e:	e00b      	b.n	8003528 <UART_SetConfig+0x1b4>
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e037      	b.n	8003586 <UART_SetConfig+0x212>
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e034      	b.n	8003586 <UART_SetConfig+0x212>
 800351c:	2304      	movs	r3, #4
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e031      	b.n	8003586 <UART_SetConfig+0x212>
 8003522:	2308      	movs	r3, #8
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e02e      	b.n	8003586 <UART_SetConfig+0x212>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e02b      	b.n	8003586 <UART_SetConfig+0x212>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a33      	ldr	r2, [pc, #204]	@ (8003600 <UART_SetConfig+0x28c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d124      	bne.n	8003582 <UART_SetConfig+0x20e>
 8003538:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <UART_SetConfig+0x27c>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003540:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003544:	d011      	beq.n	800356a <UART_SetConfig+0x1f6>
 8003546:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800354a:	d817      	bhi.n	800357c <UART_SetConfig+0x208>
 800354c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003550:	d011      	beq.n	8003576 <UART_SetConfig+0x202>
 8003552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003556:	d811      	bhi.n	800357c <UART_SetConfig+0x208>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <UART_SetConfig+0x1f0>
 800355c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003560:	d006      	beq.n	8003570 <UART_SetConfig+0x1fc>
 8003562:	e00b      	b.n	800357c <UART_SetConfig+0x208>
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e00d      	b.n	8003586 <UART_SetConfig+0x212>
 800356a:	2302      	movs	r3, #2
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e00a      	b.n	8003586 <UART_SetConfig+0x212>
 8003570:	2304      	movs	r3, #4
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e007      	b.n	8003586 <UART_SetConfig+0x212>
 8003576:	2308      	movs	r3, #8
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e004      	b.n	8003586 <UART_SetConfig+0x212>
 800357c:	2310      	movs	r3, #16
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e001      	b.n	8003586 <UART_SetConfig+0x212>
 8003582:	2310      	movs	r3, #16
 8003584:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358e:	d16b      	bne.n	8003668 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003590:	7ffb      	ldrb	r3, [r7, #31]
 8003592:	2b08      	cmp	r3, #8
 8003594:	d838      	bhi.n	8003608 <UART_SetConfig+0x294>
 8003596:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <UART_SetConfig+0x228>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	08003609 	.word	0x08003609
 80035ac:	080035d7 	.word	0x080035d7
 80035b0:	08003609 	.word	0x08003609
 80035b4:	08003609 	.word	0x08003609
 80035b8:	08003609 	.word	0x08003609
 80035bc:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c0:	f7ff fb9e 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 80035c4:	61b8      	str	r0, [r7, #24]
        break;
 80035c6:	e024      	b.n	8003612 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7ff fbbc 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80035cc:	61b8      	str	r0, [r7, #24]
        break;
 80035ce:	e020      	b.n	8003612 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <UART_SetConfig+0x290>)
 80035d2:	61bb      	str	r3, [r7, #24]
        break;
 80035d4:	e01d      	b.n	8003612 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d6:	f7ff fb33 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80035da:	61b8      	str	r0, [r7, #24]
        break;
 80035dc:	e019      	b.n	8003612 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e2:	61bb      	str	r3, [r7, #24]
        break;
 80035e4:	e015      	b.n	8003612 <UART_SetConfig+0x29e>
 80035e6:	bf00      	nop
 80035e8:	efff69f3 	.word	0xefff69f3
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40004400 	.word	0x40004400
 80035f8:	40004800 	.word	0x40004800
 80035fc:	40004c00 	.word	0x40004c00
 8003600:	40005000 	.word	0x40005000
 8003604:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77bb      	strb	r3, [r7, #30]
        break;
 8003610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d073      	beq.n	8003700 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	441a      	add	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d916      	bls.n	8003662 <UART_SetConfig+0x2ee>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363a:	d212      	bcs.n	8003662 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	b29a      	uxth	r2, r3
 8003652:	89fb      	ldrh	r3, [r7, #14]
 8003654:	4313      	orrs	r3, r2
 8003656:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	89fa      	ldrh	r2, [r7, #14]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e04e      	b.n	8003700 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	77bb      	strb	r3, [r7, #30]
 8003666:	e04b      	b.n	8003700 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003668:	7ffb      	ldrb	r3, [r7, #31]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d827      	bhi.n	80036be <UART_SetConfig+0x34a>
 800366e:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <UART_SetConfig+0x300>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003699 	.word	0x08003699
 8003678:	080036a1 	.word	0x080036a1
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036bf 	.word	0x080036bf
 8003684:	080036af 	.word	0x080036af
 8003688:	080036bf 	.word	0x080036bf
 800368c:	080036bf 	.word	0x080036bf
 8003690:	080036bf 	.word	0x080036bf
 8003694:	080036b7 	.word	0x080036b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7ff fb32 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 800369c:	61b8      	str	r0, [r7, #24]
        break;
 800369e:	e013      	b.n	80036c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7ff fb50 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80036a4:	61b8      	str	r0, [r7, #24]
        break;
 80036a6:	e00f      	b.n	80036c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <UART_SetConfig+0x3a4>)
 80036aa:	61bb      	str	r3, [r7, #24]
        break;
 80036ac:	e00c      	b.n	80036c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7ff fac7 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80036b2:	61b8      	str	r0, [r7, #24]
        break;
 80036b4:	e008      	b.n	80036c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ba:	61bb      	str	r3, [r7, #24]
        break;
 80036bc:	e004      	b.n	80036c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	77bb      	strb	r3, [r7, #30]
        break;
 80036c6:	bf00      	nop
    }

    if (pclk != 0U)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d018      	beq.n	8003700 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085a      	lsrs	r2, r3, #1
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d909      	bls.n	80036fc <UART_SetConfig+0x388>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ee:	d205      	bcs.n	80036fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	e001      	b.n	8003700 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800370c:	7fbb      	ldrb	r3, [r7, #30]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	007a1200 	.word	0x007a1200

0800371c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01a      	beq.n	8003832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800381a:	d10a      	bne.n	8003832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b098      	sub	sp, #96	@ 0x60
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003870:	f7fd f8d6 	bl	8000a20 <HAL_GetTick>
 8003874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d12e      	bne.n	80038e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f88c 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d021      	beq.n	80038e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e062      	b.n	80039a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d149      	bne.n	8003984 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f856 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d03c      	beq.n	8003984 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	623b      	str	r3, [r7, #32]
   return(result);
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
 800392a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800392e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e6      	bne.n	800390a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	60fb      	str	r3, [r7, #12]
   return(result);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800395c:	61fa      	str	r2, [r7, #28]
 800395e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	69b9      	ldr	r1, [r7, #24]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	617b      	str	r3, [r7, #20]
   return(result);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e011      	b.n	80039a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3758      	adds	r7, #88	@ 0x58
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	e04f      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d04b      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd f829 	bl	8000a20 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e04e      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d037      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b80      	cmp	r3, #128	@ 0x80
 80039f6:	d034      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d031      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d110      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2208      	movs	r2, #8
 8003a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f838 	bl	8003a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e029      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a3c:	d111      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f81e 	bl	8003a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e00f      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0a0      	beq.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b095      	sub	sp, #84	@ 0x54
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e6      	bne.n	8003a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d118      	bne.n	8003b32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6979      	ldr	r1, [r7, #20]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e6      	bne.n	8003b00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b46:	bf00      	nop
 8003b48:	3754      	adds	r7, #84	@ 0x54
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <sniprintf>:
 8003b54:	b40c      	push	{r2, r3}
 8003b56:	b530      	push	{r4, r5, lr}
 8003b58:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <sniprintf+0x64>)
 8003b5a:	1e0c      	subs	r4, r1, #0
 8003b5c:	681d      	ldr	r5, [r3, #0]
 8003b5e:	b09d      	sub	sp, #116	@ 0x74
 8003b60:	da08      	bge.n	8003b74 <sniprintf+0x20>
 8003b62:	238b      	movs	r3, #139	@ 0x8b
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6a:	b01d      	add	sp, #116	@ 0x74
 8003b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b70:	b002      	add	sp, #8
 8003b72:	4770      	bx	lr
 8003b74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b7c:	bf14      	ite	ne
 8003b7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b82:	4623      	moveq	r3, r4
 8003b84:	9304      	str	r3, [sp, #16]
 8003b86:	9307      	str	r3, [sp, #28]
 8003b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8c:	9002      	str	r0, [sp, #8]
 8003b8e:	9006      	str	r0, [sp, #24]
 8003b90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b96:	ab21      	add	r3, sp, #132	@ 0x84
 8003b98:	a902      	add	r1, sp, #8
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	f000 f995 	bl	8003ecc <_svfiprintf_r>
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	bfbc      	itt	lt
 8003ba6:	238b      	movlt	r3, #139	@ 0x8b
 8003ba8:	602b      	strlt	r3, [r5, #0]
 8003baa:	2c00      	cmp	r4, #0
 8003bac:	d0dd      	beq.n	8003b6a <sniprintf+0x16>
 8003bae:	9b02      	ldr	r3, [sp, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e7d9      	b.n	8003b6a <sniprintf+0x16>
 8003bb6:	bf00      	nop
 8003bb8:	2000000c 	.word	0x2000000c

08003bbc <memset>:
 8003bbc:	4402      	add	r2, r0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <memset+0xa>
 8003bc4:	4770      	bx	lr
 8003bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bca:	e7f9      	b.n	8003bc0 <memset+0x4>

08003bcc <__errno>:
 8003bcc:	4b01      	ldr	r3, [pc, #4]	@ (8003bd4 <__errno+0x8>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	2000000c 	.word	0x2000000c

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4d0d      	ldr	r5, [pc, #52]	@ (8003c10 <__libc_init_array+0x38>)
 8003bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8003c14 <__libc_init_array+0x3c>)
 8003bde:	1b64      	subs	r4, r4, r5
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	2600      	movs	r6, #0
 8003be4:	42a6      	cmp	r6, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	4d0b      	ldr	r5, [pc, #44]	@ (8003c18 <__libc_init_array+0x40>)
 8003bea:	4c0c      	ldr	r4, [pc, #48]	@ (8003c1c <__libc_init_array+0x44>)
 8003bec:	f000 fc66 	bl	80044bc <_init>
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	42a6      	cmp	r6, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c00:	4798      	blx	r3
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0a:	4798      	blx	r3
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08004588 	.word	0x08004588
 8003c14:	08004588 	.word	0x08004588
 8003c18:	08004588 	.word	0x08004588
 8003c1c:	0800458c 	.word	0x0800458c

08003c20 <__retarget_lock_acquire_recursive>:
 8003c20:	4770      	bx	lr

08003c22 <__retarget_lock_release_recursive>:
 8003c22:	4770      	bx	lr

08003c24 <_free_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4605      	mov	r5, r0
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	d041      	beq.n	8003cb0 <_free_r+0x8c>
 8003c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c30:	1f0c      	subs	r4, r1, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bfb8      	it	lt
 8003c36:	18e4      	addlt	r4, r4, r3
 8003c38:	f000 f8e0 	bl	8003dfc <__malloc_lock>
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <_free_r+0x90>)
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	b933      	cbnz	r3, 8003c50 <_free_r+0x2c>
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	6014      	str	r4, [r2, #0]
 8003c46:	4628      	mov	r0, r5
 8003c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c4c:	f000 b8dc 	b.w	8003e08 <__malloc_unlock>
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d908      	bls.n	8003c66 <_free_r+0x42>
 8003c54:	6820      	ldr	r0, [r4, #0]
 8003c56:	1821      	adds	r1, r4, r0
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	bf01      	itttt	eq
 8003c5c:	6819      	ldreq	r1, [r3, #0]
 8003c5e:	685b      	ldreq	r3, [r3, #4]
 8003c60:	1809      	addeq	r1, r1, r0
 8003c62:	6021      	streq	r1, [r4, #0]
 8003c64:	e7ed      	b.n	8003c42 <_free_r+0x1e>
 8003c66:	461a      	mov	r2, r3
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	b10b      	cbz	r3, 8003c70 <_free_r+0x4c>
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d9fa      	bls.n	8003c66 <_free_r+0x42>
 8003c70:	6811      	ldr	r1, [r2, #0]
 8003c72:	1850      	adds	r0, r2, r1
 8003c74:	42a0      	cmp	r0, r4
 8003c76:	d10b      	bne.n	8003c90 <_free_r+0x6c>
 8003c78:	6820      	ldr	r0, [r4, #0]
 8003c7a:	4401      	add	r1, r0
 8003c7c:	1850      	adds	r0, r2, r1
 8003c7e:	4283      	cmp	r3, r0
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	d1e0      	bne.n	8003c46 <_free_r+0x22>
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	6053      	str	r3, [r2, #4]
 8003c8a:	4408      	add	r0, r1
 8003c8c:	6010      	str	r0, [r2, #0]
 8003c8e:	e7da      	b.n	8003c46 <_free_r+0x22>
 8003c90:	d902      	bls.n	8003c98 <_free_r+0x74>
 8003c92:	230c      	movs	r3, #12
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	e7d6      	b.n	8003c46 <_free_r+0x22>
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	1821      	adds	r1, r4, r0
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	bf04      	itt	eq
 8003ca0:	6819      	ldreq	r1, [r3, #0]
 8003ca2:	685b      	ldreq	r3, [r3, #4]
 8003ca4:	6063      	str	r3, [r4, #4]
 8003ca6:	bf04      	itt	eq
 8003ca8:	1809      	addeq	r1, r1, r0
 8003caa:	6021      	streq	r1, [r4, #0]
 8003cac:	6054      	str	r4, [r2, #4]
 8003cae:	e7ca      	b.n	8003c46 <_free_r+0x22>
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200002a0 	.word	0x200002a0

08003cb8 <sbrk_aligned>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4e0f      	ldr	r6, [pc, #60]	@ (8003cf8 <sbrk_aligned+0x40>)
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	6831      	ldr	r1, [r6, #0]
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	b911      	cbnz	r1, 8003cca <sbrk_aligned+0x12>
 8003cc4:	f000 fba6 	bl	8004414 <_sbrk_r>
 8003cc8:	6030      	str	r0, [r6, #0]
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 fba1 	bl	8004414 <_sbrk_r>
 8003cd2:	1c43      	adds	r3, r0, #1
 8003cd4:	d103      	bne.n	8003cde <sbrk_aligned+0x26>
 8003cd6:	f04f 34ff 	mov.w	r4, #4294967295
 8003cda:	4620      	mov	r0, r4
 8003cdc:	bd70      	pop	{r4, r5, r6, pc}
 8003cde:	1cc4      	adds	r4, r0, #3
 8003ce0:	f024 0403 	bic.w	r4, r4, #3
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d0f8      	beq.n	8003cda <sbrk_aligned+0x22>
 8003ce8:	1a21      	subs	r1, r4, r0
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 fb92 	bl	8004414 <_sbrk_r>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d1f2      	bne.n	8003cda <sbrk_aligned+0x22>
 8003cf4:	e7ef      	b.n	8003cd6 <sbrk_aligned+0x1e>
 8003cf6:	bf00      	nop
 8003cf8:	2000029c 	.word	0x2000029c

08003cfc <_malloc_r>:
 8003cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	1ccd      	adds	r5, r1, #3
 8003d02:	f025 0503 	bic.w	r5, r5, #3
 8003d06:	3508      	adds	r5, #8
 8003d08:	2d0c      	cmp	r5, #12
 8003d0a:	bf38      	it	cc
 8003d0c:	250c      	movcc	r5, #12
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	4606      	mov	r6, r0
 8003d12:	db01      	blt.n	8003d18 <_malloc_r+0x1c>
 8003d14:	42a9      	cmp	r1, r5
 8003d16:	d904      	bls.n	8003d22 <_malloc_r+0x26>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	6033      	str	r3, [r6, #0]
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003df8 <_malloc_r+0xfc>
 8003d26:	f000 f869 	bl	8003dfc <__malloc_lock>
 8003d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2e:	461c      	mov	r4, r3
 8003d30:	bb44      	cbnz	r4, 8003d84 <_malloc_r+0x88>
 8003d32:	4629      	mov	r1, r5
 8003d34:	4630      	mov	r0, r6
 8003d36:	f7ff ffbf 	bl	8003cb8 <sbrk_aligned>
 8003d3a:	1c43      	adds	r3, r0, #1
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	d158      	bne.n	8003df2 <_malloc_r+0xf6>
 8003d40:	f8d8 4000 	ldr.w	r4, [r8]
 8003d44:	4627      	mov	r7, r4
 8003d46:	2f00      	cmp	r7, #0
 8003d48:	d143      	bne.n	8003dd2 <_malloc_r+0xd6>
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	d04b      	beq.n	8003de6 <_malloc_r+0xea>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	4639      	mov	r1, r7
 8003d52:	4630      	mov	r0, r6
 8003d54:	eb04 0903 	add.w	r9, r4, r3
 8003d58:	f000 fb5c 	bl	8004414 <_sbrk_r>
 8003d5c:	4581      	cmp	r9, r0
 8003d5e:	d142      	bne.n	8003de6 <_malloc_r+0xea>
 8003d60:	6821      	ldr	r1, [r4, #0]
 8003d62:	1a6d      	subs	r5, r5, r1
 8003d64:	4629      	mov	r1, r5
 8003d66:	4630      	mov	r0, r6
 8003d68:	f7ff ffa6 	bl	8003cb8 <sbrk_aligned>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d03a      	beq.n	8003de6 <_malloc_r+0xea>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	442b      	add	r3, r5
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	f8d8 3000 	ldr.w	r3, [r8]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	bb62      	cbnz	r2, 8003dd8 <_malloc_r+0xdc>
 8003d7e:	f8c8 7000 	str.w	r7, [r8]
 8003d82:	e00f      	b.n	8003da4 <_malloc_r+0xa8>
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	1b52      	subs	r2, r2, r5
 8003d88:	d420      	bmi.n	8003dcc <_malloc_r+0xd0>
 8003d8a:	2a0b      	cmp	r2, #11
 8003d8c:	d917      	bls.n	8003dbe <_malloc_r+0xc2>
 8003d8e:	1961      	adds	r1, r4, r5
 8003d90:	42a3      	cmp	r3, r4
 8003d92:	6025      	str	r5, [r4, #0]
 8003d94:	bf18      	it	ne
 8003d96:	6059      	strne	r1, [r3, #4]
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	bf08      	it	eq
 8003d9c:	f8c8 1000 	streq.w	r1, [r8]
 8003da0:	5162      	str	r2, [r4, r5]
 8003da2:	604b      	str	r3, [r1, #4]
 8003da4:	4630      	mov	r0, r6
 8003da6:	f000 f82f 	bl	8003e08 <__malloc_unlock>
 8003daa:	f104 000b 	add.w	r0, r4, #11
 8003dae:	1d23      	adds	r3, r4, #4
 8003db0:	f020 0007 	bic.w	r0, r0, #7
 8003db4:	1ac2      	subs	r2, r0, r3
 8003db6:	bf1c      	itt	ne
 8003db8:	1a1b      	subne	r3, r3, r0
 8003dba:	50a3      	strne	r3, [r4, r2]
 8003dbc:	e7af      	b.n	8003d1e <_malloc_r+0x22>
 8003dbe:	6862      	ldr	r2, [r4, #4]
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	bf0c      	ite	eq
 8003dc4:	f8c8 2000 	streq.w	r2, [r8]
 8003dc8:	605a      	strne	r2, [r3, #4]
 8003dca:	e7eb      	b.n	8003da4 <_malloc_r+0xa8>
 8003dcc:	4623      	mov	r3, r4
 8003dce:	6864      	ldr	r4, [r4, #4]
 8003dd0:	e7ae      	b.n	8003d30 <_malloc_r+0x34>
 8003dd2:	463c      	mov	r4, r7
 8003dd4:	687f      	ldr	r7, [r7, #4]
 8003dd6:	e7b6      	b.n	8003d46 <_malloc_r+0x4a>
 8003dd8:	461a      	mov	r2, r3
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d1fb      	bne.n	8003dd8 <_malloc_r+0xdc>
 8003de0:	2300      	movs	r3, #0
 8003de2:	6053      	str	r3, [r2, #4]
 8003de4:	e7de      	b.n	8003da4 <_malloc_r+0xa8>
 8003de6:	230c      	movs	r3, #12
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	4630      	mov	r0, r6
 8003dec:	f000 f80c 	bl	8003e08 <__malloc_unlock>
 8003df0:	e794      	b.n	8003d1c <_malloc_r+0x20>
 8003df2:	6005      	str	r5, [r0, #0]
 8003df4:	e7d6      	b.n	8003da4 <_malloc_r+0xa8>
 8003df6:	bf00      	nop
 8003df8:	200002a0 	.word	0x200002a0

08003dfc <__malloc_lock>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	@ (8003e04 <__malloc_lock+0x8>)
 8003dfe:	f7ff bf0f 	b.w	8003c20 <__retarget_lock_acquire_recursive>
 8003e02:	bf00      	nop
 8003e04:	20000298 	.word	0x20000298

08003e08 <__malloc_unlock>:
 8003e08:	4801      	ldr	r0, [pc, #4]	@ (8003e10 <__malloc_unlock+0x8>)
 8003e0a:	f7ff bf0a 	b.w	8003c22 <__retarget_lock_release_recursive>
 8003e0e:	bf00      	nop
 8003e10:	20000298 	.word	0x20000298

08003e14 <__ssputs_r>:
 8003e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	688e      	ldr	r6, [r1, #8]
 8003e1a:	461f      	mov	r7, r3
 8003e1c:	42be      	cmp	r6, r7
 8003e1e:	680b      	ldr	r3, [r1, #0]
 8003e20:	4682      	mov	sl, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	4690      	mov	r8, r2
 8003e26:	d82d      	bhi.n	8003e84 <__ssputs_r+0x70>
 8003e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e30:	d026      	beq.n	8003e80 <__ssputs_r+0x6c>
 8003e32:	6965      	ldr	r5, [r4, #20]
 8003e34:	6909      	ldr	r1, [r1, #16]
 8003e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e3a:	eba3 0901 	sub.w	r9, r3, r1
 8003e3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e42:	1c7b      	adds	r3, r7, #1
 8003e44:	444b      	add	r3, r9
 8003e46:	106d      	asrs	r5, r5, #1
 8003e48:	429d      	cmp	r5, r3
 8003e4a:	bf38      	it	cc
 8003e4c:	461d      	movcc	r5, r3
 8003e4e:	0553      	lsls	r3, r2, #21
 8003e50:	d527      	bpl.n	8003ea2 <__ssputs_r+0x8e>
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7ff ff52 	bl	8003cfc <_malloc_r>
 8003e58:	4606      	mov	r6, r0
 8003e5a:	b360      	cbz	r0, 8003eb6 <__ssputs_r+0xa2>
 8003e5c:	6921      	ldr	r1, [r4, #16]
 8003e5e:	464a      	mov	r2, r9
 8003e60:	f000 fae8 	bl	8004434 <memcpy>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	6126      	str	r6, [r4, #16]
 8003e72:	6165      	str	r5, [r4, #20]
 8003e74:	444e      	add	r6, r9
 8003e76:	eba5 0509 	sub.w	r5, r5, r9
 8003e7a:	6026      	str	r6, [r4, #0]
 8003e7c:	60a5      	str	r5, [r4, #8]
 8003e7e:	463e      	mov	r6, r7
 8003e80:	42be      	cmp	r6, r7
 8003e82:	d900      	bls.n	8003e86 <__ssputs_r+0x72>
 8003e84:	463e      	mov	r6, r7
 8003e86:	6820      	ldr	r0, [r4, #0]
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	f000 faa8 	bl	80043e0 <memmove>
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	1b9b      	subs	r3, r3, r6
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	4433      	add	r3, r6
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	f000 fad4 	bl	8004450 <_realloc_r>
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d1e0      	bne.n	8003e70 <__ssputs_r+0x5c>
 8003eae:	6921      	ldr	r1, [r4, #16]
 8003eb0:	4650      	mov	r0, sl
 8003eb2:	f7ff feb7 	bl	8003c24 <_free_r>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	f8ca 3000 	str.w	r3, [sl]
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	e7e9      	b.n	8003e9e <__ssputs_r+0x8a>
	...

08003ecc <_svfiprintf_r>:
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	898b      	ldrh	r3, [r1, #12]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	b09d      	sub	sp, #116	@ 0x74
 8003ed8:	4607      	mov	r7, r0
 8003eda:	460d      	mov	r5, r1
 8003edc:	4614      	mov	r4, r2
 8003ede:	d510      	bpl.n	8003f02 <_svfiprintf_r+0x36>
 8003ee0:	690b      	ldr	r3, [r1, #16]
 8003ee2:	b973      	cbnz	r3, 8003f02 <_svfiprintf_r+0x36>
 8003ee4:	2140      	movs	r1, #64	@ 0x40
 8003ee6:	f7ff ff09 	bl	8003cfc <_malloc_r>
 8003eea:	6028      	str	r0, [r5, #0]
 8003eec:	6128      	str	r0, [r5, #16]
 8003eee:	b930      	cbnz	r0, 8003efe <_svfiprintf_r+0x32>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	b01d      	add	sp, #116	@ 0x74
 8003efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efe:	2340      	movs	r3, #64	@ 0x40
 8003f00:	616b      	str	r3, [r5, #20]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f06:	2320      	movs	r3, #32
 8003f08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f10:	2330      	movs	r3, #48	@ 0x30
 8003f12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040b0 <_svfiprintf_r+0x1e4>
 8003f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f1a:	f04f 0901 	mov.w	r9, #1
 8003f1e:	4623      	mov	r3, r4
 8003f20:	469a      	mov	sl, r3
 8003f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f26:	b10a      	cbz	r2, 8003f2c <_svfiprintf_r+0x60>
 8003f28:	2a25      	cmp	r2, #37	@ 0x25
 8003f2a:	d1f9      	bne.n	8003f20 <_svfiprintf_r+0x54>
 8003f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f30:	d00b      	beq.n	8003f4a <_svfiprintf_r+0x7e>
 8003f32:	465b      	mov	r3, fp
 8003f34:	4622      	mov	r2, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f7ff ff6b 	bl	8003e14 <__ssputs_r>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f000 80a7 	beq.w	8004092 <_svfiprintf_r+0x1c6>
 8003f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f46:	445a      	add	r2, fp
 8003f48:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 809f 	beq.w	8004092 <_svfiprintf_r+0x1c6>
 8003f54:	2300      	movs	r3, #0
 8003f56:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f5e:	f10a 0a01 	add.w	sl, sl, #1
 8003f62:	9304      	str	r3, [sp, #16]
 8003f64:	9307      	str	r3, [sp, #28]
 8003f66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f6c:	4654      	mov	r4, sl
 8003f6e:	2205      	movs	r2, #5
 8003f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f74:	484e      	ldr	r0, [pc, #312]	@ (80040b0 <_svfiprintf_r+0x1e4>)
 8003f76:	f7fc f933 	bl	80001e0 <memchr>
 8003f7a:	9a04      	ldr	r2, [sp, #16]
 8003f7c:	b9d8      	cbnz	r0, 8003fb6 <_svfiprintf_r+0xea>
 8003f7e:	06d0      	lsls	r0, r2, #27
 8003f80:	bf44      	itt	mi
 8003f82:	2320      	movmi	r3, #32
 8003f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f88:	0711      	lsls	r1, r2, #28
 8003f8a:	bf44      	itt	mi
 8003f8c:	232b      	movmi	r3, #43	@ 0x2b
 8003f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f92:	f89a 3000 	ldrb.w	r3, [sl]
 8003f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f98:	d015      	beq.n	8003fc6 <_svfiprintf_r+0xfa>
 8003f9a:	9a07      	ldr	r2, [sp, #28]
 8003f9c:	4654      	mov	r4, sl
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f04f 0c0a 	mov.w	ip, #10
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003faa:	3b30      	subs	r3, #48	@ 0x30
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	d94b      	bls.n	8004048 <_svfiprintf_r+0x17c>
 8003fb0:	b1b0      	cbz	r0, 8003fe0 <_svfiprintf_r+0x114>
 8003fb2:	9207      	str	r2, [sp, #28]
 8003fb4:	e014      	b.n	8003fe0 <_svfiprintf_r+0x114>
 8003fb6:	eba0 0308 	sub.w	r3, r0, r8
 8003fba:	fa09 f303 	lsl.w	r3, r9, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	46a2      	mov	sl, r4
 8003fc4:	e7d2      	b.n	8003f6c <_svfiprintf_r+0xa0>
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	1d19      	adds	r1, r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	9103      	str	r1, [sp, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bfbb      	ittet	lt
 8003fd2:	425b      	neglt	r3, r3
 8003fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fd8:	9307      	strge	r3, [sp, #28]
 8003fda:	9307      	strlt	r3, [sp, #28]
 8003fdc:	bfb8      	it	lt
 8003fde:	9204      	strlt	r2, [sp, #16]
 8003fe0:	7823      	ldrb	r3, [r4, #0]
 8003fe2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fe4:	d10a      	bne.n	8003ffc <_svfiprintf_r+0x130>
 8003fe6:	7863      	ldrb	r3, [r4, #1]
 8003fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fea:	d132      	bne.n	8004052 <_svfiprintf_r+0x186>
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	1d1a      	adds	r2, r3, #4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	9203      	str	r2, [sp, #12]
 8003ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ff8:	3402      	adds	r4, #2
 8003ffa:	9305      	str	r3, [sp, #20]
 8003ffc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040c0 <_svfiprintf_r+0x1f4>
 8004000:	7821      	ldrb	r1, [r4, #0]
 8004002:	2203      	movs	r2, #3
 8004004:	4650      	mov	r0, sl
 8004006:	f7fc f8eb 	bl	80001e0 <memchr>
 800400a:	b138      	cbz	r0, 800401c <_svfiprintf_r+0x150>
 800400c:	9b04      	ldr	r3, [sp, #16]
 800400e:	eba0 000a 	sub.w	r0, r0, sl
 8004012:	2240      	movs	r2, #64	@ 0x40
 8004014:	4082      	lsls	r2, r0
 8004016:	4313      	orrs	r3, r2
 8004018:	3401      	adds	r4, #1
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004020:	4824      	ldr	r0, [pc, #144]	@ (80040b4 <_svfiprintf_r+0x1e8>)
 8004022:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004026:	2206      	movs	r2, #6
 8004028:	f7fc f8da 	bl	80001e0 <memchr>
 800402c:	2800      	cmp	r0, #0
 800402e:	d036      	beq.n	800409e <_svfiprintf_r+0x1d2>
 8004030:	4b21      	ldr	r3, [pc, #132]	@ (80040b8 <_svfiprintf_r+0x1ec>)
 8004032:	bb1b      	cbnz	r3, 800407c <_svfiprintf_r+0x1b0>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	3307      	adds	r3, #7
 8004038:	f023 0307 	bic.w	r3, r3, #7
 800403c:	3308      	adds	r3, #8
 800403e:	9303      	str	r3, [sp, #12]
 8004040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004042:	4433      	add	r3, r6
 8004044:	9309      	str	r3, [sp, #36]	@ 0x24
 8004046:	e76a      	b.n	8003f1e <_svfiprintf_r+0x52>
 8004048:	fb0c 3202 	mla	r2, ip, r2, r3
 800404c:	460c      	mov	r4, r1
 800404e:	2001      	movs	r0, #1
 8004050:	e7a8      	b.n	8003fa4 <_svfiprintf_r+0xd8>
 8004052:	2300      	movs	r3, #0
 8004054:	3401      	adds	r4, #1
 8004056:	9305      	str	r3, [sp, #20]
 8004058:	4619      	mov	r1, r3
 800405a:	f04f 0c0a 	mov.w	ip, #10
 800405e:	4620      	mov	r0, r4
 8004060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004064:	3a30      	subs	r2, #48	@ 0x30
 8004066:	2a09      	cmp	r2, #9
 8004068:	d903      	bls.n	8004072 <_svfiprintf_r+0x1a6>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0c6      	beq.n	8003ffc <_svfiprintf_r+0x130>
 800406e:	9105      	str	r1, [sp, #20]
 8004070:	e7c4      	b.n	8003ffc <_svfiprintf_r+0x130>
 8004072:	fb0c 2101 	mla	r1, ip, r1, r2
 8004076:	4604      	mov	r4, r0
 8004078:	2301      	movs	r3, #1
 800407a:	e7f0      	b.n	800405e <_svfiprintf_r+0x192>
 800407c:	ab03      	add	r3, sp, #12
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	462a      	mov	r2, r5
 8004082:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <_svfiprintf_r+0x1f0>)
 8004084:	a904      	add	r1, sp, #16
 8004086:	4638      	mov	r0, r7
 8004088:	f3af 8000 	nop.w
 800408c:	1c42      	adds	r2, r0, #1
 800408e:	4606      	mov	r6, r0
 8004090:	d1d6      	bne.n	8004040 <_svfiprintf_r+0x174>
 8004092:	89ab      	ldrh	r3, [r5, #12]
 8004094:	065b      	lsls	r3, r3, #25
 8004096:	f53f af2d 	bmi.w	8003ef4 <_svfiprintf_r+0x28>
 800409a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800409c:	e72c      	b.n	8003ef8 <_svfiprintf_r+0x2c>
 800409e:	ab03      	add	r3, sp, #12
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	462a      	mov	r2, r5
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <_svfiprintf_r+0x1f0>)
 80040a6:	a904      	add	r1, sp, #16
 80040a8:	4638      	mov	r0, r7
 80040aa:	f000 f879 	bl	80041a0 <_printf_i>
 80040ae:	e7ed      	b.n	800408c <_svfiprintf_r+0x1c0>
 80040b0:	0800454c 	.word	0x0800454c
 80040b4:	08004556 	.word	0x08004556
 80040b8:	00000000 	.word	0x00000000
 80040bc:	08003e15 	.word	0x08003e15
 80040c0:	08004552 	.word	0x08004552

080040c4 <_printf_common>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	4616      	mov	r6, r2
 80040ca:	4698      	mov	r8, r3
 80040cc:	688a      	ldr	r2, [r1, #8]
 80040ce:	690b      	ldr	r3, [r1, #16]
 80040d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bfb8      	it	lt
 80040d8:	4613      	movlt	r3, r2
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040e0:	4607      	mov	r7, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	b10a      	cbz	r2, 80040ea <_printf_common+0x26>
 80040e6:	3301      	adds	r3, #1
 80040e8:	6033      	str	r3, [r6, #0]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	0699      	lsls	r1, r3, #26
 80040ee:	bf42      	ittt	mi
 80040f0:	6833      	ldrmi	r3, [r6, #0]
 80040f2:	3302      	addmi	r3, #2
 80040f4:	6033      	strmi	r3, [r6, #0]
 80040f6:	6825      	ldr	r5, [r4, #0]
 80040f8:	f015 0506 	ands.w	r5, r5, #6
 80040fc:	d106      	bne.n	800410c <_printf_common+0x48>
 80040fe:	f104 0a19 	add.w	sl, r4, #25
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	6832      	ldr	r2, [r6, #0]
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	42ab      	cmp	r3, r5
 800410a:	dc26      	bgt.n	800415a <_printf_common+0x96>
 800410c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	3b00      	subs	r3, #0
 8004114:	bf18      	it	ne
 8004116:	2301      	movne	r3, #1
 8004118:	0692      	lsls	r2, r2, #26
 800411a:	d42b      	bmi.n	8004174 <_printf_common+0xb0>
 800411c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004120:	4641      	mov	r1, r8
 8004122:	4638      	mov	r0, r7
 8004124:	47c8      	blx	r9
 8004126:	3001      	adds	r0, #1
 8004128:	d01e      	beq.n	8004168 <_printf_common+0xa4>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	6922      	ldr	r2, [r4, #16]
 800412e:	f003 0306 	and.w	r3, r3, #6
 8004132:	2b04      	cmp	r3, #4
 8004134:	bf02      	ittt	eq
 8004136:	68e5      	ldreq	r5, [r4, #12]
 8004138:	6833      	ldreq	r3, [r6, #0]
 800413a:	1aed      	subeq	r5, r5, r3
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	bf0c      	ite	eq
 8004140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004144:	2500      	movne	r5, #0
 8004146:	4293      	cmp	r3, r2
 8004148:	bfc4      	itt	gt
 800414a:	1a9b      	subgt	r3, r3, r2
 800414c:	18ed      	addgt	r5, r5, r3
 800414e:	2600      	movs	r6, #0
 8004150:	341a      	adds	r4, #26
 8004152:	42b5      	cmp	r5, r6
 8004154:	d11a      	bne.n	800418c <_printf_common+0xc8>
 8004156:	2000      	movs	r0, #0
 8004158:	e008      	b.n	800416c <_printf_common+0xa8>
 800415a:	2301      	movs	r3, #1
 800415c:	4652      	mov	r2, sl
 800415e:	4641      	mov	r1, r8
 8004160:	4638      	mov	r0, r7
 8004162:	47c8      	blx	r9
 8004164:	3001      	adds	r0, #1
 8004166:	d103      	bne.n	8004170 <_printf_common+0xac>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004170:	3501      	adds	r5, #1
 8004172:	e7c6      	b.n	8004102 <_printf_common+0x3e>
 8004174:	18e1      	adds	r1, r4, r3
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	2030      	movs	r0, #48	@ 0x30
 800417a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800417e:	4422      	add	r2, r4
 8004180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004188:	3302      	adds	r3, #2
 800418a:	e7c7      	b.n	800411c <_printf_common+0x58>
 800418c:	2301      	movs	r3, #1
 800418e:	4622      	mov	r2, r4
 8004190:	4641      	mov	r1, r8
 8004192:	4638      	mov	r0, r7
 8004194:	47c8      	blx	r9
 8004196:	3001      	adds	r0, #1
 8004198:	d0e6      	beq.n	8004168 <_printf_common+0xa4>
 800419a:	3601      	adds	r6, #1
 800419c:	e7d9      	b.n	8004152 <_printf_common+0x8e>
	...

080041a0 <_printf_i>:
 80041a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	7e0f      	ldrb	r7, [r1, #24]
 80041a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041a8:	2f78      	cmp	r7, #120	@ 0x78
 80041aa:	4691      	mov	r9, r2
 80041ac:	4680      	mov	r8, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	469a      	mov	sl, r3
 80041b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041b6:	d807      	bhi.n	80041c8 <_printf_i+0x28>
 80041b8:	2f62      	cmp	r7, #98	@ 0x62
 80041ba:	d80a      	bhi.n	80041d2 <_printf_i+0x32>
 80041bc:	2f00      	cmp	r7, #0
 80041be:	f000 80d2 	beq.w	8004366 <_printf_i+0x1c6>
 80041c2:	2f58      	cmp	r7, #88	@ 0x58
 80041c4:	f000 80b9 	beq.w	800433a <_printf_i+0x19a>
 80041c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041d0:	e03a      	b.n	8004248 <_printf_i+0xa8>
 80041d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041d6:	2b15      	cmp	r3, #21
 80041d8:	d8f6      	bhi.n	80041c8 <_printf_i+0x28>
 80041da:	a101      	add	r1, pc, #4	@ (adr r1, 80041e0 <_printf_i+0x40>)
 80041dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041e0:	08004239 	.word	0x08004239
 80041e4:	0800424d 	.word	0x0800424d
 80041e8:	080041c9 	.word	0x080041c9
 80041ec:	080041c9 	.word	0x080041c9
 80041f0:	080041c9 	.word	0x080041c9
 80041f4:	080041c9 	.word	0x080041c9
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	080041c9 	.word	0x080041c9
 8004200:	080041c9 	.word	0x080041c9
 8004204:	080041c9 	.word	0x080041c9
 8004208:	080041c9 	.word	0x080041c9
 800420c:	0800434d 	.word	0x0800434d
 8004210:	08004277 	.word	0x08004277
 8004214:	08004307 	.word	0x08004307
 8004218:	080041c9 	.word	0x080041c9
 800421c:	080041c9 	.word	0x080041c9
 8004220:	0800436f 	.word	0x0800436f
 8004224:	080041c9 	.word	0x080041c9
 8004228:	08004277 	.word	0x08004277
 800422c:	080041c9 	.word	0x080041c9
 8004230:	080041c9 	.word	0x080041c9
 8004234:	0800430f 	.word	0x0800430f
 8004238:	6833      	ldr	r3, [r6, #0]
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6032      	str	r2, [r6, #0]
 8004240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004248:	2301      	movs	r3, #1
 800424a:	e09d      	b.n	8004388 <_printf_i+0x1e8>
 800424c:	6833      	ldr	r3, [r6, #0]
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	1d19      	adds	r1, r3, #4
 8004252:	6031      	str	r1, [r6, #0]
 8004254:	0606      	lsls	r6, r0, #24
 8004256:	d501      	bpl.n	800425c <_printf_i+0xbc>
 8004258:	681d      	ldr	r5, [r3, #0]
 800425a:	e003      	b.n	8004264 <_printf_i+0xc4>
 800425c:	0645      	lsls	r5, r0, #25
 800425e:	d5fb      	bpl.n	8004258 <_printf_i+0xb8>
 8004260:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004264:	2d00      	cmp	r5, #0
 8004266:	da03      	bge.n	8004270 <_printf_i+0xd0>
 8004268:	232d      	movs	r3, #45	@ 0x2d
 800426a:	426d      	negs	r5, r5
 800426c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004270:	4859      	ldr	r0, [pc, #356]	@ (80043d8 <_printf_i+0x238>)
 8004272:	230a      	movs	r3, #10
 8004274:	e011      	b.n	800429a <_printf_i+0xfa>
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	6833      	ldr	r3, [r6, #0]
 800427a:	0608      	lsls	r0, r1, #24
 800427c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004280:	d402      	bmi.n	8004288 <_printf_i+0xe8>
 8004282:	0649      	lsls	r1, r1, #25
 8004284:	bf48      	it	mi
 8004286:	b2ad      	uxthmi	r5, r5
 8004288:	2f6f      	cmp	r7, #111	@ 0x6f
 800428a:	4853      	ldr	r0, [pc, #332]	@ (80043d8 <_printf_i+0x238>)
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	bf14      	ite	ne
 8004290:	230a      	movne	r3, #10
 8004292:	2308      	moveq	r3, #8
 8004294:	2100      	movs	r1, #0
 8004296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800429a:	6866      	ldr	r6, [r4, #4]
 800429c:	60a6      	str	r6, [r4, #8]
 800429e:	2e00      	cmp	r6, #0
 80042a0:	bfa2      	ittt	ge
 80042a2:	6821      	ldrge	r1, [r4, #0]
 80042a4:	f021 0104 	bicge.w	r1, r1, #4
 80042a8:	6021      	strge	r1, [r4, #0]
 80042aa:	b90d      	cbnz	r5, 80042b0 <_printf_i+0x110>
 80042ac:	2e00      	cmp	r6, #0
 80042ae:	d04b      	beq.n	8004348 <_printf_i+0x1a8>
 80042b0:	4616      	mov	r6, r2
 80042b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b6:	fb03 5711 	mls	r7, r3, r1, r5
 80042ba:	5dc7      	ldrb	r7, [r0, r7]
 80042bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042c0:	462f      	mov	r7, r5
 80042c2:	42bb      	cmp	r3, r7
 80042c4:	460d      	mov	r5, r1
 80042c6:	d9f4      	bls.n	80042b2 <_printf_i+0x112>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d10b      	bne.n	80042e4 <_printf_i+0x144>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	07df      	lsls	r7, r3, #31
 80042d0:	d508      	bpl.n	80042e4 <_printf_i+0x144>
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	6861      	ldr	r1, [r4, #4]
 80042d6:	4299      	cmp	r1, r3
 80042d8:	bfde      	ittt	le
 80042da:	2330      	movle	r3, #48	@ 0x30
 80042dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042e4:	1b92      	subs	r2, r2, r6
 80042e6:	6122      	str	r2, [r4, #16]
 80042e8:	f8cd a000 	str.w	sl, [sp]
 80042ec:	464b      	mov	r3, r9
 80042ee:	aa03      	add	r2, sp, #12
 80042f0:	4621      	mov	r1, r4
 80042f2:	4640      	mov	r0, r8
 80042f4:	f7ff fee6 	bl	80040c4 <_printf_common>
 80042f8:	3001      	adds	r0, #1
 80042fa:	d14a      	bne.n	8004392 <_printf_i+0x1f2>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	b004      	add	sp, #16
 8004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	4833      	ldr	r0, [pc, #204]	@ (80043dc <_printf_i+0x23c>)
 8004310:	2778      	movs	r7, #120	@ 0x78
 8004312:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	6831      	ldr	r1, [r6, #0]
 800431a:	061f      	lsls	r7, r3, #24
 800431c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004320:	d402      	bmi.n	8004328 <_printf_i+0x188>
 8004322:	065f      	lsls	r7, r3, #25
 8004324:	bf48      	it	mi
 8004326:	b2ad      	uxthmi	r5, r5
 8004328:	6031      	str	r1, [r6, #0]
 800432a:	07d9      	lsls	r1, r3, #31
 800432c:	bf44      	itt	mi
 800432e:	f043 0320 	orrmi.w	r3, r3, #32
 8004332:	6023      	strmi	r3, [r4, #0]
 8004334:	b11d      	cbz	r5, 800433e <_printf_i+0x19e>
 8004336:	2310      	movs	r3, #16
 8004338:	e7ac      	b.n	8004294 <_printf_i+0xf4>
 800433a:	4827      	ldr	r0, [pc, #156]	@ (80043d8 <_printf_i+0x238>)
 800433c:	e7e9      	b.n	8004312 <_printf_i+0x172>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	f023 0320 	bic.w	r3, r3, #32
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	e7f6      	b.n	8004336 <_printf_i+0x196>
 8004348:	4616      	mov	r6, r2
 800434a:	e7bd      	b.n	80042c8 <_printf_i+0x128>
 800434c:	6833      	ldr	r3, [r6, #0]
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	6961      	ldr	r1, [r4, #20]
 8004352:	1d18      	adds	r0, r3, #4
 8004354:	6030      	str	r0, [r6, #0]
 8004356:	062e      	lsls	r6, r5, #24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	d501      	bpl.n	8004360 <_printf_i+0x1c0>
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0x1c6>
 8004360:	0668      	lsls	r0, r5, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0x1bc>
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	4616      	mov	r6, r2
 800436c:	e7bc      	b.n	80042e8 <_printf_i+0x148>
 800436e:	6833      	ldr	r3, [r6, #0]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	6032      	str	r2, [r6, #0]
 8004374:	681e      	ldr	r6, [r3, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	4630      	mov	r0, r6
 800437c:	f7fb ff30 	bl	80001e0 <memchr>
 8004380:	b108      	cbz	r0, 8004386 <_printf_i+0x1e6>
 8004382:	1b80      	subs	r0, r0, r6
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004390:	e7aa      	b.n	80042e8 <_printf_i+0x148>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	4632      	mov	r2, r6
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	47d0      	blx	sl
 800439c:	3001      	adds	r0, #1
 800439e:	d0ad      	beq.n	80042fc <_printf_i+0x15c>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	079b      	lsls	r3, r3, #30
 80043a4:	d413      	bmi.n	80043ce <_printf_i+0x22e>
 80043a6:	68e0      	ldr	r0, [r4, #12]
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	4298      	cmp	r0, r3
 80043ac:	bfb8      	it	lt
 80043ae:	4618      	movlt	r0, r3
 80043b0:	e7a6      	b.n	8004300 <_printf_i+0x160>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d09d      	beq.n	80042fc <_printf_i+0x15c>
 80043c0:	3501      	adds	r5, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	9903      	ldr	r1, [sp, #12]
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dcf2      	bgt.n	80043b2 <_printf_i+0x212>
 80043cc:	e7eb      	b.n	80043a6 <_printf_i+0x206>
 80043ce:	2500      	movs	r5, #0
 80043d0:	f104 0619 	add.w	r6, r4, #25
 80043d4:	e7f5      	b.n	80043c2 <_printf_i+0x222>
 80043d6:	bf00      	nop
 80043d8:	0800455d 	.word	0x0800455d
 80043dc:	0800456e 	.word	0x0800456e

080043e0 <memmove>:
 80043e0:	4288      	cmp	r0, r1
 80043e2:	b510      	push	{r4, lr}
 80043e4:	eb01 0402 	add.w	r4, r1, r2
 80043e8:	d902      	bls.n	80043f0 <memmove+0x10>
 80043ea:	4284      	cmp	r4, r0
 80043ec:	4623      	mov	r3, r4
 80043ee:	d807      	bhi.n	8004400 <memmove+0x20>
 80043f0:	1e43      	subs	r3, r0, #1
 80043f2:	42a1      	cmp	r1, r4
 80043f4:	d008      	beq.n	8004408 <memmove+0x28>
 80043f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043fe:	e7f8      	b.n	80043f2 <memmove+0x12>
 8004400:	4402      	add	r2, r0
 8004402:	4601      	mov	r1, r0
 8004404:	428a      	cmp	r2, r1
 8004406:	d100      	bne.n	800440a <memmove+0x2a>
 8004408:	bd10      	pop	{r4, pc}
 800440a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800440e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004412:	e7f7      	b.n	8004404 <memmove+0x24>

08004414 <_sbrk_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4d06      	ldr	r5, [pc, #24]	@ (8004430 <_sbrk_r+0x1c>)
 8004418:	2300      	movs	r3, #0
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fc fa32 	bl	8000888 <_sbrk>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_sbrk_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_sbrk_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000294 	.word	0x20000294

08004434 <memcpy>:
 8004434:	440a      	add	r2, r1
 8004436:	4291      	cmp	r1, r2
 8004438:	f100 33ff 	add.w	r3, r0, #4294967295
 800443c:	d100      	bne.n	8004440 <memcpy+0xc>
 800443e:	4770      	bx	lr
 8004440:	b510      	push	{r4, lr}
 8004442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444a:	4291      	cmp	r1, r2
 800444c:	d1f9      	bne.n	8004442 <memcpy+0xe>
 800444e:	bd10      	pop	{r4, pc}

08004450 <_realloc_r>:
 8004450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004454:	4680      	mov	r8, r0
 8004456:	4615      	mov	r5, r2
 8004458:	460c      	mov	r4, r1
 800445a:	b921      	cbnz	r1, 8004466 <_realloc_r+0x16>
 800445c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004460:	4611      	mov	r1, r2
 8004462:	f7ff bc4b 	b.w	8003cfc <_malloc_r>
 8004466:	b92a      	cbnz	r2, 8004474 <_realloc_r+0x24>
 8004468:	f7ff fbdc 	bl	8003c24 <_free_r>
 800446c:	2400      	movs	r4, #0
 800446e:	4620      	mov	r0, r4
 8004470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004474:	f000 f81a 	bl	80044ac <_malloc_usable_size_r>
 8004478:	4285      	cmp	r5, r0
 800447a:	4606      	mov	r6, r0
 800447c:	d802      	bhi.n	8004484 <_realloc_r+0x34>
 800447e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004482:	d8f4      	bhi.n	800446e <_realloc_r+0x1e>
 8004484:	4629      	mov	r1, r5
 8004486:	4640      	mov	r0, r8
 8004488:	f7ff fc38 	bl	8003cfc <_malloc_r>
 800448c:	4607      	mov	r7, r0
 800448e:	2800      	cmp	r0, #0
 8004490:	d0ec      	beq.n	800446c <_realloc_r+0x1c>
 8004492:	42b5      	cmp	r5, r6
 8004494:	462a      	mov	r2, r5
 8004496:	4621      	mov	r1, r4
 8004498:	bf28      	it	cs
 800449a:	4632      	movcs	r2, r6
 800449c:	f7ff ffca 	bl	8004434 <memcpy>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4640      	mov	r0, r8
 80044a4:	f7ff fbbe 	bl	8003c24 <_free_r>
 80044a8:	463c      	mov	r4, r7
 80044aa:	e7e0      	b.n	800446e <_realloc_r+0x1e>

080044ac <_malloc_usable_size_r>:
 80044ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b0:	1f18      	subs	r0, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbc      	itt	lt
 80044b6:	580b      	ldrlt	r3, [r1, r0]
 80044b8:	18c0      	addlt	r0, r0, r3
 80044ba:	4770      	bx	lr

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
