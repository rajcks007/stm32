
LSM6DSL_V0.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a0  080064a0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a8  080064a8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064ac  080064ac  000074ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080064b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000250  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d324  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d28  00000000  00000000  000153b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  000170d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000836  00000000  00000000  00017b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5bd  00000000  00000000  0001839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f18c  00000000  00000000  0003795b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2420  00000000  00000000  00046ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108f07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003060  00000000  00000000  00108f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0010bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063ec 	.word	0x080063ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080063ec 	.word	0x080063ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fcdb 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f843 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f911 	bl	80004b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f8df 	bl	8000454 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000296:	f000 f89d 	bl	80003d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LSM6DSL_init();
 800029a:	f000 f98b 	bl	80005b4 <LSM6DSL_init>
  LSM6DSL_EnableInterrupts();
 800029e:	f000 f9b3 	bl	8000608 <LSM6DSL_EnableInterrupts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (data_ready == true)
 80002a2:	4b1a      	ldr	r3, [pc, #104]	@ (800030c <main+0x8c>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d02b      	beq.n	8000302 <main+0x82>
	  {
//	     data_ready = 0;

	     int16_t accel_x = (int16_t)(i2c_rx_buffer[1] << 8 | i2c_rx_buffer[0]);
 80002aa:	4b19      	ldr	r3, [pc, #100]	@ (8000310 <main+0x90>)
 80002ac:	785b      	ldrb	r3, [r3, #1]
 80002ae:	021b      	lsls	r3, r3, #8
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <main+0x90>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	81fb      	strh	r3, [r7, #14]
	     int16_t accel_y = (int16_t)(i2c_rx_buffer[3] << 8 | i2c_rx_buffer[2]);
 80002bc:	4b14      	ldr	r3, [pc, #80]	@ (8000310 <main+0x90>)
 80002be:	78db      	ldrb	r3, [r3, #3]
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	b21a      	sxth	r2, r3
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <main+0x90>)
 80002c6:	789b      	ldrb	r3, [r3, #2]
 80002c8:	b21b      	sxth	r3, r3
 80002ca:	4313      	orrs	r3, r2
 80002cc:	81bb      	strh	r3, [r7, #12]
	     int16_t accel_z = (int16_t)(i2c_rx_buffer[5] << 8 | i2c_rx_buffer[4]);
 80002ce:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <main+0x90>)
 80002d0:	795b      	ldrb	r3, [r3, #5]
 80002d2:	021b      	lsls	r3, r3, #8
 80002d4:	b21a      	sxth	r2, r3
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <main+0x90>)
 80002d8:	791b      	ldrb	r3, [r3, #4]
 80002da:	b21b      	sxth	r3, r3
 80002dc:	4313      	orrs	r3, r2
 80002de:	817b      	strh	r3, [r7, #10]

	     // send data over uart
	     DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);
 80002e0:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 80002e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80002e8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80002ec:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80002f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	4623      	mov	r3, r4
 80002fe:	f000 fadd 	bl	80008bc <DataOver_UART>

	  // send data over uart
//	  DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);

	  //delay
	  HAL_Delay(500);
 8000302:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000306:	f000 fd01 	bl	8000d0c <HAL_Delay>
	  if (data_ready == true)
 800030a:	e7ca      	b.n	80002a2 <main+0x22>
 800030c:	2000015a 	.word	0x2000015a
 8000310:	20000154 	.word	0x20000154

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b0a6      	sub	sp, #152	@ 0x98
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800031e:	2228      	movs	r2, #40	@ 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f005 fbe2 	bl	8005aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2258      	movs	r2, #88	@ 0x58
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f005 fbd4 	bl	8005aec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000344:	2302      	movs	r3, #2
 8000346:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000348:	2301      	movs	r3, #1
 800034a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034c:	2310      	movs	r3, #16
 800034e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800035c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000360:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000372:	4618      	mov	r0, r3
 8000374:	f003 fa2c 	bl	80037d0 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037e:	f000 fad7 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000392:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000398:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 fa6a 	bl	8004878 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003aa:	f000 fac1 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80003ae:	2322      	movs	r3, #34	@ 0x22
 80003b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003b6:	2300      	movs	r3, #0
 80003b8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f004 fc7b 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003c8:	f000 fab2 	bl	8000930 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3798      	adds	r7, #152	@ 0x98
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003da:	4a1c      	ldr	r2, [pc, #112]	@ (800044c <MX_I2C1_Init+0x78>)
 80003dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003de:	4b1a      	ldr	r3, [pc, #104]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <MX_I2C1_Init+0x7c>)
 80003e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003e4:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ea:	4b17      	ldr	r3, [pc, #92]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003fc:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000402:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <MX_I2C1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800040e:	480e      	ldr	r0, [pc, #56]	@ (8000448 <MX_I2C1_Init+0x74>)
 8000410:	f000 ffb6 	bl	8001380 <HAL_I2C_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800041a:	f000 fa89 	bl	8000930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800041e:	2100      	movs	r1, #0
 8000420:	4809      	ldr	r0, [pc, #36]	@ (8000448 <MX_I2C1_Init+0x74>)
 8000422:	f003 f93d 	bl	80036a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800042c:	f000 fa80 	bl	8000930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000430:	2100      	movs	r1, #0
 8000432:	4805      	ldr	r0, [pc, #20]	@ (8000448 <MX_I2C1_Init+0x74>)
 8000434:	f003 f97f 	bl	8003736 <HAL_I2CEx_ConfigDigitalFilter>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800043e:	f000 fa77 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000078 	.word	0x20000078
 800044c:	40005400 	.word	0x40005400
 8000450:	00201d2b 	.word	0x00201d2b

08000454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	@ (80004b0 <MX_USART2_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800045e:	4b13      	ldr	r3, [pc, #76]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000460:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_USART2_UART_Init+0x58>)
 8000498:	f004 fe2c 	bl	80050f4 <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 fa45 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000cc 	.word	0x200000cc
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	@ 0x28
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4b37      	ldr	r3, [pc, #220]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a36      	ldr	r2, [pc, #216]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b34      	ldr	r3, [pc, #208]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a30      	ldr	r2, [pc, #192]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a2a      	ldr	r2, [pc, #168]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a24      	ldr	r2, [pc, #144]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b22      	ldr	r3, [pc, #136]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f000 fef4 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	4817      	ldr	r0, [pc, #92]	@ (80005ac <MX_GPIO_Init+0xf8>)
 8000550:	f000 fd5c 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000554:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f000 fd4c 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000574:	2310      	movs	r3, #16
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000578:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <MX_GPIO_Init+0xfc>)
 800058a:	f000 fd3f 	bl	800100c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	200a      	movs	r0, #10
 8000594:	f000 fcb9 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000598:	200a      	movs	r0, #10
 800059a:	f000 fcd2 	bl	8000f42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	@ 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	48000800 	.word	0x48000800
 80005b0:	48000400 	.word	0x48000400

080005b4 <LSM6DSL_init>:

/**
  * @brief LSM6DSL_Init Initialization Function
  */
// Initialize the LSM6DSL sensor
uint8_t LSM6DSL_init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    uint8_t rv = 0;    // return value indicating failure
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]

    // Set chip select (if using SPI, otherwise not needed for I2C)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Assume PA9 is CS for SPI, not used for I2C
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c8:	f000 feaa 	bl	8001320 <HAL_GPIO_WritePin>

    // Check if the device ID matches the expected ID
    if (LSM6DSL_get_ID() == LSM6DSL_ID) {
 80005cc:	f000 f8ac 	bl	8000728 <LSM6DSL_get_ID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b6a      	cmp	r3, #106	@ 0x6a
 80005d4:	d113      	bne.n	80005fe <LSM6DSL_init+0x4a>
        LSM6DSL_set_sw_reset(true);                      // Reset the sensor
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 f8be 	bl	8000758 <LSM6DSL_set_sw_reset>

        // Set accelerometer and gyroscope settings
        LSM6DSL_set_data_rate_xl(LSM6DSL_XL_ODR_104Hz);
 80005dc:	2040      	movs	r0, #64	@ 0x40
 80005de:	f000 f8da 	bl	8000796 <LSM6DSL_set_data_rate_xl>
        LSM6DSL_set_full_scale_xl(LSM6DSL_2g);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f8f4 	bl	80007d0 <LSM6DSL_set_full_scale_xl>
        LSM6DSL_set_data_rate_gy(LSM6DSL_GY_ODR_104Hz);
 80005e8:	2040      	movs	r0, #64	@ 0x40
 80005ea:	f000 f90e 	bl	800080a <LSM6DSL_set_data_rate_gy>
        LSM6DSL_set_full_scale_gy(LSM6DSL_2000dps);
 80005ee:	200c      	movs	r0, #12
 80005f0:	f000 f928 	bl	8000844 <LSM6DSL_set_full_scale_gy>

        // Enable block data update to prevent partial reads
        LSM6DSL_set_block_data_update(true);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 f942 	bl	800087e <LSM6DSL_set_block_data_update>

        rv = OK;         // Initialization successful
 80005fa:	2301      	movs	r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]
    }

   return rv;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <LSM6DSL_EnableInterrupts>:

// Enable Data Ready Interrupt on INT1 Pin for accelerometer (XL) and gyroscope (G)
void LSM6DSL_EnableInterrupts(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af04      	add	r7, sp, #16
    uint8_t data;

    // Configure INT1_CTRL (0x0D): Enable interrupt for accelerometer and gyroscope data ready
    data = 0x03;  // Bit 0 = 1 (XL_DRDY), Bit 1 = 1 (G_DRDY)
 800060e:	2303      	movs	r3, #3
 8000610:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDR, LSM6DSL_INT1_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	220d      	movs	r2, #13
 8000624:	216a      	movs	r1, #106	@ 0x6a
 8000626:	480b      	ldr	r0, [pc, #44]	@ (8000654 <LSM6DSL_EnableInterrupts+0x4c>)
 8000628:	f000 ff46 	bl	80014b8 <HAL_I2C_Mem_Write>

    // CTRL3_C (0x12): Enable interrupts, auto increment register address during multi-byte read
    data = 0x0C;  // Set IF_INC bit (auto increment)
 800062c:	230c      	movs	r3, #12
 800062e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDR, LSM6DSL_CTRL3_C, 1, &data, 1, HAL_MAX_DELAY);
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	2301      	movs	r3, #1
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2212      	movs	r2, #18
 8000642:	216a      	movs	r1, #106	@ 0x6a
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <LSM6DSL_EnableInterrupts+0x4c>)
 8000646:	f000 ff37 	bl	80014b8 <HAL_I2C_Mem_Write>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000078 	.word	0x20000078

08000658 <HAL_GPIO_EXTI_Callback>:



// Interrupt callback for EXTI (from LSM6DSL INT1)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4)  // connected to INT1
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	2b10      	cmp	r3, #16
 8000666:	d109      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0x24>
    {
        // Start I2C read operation to get data from the LSM6DSL
        // Reading 6 bytes (e.g., accelerometer data from OUTX_L_XL register)
        HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_ADDR, LSM6DSL_OUTX_L_XL, 1, i2c_rx_buffer, 6);
 8000668:	2306      	movs	r3, #6
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <HAL_GPIO_EXTI_Callback+0x2c>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	2228      	movs	r2, #40	@ 0x28
 8000674:	216a      	movs	r1, #106	@ 0x6a
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x30>)
 8000678:	f001 f94c 	bl	8001914 <HAL_I2C_Mem_Read_IT>
    }
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000154 	.word	0x20000154
 8000688:	20000078 	.word	0x20000078

0800068c <HAL_I2C_MemRxCpltCallback>:

// Callback function when I2C read is complete
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1)  // Check if this is I2C1
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <HAL_I2C_MemRxCpltCallback+0x24>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d102      	bne.n	80006a4 <HAL_I2C_MemRxCpltCallback+0x18>
    {
    	data_ready = true;
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HAL_I2C_MemRxCpltCallback+0x28>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]

    }
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40005400 	.word	0x40005400
 80006b4:	2000015a 	.word	0x2000015a

080006b8 <LSM6DSL_write_register>:
//    *ay = (int16_t)(p_buf_rx[2] | p_buf_rx[3] << 8);
//    *az = (int16_t)(p_buf_rx[4] | p_buf_rx[5] << 8);
//}

// Helper function to write data to a specific register
void LSM6DSL_write_register(uint8_t reg, uint8_t data) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af04      	add	r7, sp, #16
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	9302      	str	r3, [sp, #8]
 80006d2:	2301      	movs	r3, #1
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	1dbb      	adds	r3, r7, #6
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2301      	movs	r3, #1
 80006dc:	216a      	movs	r1, #106	@ 0x6a
 80006de:	4803      	ldr	r0, [pc, #12]	@ (80006ec <LSM6DSL_write_register+0x34>)
 80006e0:	f000 feea 	bl	80014b8 <HAL_I2C_Mem_Write>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000078 	.word	0x20000078

080006f0 <LSM6DSL_read_register>:

// Helper function to read data from a specific register
uint8_t LSM6DSL_read_register(uint8_t reg) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	f107 030f 	add.w	r3, r7, #15
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	216a      	movs	r1, #106	@ 0x6a
 8000712:	4804      	ldr	r0, [pc, #16]	@ (8000724 <LSM6DSL_read_register+0x34>)
 8000714:	f000 ffe4 	bl	80016e0 <HAL_I2C_Mem_Read>
    return data;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000078 	.word	0x20000078

08000728 <LSM6DSL_get_ID>:

// Get the ID of the LSM6DSL sensor
uint8_t LSM6DSL_get_ID(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af04      	add	r7, sp, #16
	uint8_t newData;
//    return LSM6DSL_read_register(LSM6DSL_WHO_AM_I);
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDR, LSM6DSL_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &newData, 1, HAL_MAX_DELAY);
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	220f      	movs	r2, #15
 8000740:	216a      	movs	r1, #106	@ 0x6a
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <LSM6DSL_get_ID+0x2c>)
 8000744:	f000 ffcc 	bl	80016e0 <HAL_I2C_Mem_Read>
    return newData;
 8000748:	79fb      	ldrb	r3, [r7, #7]

}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078

08000758 <LSM6DSL_set_sw_reset>:

// Perform a software reset on the LSM6DSL sensor
void LSM6DSL_set_sw_reset(uint8_t enable) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
 8000762:	2012      	movs	r0, #18
 8000764:	f7ff ffc4 	bl	80006f0 <LSM6DSL_read_register>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
    if (enable) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d004      	beq.n	800077c <LSM6DSL_set_sw_reset+0x24>
        ctrl3_c |= 0x01;  // Set the SW_RESET bit
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e003      	b.n	8000784 <LSM6DSL_set_sw_reset+0x2c>
    } else {
        ctrl3_c &= ~0x01; // Clear the SW_RESET bit
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	f023 0301 	bic.w	r3, r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	4619      	mov	r1, r3
 8000788:	2012      	movs	r0, #18
 800078a:	f7ff ff95 	bl	80006b8 <LSM6DSL_write_register>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <LSM6DSL_set_data_rate_xl>:

// Set accelerometer data rate and full scale
void LSM6DSL_set_data_rate_xl(uint8_t data_rate) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
 80007a0:	2010      	movs	r0, #16
 80007a2:	f7ff ffa5 	bl	80006f0 <LSM6DSL_read_register>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
    ctrl1_xl = (ctrl1_xl & ~0xF0) | data_rate;  // Mask and set ODR bits
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b25a      	sxtb	r2, r3
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2010      	movs	r0, #16
 80007c4:	f7ff ff78 	bl	80006b8 <LSM6DSL_write_register>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <LSM6DSL_set_full_scale_xl>:

void LSM6DSL_set_full_scale_xl(uint8_t full_scale) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
 80007da:	2010      	movs	r0, #16
 80007dc:	f7ff ff88 	bl	80006f0 <LSM6DSL_read_register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	73fb      	strb	r3, [r7, #15]
    ctrl1_xl = (ctrl1_xl & ~0x0C) | full_scale;  // Mask and set full-scale bits
 80007e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e8:	f023 030c 	bic.w	r3, r3, #12
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2010      	movs	r0, #16
 80007fe:	f7ff ff5b 	bl	80006b8 <LSM6DSL_write_register>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <LSM6DSL_set_data_rate_gy>:

// Set gyroscope data rate and full scale
void LSM6DSL_set_data_rate_gy(uint8_t data_rate) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
 8000814:	2011      	movs	r0, #17
 8000816:	f7ff ff6b 	bl	80006f0 <LSM6DSL_read_register>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
    ctrl2_g = (ctrl2_g & ~0xF0) | data_rate;  // Mask and set ODR bits
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	b25a      	sxtb	r2, r3
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4313      	orrs	r3, r2
 800082e:	b25b      	sxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	4619      	mov	r1, r3
 8000836:	2011      	movs	r0, #17
 8000838:	f7ff ff3e 	bl	80006b8 <LSM6DSL_write_register>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <LSM6DSL_set_full_scale_gy>:

void LSM6DSL_set_full_scale_gy(uint8_t full_scale) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
 800084e:	2011      	movs	r0, #17
 8000850:	f7ff ff4e 	bl	80006f0 <LSM6DSL_read_register>
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]
    ctrl2_g = (ctrl2_g & ~0x0C) | full_scale;  // Mask and set full-scale bits
 8000858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085c:	f023 030c 	bic.w	r3, r3, #12
 8000860:	b25a      	sxtb	r2, r3
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	4313      	orrs	r3, r2
 8000868:	b25b      	sxtb	r3, r3
 800086a:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	4619      	mov	r1, r3
 8000870:	2011      	movs	r0, #17
 8000872:	f7ff ff21 	bl	80006b8 <LSM6DSL_write_register>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <LSM6DSL_set_block_data_update>:

// Enable/Disable block data update
void LSM6DSL_set_block_data_update(uint8_t enable) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
 8000888:	2012      	movs	r0, #18
 800088a:	f7ff ff31 	bl	80006f0 <LSM6DSL_read_register>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
    if (enable) {
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d004      	beq.n	80008a2 <LSM6DSL_set_block_data_update+0x24>
        ctrl3_c |= 0x40;  // Set the BDU bit (Block Data Update)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e003      	b.n	80008aa <LSM6DSL_set_block_data_update+0x2c>
    } else {
        ctrl3_c &= ~0x40; // Clear the BDU bit
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80008a8:	73fb      	strb	r3, [r7, #15]
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4619      	mov	r1, r3
 80008ae:	2012      	movs	r0, #18
 80008b0:	f7ff ff02 	bl	80006b8 <LSM6DSL_write_register>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <DataOver_UART>:

/**
  * @brief UART_Transmit Data
  */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz)
{
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	b0a3      	sub	sp, #140	@ 0x8c
 80008c0:	af06      	add	r7, sp, #24
 80008c2:	4604      	mov	r4, r0
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4623      	mov	r3, r4
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	4603      	mov	r3, r0
 80008d0:	80bb      	strh	r3, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	807b      	strh	r3, [r7, #2]
 80008d6:	4613      	mov	r3, r2
 80008d8:	803b      	strh	r3, [r7, #0]
	// Prepare data string
	char uart_buff[96];
	int buff_length;

	buff_length = snprintf(uart_buff, sizeof(uart_buff),
 80008da:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 80008de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008e6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80008ea:	f9b7 0088 	ldrsh.w	r0, [r7, #136]	@ 0x88
 80008ee:	f9b7 408c 	ldrsh.w	r4, [r7, #140]	@ 0x8c
 80008f2:	f107 050c 	add.w	r5, r7, #12
 80008f6:	9404      	str	r4, [sp, #16]
 80008f8:	9003      	str	r0, [sp, #12]
 80008fa:	9102      	str	r1, [sp, #8]
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	4633      	mov	r3, r6
 8000902:	4a09      	ldr	r2, [pc, #36]	@ (8000928 <DataOver_UART+0x6c>)
 8000904:	2160      	movs	r1, #96	@ 0x60
 8000906:	4628      	mov	r0, r5
 8000908:	f005 f8bc 	bl	8005a84 <sniprintf>
 800090c:	66f8      	str	r0, [r7, #108]	@ 0x6c
									"Acce: x=%d y=%d z=%d | Gyro: x=%d y=%d z=%d \r\n",
									ax, ay, az, gx, gy, gz);

	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 800090e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000910:	b29a      	uxth	r2, r3
 8000912:	f107 010c 	add.w	r1, r7, #12
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	4804      	ldr	r0, [pc, #16]	@ (800092c <DataOver_UART+0x70>)
 800091c:	f004 fc38 	bl	8005190 <HAL_UART_Transmit>

}
 8000920:	bf00      	nop
 8000922:	3774      	adds	r7, #116	@ 0x74
 8000924:	46bd      	mov	sp, r7
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	08006404 	.word	0x08006404
 800092c:	200000cc 	.word	0x200000cc

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <Error_Handler+0x8>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_MspInit+0x44>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_MspInit+0x44>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_MspInit+0x44>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_MspInit+0x44>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fabe 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a4c <HAL_I2C_MspInit+0xc8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d14d      	bne.n	8000a42 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a29      	ldr	r2, [pc, #164]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009c8:	6153      	str	r3, [r2, #20]
 80009ca:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f000 fb09 	bl	800100c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	2312      	movs	r3, #18
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	480f      	ldr	r0, [pc, #60]	@ (8000a54 <HAL_I2C_MspInit+0xd0>)
 8000a16:	f000 faf9 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_I2C_MspInit+0xcc>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	201f      	movs	r0, #31
 8000a38:	f000 fa67 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a3c:	201f      	movs	r0, #31
 8000a3e:	f000 fa80 	bl	8000f42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	@ 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0x7c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d128      	bne.n	8000acc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0x80>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <HAL_UART_MspInit+0x80>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_UART_MspInit+0x80>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_UART_MspInit+0x80>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a10      	ldr	r2, [pc, #64]	@ (8000ad8 <HAL_UART_MspInit+0x80>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_UART_MspInit+0x80>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aba:	2307      	movs	r3, #7
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f000 faa0 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	@ 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f000 f8cb 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b3e:	2010      	movs	r0, #16
 8000b40:	f000 fc06 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <I2C1_EV_IRQHandler+0x10>)
 8000b4e:	f000 ff67 	bl	8001a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000078 	.word	0x20000078

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f004 ffb6 	bl	8005afc <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20010000 	.word	0x20010000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	2000015c 	.word	0x2000015c
 8000bc4:	200002b0 	.word	0x200002b0

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f004 ff75 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fb2f 	bl	8000280 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c30:	080064b0 	.word	0x080064b0
  ldr r2, =_sbss
 8000c34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c38:	200002ac 	.word	0x200002ac

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <HAL_Init+0x28>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	@ (8000c68 <HAL_Init+0x28>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f94f 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe6e 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f967 	bl	8000f5e <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f92f 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000160 	.word	0x20000160

08000cf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000160 	.word	0x20000160

08000d0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d005      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e027      	b.n	8000fe8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 020e 	bic.w	r2, r2, #14
 8000fa6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	4798      	blx	r3
    }
  }
  return status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e160      	b.n	80012de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8152 	beq.w	80012d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	f003 0201 	and.w	r2, r3, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 80ac 	beq.w	80012d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b5e      	ldr	r3, [pc, #376]	@ (80012fc <HAL_GPIO_Init+0x2f0>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a5d      	ldr	r2, [pc, #372]	@ (80012fc <HAL_GPIO_Init+0x2f0>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b5b      	ldr	r3, [pc, #364]	@ (80012fc <HAL_GPIO_Init+0x2f0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a59      	ldr	r2, [pc, #356]	@ (8001300 <HAL_GPIO_Init+0x2f4>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011c2:	d025      	beq.n	8001210 <HAL_GPIO_Init+0x204>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001304 <HAL_GPIO_Init+0x2f8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d01f      	beq.n	800120c <HAL_GPIO_Init+0x200>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001308 <HAL_GPIO_Init+0x2fc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d019      	beq.n	8001208 <HAL_GPIO_Init+0x1fc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4d      	ldr	r2, [pc, #308]	@ (800130c <HAL_GPIO_Init+0x300>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1f8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4c      	ldr	r2, [pc, #304]	@ (8001310 <HAL_GPIO_Init+0x304>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1f4>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001314 <HAL_GPIO_Init+0x308>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1f0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1ec>
 80011f4:	2306      	movs	r3, #6
 80011f6:	e00c      	b.n	8001212 <HAL_GPIO_Init+0x206>
 80011f8:	2307      	movs	r3, #7
 80011fa:	e00a      	b.n	8001212 <HAL_GPIO_Init+0x206>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e008      	b.n	8001212 <HAL_GPIO_Init+0x206>
 8001200:	2304      	movs	r3, #4
 8001202:	e006      	b.n	8001212 <HAL_GPIO_Init+0x206>
 8001204:	2303      	movs	r3, #3
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x206>
 8001208:	2302      	movs	r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x206>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x206>
 8001210:	2300      	movs	r3, #0
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001222:	4937      	ldr	r1, [pc, #220]	@ (8001300 <HAL_GPIO_Init+0x2f4>)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001230:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <HAL_GPIO_Init+0x310>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001254:	4a31      	ldr	r2, [pc, #196]	@ (800131c <HAL_GPIO_Init+0x310>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125a:	4b30      	ldr	r3, [pc, #192]	@ (800131c <HAL_GPIO_Init+0x310>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800127e:	4a27      	ldr	r2, [pc, #156]	@ (800131c <HAL_GPIO_Init+0x310>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001284:	4b25      	ldr	r3, [pc, #148]	@ (800131c <HAL_GPIO_Init+0x310>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a8:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <HAL_GPIO_Init+0x310>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_GPIO_Init+0x310>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <HAL_GPIO_Init+0x310>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f47f ae97 	bne.w	800101c <HAL_GPIO_Init+0x10>
  }
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	48000400 	.word	0x48000400
 8001308:	48000800 	.word	0x48000800
 800130c:	48000c00 	.word	0x48000c00
 8001310:	48001000 	.word	0x48001000
 8001314:	48001400 	.word	0x48001400
 8001318:	48001800 	.word	0x48001800
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800133c:	e002      	b.n	8001344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f972 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e08d      	b.n	80014ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff faec 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	@ 0x24
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	e006      	b.n	8001408 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001406:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d108      	bne.n	8001422 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	e007      	b.n	8001432 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69d9      	ldr	r1, [r3, #28]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2220      	movs	r2, #32
 800149a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	460b      	mov	r3, r1
 80014cc:	813b      	strh	r3, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b20      	cmp	r3, #32
 80014dc:	f040 80f9 	bne.w	80016d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_I2C_Mem_Write+0x34>
 80014e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0ed      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Mem_Write+0x4e>
 8001502:	2302      	movs	r3, #2
 8001504:	e0e6      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800150e:	f7ff fbf1 	bl	8000cf4 <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2319      	movs	r3, #25
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f001 fde6 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d1      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2221      	movs	r2, #33	@ 0x21
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2240      	movs	r2, #64	@ 0x40
 800153c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001558:	88f8      	ldrh	r0, [r7, #6]
 800155a:	893a      	ldrh	r2, [r7, #8]
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4603      	mov	r3, r0
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f001 f823 	bl	80025b4 <I2C_RequestMemoryWrite>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0a9      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001584:	b29b      	uxth	r3, r3
 8001586:	2bff      	cmp	r3, #255	@ 0xff
 8001588:	d90e      	bls.n	80015a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	22ff      	movs	r2, #255	@ 0xff
 800158e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001594:	b2da      	uxtb	r2, r3
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f001 ff69 	bl	8003478 <I2C_TransferConfig>
 80015a6:	e00f      	b.n	80015c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	8979      	ldrh	r1, [r7, #10]
 80015ba:	2300      	movs	r3, #0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 ff58 	bl	8003478 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f001 fde9 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e07b      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001604:	3b01      	subs	r3, #1
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d034      	beq.n	8001680 <HAL_I2C_Mem_Write+0x1c8>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161a:	2b00      	cmp	r3, #0
 800161c:	d130      	bne.n	8001680 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f001 fd62 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e04d      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	2bff      	cmp	r3, #255	@ 0xff
 8001640:	d90e      	bls.n	8001660 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	22ff      	movs	r2, #255	@ 0xff
 8001646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800164c:	b2da      	uxtb	r2, r3
 800164e:	8979      	ldrh	r1, [r7, #10]
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f001 ff0d 	bl	8003478 <I2C_TransferConfig>
 800165e:	e00f      	b.n	8001680 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166e:	b2da      	uxtb	r2, r3
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f001 fefc 	bl	8003478 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d19e      	bne.n	80015c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f001 fdcf 	bl	8003232 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e01a      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2220      	movs	r2, #32
 80016a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_I2C_Mem_Write+0x224>)
 80016b2:	400b      	ands	r3, r1
 80016b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2220      	movs	r2, #32
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
  }
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	fe00e800 	.word	0xfe00e800

080016e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	817b      	strh	r3, [r7, #10]
 80016f2:	460b      	mov	r3, r1
 80016f4:	813b      	strh	r3, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b20      	cmp	r3, #32
 8001704:	f040 80fd 	bne.w	8001902 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <HAL_I2C_Mem_Read+0x34>
 800170e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800171a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0f1      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_I2C_Mem_Read+0x4e>
 800172a:	2302      	movs	r3, #2
 800172c:	e0ea      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001736:	f7ff fadd 	bl	8000cf4 <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2319      	movs	r3, #25
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f001 fcd2 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d5      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2222      	movs	r2, #34	@ 0x22
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001778:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001780:	88f8      	ldrh	r0, [r7, #6]
 8001782:	893a      	ldrh	r2, [r7, #8]
 8001784:	8979      	ldrh	r1, [r7, #10]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4603      	mov	r3, r0
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 ff63 	bl	800265c <I2C_RequestMemoryRead>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0ad      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2bff      	cmp	r3, #255	@ 0xff
 80017b0:	d90e      	bls.n	80017d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	4b52      	ldr	r3, [pc, #328]	@ (800190c <HAL_I2C_Mem_Read+0x22c>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f001 fe55 	bl	8003478 <I2C_TransferConfig>
 80017ce:	e00f      	b.n	80017f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <HAL_I2C_Mem_Read+0x22c>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f001 fe44 	bl	8003478 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f6:	2200      	movs	r2, #0
 80017f8:	2104      	movs	r1, #4
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f001 fc79 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07c      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d034      	beq.n	80018b0 <HAL_I2C_Mem_Read+0x1d0>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	d130      	bne.n	80018b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001854:	2200      	movs	r2, #0
 8001856:	2180      	movs	r1, #128	@ 0x80
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f001 fc4a 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e04d      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2bff      	cmp	r3, #255	@ 0xff
 8001870:	d90e      	bls.n	8001890 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8979      	ldrh	r1, [r7, #10]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f001 fdf5 	bl	8003478 <I2C_TransferConfig>
 800188e:	e00f      	b.n	80018b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	8979      	ldrh	r1, [r7, #10]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f001 fde4 	bl	8003478 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d19a      	bne.n	80017f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f001 fcb7 	bl	8003232 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e01a      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2220      	movs	r2, #32
 80018d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_I2C_Mem_Read+0x230>)
 80018e2:	400b      	ands	r3, r1
 80018e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001902:	2302      	movs	r3, #2
  }
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	80002400 	.word	0x80002400
 8001910:	fe00e800 	.word	0xfe00e800

08001914 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	817b      	strh	r3, [r7, #10]
 8001926:	460b      	mov	r3, r1
 8001928:	813b      	strh	r3, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	d166      	bne.n	8001a08 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_I2C_Mem_Read_IT+0x32>
 8001940:	8bbb      	ldrh	r3, [r7, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e05b      	b.n	8001a0a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800195c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
 8001964:	e051      	b.n	8001a0a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_I2C_Mem_Read_IT+0x60>
 8001970:	2302      	movs	r3, #2
 8001972:	e04a      	b.n	8001a0a <HAL_I2C_Mem_Read_IT+0xf6>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2222      	movs	r2, #34	@ 0x22
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2240      	movs	r2, #64	@ 0x40
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8bba      	ldrh	r2, [r7, #28]
 800199c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <HAL_I2C_Mem_Read_IT+0x100>)
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_I2C_Mem_Read_IT+0x104>)
 80019a8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80019aa:	897a      	ldrh	r2, [r7, #10]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d109      	bne.n	80019ca <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019b6:	893b      	ldrh	r3, [r7, #8]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f04f 32ff 	mov.w	r2, #4294967295
 80019c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80019c8:	e00b      	b.n	80019e2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019ca:	893b      	ldrh	r3, [r7, #8]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	8979      	ldrh	r1, [r7, #10]
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_I2C_Mem_Read_IT+0x108>)
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2300      	movs	r3, #0
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f001 fd42 	bl	8003478 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019fc:	2101      	movs	r1, #1
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f001 fd6c 	bl	80034dc <I2C_Enable_IRQ>

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	ffff0000 	.word	0xffff0000
 8001a18:	08001b11 	.word	0x08001b11
 8001a1c:	80002000 	.word	0x80002000

08001a20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001b1c:	4b87      	ldr	r3, [pc, #540]	@ (8001d3c <I2C_Mem_ISR_IT+0x22c>)
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <I2C_Mem_ISR_IT+0x22>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e12d      	b.n	8001d8e <I2C_Mem_ISR_IT+0x27e>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2210      	movs	r2, #16
 8001b54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f043 0204 	orr.w	r2, r3, #4
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f001 fa83 	bl	800306e <I2C_Flush_TXDR>
 8001b68:	e0fe      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d022      	beq.n	8001bba <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01d      	beq.n	8001bba <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bb8:	e0d6      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02c      	beq.n	8001c1e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d027      	beq.n	8001c1e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd6:	d118      	bne.n	8001c0a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001c08:	e0ae      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001c1c:	e0a4      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d04a      	beq.n	8001cbe <I2C_Mem_ISR_IT+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d045      	beq.n	8001cbe <I2C_Mem_ISR_IT+0x1ae>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d03a      	beq.n	8001cb2 <I2C_Mem_ISR_IT+0x1a2>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d136      	bne.n	8001cb2 <I2C_Mem_ISR_IT+0x1a2>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2bff      	cmp	r3, #255	@ 0xff
 8001c4c:	d91e      	bls.n	8001c8c <I2C_Mem_ISR_IT+0x17c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d103      	bne.n	8001c6a <I2C_Mem_ISR_IT+0x15a>
        {
          hi2c->XferSize = 1U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001c68:	e002      	b.n	8001c70 <I2C_Mem_ISR_IT+0x160>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	22ff      	movs	r2, #255	@ 0xff
 8001c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	b299      	uxth	r1, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f001 fbf7 	bl	8003478 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c8a:	e017      	b.n	8001cbc <I2C_Mem_ISR_IT+0x1ac>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f001 fbe4 	bl	8003478 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb0:	e004      	b.n	8001cbc <I2C_Mem_ISR_IT+0x1ac>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001cb2:	2140      	movs	r1, #64	@ 0x40
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f001 f8c3 	bl	8002e40 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cba:	e055      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
 8001cbc:	e054      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d04f      	beq.n	8001d68 <I2C_Mem_ISR_IT+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d04a      	beq.n	8001d68 <I2C_Mem_ISR_IT+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f001 fc85 	bl	80035e4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001cda:	2102      	movs	r1, #2
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f001 fbfd 	bl	80034dc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b22      	cmp	r3, #34	@ 0x22
 8001cec:	d101      	bne.n	8001cf2 <I2C_Mem_ISR_IT+0x1e2>
    {
      direction = I2C_GENERATE_START_READ;
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <I2C_Mem_ISR_IT+0x230>)
 8001cf0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2bff      	cmp	r3, #255	@ 0xff
 8001cfa:	d923      	bls.n	8001d44 <I2C_Mem_ISR_IT+0x234>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d103      	bne.n	8001d18 <I2C_Mem_ISR_IT+0x208>
      {
        hi2c->XferSize = 1U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001d16:	e002      	b.n	8001d1e <I2C_Mem_ISR_IT+0x20e>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	22ff      	movs	r2, #255	@ 0xff
 8001d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	b299      	uxth	r1, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f001 fba0 	bl	8003478 <I2C_TransferConfig>
 8001d38:	e016      	b.n	8001d68 <I2C_Mem_ISR_IT+0x258>
 8001d3a:	bf00      	nop
 8001d3c:	80002000 	.word	0x80002000
 8001d40:	80002400 	.word	0x80002400
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	b299      	uxth	r1, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f001 fb88 	bl	8003478 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <I2C_Mem_ISR_IT+0x274>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <I2C_Mem_ISR_IT+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fdde 	bl	8002940 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop

08001d98 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <I2C_Slave_ISR_IT+0x24>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0e2      	b.n	8001f82 <I2C_Slave_ISR_IT+0x1ea>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fe78 	bl	8002ad0 <I2C_ITSlaveCplt>
 8001de0:	e0ca      	b.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d04b      	beq.n	8001e84 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d046      	beq.n	8001e84 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d128      	bne.n	8001e52 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b28      	cmp	r3, #40	@ 0x28
 8001e0a:	d108      	bne.n	8001e1e <I2C_Slave_ISR_IT+0x86>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e12:	d104      	bne.n	8001e1e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 ffbe 	bl	8002d98 <I2C_ITListenCplt>
 8001e1c:	e031      	b.n	8001e82 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b29      	cmp	r3, #41	@ 0x29
 8001e28:	d10e      	bne.n	8001e48 <I2C_Slave_ISR_IT+0xb0>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e30:	d00a      	beq.n	8001e48 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2210      	movs	r2, #16
 8001e38:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f001 f917 	bl	800306e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fd20 	bl	8002886 <I2C_ITSlaveSeqCplt>
 8001e46:	e01c      	b.n	8001e82 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e50:	e08f      	b.n	8001f72 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f043 0204 	orr.w	r2, r3, #4
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <I2C_Slave_ISR_IT+0xdc>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e72:	d17e      	bne.n	8001f72 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e78:	4619      	mov	r1, r3
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 ffe0 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e80:	e077      	b.n	8001f72 <I2C_Slave_ISR_IT+0x1da>
 8001e82:	e076      	b.n	8001f72 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d02f      	beq.n	8001eee <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d02a      	beq.n	8001eee <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d018      	beq.n	8001ed4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d14b      	bne.n	8001f76 <I2C_Slave_ISR_IT+0x1de>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ee4:	d047      	beq.n	8001f76 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fccd 	bl	8002886 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001eec:	e043      	b.n	8001f76 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fbfd 	bl	8002704 <I2C_ITAddrCplt>
 8001f0a:	e035      	b.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d030      	beq.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02b      	beq.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d018      	beq.n	8001f5c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001f5a:	e00d      	b.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f62:	d002      	beq.n	8001f6a <I2C_Slave_ISR_IT+0x1d2>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fc8b 	bl	8002886 <I2C_ITSlaveSeqCplt>
 8001f70:	e002      	b.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001f76:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b088      	sub	sp, #32
 8001f8e:	af02      	add	r7, sp, #8
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <I2C_Master_ISR_DMA+0x1a>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0e7      	b.n	8002174 <I2C_Master_ISR_DMA+0x1ea>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d011      	beq.n	8001fe4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f001 fa80 	bl	80034dc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f001 f846 	bl	800306e <I2C_Flush_TXDR>
 8001fe2:	e0c2      	b.n	800216a <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d07f      	beq.n	80020ee <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d07a      	beq.n	80020ee <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002006:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d05c      	beq.n	80020cc <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	b29b      	uxth	r3, r3
 800201a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2bff      	cmp	r3, #255	@ 0xff
 8002028:	d914      	bls.n	8002054 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d103      	bne.n	8002046 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002044:	e002      	b.n	800204c <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	22ff      	movs	r2, #255	@ 0xff
 800204a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800204c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e010      	b.n	8002076 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002066:	d003      	beq.n	8002070 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e002      	b.n	8002076 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002074:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	8a79      	ldrh	r1, [r7, #18]
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f001 f9f7 	bl	8003478 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b22      	cmp	r3, #34	@ 0x22
 80020a6:	d108      	bne.n	80020ba <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020b8:	e057      	b.n	800216a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020ca:	e04e      	b.n	800216a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020da:	d003      	beq.n	80020e4 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 fb95 	bl	800280c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80020e2:	e042      	b.n	800216a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020e4:	2140      	movs	r1, #64	@ 0x40
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 feaa 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80020ec:	e03d      	b.n	800216a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d028      	beq.n	800214a <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d023      	beq.n	800214a <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d119      	bne.n	8002140 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800211a:	d025      	beq.n	8002168 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002124:	d108      	bne.n	8002138 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002134:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002136:	e017      	b.n	8002168 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fb67 	bl	800280c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800213e:	e013      	b.n	8002168 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002140:	2140      	movs	r1, #64	@ 0x40
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fe7c 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002148:	e00e      	b.n	8002168 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fbed 	bl	8002940 <I2C_ITMasterCplt>
 8002166:	e000      	b.n	800216a <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8002168:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002188:	4b90      	ldr	r3, [pc, #576]	@ (80023cc <I2C_Mem_ISR_DMA+0x250>)
 800218a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <I2C_Mem_ISR_DMA+0x1e>
 8002196:	2302      	movs	r3, #2
 8002198:	e12f      	b.n	80023fa <I2C_Mem_ISR_DMA+0x27e>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d016      	beq.n	80021da <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d011      	beq.n	80021da <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2210      	movs	r2, #16
 80021bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80021ca:	2120      	movs	r1, #32
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f001 f985 	bl	80034dc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 ff4b 	bl	800306e <I2C_Flush_TXDR>
 80021d8:	e10a      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f04f 32ff 	mov.w	r2, #4294967295
 80021fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002200:	e0f6      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	d06d      	beq.n	80022e8 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002212:	2b00      	cmp	r3, #0
 8002214:	d068      	beq.n	80022e8 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002216:	2101      	movs	r1, #1
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f001 f9e3 	bl	80035e4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800221e:	2110      	movs	r1, #16
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f001 f95b 	bl	80034dc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d056      	beq.n	80022de <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2bff      	cmp	r3, #255	@ 0xff
 8002238:	d91e      	bls.n	8002278 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d103      	bne.n	8002256 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002254:	e002      	b.n	800225c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	22ff      	movs	r2, #255	@ 0xff
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	b299      	uxth	r1, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002266:	b2da      	uxtb	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f001 f901 	bl	8003478 <I2C_TransferConfig>
 8002276:	e011      	b.n	800229c <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	b299      	uxth	r1, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	b2da      	uxtb	r2, r3
 800228e:	2300      	movs	r3, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f001 f8ee 	bl	8003478 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b22      	cmp	r3, #34	@ 0x22
 80022b8:	d108      	bne.n	80022cc <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022ca:	e091      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022dc:	e088      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022de:	2140      	movs	r1, #64	@ 0x40
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fdad 	bl	8002e40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80022e6:	e083      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d070      	beq.n	80023d4 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d06b      	beq.n	80023d4 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022fc:	2101      	movs	r1, #1
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f001 f970 	bl	80035e4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002304:	2110      	movs	r1, #16
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f001 f8e8 	bl	80034dc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b22      	cmp	r3, #34	@ 0x22
 8002316:	d101      	bne.n	800231c <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <I2C_Mem_ISR_DMA+0x254>)
 800231a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d91e      	bls.n	8002364 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d103      	bne.n	8002342 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002340:	e002      	b.n	8002348 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	22ff      	movs	r2, #255	@ 0xff
 8002346:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	b299      	uxth	r1, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	b2da      	uxtb	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 f88b 	bl	8003478 <I2C_TransferConfig>
 8002362:	e011      	b.n	8002388 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	b299      	uxth	r1, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f001 f878 	bl	8003478 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b22      	cmp	r3, #34	@ 0x22
 80023a4:	d108      	bne.n	80023b8 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023b4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b6:	e01b      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023c6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023c8:	e012      	b.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
 80023ca:	bf00      	nop
 80023cc:	80002000 	.word	0x80002000
 80023d0:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 faa8 	bl	8002940 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop

08002404 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <I2C_Slave_ISR_DMA+0x24>
 8002424:	2302      	movs	r3, #2
 8002426:	e0c0      	b.n	80025aa <I2C_Slave_ISR_DMA+0x1a6>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fb42 	bl	8002ad0 <I2C_ITSlaveCplt>
 800244c:	e0a8      	b.n	80025a0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8095 	beq.w	8002584 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 808f 	beq.w	8002584 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d07d      	beq.n	8002576 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002498:	2301      	movs	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d128      	bne.n	8002516 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b28      	cmp	r3, #40	@ 0x28
 80024ce:	d108      	bne.n	80024e2 <I2C_Slave_ISR_DMA+0xde>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024d6:	d104      	bne.n	80024e2 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fc5c 	bl	8002d98 <I2C_ITListenCplt>
 80024e0:	e048      	b.n	8002574 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b29      	cmp	r3, #41	@ 0x29
 80024ec:	d10e      	bne.n	800250c <I2C_Slave_ISR_DMA+0x108>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024f4:	d00a      	beq.n	800250c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2210      	movs	r2, #16
 80024fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fdb5 	bl	800306e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f9be 	bl	8002886 <I2C_ITSlaveSeqCplt>
 800250a:	e033      	b.n	8002574 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2210      	movs	r2, #16
 8002512:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002514:	e034      	b.n	8002580 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2210      	movs	r2, #16
 800251c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f043 0204 	orr.w	r2, r3, #4
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002530:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <I2C_Slave_ISR_DMA+0x13c>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800253e:	d11f      	bne.n	8002580 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	2b21      	cmp	r3, #33	@ 0x21
 8002544:	d002      	beq.n	800254c <I2C_Slave_ISR_DMA+0x148>
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b29      	cmp	r3, #41	@ 0x29
 800254a:	d103      	bne.n	8002554 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2221      	movs	r2, #33	@ 0x21
 8002550:	631a      	str	r2, [r3, #48]	@ 0x30
 8002552:	e008      	b.n	8002566 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b22      	cmp	r3, #34	@ 0x22
 8002558:	d002      	beq.n	8002560 <I2C_Slave_ISR_DMA+0x15c>
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b2a      	cmp	r3, #42	@ 0x2a
 800255e:	d102      	bne.n	8002566 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2222      	movs	r2, #34	@ 0x22
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4619      	mov	r1, r3
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fc67 	bl	8002e40 <I2C_ITError>
      if (treatdmanack == 1U)
 8002572:	e005      	b.n	8002580 <I2C_Slave_ISR_DMA+0x17c>
 8002574:	e004      	b.n	8002580 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2210      	movs	r2, #16
 800257c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800257e:	e00f      	b.n	80025a0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002580:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002582:	e00d      	b.n	80025a0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f8b2 	bl	8002704 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	817b      	strh	r3, [r7, #10]
 80025c6:	460b      	mov	r3, r1
 80025c8:	813b      	strh	r3, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	8979      	ldrh	r1, [r7, #10]
 80025d4:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <I2C_RequestMemoryWrite+0xa4>)
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 ff4b 	bl	8003478 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fddc 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e02c      	b.n	8002650 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fc:	893b      	ldrh	r3, [r7, #8]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28
 8002606:	e015      	b.n	8002634 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002608:	893b      	ldrh	r3, [r7, #8]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	b29b      	uxth	r3, r3
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	69b9      	ldr	r1, [r7, #24]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fdc2 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e012      	b.n	8002650 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2200      	movs	r2, #0
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fd57 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	80002000 	.word	0x80002000

0800265c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4603      	mov	r3, r0
 800266c:	817b      	strh	r3, [r7, #10]
 800266e:	460b      	mov	r3, r1
 8002670:	813b      	strh	r3, [r7, #8]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	8979      	ldrh	r1, [r7, #10]
 800267c:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <I2C_RequestMemoryRead+0xa4>)
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2300      	movs	r3, #0
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fef8 	bl	8003478 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fd89 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02c      	b.n	80026f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026a2:	893b      	ldrh	r3, [r7, #8]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80026ac:	e015      	b.n	80026da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026ae:	893b      	ldrh	r3, [r7, #8]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fd6f 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e012      	b.n	80026f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026d0:	893b      	ldrh	r3, [r7, #8]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2140      	movs	r1, #64	@ 0x40
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fd04 	bl	80030f2 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	80002000 	.word	0x80002000

08002704 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800271a:	2b28      	cmp	r3, #40	@ 0x28
 800271c:	d16a      	bne.n	80027f4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b29b      	uxth	r3, r3
 8002738:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800273c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002758:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d138      	bne.n	80027d4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	09db      	lsrs	r3, r3, #7
 8002766:	b29a      	uxth	r2, r3
 8002768:	89bb      	ldrh	r3, [r7, #12]
 800276a:	4053      	eors	r3, r2
 800276c:	b29b      	uxth	r3, r3
 800276e:	f003 0306 	and.w	r3, r3, #6
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11c      	bne.n	80027b0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	2b02      	cmp	r3, #2
 800278a:	d13b      	bne.n	8002804 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2208      	movs	r2, #8
 8002798:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027a2:	89ba      	ldrh	r2, [r7, #12]
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff f97b 	bl	8001aa4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027ae:	e029      	b.n	8002804 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80027b0:	893b      	ldrh	r3, [r7, #8]
 80027b2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 ff13 	bl	80035e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027c6:	89ba      	ldrh	r2, [r7, #12]
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff f969 	bl	8001aa4 <HAL_I2C_AddrCallback>
}
 80027d2:	e017      	b.n	8002804 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 ff03 	bl	80035e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027e6:	89ba      	ldrh	r2, [r7, #12]
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff f959 	bl	8001aa4 <HAL_I2C_AddrCallback>
}
 80027f2:	e007      	b.n	8002804 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2208      	movs	r2, #8
 80027fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b21      	cmp	r3, #33	@ 0x21
 8002826:	d115      	bne.n	8002854 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2211      	movs	r2, #17
 8002834:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800283c:	2101      	movs	r1, #1
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fed0 	bl	80035e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff f901 	bl	8001a54 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002852:	e014      	b.n	800287e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2212      	movs	r2, #18
 8002860:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002868:	2102      	movs	r1, #2
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 feba 	bl	80035e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff f8f5 	bl	8001a68 <HAL_I2C_MasterRxCpltCallback>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e00c      	b.n	80028d4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b29      	cmp	r3, #41	@ 0x29
 80028de:	d112      	bne.n	8002906 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2228      	movs	r2, #40	@ 0x28
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2221      	movs	r2, #33	@ 0x21
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028ee:	2101      	movs	r1, #1
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fe77 	bl	80035e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff f8bc 	bl	8001a7c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002904:	e017      	b.n	8002936 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002910:	d111      	bne.n	8002936 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2228      	movs	r2, #40	@ 0x28
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2222      	movs	r2, #34	@ 0x22
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002920:	2102      	movs	r1, #2
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fe5e 	bl	80035e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff f8ad 	bl	8001a90 <HAL_I2C_SlaveRxCpltCallback>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2220      	movs	r2, #32
 8002954:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b21      	cmp	r3, #33	@ 0x21
 8002960:	d107      	bne.n	8002972 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002962:	2101      	movs	r1, #1
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fe3d 	bl	80035e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2211      	movs	r2, #17
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002970:	e00c      	b.n	800298c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b22      	cmp	r3, #34	@ 0x22
 800297c:	d106      	bne.n	800298c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800297e:	2102      	movs	r1, #2
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fe2f 	bl	80035e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2212      	movs	r2, #18
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac8 <I2C_ITMasterCplt+0x188>)
 8002998:	400b      	ands	r3, r1
 800299a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a49      	ldr	r2, [pc, #292]	@ (8002acc <I2C_ITMasterCplt+0x18c>)
 80029a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b60      	cmp	r3, #96	@ 0x60
 80029d0:	d10a      	bne.n	80029e8 <I2C_ITMasterCplt+0xa8>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80029e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb40 	bl	800306e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b60      	cmp	r3, #96	@ 0x60
 80029fe:	d002      	beq.n	8002a06 <I2C_ITMasterCplt+0xc6>
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa17 	bl	8002e40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a12:	e054      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b21      	cmp	r3, #33	@ 0x21
 8002a1e:	d124      	bne.n	8002a6a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d10b      	bne.n	8002a52 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff f842 	bl	8001ad4 <HAL_I2C_MemTxCpltCallback>
}
 8002a50:	e035      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fff6 	bl	8001a54 <HAL_I2C_MasterTxCpltCallback>
}
 8002a68:	e029      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b22      	cmp	r3, #34	@ 0x22
 8002a74:	d123      	bne.n	8002abe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b40      	cmp	r3, #64	@ 0x40
 8002a8e:	d10b      	bne.n	8002aa8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fd fdf3 	bl	800068c <HAL_I2C_MemRxCpltCallback>
}
 8002aa6:	e00a      	b.n	8002abe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fe ffd5 	bl	8001a68 <HAL_I2C_MasterRxCpltCallback>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	fe00e800 	.word	0xfe00e800
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2220      	movs	r2, #32
 8002afa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b21      	cmp	r3, #33	@ 0x21
 8002b00:	d002      	beq.n	8002b08 <I2C_ITSlaveCplt+0x38>
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	2b29      	cmp	r3, #41	@ 0x29
 8002b06:	d108      	bne.n	8002b1a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b08:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fd69 	bl	80035e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2221      	movs	r2, #33	@ 0x21
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b18:	e019      	b.n	8002b4e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	2b22      	cmp	r3, #34	@ 0x22
 8002b1e:	d002      	beq.n	8002b26 <I2C_ITSlaveCplt+0x56>
 8002b20:	7afb      	ldrb	r3, [r7, #11]
 8002b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b24:	d108      	bne.n	8002b38 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b26:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fd5a 	bl	80035e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2222      	movs	r2, #34	@ 0x22
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b36:	e00a      	b.n	8002b4e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	2b28      	cmp	r3, #40	@ 0x28
 8002b3c:	d107      	bne.n	8002b4e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002b3e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fd4e 	bl	80035e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b89      	ldr	r3, [pc, #548]	@ (8002d90 <I2C_ITSlaveCplt+0x2c0>)
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa7d 	bl	800306e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01f      	beq.n	8002bd6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ba4:	e017      	b.n	8002bd6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d049      	beq.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d044      	beq.n	8002cd6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d128      	bne.n	8002ca8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b28      	cmp	r3, #40	@ 0x28
 8002c60:	d108      	bne.n	8002c74 <I2C_ITSlaveCplt+0x1a4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c68:	d104      	bne.n	8002c74 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f893 	bl	8002d98 <I2C_ITListenCplt>
 8002c72:	e030      	b.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b29      	cmp	r3, #41	@ 0x29
 8002c7e:	d10e      	bne.n	8002c9e <I2C_ITSlaveCplt+0x1ce>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c86:	d00a      	beq.n	8002c9e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9ec 	bl	800306e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fdf5 	bl	8002886 <I2C_ITSlaveSeqCplt>
 8002c9c:	e01b      	b.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	61da      	str	r2, [r3, #28]
 8002ca6:	e016      	b.n	8002cd6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <I2C_ITSlaveCplt+0x1fa>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc8:	d105      	bne.n	8002cd6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8b5 	bl	8002e40 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8a4 	bl	8002e40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b28      	cmp	r3, #40	@ 0x28
 8002d02:	d141      	bne.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d04:	6979      	ldr	r1, [r7, #20]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f846 	bl	8002d98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d0c:	e03c      	b.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d16:	d014      	beq.n	8002d42 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fdb4 	bl	8002886 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <I2C_ITSlaveCplt+0x2c4>)
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe fec0 	bl	8001ac0 <HAL_I2C_ListenCpltCallback>
}
 8002d40:	e022      	b.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b22      	cmp	r3, #34	@ 0x22
 8002d4c:	d10e      	bne.n	8002d6c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe fe93 	bl	8001a90 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d6a:	e00d      	b.n	8002d88 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fe7a 	bl	8001a7c <HAL_I2C_SlaveTxCpltCallback>
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fe00e800 	.word	0xfe00e800
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <I2C_ITListenCplt+0xa4>)
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d022      	beq.n	8002e14 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0c:	f043 0204 	orr.w	r2, r3, #4
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e14:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fbe3 	bl	80035e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fe46 	bl	8001ac0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a6d      	ldr	r2, [pc, #436]	@ (8003014 <I2C_ITError+0x1d4>)
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b28      	cmp	r3, #40	@ 0x28
 8002e76:	d005      	beq.n	8002e84 <I2C_ITError+0x44>
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b29      	cmp	r3, #41	@ 0x29
 8002e7c:	d002      	beq.n	8002e84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e82:	d10b      	bne.n	8002e9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e84:	2103      	movs	r1, #3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fbac 	bl	80035e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2228      	movs	r2, #40	@ 0x28
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a60      	ldr	r2, [pc, #384]	@ (8003018 <I2C_ITError+0x1d8>)
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9a:	e030      	b.n	8002efe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fb9f 	bl	80035e4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8e1 	bl	800306e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b60      	cmp	r3, #96	@ 0x60
 8002eb6:	d01f      	beq.n	8002ef8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d114      	bne.n	8002ef8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d109      	bne.n	8002ef0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d039      	beq.n	8002f80 <I2C_ITError+0x140>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b11      	cmp	r3, #17
 8002f10:	d002      	beq.n	8002f18 <I2C_ITError+0xd8>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b21      	cmp	r3, #33	@ 0x21
 8002f16:	d133      	bne.n	8002f80 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f26:	d107      	bne.n	8002f38 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f858 	bl	8000ff2 <HAL_DMA_GetState>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d017      	beq.n	8002f78 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	4a33      	ldr	r2, [pc, #204]	@ (800301c <I2C_ITError+0x1dc>)
 8002f4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe f80a 	bl	8000f76 <HAL_DMA_Abort_IT>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d04d      	beq.n	8003004 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f72:	4610      	mov	r0, r2
 8002f74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f76:	e045      	b.n	8003004 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f851 	bl	8003020 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f7e:	e041      	b.n	8003004 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d039      	beq.n	8002ffc <I2C_ITError+0x1bc>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d002      	beq.n	8002f94 <I2C_ITError+0x154>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b22      	cmp	r3, #34	@ 0x22
 8002f92:	d133      	bne.n	8002ffc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa2:	d107      	bne.n	8002fb4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f81a 	bl	8000ff2 <HAL_DMA_GetState>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d017      	beq.n	8002ff4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <I2C_ITError+0x1dc>)
 8002fca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd ffcc 	bl	8000f76 <HAL_DMA_Abort_IT>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff2:	e009      	b.n	8003008 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f813 	bl	8003020 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ffa:	e005      	b.n	8003008 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f80f 	bl	8003020 <I2C_TreatErrorCallback>
  }
}
 8003002:	e002      	b.n	800300a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003008:	bf00      	nop
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	ffff0000 	.word	0xffff0000
 8003018:	08001d99 	.word	0x08001d99
 800301c:	080030b7 	.word	0x080030b7

08003020 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b60      	cmp	r3, #96	@ 0x60
 8003032:	d10e      	bne.n	8003052 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fd56 	bl	8001afc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003050:	e009      	b.n	8003066 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fe fd41 	bl	8001ae8 <HAL_I2C_ErrorCallback>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d103      	bne.n	800308c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d007      	beq.n	80030aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	619a      	str	r2, [r3, #24]
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e0:	2200      	movs	r2, #0
 80030e2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff ff9b 	bl	8003020 <I2C_TreatErrorCallback>
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003102:	e03b      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f8d5 	bl	80032b8 <I2C_IsErrorOccurred>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e041      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d02d      	beq.n	800317c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003120:	f7fd fde8 	bl	8000cf4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d122      	bne.n	800317c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	429a      	cmp	r2, r3
 8003152:	d113      	bne.n	800317c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00f      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d0b4      	beq.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b0:	e033      	b.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f87e 	bl	80032b8 <I2C_IsErrorOccurred>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e031      	b.n	800322a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d025      	beq.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fd fd91 	bl	8000cf4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11a      	bne.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d013      	beq.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e007      	b.n	800322a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d1c4      	bne.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323e:	e02f      	b.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f837 	bl	80032b8 <I2C_IsErrorOccurred>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e02d      	b.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fd fd4e 	bl	8000cf4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11a      	bne.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b20      	cmp	r3, #32
 8003276:	d013      	beq.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d1c8      	bne.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	@ 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d068      	beq.n	80033b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2210      	movs	r2, #16
 80032ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032ec:	e049      	b.n	8003382 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d045      	beq.n	8003382 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fd fcfd 	bl	8000cf4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_IsErrorOccurred+0x54>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d13a      	bne.n	8003382 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003316:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800331e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800332e:	d121      	bne.n	8003374 <I2C_IsErrorOccurred+0xbc>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003336:	d01d      	beq.n	8003374 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b20      	cmp	r3, #32
 800333c:	d01a      	beq.n	8003374 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800334c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800334e:	f7fd fcd1 	bl	8000cf4 <HAL_GetTick>
 8003352:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003354:	e00e      	b.n	8003374 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003356:	f7fd fccd 	bl	8000cf4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b19      	cmp	r3, #25
 8003362:	d907      	bls.n	8003374 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003372:	e006      	b.n	8003382 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b20      	cmp	r3, #32
 8003380:	d1e9      	bne.n	8003356 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d003      	beq.n	8003398 <I2C_IsErrorOccurred+0xe0>
 8003390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0aa      	beq.n	80032ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2220      	movs	r2, #32
 80033a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	f043 0304 	orr.w	r3, r3, #4
 80033ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01c      	beq.n	8003466 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff fe1e 	bl	800306e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <I2C_IsErrorOccurred+0x1bc>)
 800343e:	400b      	ands	r3, r1
 8003440:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003466:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800346a:	4618      	mov	r0, r3
 800346c:	3728      	adds	r7, #40	@ 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	fe00e800 	.word	0xfe00e800

08003478 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	4613      	mov	r3, r2
 8003488:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003490:	7a7b      	ldrb	r3, [r7, #9]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003498:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	0d5b      	lsrs	r3, r3, #21
 80034b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <I2C_TransferConfig+0x60>)
 80034b8:	430b      	orrs	r3, r1
 80034ba:	43db      	mvns	r3, r3
 80034bc:	ea02 0103 	and.w	r1, r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	03ff63ff 	.word	0x03ff63ff

080034dc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f0:	4a39      	ldr	r2, [pc, #228]	@ (80035d8 <I2C_Enable_IRQ+0xfc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d032      	beq.n	800355c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80034fa:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <I2C_Enable_IRQ+0x100>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d02d      	beq.n	800355c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003504:	4a36      	ldr	r2, [pc, #216]	@ (80035e0 <I2C_Enable_IRQ+0x104>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d028      	beq.n	800355c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800350a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800350e:	2b00      	cmp	r3, #0
 8003510:	da03      	bge.n	800351a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003518:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800352a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800353c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	2b10      	cmp	r3, #16
 8003542:	d103      	bne.n	800354c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800354a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	2b20      	cmp	r3, #32
 8003550:	d133      	bne.n	80035ba <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f043 0320 	orr.w	r3, r3, #32
 8003558:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800355a:	e02e      	b.n	80035ba <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800355c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003560:	2b00      	cmp	r3, #0
 8003562:	da03      	bge.n	800356c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800356a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800357c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800357e:	887b      	ldrh	r3, [r7, #2]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800358e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	2b10      	cmp	r3, #16
 8003594:	d103      	bne.n	800359e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800359c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d103      	bne.n	80035ac <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80035aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	d103      	bne.n	80035ba <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	08001f8b 	.word	0x08001f8b
 80035dc:	08002405 	.word	0x08002405
 80035e0:	0800217d 	.word	0x0800217d

080035e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00f      	beq.n	800361e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003604:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003612:	2b28      	cmp	r3, #40	@ 0x28
 8003614:	d003      	beq.n	800361e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800361c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00f      	beq.n	8003648 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800362e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800363c:	2b28      	cmp	r3, #40	@ 0x28
 800363e:	d003      	beq.n	8003648 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003646:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003648:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da03      	bge.n	8003658 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003656:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d103      	bne.n	8003666 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003664:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	2b20      	cmp	r3, #32
 800366a:	d103      	bne.n	8003674 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	2b40      	cmp	r3, #64	@ 0x40
 8003678:	d103      	bne.n	8003682 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003680:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	43da      	mvns	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	400a      	ands	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d138      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e032      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	d139      	bne.n	80037c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003756:	2302      	movs	r3, #2
 8003758:	e033      	b.n	80037c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2224      	movs	r2, #36	@ 0x24
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003788:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f001 b83a 	b.w	800486a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 816f 	beq.w	8003aea <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800380c:	4bb5      	ldr	r3, [pc, #724]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b04      	cmp	r3, #4
 8003816:	d00c      	beq.n	8003832 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003818:	4bb2      	ldr	r3, [pc, #712]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d15c      	bne.n	80038de <HAL_RCC_OscConfig+0x10e>
 8003824:	4baf      	ldr	r3, [pc, #700]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003830:	d155      	bne.n	80038de <HAL_RCC_OscConfig+0x10e>
 8003832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003836:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003846:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HAL_RCC_OscConfig+0x94>
 800385e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	e015      	b.n	8003890 <HAL_RCC_OscConfig+0xc0>
 8003864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003868:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800387c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003880:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800388c:	4b95      	ldr	r3, [pc, #596]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003894:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003898:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800389c:	fa92 f2a2 	rbit	r2, r2
 80038a0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80038a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f042 0220 	orr.w	r2, r2, #32
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f002 021f 	and.w	r2, r2, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8111 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x318>
 80038c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 8108 	bne.w	8003ae8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f000 bfc6 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x12e>
 80038f0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e036      	b.n	800396c <HAL_RCC_OscConfig+0x19c>
 80038fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003902:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x158>
 800390e:	4b75      	ldr	r3, [pc, #468]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a74      	ldr	r2, [pc, #464]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b72      	ldr	r3, [pc, #456]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a71      	ldr	r2, [pc, #452]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e021      	b.n	800396c <HAL_RCC_OscConfig+0x19c>
 8003928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800392c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x184>
 800393a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a69      	ldr	r2, [pc, #420]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b67      	ldr	r3, [pc, #412]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a66      	ldr	r2, [pc, #408]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x19c>
 8003954:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a62      	ldr	r2, [pc, #392]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b60      	ldr	r3, [pc, #384]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5f      	ldr	r2, [pc, #380]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003970:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d059      	beq.n	8003a30 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fd f9ba 	bl	8000cf4 <HAL_GetTick>
 8003980:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003986:	f7fd f9b5 	bl	8000cf4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	@ 0x64
 8003994:	d902      	bls.n	800399c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	f000 bf67 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
 800399c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039a0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80039b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d102      	bne.n	80039ce <HAL_RCC_OscConfig+0x1fe>
 80039c8:	4b46      	ldr	r3, [pc, #280]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	e015      	b.n	80039fa <HAL_RCC_OscConfig+0x22a>
 80039ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039d2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80039e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039e6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039fe:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003a02:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a06:	fa92 f2a2 	rbit	r2, r2
 8003a0a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003a0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a12:	fab2 f282 	clz	r2, r2
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f042 0220 	orr.w	r2, r2, #32
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	f002 021f 	and.w	r2, r2, #31
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ab      	beq.n	8003986 <HAL_RCC_OscConfig+0x1b6>
 8003a2e:	e05c      	b.n	8003aea <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd f960 	bl	8000cf4 <HAL_GetTick>
 8003a34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3a:	f7fd f95b 	bl	8000cf4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	@ 0x64
 8003a48:	d902      	bls.n	8003a50 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	f000 bf0d 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
 8003a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a54:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003a64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2b2>
 8003a7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e015      	b.n	8003aae <HAL_RCC_OscConfig+0x2de>
 8003a82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a86:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003a96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <HAL_RCC_OscConfig+0x314>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ab2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003ab6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003aba:	fa92 f2a2 	rbit	r2, r2
 8003abe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003ac2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003ac6:	fab2 f282 	clz	r2, r2
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	f042 0220 	orr.w	r2, r2, #32
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f002 021f 	and.w	r2, r2, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ab      	bne.n	8003a3a <HAL_RCC_OscConfig+0x26a>
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_OscConfig+0x31a>
 8003ae4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 817f 	beq.w	8003dfe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b00:	4ba7      	ldr	r3, [pc, #668]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b0c:	4ba4      	ldr	r3, [pc, #656]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d173      	bne.n	8003c00 <HAL_RCC_OscConfig+0x430>
 8003b18:	4ba1      	ldr	r3, [pc, #644]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b24:	d16c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x430>
 8003b26:	2302      	movs	r3, #2
 8003b28:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003b38:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_OscConfig+0x386>
 8003b50:	4b93      	ldr	r3, [pc, #588]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	e013      	b.n	8003b7e <HAL_RCC_OscConfig+0x3ae>
 8003b56:	2302      	movs	r3, #2
 8003b58:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b6e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b7a:	4b89      	ldr	r3, [pc, #548]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003b84:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003b88:	fa92 f2a2 	rbit	r2, r2
 8003b8c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003b90:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b94:	fab2 f282 	clz	r2, r2
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f042 0220 	orr.w	r2, r2, #32
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f002 021f 	and.w	r2, r2, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x3f6>
 8003bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d002      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f000 be52 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b76      	ldr	r3, [pc, #472]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	21f8      	movs	r1, #248	@ 0xf8
 8003bdc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003be4:	fa91 f1a1 	rbit	r1, r1
 8003be8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003bec:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003bf0:	fab1 f181 	clz	r1, r1
 8003bf4:	b2c9      	uxtb	r1, r1
 8003bf6:	408b      	lsls	r3, r1
 8003bf8:	4969      	ldr	r1, [pc, #420]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e0fe      	b.n	8003dfe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8088 	beq.w	8003d22 <HAL_RCC_OscConfig+0x552>
 8003c12:	2301      	movs	r3, #1
 8003c14:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003c24:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c32:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fd f859 	bl	8000cf4 <HAL_GetTick>
 8003c42:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fd f854 	bl	8000cf4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d902      	bls.n	8003c5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f000 be06 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003c70:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_OscConfig+0x4be>
 8003c88:	4b45      	ldr	r3, [pc, #276]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	e013      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e6>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003ca6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003cbc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003cc0:	fa92 f2a2 	rbit	r2, r2
 8003cc4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003cc8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003ccc:	fab2 f282 	clz	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f042 0220 	orr.w	r2, r2, #32
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f002 021f 	and.w	r2, r2, #31
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0af      	beq.n	8003c48 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	21f8      	movs	r1, #248	@ 0xf8
 8003cfe:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003d06:	fa91 f1a1 	rbit	r1, r1
 8003d0a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003d0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003d12:	fab1 f181 	clz	r1, r1
 8003d16:	b2c9      	uxtb	r1, r1
 8003d18:	408b      	lsls	r3, r1
 8003d1a:	4921      	ldr	r1, [pc, #132]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e06d      	b.n	8003dfe <HAL_RCC_OscConfig+0x62e>
 8003d22:	2301      	movs	r3, #1
 8003d24:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003d34:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d42:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fc ffd1 	bl	8000cf4 <HAL_GetTick>
 8003d52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fc ffcc 	bl	8000cf4 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d902      	bls.n	8003d6e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	f000 bd7e 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003d80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5d4>
 8003d98:	4b01      	ldr	r3, [pc, #4]	@ (8003da0 <HAL_RCC_OscConfig+0x5d0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	e016      	b.n	8003dcc <HAL_RCC_OscConfig+0x5fc>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	2302      	movs	r3, #2
 8003da6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003db6:	2302      	movs	r3, #2
 8003db8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003dbc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003dc8:	4bbf      	ldr	r3, [pc, #764]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003dd2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003dd6:	fa92 f2a2 	rbit	r2, r2
 8003dda:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003dde:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003de2:	fab2 f282 	clz	r2, r2
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	f042 0220 	orr.w	r2, r2, #32
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f002 021f 	and.w	r2, r2, #31
 8003df2:	2101      	movs	r1, #1
 8003df4:	fa01 f202 	lsl.w	r2, r1, r2
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ac      	bne.n	8003d58 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8113 	beq.w	800403a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x74e>
 8003e24:	2301      	movs	r3, #1
 8003e26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003e36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	4ba2      	ldr	r3, [pc, #648]	@ (80040cc <HAL_RCC_OscConfig+0x8fc>)
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fc ff51 	bl	8000cf4 <HAL_GetTick>
 8003e52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fc ff4c 	bl	8000cf4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	f000 bcfe 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e8e:	2202      	movs	r2, #2
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ec8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ecc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	4b7e      	ldr	r3, [pc, #504]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8003ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003eda:	2102      	movs	r1, #2
 8003edc:	6019      	str	r1, [r3, #0]
 8003ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ee2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	fa93 f1a3 	rbit	r1, r3
 8003eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ef4:	6019      	str	r1, [r3, #0]
  return result;
 8003ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003efa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d09d      	beq.n	8003e58 <HAL_RCC_OscConfig+0x688>
 8003f1c:	e08d      	b.n	800403a <HAL_RCC_OscConfig+0x86a>
 8003f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa93 f2a3 	rbit	r2, r3
 8003f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f3c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f40:	601a      	str	r2, [r3, #0]
  return result;
 8003f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <HAL_RCC_OscConfig+0x8fc>)
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7fc fec8 	bl	8000cf4 <HAL_GetTick>
 8003f64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fc fec3 	bl	8000cf4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	f000 bc75 	b.w	800486a <HAL_RCC_OscConfig+0x109a>
 8003f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f88:	2202      	movs	r2, #2
 8003f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fa93 f2a3 	rbit	r2, r3
 8003f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fac:	2202      	movs	r2, #2
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fc2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	fa93 f2a3 	rbit	r2, r3
 8003fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fe6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8003fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ff4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	6019      	str	r1, [r3, #0]
 8003ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004000:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f1a3 	rbit	r1, r3
 800400a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800400e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004012:	6019      	str	r1, [r3, #0]
  return result;
 8004014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004018:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2101      	movs	r1, #1
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d197      	bne.n	8003f6a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800403e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 81a5 	beq.w	800439a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004050:	2300      	movs	r3, #0
 8004052:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004056:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d116      	bne.n	8004090 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4a18      	ldr	r2, [pc, #96]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406c:	61d3      	str	r3, [r2, #28]
 800406e:	4b16      	ldr	r3, [pc, #88]	@ (80040c8 <HAL_RCC_OscConfig+0x8f8>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800407a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004088:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	4b0f      	ldr	r3, [pc, #60]	@ (80040d0 <HAL_RCC_OscConfig+0x900>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d121      	bne.n	80040e0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409c:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <HAL_RCC_OscConfig+0x900>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0b      	ldr	r2, [pc, #44]	@ (80040d0 <HAL_RCC_OscConfig+0x900>)
 80040a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a8:	f7fc fe24 	bl	8000cf4 <HAL_GetTick>
 80040ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	e010      	b.n	80040d4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b2:	f7fc fe1f 	bl	8000cf4 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d908      	bls.n	80040d4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e3d1      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	10908120 	.word	0x10908120
 80040d0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b8d      	ldr	r3, [pc, #564]	@ (800430c <HAL_RCC_OscConfig+0xb3c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0e8      	beq.n	80040b2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x92e>
 80040f0:	4b87      	ldr	r3, [pc, #540]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4a86      	ldr	r2, [pc, #536]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6213      	str	r3, [r2, #32]
 80040fc:	e035      	b.n	800416a <HAL_RCC_OscConfig+0x99a>
 80040fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004102:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x958>
 800410e:	4b80      	ldr	r3, [pc, #512]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a7f      	ldr	r2, [pc, #508]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	4b7d      	ldr	r3, [pc, #500]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a7c      	ldr	r2, [pc, #496]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
 8004126:	e020      	b.n	800416a <HAL_RCC_OscConfig+0x99a>
 8004128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800412c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_OscConfig+0x982>
 8004138:	4b75      	ldr	r3, [pc, #468]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a74      	ldr	r2, [pc, #464]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	4b72      	ldr	r3, [pc, #456]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a71      	ldr	r2, [pc, #452]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6213      	str	r3, [r2, #32]
 8004150:	e00b      	b.n	800416a <HAL_RCC_OscConfig+0x99a>
 8004152:	4b6f      	ldr	r3, [pc, #444]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4a6e      	ldr	r2, [pc, #440]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6213      	str	r3, [r2, #32]
 800415e:	4b6c      	ldr	r3, [pc, #432]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a6b      	ldr	r2, [pc, #428]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800416e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8081 	beq.w	800427e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fc fdba 	bl	8000cf4 <HAL_GetTick>
 8004180:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	e00b      	b.n	800419e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fc fdb5 	bl	8000cf4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e365      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
 800419e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041a6:	2202      	movs	r2, #2
 80041a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f2a3 	rbit	r2, r3
 80041b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041ca:	2202      	movs	r2, #2
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	fa93 f2a3 	rbit	r2, r3
 80041dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041e4:	601a      	str	r2, [r3, #0]
  return result;
 80041e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041ea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d102      	bne.n	800420a <HAL_RCC_OscConfig+0xa3a>
 8004204:	4b42      	ldr	r3, [pc, #264]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	e013      	b.n	8004232 <HAL_RCC_OscConfig+0xa62>
 800420a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800420e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800421a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	fa93 f2a3 	rbit	r2, r3
 8004224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004228:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004236:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800423a:	2102      	movs	r1, #2
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004242:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	fa92 f1a2 	rbit	r1, r2
 800424c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004250:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004254:	6011      	str	r1, [r2, #0]
  return result;
 8004256:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800425a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	fab2 f282 	clz	r2, r2
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	f002 021f 	and.w	r2, r2, #31
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f202 	lsl.w	r2, r1, r2
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d084      	beq.n	8004186 <HAL_RCC_OscConfig+0x9b6>
 800427c:	e083      	b.n	8004386 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fc fd39 	bl	8000cf4 <HAL_GetTick>
 8004282:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fc fd34 	bl	8000cf4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e2e4      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
 80042a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042a8:	2202      	movs	r2, #2
 80042aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	fa93 f2a3 	rbit	r2, r3
 80042ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042e6:	601a      	str	r2, [r3, #0]
  return result;
 80042e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d106      	bne.n	8004314 <HAL_RCC_OscConfig+0xb44>
 8004306:	4b02      	ldr	r3, [pc, #8]	@ (8004310 <HAL_RCC_OscConfig+0xb40>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	e017      	b.n	800433c <HAL_RCC_OscConfig+0xb6c>
 800430c:	40007000 	.word	0x40007000
 8004310:	40021000 	.word	0x40021000
 8004314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004318:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800431c:	2202      	movs	r2, #2
 800431e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004324:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	fa93 f2a3 	rbit	r2, r3
 800432e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004332:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	4bb3      	ldr	r3, [pc, #716]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004340:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004344:	2102      	movs	r1, #2
 8004346:	6011      	str	r1, [r2, #0]
 8004348:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800434c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	fa92 f1a2 	rbit	r1, r2
 8004356:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800435a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800435e:	6011      	str	r1, [r2, #0]
  return result;
 8004360:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004364:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	fab2 f282 	clz	r2, r2
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	f002 021f 	and.w	r2, r2, #31
 800437a:	2101      	movs	r1, #1
 800437c:	fa01 f202 	lsl.w	r2, r1, r2
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d180      	bne.n	8004288 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004386:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	4b9e      	ldr	r3, [pc, #632]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4a9d      	ldr	r2, [pc, #628]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004398:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800439a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800439e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 825e 	beq.w	8004868 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ac:	4b96      	ldr	r3, [pc, #600]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	f000 821f 	beq.w	80047f8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 8170 	bne.w	80046ac <HAL_RCC_OscConfig+0xedc>
 80043cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043d0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043de:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	fa93 f2a3 	rbit	r2, r3
 80043e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043f0:	601a      	str	r2, [r3, #0]
  return result;
 80043f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004406:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	2300      	movs	r3, #0
 8004410:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fc fc6f 	bl	8000cf4 <HAL_GetTick>
 8004416:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441a:	e009      	b.n	8004430 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fc fc6a 	bl	8000cf4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e21c      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
 8004430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004434:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800443c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004442:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f2a3 	rbit	r2, r3
 800444c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004450:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004454:	601a      	str	r2, [r3, #0]
  return result;
 8004456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800445a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800445e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_RCC_OscConfig+0xcaa>
 8004474:	4b64      	ldr	r3, [pc, #400]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	e027      	b.n	80044ca <HAL_RCC_OscConfig+0xcfa>
 800447a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800447e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004482:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800448c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800449a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80044a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044b2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	fa93 f2a3 	rbit	r2, r3
 80044bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044c0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	4b50      	ldr	r3, [pc, #320]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044d6:	6011      	str	r1, [r2, #0]
 80044d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044dc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	fa92 f1a2 	rbit	r1, r2
 80044e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044ea:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80044ee:	6011      	str	r1, [r2, #0]
  return result;
 80044f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044f4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f002 021f 	and.w	r2, r2, #31
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d182      	bne.n	800441c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004516:	4b3c      	ldr	r3, [pc, #240]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	f023 020f 	bic.w	r2, r3, #15
 800451e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004522:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	4937      	ldr	r1, [pc, #220]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 800452c:	4313      	orrs	r3, r2
 800452e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004530:	4b35      	ldr	r3, [pc, #212]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8004538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800453c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a19      	ldr	r1, [r3, #32]
 8004544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004548:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	430b      	orrs	r3, r1
 8004552:	492d      	ldr	r1, [pc, #180]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800455c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800456a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	fa93 f2a3 	rbit	r2, r3
 8004574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004578:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800457c:	601a      	str	r2, [r3, #0]
  return result;
 800457e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004582:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004586:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004592:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	461a      	mov	r2, r3
 800459a:	2301      	movs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fc fba9 	bl	8000cf4 <HAL_GetTick>
 80045a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a6:	e009      	b.n	80045bc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fc fba4 	bl	8000cf4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e156      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
 80045bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80045c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	fa93 f2a3 	rbit	r2, r3
 80045d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045dc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045e0:	601a      	str	r2, [r3, #0]
  return result;
 80045e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <HAL_RCC_OscConfig+0xe3c>
 8004600:	4b01      	ldr	r3, [pc, #4]	@ (8004608 <HAL_RCC_OscConfig+0xe38>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	e02a      	b.n	800465c <HAL_RCC_OscConfig+0xe8c>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004610:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004614:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800461e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	fa93 f2a3 	rbit	r2, r3
 8004628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800462c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004636:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800463a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004644:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	fa93 f2a3 	rbit	r2, r3
 800464e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004652:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	4b86      	ldr	r3, [pc, #536]	@ (8004874 <HAL_RCC_OscConfig+0x10a4>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004660:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004664:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800466e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	fa92 f1a2 	rbit	r1, r2
 8004678:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800467c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004680:	6011      	str	r1, [r2, #0]
  return result;
 8004682:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004686:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f042 0220 	orr.w	r2, r2, #32
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	f002 021f 	and.w	r2, r2, #31
 800469c:	2101      	movs	r1, #1
 800469e:	fa01 f202 	lsl.w	r2, r1, r2
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f43f af7f 	beq.w	80045a8 <HAL_RCC_OscConfig+0xdd8>
 80046aa:	e0dd      	b.n	8004868 <HAL_RCC_OscConfig+0x1098>
 80046ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80046b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fa93 f2a3 	rbit	r2, r3
 80046c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046cc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046d0:	601a      	str	r2, [r3, #0]
  return result;
 80046d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046da:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fc faff 	bl	8000cf4 <HAL_GetTick>
 80046f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fa:	e009      	b.n	8004710 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fc fafa 	bl	8000cf4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0ac      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
 8004710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004714:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800471c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004722:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	fa93 f2a3 	rbit	r2, r3
 800472c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004730:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004734:	601a      	str	r2, [r3, #0]
  return result;
 8004736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800473a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800473e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004740:	fab3 f383 	clz	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d102      	bne.n	800475a <HAL_RCC_OscConfig+0xf8a>
 8004754:	4b47      	ldr	r3, [pc, #284]	@ (8004874 <HAL_RCC_OscConfig+0x10a4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	e027      	b.n	80047aa <HAL_RCC_OscConfig+0xfda>
 800475a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800475e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004762:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800476c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fa93 f2a3 	rbit	r2, r3
 8004776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800477a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004784:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004792:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	fa93 f2a3 	rbit	r2, r3
 800479c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	4b33      	ldr	r3, [pc, #204]	@ (8004874 <HAL_RCC_OscConfig+0x10a4>)
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047ae:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80047b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80047b6:	6011      	str	r1, [r2, #0]
 80047b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	fa92 f1a2 	rbit	r1, r2
 80047c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047ca:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80047ce:	6011      	str	r1, [r2, #0]
  return result;
 80047d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047d4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	fab2 f282 	clz	r2, r2
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	f042 0220 	orr.w	r2, r2, #32
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	f002 021f 	and.w	r2, r2, #31
 80047ea:	2101      	movs	r1, #1
 80047ec:	fa01 f202 	lsl.w	r2, r1, r2
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d182      	bne.n	80046fc <HAL_RCC_OscConfig+0xf2c>
 80047f6:	e037      	b.n	8004868 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e02e      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800480c:	4b19      	ldr	r3, [pc, #100]	@ (8004874 <HAL_RCC_OscConfig+0x10a4>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004814:	4b17      	ldr	r3, [pc, #92]	@ (8004874 <HAL_RCC_OscConfig+0x10a4>)
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800481c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004820:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004828:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	429a      	cmp	r2, r3
 8004832:	d117      	bne.n	8004864 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004834:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004838:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800483c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004848:	429a      	cmp	r2, r3
 800484a:	d10b      	bne.n	8004864 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800484c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004858:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b09e      	sub	sp, #120	@ 0x78
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e162      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b90      	ldr	r3, [pc, #576]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d910      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 0207 	bic.w	r2, r3, #7
 80048a6:	498b      	ldr	r1, [pc, #556]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b89      	ldr	r3, [pc, #548]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e14a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b82      	ldr	r3, [pc, #520]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	497f      	ldr	r1, [pc, #508]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80dc 	beq.w	8004aa4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d13c      	bne.n	800496e <HAL_RCC_ClockConfig+0xf6>
 80048f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d102      	bne.n	800491e <HAL_RCC_ClockConfig+0xa6>
 8004918:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	e00f      	b.n	800493e <HAL_RCC_ClockConfig+0xc6>
 800491e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004922:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	667b      	str	r3, [r7, #100]	@ 0x64
 800492c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004930:	663b      	str	r3, [r7, #96]	@ 0x60
 8004932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800493a:	4b67      	ldr	r3, [pc, #412]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004942:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004946:	fa92 f2a2 	rbit	r2, r2
 800494a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800494c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800494e:	fab2 f282 	clz	r2, r2
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	f042 0220 	orr.w	r2, r2, #32
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	f002 021f 	and.w	r2, r2, #31
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d17b      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0f3      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d13c      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x178>
 8004976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800497a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 800499a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	e00f      	b.n	80049c0 <HAL_RCC_ClockConfig+0x148>
 80049a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049bc:	4b46      	ldr	r3, [pc, #280]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80049c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049c8:	fa92 f2a2 	rbit	r2, r2
 80049cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80049ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049d0:	fab2 f282 	clz	r2, r2
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f042 0220 	orr.w	r2, r2, #32
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f002 021f 	and.w	r2, r2, #31
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f202 	lsl.w	r2, r1, r2
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d13a      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0b2      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
 80049f0:	2302      	movs	r3, #2
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80049fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d102      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x1a0>
 8004a12:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	e00d      	b.n	8004a34 <HAL_RCC_ClockConfig+0x1bc>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a24:	2302      	movs	r3, #2
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	2202      	movs	r2, #2
 8004a36:	61ba      	str	r2, [r7, #24]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	fa92 f2a2 	rbit	r2, r2
 8004a3e:	617a      	str	r2, [r7, #20]
  return result;
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	fab2 f282 	clz	r2, r2
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	f042 0220 	orr.w	r2, r2, #32
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	f002 021f 	and.w	r2, r2, #31
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e079      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	491a      	ldr	r1, [pc, #104]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a74:	f7fc f93e 	bl	8000cf4 <HAL_GetTick>
 8004a78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fc f93a 	bl	8000cf4 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e061      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b11      	ldr	r3, [pc, #68]	@ (8004ad8 <HAL_RCC_ClockConfig+0x260>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1eb      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d214      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 0207 	bic.w	r2, r3, #7
 8004aba:	4906      	ldr	r1, [pc, #24]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <HAL_RCC_ClockConfig+0x25c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e040      	b.n	8004b56 <HAL_RCC_ClockConfig+0x2de>
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b60 <HAL_RCC_ClockConfig+0x2e8>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	491a      	ldr	r1, [pc, #104]	@ (8004b60 <HAL_RCC_ClockConfig+0x2e8>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b06:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <HAL_RCC_ClockConfig+0x2e8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4912      	ldr	r1, [pc, #72]	@ (8004b60 <HAL_RCC_ClockConfig+0x2e8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b1a:	f000 f829 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4601      	mov	r1, r0
 8004b20:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <HAL_RCC_ClockConfig+0x2e8>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b28:	22f0      	movs	r2, #240	@ 0xf0
 8004b2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	fa92 f2a2 	rbit	r2, r2
 8004b32:	60fa      	str	r2, [r7, #12]
  return result;
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	fab2 f282 	clz	r2, r2
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	40d3      	lsrs	r3, r2
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_ClockConfig+0x2ec>)
 8004b40:	5cd3      	ldrb	r3, [r2, r3]
 8004b42:	fa21 f303 	lsr.w	r3, r1, r3
 8004b46:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <HAL_RCC_ClockConfig+0x2f0>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b4a:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <HAL_RCC_ClockConfig+0x2f4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc f88c 	bl	8000c6c <HAL_InitTick>
  
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3778      	adds	r7, #120	@ 0x78
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
 8004b64:	08006434 	.word	0x08006434
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	20000004 	.word	0x20000004

08004b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x36>
 8004b9e:	e029      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ba2:	613b      	str	r3, [r7, #16]
      break;
 8004ba4:	e029      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	0c9b      	lsrs	r3, r3, #18
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	4a18      	ldr	r2, [pc, #96]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bb0:	5cd3      	ldrb	r3, [r2, r3]
 8004bb2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004bb4:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e007      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bde:	4a0b      	ldr	r2, [pc, #44]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	fb02 f303 	mul.w	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	613b      	str	r3, [r7, #16]
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bf6:	613b      	str	r3, [r7, #16]
      break;
 8004bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfa:	693b      	ldr	r3, [r7, #16]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	007a1200 	.word	0x007a1200
 8004c10:	0800644c 	.word	0x0800644c
 8004c14:	0800645c 	.word	0x0800645c

08004c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c1c:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000000 	.word	0x20000000

08004c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c36:	f7ff ffef 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004c48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	fa92 f2a2 	rbit	r2, r2
 8004c50:	603a      	str	r2, [r7, #0]
  return result;
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	fab2 f282 	clz	r2, r2
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	40d3      	lsrs	r3, r2
 8004c5c:	4a04      	ldr	r2, [pc, #16]	@ (8004c70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	08006444 	.word	0x08006444

08004c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c7a:	f7ff ffcd 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 8004c7e:	4601      	mov	r1, r0
 8004c80:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004c88:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004c8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	fa92 f2a2 	rbit	r2, r2
 8004c94:	603a      	str	r2, [r7, #0]
  return result;
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	fab2 f282 	clz	r2, r2
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	40d3      	lsrs	r3, r2
 8004ca0:	4a04      	ldr	r2, [pc, #16]	@ (8004cb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ca2:	5cd3      	ldrb	r3, [r2, r3]
 8004ca4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	08006444 	.word	0x08006444

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b092      	sub	sp, #72	@ 0x48
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80d4 	beq.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10e      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	4a4a      	ldr	r2, [pc, #296]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf2:	61d3      	str	r3, [r2, #28]
 8004cf4:	4b48      	ldr	r3, [pc, #288]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4b45      	ldr	r3, [pc, #276]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d118      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d12:	4b42      	ldr	r3, [pc, #264]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a41      	ldr	r2, [pc, #260]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1e:	f7fb ffe9 	bl	8000cf4 <HAL_GetTick>
 8004d22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	e008      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fb ffe5 	bl	8000cf4 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b64      	cmp	r3, #100	@ 0x64
 8004d32:	d901      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e1d6      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	4b38      	ldr	r3, [pc, #224]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d44:	4b34      	ldr	r3, [pc, #208]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8084 	beq.w	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d07c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d64:	4b2c      	ldr	r3, [pc, #176]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b26      	ldr	r3, [pc, #152]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2301      	movs	r3, #1
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d04b      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fb ff95 	bl	8000cf4 <HAL_GetTick>
 8004dca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dce:	f7fb ff91 	bl	8000cf4 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e180      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004de4:	2302      	movs	r3, #2
 8004de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df0:	2302      	movs	r3, #2
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	fa93 f3a3 	rbit	r3, r3
 8004dfa:	61fb      	str	r3, [r7, #28]
  return result;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	fab3 f383 	clz	r3, r3
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d108      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e12:	4b01      	ldr	r3, [pc, #4]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	e00d      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	10908100 	.word	0x10908100
 8004e24:	2302      	movs	r3, #2
 8004e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	fa93 f3a3 	rbit	r3, r3
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	4b9a      	ldr	r3, [pc, #616]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	2202      	movs	r2, #2
 8004e36:	613a      	str	r2, [r7, #16]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	fa92 f2a2 	rbit	r2, r2
 8004e3e:	60fa      	str	r2, [r7, #12]
  return result;
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	fab2 f282 	clz	r2, r2
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	f002 021f 	and.w	r2, r2, #31
 8004e52:	2101      	movs	r1, #1
 8004e54:	fa01 f202 	lsl.w	r2, r1, r2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0b7      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	498c      	ldr	r1, [pc, #560]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e78:	4b88      	ldr	r3, [pc, #544]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4a87      	ldr	r2, [pc, #540]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e90:	4b82      	ldr	r3, [pc, #520]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e94:	f023 0203 	bic.w	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	497f      	ldr	r1, [pc, #508]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eae:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	4978      	ldr	r1, [pc, #480]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ecc:	4b73      	ldr	r3, [pc, #460]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	4970      	ldr	r1, [pc, #448]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eea:	4b6c      	ldr	r3, [pc, #432]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	f023 0210 	bic.w	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4969      	ldr	r1, [pc, #420]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f08:	4b64      	ldr	r3, [pc, #400]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	4961      	ldr	r1, [pc, #388]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f26:	4b5d      	ldr	r3, [pc, #372]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	f023 0220 	bic.w	r2, r3, #32
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	495a      	ldr	r1, [pc, #360]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f44:	4b55      	ldr	r3, [pc, #340]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	4952      	ldr	r1, [pc, #328]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f62:	4b4e      	ldr	r3, [pc, #312]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	494b      	ldr	r1, [pc, #300]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f80:	4b46      	ldr	r3, [pc, #280]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	4943      	ldr	r1, [pc, #268]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004faa:	493c      	ldr	r1, [pc, #240]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fbc:	4b37      	ldr	r3, [pc, #220]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	4934      	ldr	r1, [pc, #208]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004fda:	4b30      	ldr	r3, [pc, #192]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	492d      	ldr	r1, [pc, #180]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ff8:	4b28      	ldr	r3, [pc, #160]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005004:	4925      	ldr	r1, [pc, #148]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005016:	4b21      	ldr	r3, [pc, #132]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	491e      	ldr	r1, [pc, #120]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005034:	4b19      	ldr	r3, [pc, #100]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	4916      	ldr	r1, [pc, #88]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d008      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005052:	4b12      	ldr	r3, [pc, #72]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505e:	490f      	ldr	r1, [pc, #60]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005060:	4313      	orrs	r3, r2
 8005062:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005070:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507c:	4907      	ldr	r1, [pc, #28]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800508e:	4b03      	ldr	r3, [pc, #12]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a2:	4913      	ldr	r1, [pc, #76]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80050b4:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c0:	490b      	ldr	r1, [pc, #44]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80050d2:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050de:	4904      	ldr	r1, [pc, #16]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3748      	adds	r7, #72	@ 0x48
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000

080050f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e040      	b.n	8005188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fb fc9e 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	@ 0x24
 8005120:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa86 	bl	800564c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8af 	bl	80052a4 <UART_SetConfig>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e01b      	b.n	8005188 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800515e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800516e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb05 	bl	8005790 <UART_CheckIdleState>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d177      	bne.n	8005298 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_UART_Transmit+0x24>
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e070      	b.n	800529a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2221      	movs	r2, #33	@ 0x21
 80051c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c6:	f7fb fd95 	bl	8000cf4 <HAL_GetTick>
 80051ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e4:	d108      	bne.n	80051f8 <HAL_UART_Transmit+0x68>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e003      	b.n	8005200 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005200:	e02f      	b.n	8005262 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	2180      	movs	r1, #128	@ 0x80
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fb67 	bl	80058e0 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e03b      	b.n	800529a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005234:	b292      	uxth	r2, r2
 8005236:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	3302      	adds	r3, #2
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e007      	b.n	8005250 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1c9      	bne.n	8005202 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	2140      	movs	r1, #64	@ 0x40
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fb31 	bl	80058e0 <UART_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e005      	b.n	800529a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	e000      	b.n	800529a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005298:	2302      	movs	r3, #2
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4b92      	ldr	r3, [pc, #584]	@ (8005518 <UART_SetConfig+0x274>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	430b      	orrs	r3, r1
 80052da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a80      	ldr	r2, [pc, #512]	@ (800551c <UART_SetConfig+0x278>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d120      	bne.n	8005362 <UART_SetConfig+0xbe>
 8005320:	4b7f      	ldr	r3, [pc, #508]	@ (8005520 <UART_SetConfig+0x27c>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b03      	cmp	r3, #3
 800532a:	d817      	bhi.n	800535c <UART_SetConfig+0xb8>
 800532c:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0x90>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005345 	.word	0x08005345
 8005338:	08005351 	.word	0x08005351
 800533c:	08005357 	.word	0x08005357
 8005340:	0800534b 	.word	0x0800534b
 8005344:	2301      	movs	r3, #1
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e0b5      	b.n	80054b6 <UART_SetConfig+0x212>
 800534a:	2302      	movs	r3, #2
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e0b2      	b.n	80054b6 <UART_SetConfig+0x212>
 8005350:	2304      	movs	r3, #4
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e0af      	b.n	80054b6 <UART_SetConfig+0x212>
 8005356:	2308      	movs	r3, #8
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e0ac      	b.n	80054b6 <UART_SetConfig+0x212>
 800535c:	2310      	movs	r3, #16
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e0a9      	b.n	80054b6 <UART_SetConfig+0x212>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6f      	ldr	r2, [pc, #444]	@ (8005524 <UART_SetConfig+0x280>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d124      	bne.n	80053b6 <UART_SetConfig+0x112>
 800536c:	4b6c      	ldr	r3, [pc, #432]	@ (8005520 <UART_SetConfig+0x27c>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005374:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005378:	d011      	beq.n	800539e <UART_SetConfig+0xfa>
 800537a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800537e:	d817      	bhi.n	80053b0 <UART_SetConfig+0x10c>
 8005380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005384:	d011      	beq.n	80053aa <UART_SetConfig+0x106>
 8005386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800538a:	d811      	bhi.n	80053b0 <UART_SetConfig+0x10c>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <UART_SetConfig+0xf4>
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005394:	d006      	beq.n	80053a4 <UART_SetConfig+0x100>
 8005396:	e00b      	b.n	80053b0 <UART_SetConfig+0x10c>
 8005398:	2300      	movs	r3, #0
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e08b      	b.n	80054b6 <UART_SetConfig+0x212>
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e088      	b.n	80054b6 <UART_SetConfig+0x212>
 80053a4:	2304      	movs	r3, #4
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e085      	b.n	80054b6 <UART_SetConfig+0x212>
 80053aa:	2308      	movs	r3, #8
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e082      	b.n	80054b6 <UART_SetConfig+0x212>
 80053b0:	2310      	movs	r3, #16
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e07f      	b.n	80054b6 <UART_SetConfig+0x212>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005528 <UART_SetConfig+0x284>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d124      	bne.n	800540a <UART_SetConfig+0x166>
 80053c0:	4b57      	ldr	r3, [pc, #348]	@ (8005520 <UART_SetConfig+0x27c>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80053c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053cc:	d011      	beq.n	80053f2 <UART_SetConfig+0x14e>
 80053ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053d2:	d817      	bhi.n	8005404 <UART_SetConfig+0x160>
 80053d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053d8:	d011      	beq.n	80053fe <UART_SetConfig+0x15a>
 80053da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053de:	d811      	bhi.n	8005404 <UART_SetConfig+0x160>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <UART_SetConfig+0x148>
 80053e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053e8:	d006      	beq.n	80053f8 <UART_SetConfig+0x154>
 80053ea:	e00b      	b.n	8005404 <UART_SetConfig+0x160>
 80053ec:	2300      	movs	r3, #0
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e061      	b.n	80054b6 <UART_SetConfig+0x212>
 80053f2:	2302      	movs	r3, #2
 80053f4:	77fb      	strb	r3, [r7, #31]
 80053f6:	e05e      	b.n	80054b6 <UART_SetConfig+0x212>
 80053f8:	2304      	movs	r3, #4
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e05b      	b.n	80054b6 <UART_SetConfig+0x212>
 80053fe:	2308      	movs	r3, #8
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e058      	b.n	80054b6 <UART_SetConfig+0x212>
 8005404:	2310      	movs	r3, #16
 8005406:	77fb      	strb	r3, [r7, #31]
 8005408:	e055      	b.n	80054b6 <UART_SetConfig+0x212>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a47      	ldr	r2, [pc, #284]	@ (800552c <UART_SetConfig+0x288>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d124      	bne.n	800545e <UART_SetConfig+0x1ba>
 8005414:	4b42      	ldr	r3, [pc, #264]	@ (8005520 <UART_SetConfig+0x27c>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800541c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005420:	d011      	beq.n	8005446 <UART_SetConfig+0x1a2>
 8005422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005426:	d817      	bhi.n	8005458 <UART_SetConfig+0x1b4>
 8005428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800542c:	d011      	beq.n	8005452 <UART_SetConfig+0x1ae>
 800542e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005432:	d811      	bhi.n	8005458 <UART_SetConfig+0x1b4>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <UART_SetConfig+0x19c>
 8005438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543c:	d006      	beq.n	800544c <UART_SetConfig+0x1a8>
 800543e:	e00b      	b.n	8005458 <UART_SetConfig+0x1b4>
 8005440:	2300      	movs	r3, #0
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e037      	b.n	80054b6 <UART_SetConfig+0x212>
 8005446:	2302      	movs	r3, #2
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e034      	b.n	80054b6 <UART_SetConfig+0x212>
 800544c:	2304      	movs	r3, #4
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e031      	b.n	80054b6 <UART_SetConfig+0x212>
 8005452:	2308      	movs	r3, #8
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e02e      	b.n	80054b6 <UART_SetConfig+0x212>
 8005458:	2310      	movs	r3, #16
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e02b      	b.n	80054b6 <UART_SetConfig+0x212>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a33      	ldr	r2, [pc, #204]	@ (8005530 <UART_SetConfig+0x28c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d124      	bne.n	80054b2 <UART_SetConfig+0x20e>
 8005468:	4b2d      	ldr	r3, [pc, #180]	@ (8005520 <UART_SetConfig+0x27c>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005470:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005474:	d011      	beq.n	800549a <UART_SetConfig+0x1f6>
 8005476:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800547a:	d817      	bhi.n	80054ac <UART_SetConfig+0x208>
 800547c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005480:	d011      	beq.n	80054a6 <UART_SetConfig+0x202>
 8005482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005486:	d811      	bhi.n	80054ac <UART_SetConfig+0x208>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <UART_SetConfig+0x1f0>
 800548c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005490:	d006      	beq.n	80054a0 <UART_SetConfig+0x1fc>
 8005492:	e00b      	b.n	80054ac <UART_SetConfig+0x208>
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e00d      	b.n	80054b6 <UART_SetConfig+0x212>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e00a      	b.n	80054b6 <UART_SetConfig+0x212>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e007      	b.n	80054b6 <UART_SetConfig+0x212>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e004      	b.n	80054b6 <UART_SetConfig+0x212>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e001      	b.n	80054b6 <UART_SetConfig+0x212>
 80054b2:	2310      	movs	r3, #16
 80054b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054be:	d16b      	bne.n	8005598 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d838      	bhi.n	8005538 <UART_SetConfig+0x294>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <UART_SetConfig+0x228>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	08005501 	.word	0x08005501
 80054d8:	08005539 	.word	0x08005539
 80054dc:	08005507 	.word	0x08005507
 80054e0:	08005539 	.word	0x08005539
 80054e4:	08005539 	.word	0x08005539
 80054e8:	08005539 	.word	0x08005539
 80054ec:	0800550f 	.word	0x0800550f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7ff fb9e 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 80054f4:	61b8      	str	r0, [r7, #24]
        break;
 80054f6:	e024      	b.n	8005542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f8:	f7ff fbbc 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 80054fc:	61b8      	str	r0, [r7, #24]
        break;
 80054fe:	e020      	b.n	8005542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005500:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <UART_SetConfig+0x290>)
 8005502:	61bb      	str	r3, [r7, #24]
        break;
 8005504:	e01d      	b.n	8005542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005506:	f7ff fb33 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 800550a:	61b8      	str	r0, [r7, #24]
        break;
 800550c:	e019      	b.n	8005542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005512:	61bb      	str	r3, [r7, #24]
        break;
 8005514:	e015      	b.n	8005542 <UART_SetConfig+0x29e>
 8005516:	bf00      	nop
 8005518:	efff69f3 	.word	0xefff69f3
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	40004400 	.word	0x40004400
 8005528:	40004800 	.word	0x40004800
 800552c:	40004c00 	.word	0x40004c00
 8005530:	40005000 	.word	0x40005000
 8005534:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	77bb      	strb	r3, [r7, #30]
        break;
 8005540:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d073      	beq.n	8005630 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	005a      	lsls	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	441a      	add	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d916      	bls.n	8005592 <UART_SetConfig+0x2ee>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556a:	d212      	bcs.n	8005592 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f023 030f 	bic.w	r3, r3, #15
 8005574:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	b29a      	uxth	r2, r3
 8005582:	89fb      	ldrh	r3, [r7, #14]
 8005584:	4313      	orrs	r3, r2
 8005586:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	89fa      	ldrh	r2, [r7, #14]
 800558e:	60da      	str	r2, [r3, #12]
 8005590:	e04e      	b.n	8005630 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	77bb      	strb	r3, [r7, #30]
 8005596:	e04b      	b.n	8005630 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005598:	7ffb      	ldrb	r3, [r7, #31]
 800559a:	2b08      	cmp	r3, #8
 800559c:	d827      	bhi.n	80055ee <UART_SetConfig+0x34a>
 800559e:	a201      	add	r2, pc, #4	@ (adr r2, 80055a4 <UART_SetConfig+0x300>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055ef 	.word	0x080055ef
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7ff fb32 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 80055cc:	61b8      	str	r0, [r7, #24]
        break;
 80055ce:	e013      	b.n	80055f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7ff fb50 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 80055d4:	61b8      	str	r0, [r7, #24]
        break;
 80055d6:	e00f      	b.n	80055f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005648 <UART_SetConfig+0x3a4>)
 80055da:	61bb      	str	r3, [r7, #24]
        break;
 80055dc:	e00c      	b.n	80055f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7ff fac7 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 80055e2:	61b8      	str	r0, [r7, #24]
        break;
 80055e4:	e008      	b.n	80055f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	61bb      	str	r3, [r7, #24]
        break;
 80055ec:	e004      	b.n	80055f8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	77bb      	strb	r3, [r7, #30]
        break;
 80055f6:	bf00      	nop
    }

    if (pclk != 0U)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	085a      	lsrs	r2, r3, #1
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	441a      	add	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d909      	bls.n	800562c <UART_SetConfig+0x388>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561e:	d205      	bcs.n	800562c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	b29a      	uxth	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	e001      	b.n	8005630 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800563c:	7fbb      	ldrb	r3, [r7, #30]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	007a1200 	.word	0x007a1200

0800564c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01a      	beq.n	8005762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800574a:	d10a      	bne.n	8005762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]
  }
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b098      	sub	sp, #96	@ 0x60
 8005794:	af02      	add	r7, sp, #8
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057a0:	f7fb faa8 	bl	8000cf4 <HAL_GetTick>
 80057a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d12e      	bne.n	8005812 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057bc:	2200      	movs	r2, #0
 80057be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f88c 	bl	80058e0 <UART_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d021      	beq.n	8005812 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e062      	b.n	80058d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d149      	bne.n	80058b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005820:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005828:	2200      	movs	r2, #0
 800582a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f856 	bl	80058e0 <UART_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03c      	beq.n	80058b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	623b      	str	r3, [r7, #32]
   return(result);
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30
 800585a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	60fb      	str	r3, [r7, #12]
   return(result);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588c:	61fa      	str	r2, [r7, #28]
 800588e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e011      	b.n	80058d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3758      	adds	r7, #88	@ 0x58
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f0:	e04f      	b.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d04b      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fb f9fb 	bl	8000cf4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <UART_WaitOnFlagUntilTimeout+0x30>
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e04e      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d037      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b80      	cmp	r3, #128	@ 0x80
 8005926:	d034      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	d031      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b08      	cmp	r3, #8
 800593a:	d110      	bne.n	800595e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2208      	movs	r2, #8
 8005942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f838 	bl	80059ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2208      	movs	r2, #8
 800594e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e029      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800596c:	d111      	bne.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f81e 	bl	80059ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e00f      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d0a0      	beq.n	80058f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b095      	sub	sp, #84	@ 0x54
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e5      	bne.n	80059f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d118      	bne.n	8005a62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f023 0310 	bic.w	r3, r3, #16
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6979      	ldr	r1, [r7, #20]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e6      	bne.n	8005a30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a76:	bf00      	nop
 8005a78:	3754      	adds	r7, #84	@ 0x54
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <sniprintf>:
 8005a84:	b40c      	push	{r2, r3}
 8005a86:	b530      	push	{r4, r5, lr}
 8005a88:	4b17      	ldr	r3, [pc, #92]	@ (8005ae8 <sniprintf+0x64>)
 8005a8a:	1e0c      	subs	r4, r1, #0
 8005a8c:	681d      	ldr	r5, [r3, #0]
 8005a8e:	b09d      	sub	sp, #116	@ 0x74
 8005a90:	da08      	bge.n	8005aa4 <sniprintf+0x20>
 8005a92:	238b      	movs	r3, #139	@ 0x8b
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	b01d      	add	sp, #116	@ 0x74
 8005a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa0:	b002      	add	sp, #8
 8005aa2:	4770      	bx	lr
 8005aa4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005aa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005aac:	bf14      	ite	ne
 8005aae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ab2:	4623      	moveq	r3, r4
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	9307      	str	r3, [sp, #28]
 8005ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005abc:	9002      	str	r0, [sp, #8]
 8005abe:	9006      	str	r0, [sp, #24]
 8005ac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ac4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ac6:	ab21      	add	r3, sp, #132	@ 0x84
 8005ac8:	a902      	add	r1, sp, #8
 8005aca:	4628      	mov	r0, r5
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	f000 f995 	bl	8005dfc <_svfiprintf_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	bfbc      	itt	lt
 8005ad6:	238b      	movlt	r3, #139	@ 0x8b
 8005ad8:	602b      	strlt	r3, [r5, #0]
 8005ada:	2c00      	cmp	r4, #0
 8005adc:	d0dd      	beq.n	8005a9a <sniprintf+0x16>
 8005ade:	9b02      	ldr	r3, [sp, #8]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e7d9      	b.n	8005a9a <sniprintf+0x16>
 8005ae6:	bf00      	nop
 8005ae8:	2000000c 	.word	0x2000000c

08005aec <memset>:
 8005aec:	4402      	add	r2, r0
 8005aee:	4603      	mov	r3, r0
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d100      	bne.n	8005af6 <memset+0xa>
 8005af4:	4770      	bx	lr
 8005af6:	f803 1b01 	strb.w	r1, [r3], #1
 8005afa:	e7f9      	b.n	8005af0 <memset+0x4>

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	@ (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	2000000c 	.word	0x2000000c

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	@ (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f000 fc66 	bl	80063ec <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	080064a8 	.word	0x080064a8
 8005b44:	080064a8 	.word	0x080064a8
 8005b48:	080064a8 	.word	0x080064a8
 8005b4c:	080064ac 	.word	0x080064ac

08005b50 <__retarget_lock_acquire_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_release_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <_free_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4605      	mov	r5, r0
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d041      	beq.n	8005be0 <_free_r+0x8c>
 8005b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b60:	1f0c      	subs	r4, r1, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bfb8      	it	lt
 8005b66:	18e4      	addlt	r4, r4, r3
 8005b68:	f000 f8e0 	bl	8005d2c <__malloc_lock>
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005be4 <_free_r+0x90>)
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	b933      	cbnz	r3, 8005b80 <_free_r+0x2c>
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	6014      	str	r4, [r2, #0]
 8005b76:	4628      	mov	r0, r5
 8005b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b7c:	f000 b8dc 	b.w	8005d38 <__malloc_unlock>
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d908      	bls.n	8005b96 <_free_r+0x42>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	1821      	adds	r1, r4, r0
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	bf01      	itttt	eq
 8005b8c:	6819      	ldreq	r1, [r3, #0]
 8005b8e:	685b      	ldreq	r3, [r3, #4]
 8005b90:	1809      	addeq	r1, r1, r0
 8005b92:	6021      	streq	r1, [r4, #0]
 8005b94:	e7ed      	b.n	8005b72 <_free_r+0x1e>
 8005b96:	461a      	mov	r2, r3
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	b10b      	cbz	r3, 8005ba0 <_free_r+0x4c>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d9fa      	bls.n	8005b96 <_free_r+0x42>
 8005ba0:	6811      	ldr	r1, [r2, #0]
 8005ba2:	1850      	adds	r0, r2, r1
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d10b      	bne.n	8005bc0 <_free_r+0x6c>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	4401      	add	r1, r0
 8005bac:	1850      	adds	r0, r2, r1
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	6011      	str	r1, [r2, #0]
 8005bb2:	d1e0      	bne.n	8005b76 <_free_r+0x22>
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	6053      	str	r3, [r2, #4]
 8005bba:	4408      	add	r0, r1
 8005bbc:	6010      	str	r0, [r2, #0]
 8005bbe:	e7da      	b.n	8005b76 <_free_r+0x22>
 8005bc0:	d902      	bls.n	8005bc8 <_free_r+0x74>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	e7d6      	b.n	8005b76 <_free_r+0x22>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf04      	itt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	bf04      	itt	eq
 8005bd8:	1809      	addeq	r1, r1, r0
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	6054      	str	r4, [r2, #4]
 8005bde:	e7ca      	b.n	8005b76 <_free_r+0x22>
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
 8005be2:	bf00      	nop
 8005be4:	200002a8 	.word	0x200002a8

08005be8 <sbrk_aligned>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4e0f      	ldr	r6, [pc, #60]	@ (8005c28 <sbrk_aligned+0x40>)
 8005bec:	460c      	mov	r4, r1
 8005bee:	6831      	ldr	r1, [r6, #0]
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	b911      	cbnz	r1, 8005bfa <sbrk_aligned+0x12>
 8005bf4:	f000 fba6 	bl	8006344 <_sbrk_r>
 8005bf8:	6030      	str	r0, [r6, #0]
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 fba1 	bl	8006344 <_sbrk_r>
 8005c02:	1c43      	adds	r3, r0, #1
 8005c04:	d103      	bne.n	8005c0e <sbrk_aligned+0x26>
 8005c06:	f04f 34ff 	mov.w	r4, #4294967295
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d0f8      	beq.n	8005c0a <sbrk_aligned+0x22>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fb92 	bl	8006344 <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d1f2      	bne.n	8005c0a <sbrk_aligned+0x22>
 8005c24:	e7ef      	b.n	8005c06 <sbrk_aligned+0x1e>
 8005c26:	bf00      	nop
 8005c28:	200002a4 	.word	0x200002a4

08005c2c <_malloc_r>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	1ccd      	adds	r5, r1, #3
 8005c32:	f025 0503 	bic.w	r5, r5, #3
 8005c36:	3508      	adds	r5, #8
 8005c38:	2d0c      	cmp	r5, #12
 8005c3a:	bf38      	it	cc
 8005c3c:	250c      	movcc	r5, #12
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	4606      	mov	r6, r0
 8005c42:	db01      	blt.n	8005c48 <_malloc_r+0x1c>
 8005c44:	42a9      	cmp	r1, r5
 8005c46:	d904      	bls.n	8005c52 <_malloc_r+0x26>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d28 <_malloc_r+0xfc>
 8005c56:	f000 f869 	bl	8005d2c <__malloc_lock>
 8005c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5e:	461c      	mov	r4, r3
 8005c60:	bb44      	cbnz	r4, 8005cb4 <_malloc_r+0x88>
 8005c62:	4629      	mov	r1, r5
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff ffbf 	bl	8005be8 <sbrk_aligned>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	d158      	bne.n	8005d22 <_malloc_r+0xf6>
 8005c70:	f8d8 4000 	ldr.w	r4, [r8]
 8005c74:	4627      	mov	r7, r4
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d143      	bne.n	8005d02 <_malloc_r+0xd6>
 8005c7a:	2c00      	cmp	r4, #0
 8005c7c:	d04b      	beq.n	8005d16 <_malloc_r+0xea>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	4639      	mov	r1, r7
 8005c82:	4630      	mov	r0, r6
 8005c84:	eb04 0903 	add.w	r9, r4, r3
 8005c88:	f000 fb5c 	bl	8006344 <_sbrk_r>
 8005c8c:	4581      	cmp	r9, r0
 8005c8e:	d142      	bne.n	8005d16 <_malloc_r+0xea>
 8005c90:	6821      	ldr	r1, [r4, #0]
 8005c92:	1a6d      	subs	r5, r5, r1
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7ff ffa6 	bl	8005be8 <sbrk_aligned>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d03a      	beq.n	8005d16 <_malloc_r+0xea>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	442b      	add	r3, r5
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	bb62      	cbnz	r2, 8005d08 <_malloc_r+0xdc>
 8005cae:	f8c8 7000 	str.w	r7, [r8]
 8005cb2:	e00f      	b.n	8005cd4 <_malloc_r+0xa8>
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	1b52      	subs	r2, r2, r5
 8005cb8:	d420      	bmi.n	8005cfc <_malloc_r+0xd0>
 8005cba:	2a0b      	cmp	r2, #11
 8005cbc:	d917      	bls.n	8005cee <_malloc_r+0xc2>
 8005cbe:	1961      	adds	r1, r4, r5
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	6025      	str	r5, [r4, #0]
 8005cc4:	bf18      	it	ne
 8005cc6:	6059      	strne	r1, [r3, #4]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	bf08      	it	eq
 8005ccc:	f8c8 1000 	streq.w	r1, [r8]
 8005cd0:	5162      	str	r2, [r4, r5]
 8005cd2:	604b      	str	r3, [r1, #4]
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f000 f82f 	bl	8005d38 <__malloc_unlock>
 8005cda:	f104 000b 	add.w	r0, r4, #11
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	f020 0007 	bic.w	r0, r0, #7
 8005ce4:	1ac2      	subs	r2, r0, r3
 8005ce6:	bf1c      	itt	ne
 8005ce8:	1a1b      	subne	r3, r3, r0
 8005cea:	50a3      	strne	r3, [r4, r2]
 8005cec:	e7af      	b.n	8005c4e <_malloc_r+0x22>
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	bf0c      	ite	eq
 8005cf4:	f8c8 2000 	streq.w	r2, [r8]
 8005cf8:	605a      	strne	r2, [r3, #4]
 8005cfa:	e7eb      	b.n	8005cd4 <_malloc_r+0xa8>
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	6864      	ldr	r4, [r4, #4]
 8005d00:	e7ae      	b.n	8005c60 <_malloc_r+0x34>
 8005d02:	463c      	mov	r4, r7
 8005d04:	687f      	ldr	r7, [r7, #4]
 8005d06:	e7b6      	b.n	8005c76 <_malloc_r+0x4a>
 8005d08:	461a      	mov	r2, r3
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	d1fb      	bne.n	8005d08 <_malloc_r+0xdc>
 8005d10:	2300      	movs	r3, #0
 8005d12:	6053      	str	r3, [r2, #4]
 8005d14:	e7de      	b.n	8005cd4 <_malloc_r+0xa8>
 8005d16:	230c      	movs	r3, #12
 8005d18:	6033      	str	r3, [r6, #0]
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 f80c 	bl	8005d38 <__malloc_unlock>
 8005d20:	e794      	b.n	8005c4c <_malloc_r+0x20>
 8005d22:	6005      	str	r5, [r0, #0]
 8005d24:	e7d6      	b.n	8005cd4 <_malloc_r+0xa8>
 8005d26:	bf00      	nop
 8005d28:	200002a8 	.word	0x200002a8

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	@ (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f7ff bf0f 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	200002a0 	.word	0x200002a0

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	@ (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f7ff bf0a 	b.w	8005b52 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	200002a0 	.word	0x200002a0

08005d44 <__ssputs_r>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	688e      	ldr	r6, [r1, #8]
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	42be      	cmp	r6, r7
 8005d4e:	680b      	ldr	r3, [r1, #0]
 8005d50:	4682      	mov	sl, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	4690      	mov	r8, r2
 8005d56:	d82d      	bhi.n	8005db4 <__ssputs_r+0x70>
 8005d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d60:	d026      	beq.n	8005db0 <__ssputs_r+0x6c>
 8005d62:	6965      	ldr	r5, [r4, #20]
 8005d64:	6909      	ldr	r1, [r1, #16]
 8005d66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d6a:	eba3 0901 	sub.w	r9, r3, r1
 8005d6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d72:	1c7b      	adds	r3, r7, #1
 8005d74:	444b      	add	r3, r9
 8005d76:	106d      	asrs	r5, r5, #1
 8005d78:	429d      	cmp	r5, r3
 8005d7a:	bf38      	it	cc
 8005d7c:	461d      	movcc	r5, r3
 8005d7e:	0553      	lsls	r3, r2, #21
 8005d80:	d527      	bpl.n	8005dd2 <__ssputs_r+0x8e>
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7ff ff52 	bl	8005c2c <_malloc_r>
 8005d88:	4606      	mov	r6, r0
 8005d8a:	b360      	cbz	r0, 8005de6 <__ssputs_r+0xa2>
 8005d8c:	6921      	ldr	r1, [r4, #16]
 8005d8e:	464a      	mov	r2, r9
 8005d90:	f000 fae8 	bl	8006364 <memcpy>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	6126      	str	r6, [r4, #16]
 8005da2:	6165      	str	r5, [r4, #20]
 8005da4:	444e      	add	r6, r9
 8005da6:	eba5 0509 	sub.w	r5, r5, r9
 8005daa:	6026      	str	r6, [r4, #0]
 8005dac:	60a5      	str	r5, [r4, #8]
 8005dae:	463e      	mov	r6, r7
 8005db0:	42be      	cmp	r6, r7
 8005db2:	d900      	bls.n	8005db6 <__ssputs_r+0x72>
 8005db4:	463e      	mov	r6, r7
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	4632      	mov	r2, r6
 8005dba:	4641      	mov	r1, r8
 8005dbc:	f000 faa8 	bl	8006310 <memmove>
 8005dc0:	68a3      	ldr	r3, [r4, #8]
 8005dc2:	1b9b      	subs	r3, r3, r6
 8005dc4:	60a3      	str	r3, [r4, #8]
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	4433      	add	r3, r6
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	462a      	mov	r2, r5
 8005dd4:	f000 fad4 	bl	8006380 <_realloc_r>
 8005dd8:	4606      	mov	r6, r0
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d1e0      	bne.n	8005da0 <__ssputs_r+0x5c>
 8005dde:	6921      	ldr	r1, [r4, #16]
 8005de0:	4650      	mov	r0, sl
 8005de2:	f7ff feb7 	bl	8005b54 <_free_r>
 8005de6:	230c      	movs	r3, #12
 8005de8:	f8ca 3000 	str.w	r3, [sl]
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	e7e9      	b.n	8005dce <__ssputs_r+0x8a>
	...

08005dfc <_svfiprintf_r>:
 8005dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	4698      	mov	r8, r3
 8005e02:	898b      	ldrh	r3, [r1, #12]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	b09d      	sub	sp, #116	@ 0x74
 8005e08:	4607      	mov	r7, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	d510      	bpl.n	8005e32 <_svfiprintf_r+0x36>
 8005e10:	690b      	ldr	r3, [r1, #16]
 8005e12:	b973      	cbnz	r3, 8005e32 <_svfiprintf_r+0x36>
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	f7ff ff09 	bl	8005c2c <_malloc_r>
 8005e1a:	6028      	str	r0, [r5, #0]
 8005e1c:	6128      	str	r0, [r5, #16]
 8005e1e:	b930      	cbnz	r0, 8005e2e <_svfiprintf_r+0x32>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	b01d      	add	sp, #116	@ 0x74
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	2340      	movs	r3, #64	@ 0x40
 8005e30:	616b      	str	r3, [r5, #20]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e36:	2320      	movs	r3, #32
 8005e38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e40:	2330      	movs	r3, #48	@ 0x30
 8005e42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fe0 <_svfiprintf_r+0x1e4>
 8005e46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e4a:	f04f 0901 	mov.w	r9, #1
 8005e4e:	4623      	mov	r3, r4
 8005e50:	469a      	mov	sl, r3
 8005e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e56:	b10a      	cbz	r2, 8005e5c <_svfiprintf_r+0x60>
 8005e58:	2a25      	cmp	r2, #37	@ 0x25
 8005e5a:	d1f9      	bne.n	8005e50 <_svfiprintf_r+0x54>
 8005e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e60:	d00b      	beq.n	8005e7a <_svfiprintf_r+0x7e>
 8005e62:	465b      	mov	r3, fp
 8005e64:	4622      	mov	r2, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f7ff ff6b 	bl	8005d44 <__ssputs_r>
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f000 80a7 	beq.w	8005fc2 <_svfiprintf_r+0x1c6>
 8005e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e76:	445a      	add	r2, fp
 8005e78:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 809f 	beq.w	8005fc2 <_svfiprintf_r+0x1c6>
 8005e84:	2300      	movs	r3, #0
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e8e:	f10a 0a01 	add.w	sl, sl, #1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	9307      	str	r3, [sp, #28]
 8005e96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e9c:	4654      	mov	r4, sl
 8005e9e:	2205      	movs	r2, #5
 8005ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea4:	484e      	ldr	r0, [pc, #312]	@ (8005fe0 <_svfiprintf_r+0x1e4>)
 8005ea6:	f7fa f99b 	bl	80001e0 <memchr>
 8005eaa:	9a04      	ldr	r2, [sp, #16]
 8005eac:	b9d8      	cbnz	r0, 8005ee6 <_svfiprintf_r+0xea>
 8005eae:	06d0      	lsls	r0, r2, #27
 8005eb0:	bf44      	itt	mi
 8005eb2:	2320      	movmi	r3, #32
 8005eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eb8:	0711      	lsls	r1, r2, #28
 8005eba:	bf44      	itt	mi
 8005ebc:	232b      	movmi	r3, #43	@ 0x2b
 8005ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec8:	d015      	beq.n	8005ef6 <_svfiprintf_r+0xfa>
 8005eca:	9a07      	ldr	r2, [sp, #28]
 8005ecc:	4654      	mov	r4, sl
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f04f 0c0a 	mov.w	ip, #10
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eda:	3b30      	subs	r3, #48	@ 0x30
 8005edc:	2b09      	cmp	r3, #9
 8005ede:	d94b      	bls.n	8005f78 <_svfiprintf_r+0x17c>
 8005ee0:	b1b0      	cbz	r0, 8005f10 <_svfiprintf_r+0x114>
 8005ee2:	9207      	str	r2, [sp, #28]
 8005ee4:	e014      	b.n	8005f10 <_svfiprintf_r+0x114>
 8005ee6:	eba0 0308 	sub.w	r3, r0, r8
 8005eea:	fa09 f303 	lsl.w	r3, r9, r3
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	46a2      	mov	sl, r4
 8005ef4:	e7d2      	b.n	8005e9c <_svfiprintf_r+0xa0>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	9103      	str	r1, [sp, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfbb      	ittet	lt
 8005f02:	425b      	neglt	r3, r3
 8005f04:	f042 0202 	orrlt.w	r2, r2, #2
 8005f08:	9307      	strge	r3, [sp, #28]
 8005f0a:	9307      	strlt	r3, [sp, #28]
 8005f0c:	bfb8      	it	lt
 8005f0e:	9204      	strlt	r2, [sp, #16]
 8005f10:	7823      	ldrb	r3, [r4, #0]
 8005f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f14:	d10a      	bne.n	8005f2c <_svfiprintf_r+0x130>
 8005f16:	7863      	ldrb	r3, [r4, #1]
 8005f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f1a:	d132      	bne.n	8005f82 <_svfiprintf_r+0x186>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	1d1a      	adds	r2, r3, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	9203      	str	r2, [sp, #12]
 8005f24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f28:	3402      	adds	r4, #2
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ff0 <_svfiprintf_r+0x1f4>
 8005f30:	7821      	ldrb	r1, [r4, #0]
 8005f32:	2203      	movs	r2, #3
 8005f34:	4650      	mov	r0, sl
 8005f36:	f7fa f953 	bl	80001e0 <memchr>
 8005f3a:	b138      	cbz	r0, 8005f4c <_svfiprintf_r+0x150>
 8005f3c:	9b04      	ldr	r3, [sp, #16]
 8005f3e:	eba0 000a 	sub.w	r0, r0, sl
 8005f42:	2240      	movs	r2, #64	@ 0x40
 8005f44:	4082      	lsls	r2, r0
 8005f46:	4313      	orrs	r3, r2
 8005f48:	3401      	adds	r4, #1
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	4824      	ldr	r0, [pc, #144]	@ (8005fe4 <_svfiprintf_r+0x1e8>)
 8005f52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f56:	2206      	movs	r2, #6
 8005f58:	f7fa f942 	bl	80001e0 <memchr>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d036      	beq.n	8005fce <_svfiprintf_r+0x1d2>
 8005f60:	4b21      	ldr	r3, [pc, #132]	@ (8005fe8 <_svfiprintf_r+0x1ec>)
 8005f62:	bb1b      	cbnz	r3, 8005fac <_svfiprintf_r+0x1b0>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	3307      	adds	r3, #7
 8005f68:	f023 0307 	bic.w	r3, r3, #7
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	9303      	str	r3, [sp, #12]
 8005f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f72:	4433      	add	r3, r6
 8005f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f76:	e76a      	b.n	8005e4e <_svfiprintf_r+0x52>
 8005f78:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	2001      	movs	r0, #1
 8005f80:	e7a8      	b.n	8005ed4 <_svfiprintf_r+0xd8>
 8005f82:	2300      	movs	r3, #0
 8005f84:	3401      	adds	r4, #1
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 0c0a 	mov.w	ip, #10
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f94:	3a30      	subs	r2, #48	@ 0x30
 8005f96:	2a09      	cmp	r2, #9
 8005f98:	d903      	bls.n	8005fa2 <_svfiprintf_r+0x1a6>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0c6      	beq.n	8005f2c <_svfiprintf_r+0x130>
 8005f9e:	9105      	str	r1, [sp, #20]
 8005fa0:	e7c4      	b.n	8005f2c <_svfiprintf_r+0x130>
 8005fa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e7f0      	b.n	8005f8e <_svfiprintf_r+0x192>
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8005fec <_svfiprintf_r+0x1f0>)
 8005fb4:	a904      	add	r1, sp, #16
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f3af 8000 	nop.w
 8005fbc:	1c42      	adds	r2, r0, #1
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	d1d6      	bne.n	8005f70 <_svfiprintf_r+0x174>
 8005fc2:	89ab      	ldrh	r3, [r5, #12]
 8005fc4:	065b      	lsls	r3, r3, #25
 8005fc6:	f53f af2d 	bmi.w	8005e24 <_svfiprintf_r+0x28>
 8005fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fcc:	e72c      	b.n	8005e28 <_svfiprintf_r+0x2c>
 8005fce:	ab03      	add	r3, sp, #12
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <_svfiprintf_r+0x1f0>)
 8005fd6:	a904      	add	r1, sp, #16
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f000 f879 	bl	80060d0 <_printf_i>
 8005fde:	e7ed      	b.n	8005fbc <_svfiprintf_r+0x1c0>
 8005fe0:	0800646c 	.word	0x0800646c
 8005fe4:	08006476 	.word	0x08006476
 8005fe8:	00000000 	.word	0x00000000
 8005fec:	08005d45 	.word	0x08005d45
 8005ff0:	08006472 	.word	0x08006472

08005ff4 <_printf_common>:
 8005ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	4698      	mov	r8, r3
 8005ffc:	688a      	ldr	r2, [r1, #8]
 8005ffe:	690b      	ldr	r3, [r1, #16]
 8006000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006004:	4293      	cmp	r3, r2
 8006006:	bfb8      	it	lt
 8006008:	4613      	movlt	r3, r2
 800600a:	6033      	str	r3, [r6, #0]
 800600c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006010:	4607      	mov	r7, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b10a      	cbz	r2, 800601a <_printf_common+0x26>
 8006016:	3301      	adds	r3, #1
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	0699      	lsls	r1, r3, #26
 800601e:	bf42      	ittt	mi
 8006020:	6833      	ldrmi	r3, [r6, #0]
 8006022:	3302      	addmi	r3, #2
 8006024:	6033      	strmi	r3, [r6, #0]
 8006026:	6825      	ldr	r5, [r4, #0]
 8006028:	f015 0506 	ands.w	r5, r5, #6
 800602c:	d106      	bne.n	800603c <_printf_common+0x48>
 800602e:	f104 0a19 	add.w	sl, r4, #25
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	6832      	ldr	r2, [r6, #0]
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	42ab      	cmp	r3, r5
 800603a:	dc26      	bgt.n	800608a <_printf_common+0x96>
 800603c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006040:	6822      	ldr	r2, [r4, #0]
 8006042:	3b00      	subs	r3, #0
 8006044:	bf18      	it	ne
 8006046:	2301      	movne	r3, #1
 8006048:	0692      	lsls	r2, r2, #26
 800604a:	d42b      	bmi.n	80060a4 <_printf_common+0xb0>
 800604c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006050:	4641      	mov	r1, r8
 8006052:	4638      	mov	r0, r7
 8006054:	47c8      	blx	r9
 8006056:	3001      	adds	r0, #1
 8006058:	d01e      	beq.n	8006098 <_printf_common+0xa4>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	6922      	ldr	r2, [r4, #16]
 800605e:	f003 0306 	and.w	r3, r3, #6
 8006062:	2b04      	cmp	r3, #4
 8006064:	bf02      	ittt	eq
 8006066:	68e5      	ldreq	r5, [r4, #12]
 8006068:	6833      	ldreq	r3, [r6, #0]
 800606a:	1aed      	subeq	r5, r5, r3
 800606c:	68a3      	ldr	r3, [r4, #8]
 800606e:	bf0c      	ite	eq
 8006070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006074:	2500      	movne	r5, #0
 8006076:	4293      	cmp	r3, r2
 8006078:	bfc4      	itt	gt
 800607a:	1a9b      	subgt	r3, r3, r2
 800607c:	18ed      	addgt	r5, r5, r3
 800607e:	2600      	movs	r6, #0
 8006080:	341a      	adds	r4, #26
 8006082:	42b5      	cmp	r5, r6
 8006084:	d11a      	bne.n	80060bc <_printf_common+0xc8>
 8006086:	2000      	movs	r0, #0
 8006088:	e008      	b.n	800609c <_printf_common+0xa8>
 800608a:	2301      	movs	r3, #1
 800608c:	4652      	mov	r2, sl
 800608e:	4641      	mov	r1, r8
 8006090:	4638      	mov	r0, r7
 8006092:	47c8      	blx	r9
 8006094:	3001      	adds	r0, #1
 8006096:	d103      	bne.n	80060a0 <_printf_common+0xac>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	3501      	adds	r5, #1
 80060a2:	e7c6      	b.n	8006032 <_printf_common+0x3e>
 80060a4:	18e1      	adds	r1, r4, r3
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	2030      	movs	r0, #48	@ 0x30
 80060aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ae:	4422      	add	r2, r4
 80060b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060b8:	3302      	adds	r3, #2
 80060ba:	e7c7      	b.n	800604c <_printf_common+0x58>
 80060bc:	2301      	movs	r3, #1
 80060be:	4622      	mov	r2, r4
 80060c0:	4641      	mov	r1, r8
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c8      	blx	r9
 80060c6:	3001      	adds	r0, #1
 80060c8:	d0e6      	beq.n	8006098 <_printf_common+0xa4>
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7d9      	b.n	8006082 <_printf_common+0x8e>
	...

080060d0 <_printf_i>:
 80060d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	7e0f      	ldrb	r7, [r1, #24]
 80060d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060d8:	2f78      	cmp	r7, #120	@ 0x78
 80060da:	4691      	mov	r9, r2
 80060dc:	4680      	mov	r8, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	469a      	mov	sl, r3
 80060e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060e6:	d807      	bhi.n	80060f8 <_printf_i+0x28>
 80060e8:	2f62      	cmp	r7, #98	@ 0x62
 80060ea:	d80a      	bhi.n	8006102 <_printf_i+0x32>
 80060ec:	2f00      	cmp	r7, #0
 80060ee:	f000 80d2 	beq.w	8006296 <_printf_i+0x1c6>
 80060f2:	2f58      	cmp	r7, #88	@ 0x58
 80060f4:	f000 80b9 	beq.w	800626a <_printf_i+0x19a>
 80060f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006100:	e03a      	b.n	8006178 <_printf_i+0xa8>
 8006102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006106:	2b15      	cmp	r3, #21
 8006108:	d8f6      	bhi.n	80060f8 <_printf_i+0x28>
 800610a:	a101      	add	r1, pc, #4	@ (adr r1, 8006110 <_printf_i+0x40>)
 800610c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006110:	08006169 	.word	0x08006169
 8006114:	0800617d 	.word	0x0800617d
 8006118:	080060f9 	.word	0x080060f9
 800611c:	080060f9 	.word	0x080060f9
 8006120:	080060f9 	.word	0x080060f9
 8006124:	080060f9 	.word	0x080060f9
 8006128:	0800617d 	.word	0x0800617d
 800612c:	080060f9 	.word	0x080060f9
 8006130:	080060f9 	.word	0x080060f9
 8006134:	080060f9 	.word	0x080060f9
 8006138:	080060f9 	.word	0x080060f9
 800613c:	0800627d 	.word	0x0800627d
 8006140:	080061a7 	.word	0x080061a7
 8006144:	08006237 	.word	0x08006237
 8006148:	080060f9 	.word	0x080060f9
 800614c:	080060f9 	.word	0x080060f9
 8006150:	0800629f 	.word	0x0800629f
 8006154:	080060f9 	.word	0x080060f9
 8006158:	080061a7 	.word	0x080061a7
 800615c:	080060f9 	.word	0x080060f9
 8006160:	080060f9 	.word	0x080060f9
 8006164:	0800623f 	.word	0x0800623f
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	1d1a      	adds	r2, r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6032      	str	r2, [r6, #0]
 8006170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006178:	2301      	movs	r3, #1
 800617a:	e09d      	b.n	80062b8 <_printf_i+0x1e8>
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	1d19      	adds	r1, r3, #4
 8006182:	6031      	str	r1, [r6, #0]
 8006184:	0606      	lsls	r6, r0, #24
 8006186:	d501      	bpl.n	800618c <_printf_i+0xbc>
 8006188:	681d      	ldr	r5, [r3, #0]
 800618a:	e003      	b.n	8006194 <_printf_i+0xc4>
 800618c:	0645      	lsls	r5, r0, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0xb8>
 8006190:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006194:	2d00      	cmp	r5, #0
 8006196:	da03      	bge.n	80061a0 <_printf_i+0xd0>
 8006198:	232d      	movs	r3, #45	@ 0x2d
 800619a:	426d      	negs	r5, r5
 800619c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a0:	4859      	ldr	r0, [pc, #356]	@ (8006308 <_printf_i+0x238>)
 80061a2:	230a      	movs	r3, #10
 80061a4:	e011      	b.n	80061ca <_printf_i+0xfa>
 80061a6:	6821      	ldr	r1, [r4, #0]
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	0608      	lsls	r0, r1, #24
 80061ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b0:	d402      	bmi.n	80061b8 <_printf_i+0xe8>
 80061b2:	0649      	lsls	r1, r1, #25
 80061b4:	bf48      	it	mi
 80061b6:	b2ad      	uxthmi	r5, r5
 80061b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061ba:	4853      	ldr	r0, [pc, #332]	@ (8006308 <_printf_i+0x238>)
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	bf14      	ite	ne
 80061c0:	230a      	movne	r3, #10
 80061c2:	2308      	moveq	r3, #8
 80061c4:	2100      	movs	r1, #0
 80061c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ca:	6866      	ldr	r6, [r4, #4]
 80061cc:	60a6      	str	r6, [r4, #8]
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	bfa2      	ittt	ge
 80061d2:	6821      	ldrge	r1, [r4, #0]
 80061d4:	f021 0104 	bicge.w	r1, r1, #4
 80061d8:	6021      	strge	r1, [r4, #0]
 80061da:	b90d      	cbnz	r5, 80061e0 <_printf_i+0x110>
 80061dc:	2e00      	cmp	r6, #0
 80061de:	d04b      	beq.n	8006278 <_printf_i+0x1a8>
 80061e0:	4616      	mov	r6, r2
 80061e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e6:	fb03 5711 	mls	r7, r3, r1, r5
 80061ea:	5dc7      	ldrb	r7, [r0, r7]
 80061ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f0:	462f      	mov	r7, r5
 80061f2:	42bb      	cmp	r3, r7
 80061f4:	460d      	mov	r5, r1
 80061f6:	d9f4      	bls.n	80061e2 <_printf_i+0x112>
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d10b      	bne.n	8006214 <_printf_i+0x144>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	07df      	lsls	r7, r3, #31
 8006200:	d508      	bpl.n	8006214 <_printf_i+0x144>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	6861      	ldr	r1, [r4, #4]
 8006206:	4299      	cmp	r1, r3
 8006208:	bfde      	ittt	le
 800620a:	2330      	movle	r3, #48	@ 0x30
 800620c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006210:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006214:	1b92      	subs	r2, r2, r6
 8006216:	6122      	str	r2, [r4, #16]
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	464b      	mov	r3, r9
 800621e:	aa03      	add	r2, sp, #12
 8006220:	4621      	mov	r1, r4
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff fee6 	bl	8005ff4 <_printf_common>
 8006228:	3001      	adds	r0, #1
 800622a:	d14a      	bne.n	80062c2 <_printf_i+0x1f2>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b004      	add	sp, #16
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	f043 0320 	orr.w	r3, r3, #32
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	4833      	ldr	r0, [pc, #204]	@ (800630c <_printf_i+0x23c>)
 8006240:	2778      	movs	r7, #120	@ 0x78
 8006242:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	6831      	ldr	r1, [r6, #0]
 800624a:	061f      	lsls	r7, r3, #24
 800624c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006250:	d402      	bmi.n	8006258 <_printf_i+0x188>
 8006252:	065f      	lsls	r7, r3, #25
 8006254:	bf48      	it	mi
 8006256:	b2ad      	uxthmi	r5, r5
 8006258:	6031      	str	r1, [r6, #0]
 800625a:	07d9      	lsls	r1, r3, #31
 800625c:	bf44      	itt	mi
 800625e:	f043 0320 	orrmi.w	r3, r3, #32
 8006262:	6023      	strmi	r3, [r4, #0]
 8006264:	b11d      	cbz	r5, 800626e <_printf_i+0x19e>
 8006266:	2310      	movs	r3, #16
 8006268:	e7ac      	b.n	80061c4 <_printf_i+0xf4>
 800626a:	4827      	ldr	r0, [pc, #156]	@ (8006308 <_printf_i+0x238>)
 800626c:	e7e9      	b.n	8006242 <_printf_i+0x172>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f023 0320 	bic.w	r3, r3, #32
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	e7f6      	b.n	8006266 <_printf_i+0x196>
 8006278:	4616      	mov	r6, r2
 800627a:	e7bd      	b.n	80061f8 <_printf_i+0x128>
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	6825      	ldr	r5, [r4, #0]
 8006280:	6961      	ldr	r1, [r4, #20]
 8006282:	1d18      	adds	r0, r3, #4
 8006284:	6030      	str	r0, [r6, #0]
 8006286:	062e      	lsls	r6, r5, #24
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	d501      	bpl.n	8006290 <_printf_i+0x1c0>
 800628c:	6019      	str	r1, [r3, #0]
 800628e:	e002      	b.n	8006296 <_printf_i+0x1c6>
 8006290:	0668      	lsls	r0, r5, #25
 8006292:	d5fb      	bpl.n	800628c <_printf_i+0x1bc>
 8006294:	8019      	strh	r1, [r3, #0]
 8006296:	2300      	movs	r3, #0
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	4616      	mov	r6, r2
 800629c:	e7bc      	b.n	8006218 <_printf_i+0x148>
 800629e:	6833      	ldr	r3, [r6, #0]
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	6032      	str	r2, [r6, #0]
 80062a4:	681e      	ldr	r6, [r3, #0]
 80062a6:	6862      	ldr	r2, [r4, #4]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7f9 ff98 	bl	80001e0 <memchr>
 80062b0:	b108      	cbz	r0, 80062b6 <_printf_i+0x1e6>
 80062b2:	1b80      	subs	r0, r0, r6
 80062b4:	6060      	str	r0, [r4, #4]
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	2300      	movs	r3, #0
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c0:	e7aa      	b.n	8006218 <_printf_i+0x148>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d0ad      	beq.n	800622c <_printf_i+0x15c>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	079b      	lsls	r3, r3, #30
 80062d4:	d413      	bmi.n	80062fe <_printf_i+0x22e>
 80062d6:	68e0      	ldr	r0, [r4, #12]
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	4298      	cmp	r0, r3
 80062dc:	bfb8      	it	lt
 80062de:	4618      	movlt	r0, r3
 80062e0:	e7a6      	b.n	8006230 <_printf_i+0x160>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	47d0      	blx	sl
 80062ec:	3001      	adds	r0, #1
 80062ee:	d09d      	beq.n	800622c <_printf_i+0x15c>
 80062f0:	3501      	adds	r5, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	9903      	ldr	r1, [sp, #12]
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	dcf2      	bgt.n	80062e2 <_printf_i+0x212>
 80062fc:	e7eb      	b.n	80062d6 <_printf_i+0x206>
 80062fe:	2500      	movs	r5, #0
 8006300:	f104 0619 	add.w	r6, r4, #25
 8006304:	e7f5      	b.n	80062f2 <_printf_i+0x222>
 8006306:	bf00      	nop
 8006308:	0800647d 	.word	0x0800647d
 800630c:	0800648e 	.word	0x0800648e

08006310 <memmove>:
 8006310:	4288      	cmp	r0, r1
 8006312:	b510      	push	{r4, lr}
 8006314:	eb01 0402 	add.w	r4, r1, r2
 8006318:	d902      	bls.n	8006320 <memmove+0x10>
 800631a:	4284      	cmp	r4, r0
 800631c:	4623      	mov	r3, r4
 800631e:	d807      	bhi.n	8006330 <memmove+0x20>
 8006320:	1e43      	subs	r3, r0, #1
 8006322:	42a1      	cmp	r1, r4
 8006324:	d008      	beq.n	8006338 <memmove+0x28>
 8006326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800632a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800632e:	e7f8      	b.n	8006322 <memmove+0x12>
 8006330:	4402      	add	r2, r0
 8006332:	4601      	mov	r1, r0
 8006334:	428a      	cmp	r2, r1
 8006336:	d100      	bne.n	800633a <memmove+0x2a>
 8006338:	bd10      	pop	{r4, pc}
 800633a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800633e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006342:	e7f7      	b.n	8006334 <memmove+0x24>

08006344 <_sbrk_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d06      	ldr	r5, [pc, #24]	@ (8006360 <_sbrk_r+0x1c>)
 8006348:	2300      	movs	r3, #0
 800634a:	4604      	mov	r4, r0
 800634c:	4608      	mov	r0, r1
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	f7fa fc04 	bl	8000b5c <_sbrk>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_sbrk_r+0x1a>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_sbrk_r+0x1a>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	2000029c 	.word	0x2000029c

08006364 <memcpy>:
 8006364:	440a      	add	r2, r1
 8006366:	4291      	cmp	r1, r2
 8006368:	f100 33ff 	add.w	r3, r0, #4294967295
 800636c:	d100      	bne.n	8006370 <memcpy+0xc>
 800636e:	4770      	bx	lr
 8006370:	b510      	push	{r4, lr}
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637a:	4291      	cmp	r1, r2
 800637c:	d1f9      	bne.n	8006372 <memcpy+0xe>
 800637e:	bd10      	pop	{r4, pc}

08006380 <_realloc_r>:
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006384:	4680      	mov	r8, r0
 8006386:	4615      	mov	r5, r2
 8006388:	460c      	mov	r4, r1
 800638a:	b921      	cbnz	r1, 8006396 <_realloc_r+0x16>
 800638c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006390:	4611      	mov	r1, r2
 8006392:	f7ff bc4b 	b.w	8005c2c <_malloc_r>
 8006396:	b92a      	cbnz	r2, 80063a4 <_realloc_r+0x24>
 8006398:	f7ff fbdc 	bl	8005b54 <_free_r>
 800639c:	2400      	movs	r4, #0
 800639e:	4620      	mov	r0, r4
 80063a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a4:	f000 f81a 	bl	80063dc <_malloc_usable_size_r>
 80063a8:	4285      	cmp	r5, r0
 80063aa:	4606      	mov	r6, r0
 80063ac:	d802      	bhi.n	80063b4 <_realloc_r+0x34>
 80063ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063b2:	d8f4      	bhi.n	800639e <_realloc_r+0x1e>
 80063b4:	4629      	mov	r1, r5
 80063b6:	4640      	mov	r0, r8
 80063b8:	f7ff fc38 	bl	8005c2c <_malloc_r>
 80063bc:	4607      	mov	r7, r0
 80063be:	2800      	cmp	r0, #0
 80063c0:	d0ec      	beq.n	800639c <_realloc_r+0x1c>
 80063c2:	42b5      	cmp	r5, r6
 80063c4:	462a      	mov	r2, r5
 80063c6:	4621      	mov	r1, r4
 80063c8:	bf28      	it	cs
 80063ca:	4632      	movcs	r2, r6
 80063cc:	f7ff ffca 	bl	8006364 <memcpy>
 80063d0:	4621      	mov	r1, r4
 80063d2:	4640      	mov	r0, r8
 80063d4:	f7ff fbbe 	bl	8005b54 <_free_r>
 80063d8:	463c      	mov	r4, r7
 80063da:	e7e0      	b.n	800639e <_realloc_r+0x1e>

080063dc <_malloc_usable_size_r>:
 80063dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e0:	1f18      	subs	r0, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bfbc      	itt	lt
 80063e6:	580b      	ldrlt	r3, [r1, r0]
 80063e8:	18c0      	addlt	r0, r0, r3
 80063ea:	4770      	bx	lr

080063ec <_init>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr

080063f8 <_fini>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr
