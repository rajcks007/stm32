/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */



/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>
/* USER Includes */
#include <lsm6dsl.h>





/* Private typedef -----------------------------------------------------------*/
/* USER Private typedef */





/* Private define ------------------------------------------------------------*/
/* USER Private define */
#define LSM6DSL_ADDR (0xD6 >> 1)




/* Private macro -------------------------------------------------------------*/
/* USER Private macro */





/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;

/* USER Private variables */





/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

/* USER Private function prototypes */
void LSM6DSL_Init(void);
uint8_t LSM6DSL_ReadID(void);
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz);
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az);
void LSM6DSL_ReadRegisters(uint8_t reg_addr, uint8_t *data, uint16_t size);
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz);





/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */





/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */





  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */





  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */





  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();





  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
  int16_t gyro_x, gyro_y, gyro_z;
  int16_t accel_x, accel_y, accel_z;

  /* USER CODE END 2 */





  /* Infinite loop */
  while (1)
  {
    /* USER CODE BEGIN 3 */

	  // Read gyroscope data
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);

	  // Read accelerometer data
	  LSM6DSL_ReadAccel(&accel_x, &accel_y, &accel_z);

	  // send data over uart
	  DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);

	  //delay
	  HAL_Delay(500);

	/* USER CODE END 3 */
  }

}





/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00201D2B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/**
  * @brief LSM6DSL_Init Initialization Function
  */
void LSM6DSL_Init(void)
{
    uint8_t data;

    // Check if LSM6DSL is connected by reading the WHO_AM_I register
    if (LSM6DSL_ReadID() == 0x6A)  // WHO_AM_I value should be 0x6A for LSM6DSL
    {
        // Set accelerometer to 1.66 kHz, 2g range
        data = 0x00;  // 1.66 kHz ODR, Â±2g
        HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDR, &data, 1, HAL_MAX_DELAY);

        // Set gyroscope to 1.66 kHz, 250 dps range
        data = 0x60;  // 1.66 kHz ODR, 250 dps
        HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDR, &data, 1, HAL_MAX_DELAY);
    }
}

/**
  * @brief LSM6DSL_ReadID Initialization Function
  */
uint8_t LSM6DSL_ReadID(void)
{
    uint8_t who_am_i = 0;
    LSM6DSL_ReadRegisters(LSM6DSL_ACC_GYRO_WHO_AM_I, &who_am_i, 1);
    return who_am_i;
}

/**
  * @brief LSM6DSL_ReadGyro Initialization Function
  */
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz)
{
    uint8_t gyro_data[6];

    // Read 6 bytes of gyro data (OUTX_L_G to OUTZ_H_G)
    LSM6DSL_ReadRegisters(LSM6DSL_ACC_GYRO_OUTX_L_G, gyro_data, 6);

    // Combine low and high bytes to get 16-bit gyroscope values
    *gx = (int16_t)(gyro_data[1] << 8 | gyro_data[0]);
    *gy = (int16_t)(gyro_data[3] << 8 | gyro_data[2]);
    *gz = (int16_t)(gyro_data[5] << 8 | gyro_data[4]);
}

/**
  * @brief LSM6DSL_ReadAccel Initialization Function
  */
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az)
{
    uint8_t accel_data[6];

    // Read 6 bytes of accelerometer data (OUTX_L_XL to OUTZ_H_XL)
    LSM6DSL_ReadRegisters(LSM6DSL_ACC_GYRO_OUTX_L_XL, accel_data, 6);

    // Combine low and high bytes to get 16-bit accelerometer values
    *ax = (int16_t)(accel_data[1] << 8 | accel_data[0]);
    *ay = (int16_t)(accel_data[3] << 8 | accel_data[2]);
    *az = (int16_t)(accel_data[5] << 8 | accel_data[4]);
}

/**
  * @brief LSM6DSL_ReadRegisters Initialization Function
  */
void LSM6DSL_ReadRegisters(uint8_t reg_addr, uint8_t *data, uint16_t size)
{
    // Transmit register address
    HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDR, &reg_addr, 1, HAL_MAX_DELAY);

    // Receive data from the sensor
    HAL_I2C_Master_Receive(&hi2c1, LSM6DSL_ADDR, data, size, HAL_MAX_DELAY);
}

/**
  * @brief UART_Transmit Data
  */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz)
{
	// Prepare data string
	char uart_buff[65];
	int buff_length;

	buff_length = snprintf(uart_buff, sizeof(uart_buff),
									"Acce: x=%d y=%d z=%d | Gyro: x=%d y=%d z=%d \r\n",
									ax, ay, az, gx, gy, gz);

//	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);

}





/* USER CODE BEGIN 4 */
/* USER CODE END 4 */





/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
