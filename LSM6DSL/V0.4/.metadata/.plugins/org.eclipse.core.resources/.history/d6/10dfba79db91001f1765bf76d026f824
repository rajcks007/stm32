/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */



/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>
/* USER Includes */





/* Private define ------------------------------------------------------------*/
/* USER Private define */
/** I2C Device Address 8 bit format  if SA0=0 -> D5 if SA0=1 -> D7 **/
#define LSM6DSL_I2C_ADD_L                       0xD5U
#define LSM6DSL_I2C_ADD_H                       0xD7U

/** Device Identification (Who am I) **/
#define LSM6DSL_ID                              0x6AU

#define LSM6DSL_FUNC_CFG_ACCESS                 0x01U
#define LSM6DSL_SENSOR_SYNC_TIME_FRAME          0x04U
#define LSM6DSL_SENSOR_SYNC_RES_RATIO           0x05U
#define LSM6DSL_FIFO_CTRL1                      0x06U
#define LSM6DSL_FIFO_CTRL2                      0x07U
#define LSM6DSL_FIFO_CTRL3                      0x08U
#define LSM6DSL_FIFO_CTRL4                      0x09U
#define LSM6DSL_FIFO_CTRL5                      0x0AU
#define LSM6DSL_DRDY_PULSE_CFG_G                0x0BU
#define LSM6DSL_INT1_CTRL                       0x0DU
#define LSM6DSL_INT2_CTRL                       0x0EU
#define LSM6DSL_WHO_AM_I                        0x0FU
#define LSM6DSL_CTRL1_XL                        0x10U
#define LSM6DSL_CTRL2_G                         0x11U
#define LSM6DSL_CTRL3_C                         0x12U
#define LSM6DSL_CTRL4_C                         0x13U
#define LSM6DSL_CTRL5_C                         0x14U
#define LSM6DSL_CTRL6_C                         0x15U
#define LSM6DSL_CTRL7_G                         0x16U
#define LSM6DSL_CTRL8_XL                        0x17U
#define LSM6DSL_CTRL9_XL                        0x18U
#define LSM6DSL_CTRL10_C                        0x19U
#define LSM6DSL_MASTER_CONFIG                   0x1AU
#define LSM6DSL_WAKE_UP_SRC                     0x1BU
#define LSM6DSL_TAP_SRC                         0x1CU
#define LSM6DSL_D6D_SRC                         0x1DU
#define LSM6DSL_STATUS_REG                      0x1EU

#define LSM6DSL_OUT_TEMP_L                      0x20U
#define LSM6DSL_OUT_TEMP_H                      0x21U
#define LSM6DSL_OUTX_L_G                        0x22U
#define LSM6DSL_OUTX_H_G                        0x23U
#define LSM6DSL_OUTY_L_G                        0x24U
#define LSM6DSL_OUTY_H_G                        0x25U
#define LSM6DSL_OUTZ_L_G                        0x26U
#define LSM6DSL_OUTZ_H_G                        0x27U
#define LSM6DSL_OUTX_L_XL                       0x28U
#define LSM6DSL_OUTX_H_XL                       0x29U
#define LSM6DSL_OUTY_L_XL                       0x2AU
#define LSM6DSL_OUTY_H_XL                       0x2BU
#define LSM6DSL_OUTZ_L_XL                       0x2CU
#define LSM6DSL_OUTZ_H_XL                       0x2DU
#define LSM6DSL_SENSORHUB1_REG                  0x2EU

#define LSM6DSL_SENSORHUB2_REG                  0x2FU
#define LSM6DSL_SENSORHUB3_REG                  0x30U
#define LSM6DSL_SENSORHUB4_REG                  0x31U
#define LSM6DSL_SENSORHUB5_REG                  0x32U
#define LSM6DSL_SENSORHUB6_REG                  0x33U
#define LSM6DSL_SENSORHUB7_REG                  0x34U
#define LSM6DSL_SENSORHUB8_REG                  0x35U
#define LSM6DSL_SENSORHUB9_REG                  0x36U
#define LSM6DSL_SENSORHUB10_REG                 0x37U
#define LSM6DSL_SENSORHUB11_REG                 0x38U
#define LSM6DSL_SENSORHUB12_REG                 0x39U
#define LSM6DSL_FIFO_STATUS1                    0x3AU
#define LSM6DSL_FIFO_STATUS2                    0x3BU
#define LSM6DSL_FIFO_STATUS3                    0x3CU

#define LSM6DSL_FIFO_DATA_OUT_L                 0x3EU
#define LSM6DSL_FIFO_DATA_OUT_H                 0x3FU
#define LSM6DSL_TIMESTAMP0_REG                  0x40U
#define LSM6DSL_TIMESTAMP1_REG                  0x41U
#define LSM6DSL_TIMESTAMP2_REG                  0x42U
#define LSM6DSL_STEP_TIMESTAMP_L                0x49U
#define LSM6DSL_STEP_TIMESTAMP_H                0x4AU
#define LSM6DSL_STEP_COUNTER_L                  0x4BU
#define LSM6DSL_STEP_COUNTER_H                  0x4CU

#define LSM6DSL_SENSORHUB13_REG                 0x4DU
#define LSM6DSL_SENSORHUB14_REG                 0x4EU
#define LSM6DSL_SENSORHUB15_REG                 0x4FU
#define LSM6DSL_SENSORHUB16_REG                 0x50U
#define LSM6DSL_SENSORHUB17_REG                 0x51U
#define LSM6DSL_SENSORHUB18_REG                 0x52U
#define LSM6DSL_FUNC_SRC1                       0x53U
#define LSM6DSL_FUNC_SRC2                       0x54U
#define LSM6DSL_WRIST_TILT_IA                   0x55U
#define LSM6DSL_TAP_CFG                         0x58U
#define LSM6DSL_TAP_THS_6D                      0x59U
#define LSM6DSL_INT_DUR2                        0x5AU
#define LSM6DSL_WAKE_UP_THS                     0x5BU
#define LSM6DSL_WAKE_UP_DUR                     0x5CU
#define LSM6DSL_FREE_FALL                       0x5DU
#define LSM6DSL_MD1_CFG                         0x5EU
#define LSM6DSL_MD2_CFG                         0x5FU
#define LSM6DSL_MASTER_CMD_CODE                 0x60U
#define LSM6DSL_SENS_SYNC_SPI_ERROR_CODE        0x61U
#define LSM6DSL_OUT_MAG_RAW_X_L                 0x66U
#define LSM6DSL_OUT_MAG_RAW_X_H                 0x67U
#define LSM6DSL_OUT_MAG_RAW_Y_L                 0x68U
#define LSM6DSL_OUT_MAG_RAW_Y_H                 0x69U
#define LSM6DSL_OUT_MAG_RAW_Z_L                 0x6AU
#define LSM6DSL_OUT_MAG_RAW_Z_H                 0x6BU
#define LSM6DSL_X_OFS_USR                       0x73U
#define LSM6DSL_Y_OFS_USR                       0x74U
#define LSM6DSL_Z_OFS_USR                       0x75U
#define LSM6DSL_SLV0_ADD                        0x02U

#define LSM6DSL_SLV0_SUBADD                     0x03U
#define LSM6DSL_SLAVE0_CONFIG                   0x04U
#define LSM6DSL_SLV1_ADD                        0x05U
#define LSM6DSL_SLV1_SUBADD                     0x06U
#define LSM6DSL_SLAVE1_CONFIG                   0x07U
#define LSM6DSL_SLV2_ADD                        0x08U
#define LSM6DSL_SLV2_SUBADD                     0x09U
#define LSM6DSL_SLAVE2_CONFIG                   0x0AU
#define LSM6DSL_SLV3_ADD                        0x0BU
#define LSM6DSL_SLV3_SUBADD                     0x0CU
#define LSM6DSL_SLAVE3_CONFIG                   0x0DU
#define LSM6DSL_DATAWRITE_SRC_MODE_SUB_SLV0     0x0EU
#define LSM6DSL_CONFIG_PEDO_THS_MIN             0x0FU
#define LSM6DSL_SM_THS                          0x13U
#define LSM6DSL_PEDO_DEB_REG                    0x14U

#define LSM6DSL_STEP_COUNT_DELTA                0x15U
#define LSM6DSL_MAG_SI_XX                       0x24U
#define LSM6DSL_MAG_SI_XY                       0x25U
#define LSM6DSL_MAG_SI_XZ                       0x26U
#define LSM6DSL_MAG_SI_YX                       0x27U
#define LSM6DSL_MAG_SI_YY                       0x28U
#define LSM6DSL_MAG_SI_YZ                       0x29U
#define LSM6DSL_MAG_SI_ZX                       0x2AU
#define LSM6DSL_MAG_SI_ZY                       0x2BU
#define LSM6DSL_MAG_SI_ZZ                       0x2CU
#define LSM6DSL_MAG_OFFX_L                      0x2DU
#define LSM6DSL_MAG_OFFX_H                      0x2EU
#define LSM6DSL_MAG_OFFY_L                      0x2FU
#define LSM6DSL_MAG_OFFY_H                      0x30U
#define LSM6DSL_MAG_OFFZ_L                      0x31U
#define LSM6DSL_MAG_OFFZ_H                      0x32U
#define LSM6DSL_A_WRIST_TILT_LAT                0x50U
#define LSM6DSL_A_WRIST_TILT_THS                0x54U
#define LSM6DSL_A_WRIST_TILT_MASK               0x59U
#define PROPERTY_DISABLE                        0U
#define PROPERTY_ENABLE                         1U
#define LSM6DSL_ADDR                            (0xD6 >> 1)


#define BIT_0 (0x01)
#define BIT_1 (0x02)
#define BIT_2 (0x04)
#define BIT_3 (0x08)
#define BIT_4 (0x10)
#define BIT_5 (0x20)
#define BIT_6 (0x40)
#define BIT_7 (0x80)
#define BIT_8 (0x0100)
#define BIT_9 (0x0200)
#define BIT_10 (0x0400)
#define BIT_11 (0x0800)
#define BIT_12 (0x1000)
#define BIT_13 (0x2000)
#define BIT_14 (0x4000)
#define BIT_15 (0x8000)


#define NOT_OK (0x0)
#define OK     (0x1)


// Accelerometer and Gyroscope settings
#define LSM6DSL_XL_ODR_104Hz     0x40   // Accelerometer ODR 104 Hz
#define LSM6DSL_GY_ODR_104Hz     0x40   // Gyroscope ODR 104 Hz
#define LSM6DSL_2g               0x00   // Full scale 2g for accelerometer
#define LSM6DSL_2000dps          0x0C   // Full scale 2000dps for gyroscope



/* Private typedef -----------------------------------------------------------*/
/* USER Private typedef */





/* Private macro -------------------------------------------------------------*/
/* USER Private macro */





/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;

/* USER Private variables */





/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

/* USER Private function prototypes */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz);


uint8_t LSM6DSL_init(void);
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz);
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az);
void LSM6DSL_write_register(uint8_t reg, uint8_t data);
uint8_t LSM6DSL_read_register(uint8_t reg);
uint8_t LSM6DSL_get_ID(void);
void LSM6DSL_set_sw_reset(uint8_t enable);
void LSM6DSL_set_data_rate_xl(uint8_t data_rate);
void LSM6DSL_set_full_scale_xl(uint8_t full_scale);
void LSM6DSL_set_data_rate_gy(uint8_t data_rate);
void LSM6DSL_set_full_scale_gy(uint8_t full_scale);
void LSM6DSL_set_block_data_update(uint8_t enable);
void LSM6DSL_set_block_data_update(uint8_t enable);







/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */





/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */





  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */





  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */





  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();


  LSM6DSL_init();


  /* USER CODE BEGIN 2 */
  int16_t gyro_x, gyro_y, gyro_z;
  int16_t accel_x, accel_y, accel_z;

  /* USER CODE END 2 */





  /* Infinite loop */
  while (1)
  {
    /* USER CODE BEGIN 3 */

	  // Read gyroscope data
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);

	  // Read accelerometer data
	  LSM6DSL_ReadAccel(&accel_x, &accel_y, &accel_z);


	  // send data over uart
	  DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);

	  //delay
	  HAL_Delay(500);

	/* USER CODE END 3 */
  }

}





/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00201D2B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/**
  * @brief LSM6DSL_Init Initialization Function
  */
// Initialize the LSM6DSL sensor
uint8_t LSM6DSL_init(void) {
    uint8_t rv = 0;    // return value indicating failure

    // Set chip select (if using SPI, otherwise not needed for I2C)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Assume PA9 is CS for SPI, not used for I2C

    // Check if the device ID matches the expected ID
    if (LSM6DSL_get_ID() == LSM6DSL_ID) {
        LSM6DSL_set_sw_reset(1);                      // Reset the sensor

        // Set accelerometer and gyroscope settings
        LSM6DSL_set_data_rate_xl(LSM6DSL_XL_ODR_104Hz);
        LSM6DSL_set_full_scale_xl(LSM6DSL_2g);
        LSM6DSL_set_data_rate_gy(LSM6DSL_GY_ODR_104Hz);
        LSM6DSL_set_full_scale_gy(LSM6DSL_2000dps);

        // Enable block data update to prevent partial reads
        LSM6DSL_set_block_data_update(1);

        rv = OK;         // Initialization successful
    }

   return rv;
}

/**
  * @brief LSM6DSL_ReadGyro Initialization Function
  */
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz)
{

    // Read 6 bytes of gyro data (OUTX_L_G to OUTZ_H_G)
    uint8_t p_buf_tx[] = { LSM6DSL_OUTX_L_G, LSM6DSL_OUTX_H_G,
    						LSM6DSL_OUTY_L_G, LSM6DSL_OUTY_H_G,
							LSM6DSL_OUTZ_L_G, LSM6DSL_OUTZ_H_G };



    // Combine low and high bytes to get 16-bit gyroscope values
    *gx = (int16_t)(p_buf_tx[0] | p_buf_tx[1] << 8);
    *gy = (int16_t)(p_buf_tx[2] | p_buf_tx[3] << 8);
    *gz = (int16_t)(p_buf_tx[4] | p_buf_tx[5] << 8);
}

/**
  * @brief LSM6DSL_ReadAccel Initialization Function
  */
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az)
{

    // Read 6 bytes of accelerometer data (OUTX_L_XL to OUTZ_H_XL)
    uint8_t p_buf_tx[] = { LSM6DSL_OUTX_L_XL, LSM6DSL_OUTX_H_XL,
        						LSM6DSL_OUTY_L_XL, LSM6DSL_OUTY_H_XL,
    							LSM6DSL_OUTZ_L_XL, LSM6DSL_OUTZ_H_XL };

    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDR, LSM6DSL_OUTX_L_XL, I2C_MEMADD_SIZE_8BIT, p_bud_tx[0], 1, HAL_MAX_DELAY);

    // Combine low and high bytes to get 16-bit accelerometer values
    *ax = (int16_t)(p_buf_tx[0] | p_buf_tx[1] << 8);
    *ay = (int16_t)(p_buf_tx[2] | p_buf_tx[3] << 8);
    *az = (int16_t)(p_buf_tx[4] | p_buf_tx[5] << 8);
}

// Helper function to write data to a specific register
void LSM6DSL_write_register(uint8_t reg, uint8_t data) {
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}

// Helper function to read data from a specific register
uint8_t LSM6DSL_read_register(uint8_t reg) {
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return data;
}

// Get the ID of the LSM6DSL sensor
uint8_t LSM6DSL_get_ID(void) {
    return LSM6DSL_read_register(LSM6DSL_WHO_AM_I);
}

// Perform a software reset on the LSM6DSL sensor
void LSM6DSL_set_sw_reset(uint8_t enable) {
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
    if (enable) {
        ctrl3_c |= 0x01;  // Set the SW_RESET bit
    } else {
        ctrl3_c &= ~0x01; // Clear the SW_RESET bit
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
}

// Set accelerometer data rate and full scale
void LSM6DSL_set_data_rate_xl(uint8_t data_rate) {
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
    ctrl1_xl = (ctrl1_xl & ~0xF0) | data_rate;  // Mask and set ODR bits
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
}

void LSM6DSL_set_full_scale_xl(uint8_t full_scale) {
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
    ctrl1_xl = (ctrl1_xl & ~0x0C) | full_scale;  // Mask and set full-scale bits
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
}

// Set gyroscope data rate and full scale
void LSM6DSL_set_data_rate_gy(uint8_t data_rate) {
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
    ctrl2_g = (ctrl2_g & ~0xF0) | data_rate;  // Mask and set ODR bits
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
}

void LSM6DSL_set_full_scale_gy(uint8_t full_scale) {
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
    ctrl2_g = (ctrl2_g & ~0x0C) | full_scale;  // Mask and set full-scale bits
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
}

// Enable/Disable block data update
void LSM6DSL_set_block_data_update(uint8_t enable) {
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
    if (enable) {
        ctrl3_c |= 0x40;  // Set the BDU bit (Block Data Update)
    } else {
        ctrl3_c &= ~0x40; // Clear the BDU bit
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
}

/**
  * @brief UART_Transmit Data
  */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz)
{
	// Prepare data string
	char uart_buff[96];
	int buff_length;

	buff_length = snprintf(uart_buff, sizeof(uart_buff),
									"Acce: x=%d y=%d z=%d | Gyro: x=%d y=%d z=%d \r\n",
									ax, ay, az, gx, gy, gz);

	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);

}





/* USER CODE BEGIN 4 */
/* USER CODE END 4 */





/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
