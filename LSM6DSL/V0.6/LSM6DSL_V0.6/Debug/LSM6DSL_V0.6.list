
LSM6DSL_V0.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004ca4  08004ca4  00005ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d30  08004d30  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d30  08004d30  00005d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d38  08004d38  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00005d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000258  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002b4  200002b4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c28e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a0c  00000000  00000000  0001231a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  00013d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ce  00000000  00000000  00014730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f409  00000000  00000000  00014efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4e4  00000000  00000000  00034307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c227e  00000000  00000000  000427eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104a69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e44  00000000  00000000  00104aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001078f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c8c 	.word	0x08004c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004c8c 	.word	0x08004c8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fd9e 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f828 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8f4 	bl	8000478 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f8c2 	bl	8000418 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000294:	f000 f882 	bl	800039c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LSM6DSL_init();
 8000298:	f000 f954 	bl	8000544 <LSM6DSL_init>

  startTime2 = HAL_GetTick();			// start timer
 800029c:	f000 fdec 	bl	8000e78 <HAL_GetTick>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a0c      	ldr	r2, [pc, #48]	@ (80002d4 <main+0x54>)
 80002a4:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CheckDataInRange();
 80002a6:	f000 f96b 	bl	8000580 <CheckDataInRange>

	  if(Time_flag)
 80002aa:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <main+0x58>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d006      	beq.n	80002c0 <main+0x40>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2120      	movs	r1, #32
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ba:	f001 f87d 	bl	80013b8 <HAL_GPIO_WritePin>
 80002be:	e005      	b.n	80002cc <main+0x4c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2120      	movs	r1, #32
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c8:	f001 f876 	bl	80013b8 <HAL_GPIO_WritePin>
	  }

	  //delay
	  HAL_Delay(100);
 80002cc:	2064      	movs	r0, #100	@ 0x64
 80002ce:	f000 fddf 	bl	8000e90 <HAL_Delay>
	  CheckDataInRange();
 80002d2:	e7e8      	b.n	80002a6 <main+0x26>
 80002d4:	2000007c 	.word	0x2000007c
 80002d8:	20000080 	.word	0x20000080

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b0a6      	sub	sp, #152	@ 0x98
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002e6:	2228      	movs	r2, #40	@ 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f004 f84e 	bl	800438c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2258      	movs	r2, #88	@ 0x58
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f004 f840 	bl	800438c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030c:	2302      	movs	r3, #2
 800030e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	2301      	movs	r3, #1
 8000312:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000314:	2310      	movs	r3, #16
 8000316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000328:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800032c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fe98 	bl	8002070 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000346:	f000 fbe3 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800035a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000360:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fed6 	bl	8003118 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000372:	f000 fbcd 	bl	8000b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000376:	2322      	movs	r3, #34	@ 0x22
 8000378:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f003 f8e7 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000390:	f000 fbbe 	bl	8000b10 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3798      	adds	r7, #152	@ 0x98
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000414 <MX_I2C1_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003a8:	f240 220b 	movw	r2, #523	@ 0x20b
 80003ac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ae:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b4:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ba:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c0:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003cc:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003da:	f001 f805 	bl	80013e8 <HAL_I2C_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e4:	f000 fb94 	bl	8000b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e8:	2100      	movs	r1, #0
 80003ea:	4809      	ldr	r0, [pc, #36]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003ec:	f001 fd88 	bl	8001f00 <HAL_I2CEx_ConfigAnalogFilter>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003f6:	f000 fb8b 	bl	8000b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fa:	2100      	movs	r1, #0
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <MX_I2C1_Init+0x74>)
 80003fe:	f001 fdca 	bl	8001f96 <HAL_I2CEx_ConfigDigitalFilter>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000408:	f000 fb82 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000084 	.word	0x20000084
 8000414:	40005400 	.word	0x40005400

08000418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 800041e:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <MX_USART2_UART_Init+0x5c>)
 8000420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 8000424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_USART2_UART_Init+0x58>)
 800045c:	f003 fa9a 	bl	8003994 <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 fb53 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200000d8 	.word	0x200000d8
 8000474:	40004400 	.word	0x40004400

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <MX_GPIO_Init+0xc4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a2a      	ldr	r2, [pc, #168]	@ (800053c <MX_GPIO_Init+0xc4>)
 8000494:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b28      	ldr	r3, [pc, #160]	@ (800053c <MX_GPIO_Init+0xc4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a6:	4b25      	ldr	r3, [pc, #148]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a24      	ldr	r2, [pc, #144]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b22      	ldr	r3, [pc, #136]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a1e      	ldr	r2, [pc, #120]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b19      	ldr	r3, [pc, #100]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a18      	ldr	r2, [pc, #96]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b16      	ldr	r3, [pc, #88]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2120      	movs	r1, #32
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f6:	f000 ff5f 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000500:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	480b      	ldr	r0, [pc, #44]	@ (8000540 <MX_GPIO_Init+0xc8>)
 8000512:	f000 fdc7 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000516:	2320      	movs	r3, #32
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000530:	f000 fdb8 	bl	80010a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000534:	bf00      	nop
 8000536:	3728      	adds	r7, #40	@ 0x28
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	48000800 	.word	0x48000800

08000544 <LSM6DSL_init>:
/* USER CODE BEGIN 4 */
/**
  * @brief LSM6DSL_Init Initialization Function
  */
// Initialize the LSM6DSL sensor
void LSM6DSL_init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

    // Set chip select (if using SPI, otherwise not needed for I2C)
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Assume PA9 is CS for SPI, not used for I2C

    // Check if the device ID matches the expected ID
    if (LSM6DSL_get_ID() == LSM6DSL_ID) {
 8000548:	f000 f9e0 	bl	800090c <LSM6DSL_get_ID>
 800054c:	4603      	mov	r3, r0
 800054e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000550:	d114      	bne.n	800057c <LSM6DSL_init+0x38>
        LSM6DSL_set_sw_reset(true);                      // Reset the sensor
 8000552:	2001      	movs	r0, #1
 8000554:	f000 f9e2 	bl	800091c <LSM6DSL_set_sw_reset>

        // Set accelerometer and gyroscope settings
        LSM6DSL_set_data_rate_xl(LSM6DSL_XL_ODR_104Hz);
 8000558:	2040      	movs	r0, #64	@ 0x40
 800055a:	f000 f9fe 	bl	800095a <LSM6DSL_set_data_rate_xl>
        LSM6DSL_set_full_scale_xl(LSM6DSL_2g);
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fa10 	bl	8000984 <LSM6DSL_set_full_scale_xl>
        LSM6DSL_set_data_rate_gy(LSM6DSL_GY_ODR_104Hz);
 8000564:	2040      	movs	r0, #64	@ 0x40
 8000566:	f000 fa2a 	bl	80009be <LSM6DSL_set_data_rate_gy>
        LSM6DSL_set_full_scale_gy(LSM6DSL_2000dps);
 800056a:	200c      	movs	r0, #12
 800056c:	f000 fa3c 	bl	80009e8 <LSM6DSL_set_full_scale_gy>
        LSM6DSL_set_Filter(LSM6DSL_168Hz);
 8000570:	201a      	movs	r0, #26
 8000572:	f000 fa56 	bl	8000a22 <LSM6DSL_set_Filter>


        // Enable block data update to prevent partial reads
        LSM6DSL_set_block_data_update(true);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fa70 	bl	8000a5c <LSM6DSL_set_block_data_update>

    }

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <CheckDataInRange>:

void CheckDataInRange(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
	  int16_t gyro_x, gyro_y, gyro_z;
	  int16_t accel_x, accel_y, accel_z;

	  // Read gyroscope data
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);
 8000586:	f107 020a 	add.w	r2, r7, #10
 800058a:	f107 010c 	add.w	r1, r7, #12
 800058e:	f107 030e 	add.w	r3, r7, #14
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f882 	bl	800069c <LSM6DSL_ReadGyro>

	  // Read accelerometer data
	  LSM6DSL_ReadAccel(&accel_x, &accel_y, &accel_z);
 8000598:	1d3a      	adds	r2, r7, #4
 800059a:	1db9      	adds	r1, r7, #6
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8fb 	bl	800079c <LSM6DSL_ReadAccel>

	  // send data over uart
	  DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);
 80005a6:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80005aa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80005ae:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80005b2:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 80005b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	462b      	mov	r3, r5
 80005c4:	4622      	mov	r2, r4
 80005c6:	f000 fa69 	bl	8000a9c <DataOver_UART>

//	  // check is data is within limit
	  if(accel_x >= lower_gyro_x && accel_x <= upper_gyro_x)
 80005ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <CheckDataInRange+0x108>)
 80005d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	db21      	blt.n	800061c <CheckDataInRange+0x9c>
 80005d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005dc:	4b2b      	ldr	r3, [pc, #172]	@ (800068c <CheckDataInRange+0x10c>)
 80005de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	dc1a      	bgt.n	800061c <CheckDataInRange+0x9c>
	  {
		  // check timer is on
		  if(startTime == 0)
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <CheckDataInRange+0x110>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d105      	bne.n	80005fa <CheckDataInRange+0x7a>
		  {
			  startTime = HAL_GetTick();			// start timer
 80005ee:	f000 fc43 	bl	8000e78 <HAL_GetTick>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a26      	ldr	r2, [pc, #152]	@ (8000690 <CheckDataInRange+0x110>)
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	e00c      	b.n	8000614 <CheckDataInRange+0x94>
		  }
		  else if ((HAL_GetTick() - startTime) >= TIME_LIMIT)
 80005fa:	f000 fc3d 	bl	8000e78 <HAL_GetTick>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <CheckDataInRange+0x110>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	f241 3287 	movw	r2, #4999	@ 0x1387
 800060a:	4293      	cmp	r3, r2
 800060c:	d902      	bls.n	8000614 <CheckDataInRange+0x94>
		  {
			  Time_flag = false;
 800060e:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <CheckDataInRange+0x114>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
		  }
		  startTime2 = 0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <CheckDataInRange+0x118>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e031      	b.n	8000680 <CheckDataInRange+0x100>
	  }
	  else
	  {
		  if(startTime2 == 0)
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <CheckDataInRange+0x118>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <CheckDataInRange+0xae>
		  {
			  startTime2 = HAL_GetTick();			// start timer
 8000624:	f000 fc28 	bl	8000e78 <HAL_GetTick>
 8000628:	4603      	mov	r3, r0
 800062a:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <CheckDataInRange+0x118>)
 800062c:	6013      	str	r3, [r2, #0]
		  }
		  startTime = 0;
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <CheckDataInRange+0x110>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
		  if((HAL_GetTick() - startTime2) >= TIME_LIMIT)
 8000634:	f000 fc20 	bl	8000e78 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <CheckDataInRange+0x118>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000644:	4293      	cmp	r3, r2
 8000646:	d917      	bls.n	8000678 <CheckDataInRange+0xf8>
		  {
			  lower_gyro_x = accel_x - 1000;
 8000648:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800064c:	b29b      	uxth	r3, r3
 800064e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000652:	b29b      	uxth	r3, r3
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <CheckDataInRange+0x108>)
 8000658:	801a      	strh	r2, [r3, #0]
			  upper_gyro_x = accel_x + 1000;
 800065a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800065e:	b29b      	uxth	r3, r3
 8000660:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000664:	b29b      	uxth	r3, r3
 8000666:	b21a      	sxth	r2, r3
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <CheckDataInRange+0x10c>)
 800066a:	801a      	strh	r2, [r3, #0]
			  startTime2 = 0;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <CheckDataInRange+0x118>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
			  Time_flag = false;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <CheckDataInRange+0x114>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
		  }
		  Time_flag = true;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <CheckDataInRange+0x114>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	  }

}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bdb0      	pop	{r4, r5, r7, pc}
 8000688:	20000160 	.word	0x20000160
 800068c:	20000162 	.word	0x20000162
 8000690:	20000078 	.word	0x20000078
 8000694:	20000080 	.word	0x20000080
 8000698:	2000007c 	.word	0x2000007c

0800069c <LSM6DSL_ReadGyro>:

/**
  * @brief LSM6DSL_ReadGyro Initialization Function
  */
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]

    // Read 6 bytes of gyro data (OUTX_L_G to OUTZ_H_G)

    uint8_t p_buf_rx[6];

        HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTX_L_G, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[0], 1, HAL_MAX_DELAY);
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	2222      	movs	r2, #34	@ 0x22
 80006bc:	21d5      	movs	r1, #213	@ 0xd5
 80006be:	4836      	ldr	r0, [pc, #216]	@ (8000798 <LSM6DSL_ReadGyro+0xfc>)
 80006c0:	f001 f842 	bl	8001748 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTX_H_G, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[1], 1, HAL_MAX_DELAY);
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	3301      	adds	r3, #1
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	2223      	movs	r2, #35	@ 0x23
 80006da:	21d5      	movs	r1, #213	@ 0xd5
 80006dc:	482e      	ldr	r0, [pc, #184]	@ (8000798 <LSM6DSL_ReadGyro+0xfc>)
 80006de:	f001 f833 	bl	8001748 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTY_L_G, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[2], 1, HAL_MAX_DELAY);
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	3302      	adds	r3, #2
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	2224      	movs	r2, #36	@ 0x24
 80006f8:	21d5      	movs	r1, #213	@ 0xd5
 80006fa:	4827      	ldr	r0, [pc, #156]	@ (8000798 <LSM6DSL_ReadGyro+0xfc>)
 80006fc:	f001 f824 	bl	8001748 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTY_H_G, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[3], 1, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2301      	movs	r3, #1
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	3303      	adds	r3, #3
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	2225      	movs	r2, #37	@ 0x25
 8000716:	21d5      	movs	r1, #213	@ 0xd5
 8000718:	481f      	ldr	r0, [pc, #124]	@ (8000798 <LSM6DSL_ReadGyro+0xfc>)
 800071a:	f001 f815 	bl	8001748 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTZ_L_G, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[4], 1, HAL_MAX_DELAY);
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	3304      	adds	r3, #4
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	2226      	movs	r2, #38	@ 0x26
 8000734:	21d5      	movs	r1, #213	@ 0xd5
 8000736:	4818      	ldr	r0, [pc, #96]	@ (8000798 <LSM6DSL_ReadGyro+0xfc>)
 8000738:	f001 f806 	bl	8001748 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTZ_H_G, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[5], 1, HAL_MAX_DELAY);
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2301      	movs	r3, #1
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	3305      	adds	r3, #5
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2301      	movs	r3, #1
 8000750:	2227      	movs	r2, #39	@ 0x27
 8000752:	21d5      	movs	r1, #213	@ 0xd5
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <LSM6DSL_ReadGyro+0xfc>)
 8000756:	f000 fff7 	bl	8001748 <HAL_I2C_Mem_Read>


    // Combine low and high bytes to get 16-bit gyroscope values
    *gx = (int16_t)(p_buf_rx[0] | p_buf_rx[1] << 8);
 800075a:	7c3b      	ldrb	r3, [r7, #16]
 800075c:	b21a      	sxth	r2, r3
 800075e:	7c7b      	ldrb	r3, [r7, #17]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21a      	sxth	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(p_buf_rx[2] | p_buf_rx[3] << 8);
 800076c:	7cbb      	ldrb	r3, [r7, #18]
 800076e:	b21a      	sxth	r2, r3
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	b21b      	sxth	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b21a      	sxth	r2, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(p_buf_rx[4] | p_buf_rx[5] << 8);
 800077e:	7d3b      	ldrb	r3, [r7, #20]
 8000780:	b21a      	sxth	r2, r3
 8000782:	7d7b      	ldrb	r3, [r7, #21]
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b21b      	sxth	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b21a      	sxth	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	801a      	strh	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000084 	.word	0x20000084

0800079c <LSM6DSL_ReadAccel>:

/**
  * @brief LSM6DSL_ReadAccel Initialization Function
  */
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]

    uint8_t p_buf_rx[6];

    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTX_L_XL, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[0], 1, HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	2228      	movs	r2, #40	@ 0x28
 80007bc:	21d5      	movs	r1, #213	@ 0xd5
 80007be:	4836      	ldr	r0, [pc, #216]	@ (8000898 <LSM6DSL_ReadAccel+0xfc>)
 80007c0:	f000 ffc2 	bl	8001748 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTX_H_XL, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[1], 1, HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	9302      	str	r3, [sp, #8]
 80007ca:	2301      	movs	r3, #1
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	3301      	adds	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	2229      	movs	r2, #41	@ 0x29
 80007da:	21d5      	movs	r1, #213	@ 0xd5
 80007dc:	482e      	ldr	r0, [pc, #184]	@ (8000898 <LSM6DSL_ReadAccel+0xfc>)
 80007de:	f000 ffb3 	bl	8001748 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTY_L_XL, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[2], 1, HAL_MAX_DELAY);
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	2301      	movs	r3, #1
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	3302      	adds	r3, #2
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	222a      	movs	r2, #42	@ 0x2a
 80007f8:	21d5      	movs	r1, #213	@ 0xd5
 80007fa:	4827      	ldr	r0, [pc, #156]	@ (8000898 <LSM6DSL_ReadAccel+0xfc>)
 80007fc:	f000 ffa4 	bl	8001748 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTY_H_XL, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[3], 1, HAL_MAX_DELAY);
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	3303      	adds	r3, #3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	222b      	movs	r2, #43	@ 0x2b
 8000816:	21d5      	movs	r1, #213	@ 0xd5
 8000818:	481f      	ldr	r0, [pc, #124]	@ (8000898 <LSM6DSL_ReadAccel+0xfc>)
 800081a:	f000 ff95 	bl	8001748 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTZ_L_XL, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[4], 1, HAL_MAX_DELAY);
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	2301      	movs	r3, #1
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	3304      	adds	r3, #4
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	222c      	movs	r2, #44	@ 0x2c
 8000834:	21d5      	movs	r1, #213	@ 0xd5
 8000836:	4818      	ldr	r0, [pc, #96]	@ (8000898 <LSM6DSL_ReadAccel+0xfc>)
 8000838:	f000 ff86 	bl	8001748 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_OUTZ_H_XL, I2C_MEMADD_SIZE_8BIT, &p_buf_rx[5], 1, HAL_MAX_DELAY);
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	2301      	movs	r3, #1
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	3305      	adds	r3, #5
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	222d      	movs	r2, #45	@ 0x2d
 8000852:	21d5      	movs	r1, #213	@ 0xd5
 8000854:	4810      	ldr	r0, [pc, #64]	@ (8000898 <LSM6DSL_ReadAccel+0xfc>)
 8000856:	f000 ff77 	bl	8001748 <HAL_I2C_Mem_Read>

    // Combine low and high bytes to get 16-bit accelerometer values
    *ax = (int16_t)(p_buf_rx[0] | p_buf_rx[1] << 8);
 800085a:	7c3b      	ldrb	r3, [r7, #16]
 800085c:	b21a      	sxth	r2, r3
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21a      	sxth	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(p_buf_rx[2] | p_buf_rx[3] << 8);
 800086c:	7cbb      	ldrb	r3, [r7, #18]
 800086e:	b21a      	sxth	r2, r3
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b21a      	sxth	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(p_buf_rx[4] | p_buf_rx[5] << 8);
 800087e:	7d3b      	ldrb	r3, [r7, #20]
 8000880:	b21a      	sxth	r2, r3
 8000882:	7d7b      	ldrb	r3, [r7, #21]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	b21b      	sxth	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	b21a      	sxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	801a      	strh	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000084 	.word	0x20000084

0800089c <LSM6DSL_write_register>:

// Helper function to write data to a specific register
void LSM6DSL_write_register(uint8_t reg, uint8_t data) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_I2C_ADD_W0, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	2301      	movs	r3, #1
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	21d4      	movs	r1, #212	@ 0xd4
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <LSM6DSL_write_register+0x34>)
 80008c4:	f000 fe2c 	bl	8001520 <HAL_I2C_Mem_Write>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000084 	.word	0x20000084

080008d4 <LSM6DSL_read_register>:

// Helper function to read data from a specific register
uint8_t LSM6DSL_read_register(uint8_t reg) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af04      	add	r7, sp, #16
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	2301      	movs	r3, #1
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	f107 030f 	add.w	r3, r7, #15
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	21d5      	movs	r1, #213	@ 0xd5
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <LSM6DSL_read_register+0x34>)
 80008f8:	f000 ff26 	bl	8001748 <HAL_I2C_Mem_Read>
    return data;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000084 	.word	0x20000084

0800090c <LSM6DSL_get_ID>:

// Get the ID of the LSM6DSL sensor
uint8_t LSM6DSL_get_ID(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
//	uint8_t new_ID = 0;
    return LSM6DSL_read_register(LSM6DSL_WHO_AM_I);
 8000910:	200f      	movs	r0, #15
 8000912:	f7ff ffdf 	bl	80008d4 <LSM6DSL_read_register>
 8000916:	4603      	mov	r3, r0
//    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADD_R0, LSM6DSL_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &new_ID, 1, HAL_MAX_DELAY);
//    return new_ID;

}
 8000918:	4618      	mov	r0, r3
 800091a:	bd80      	pop	{r7, pc}

0800091c <LSM6DSL_set_sw_reset>:

// Perform a software reset on the LSM6DSL sensor
void LSM6DSL_set_sw_reset(uint8_t enable) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
 8000926:	2012      	movs	r0, #18
 8000928:	f7ff ffd4 	bl	80008d4 <LSM6DSL_read_register>
 800092c:	4603      	mov	r3, r0
 800092e:	73fb      	strb	r3, [r7, #15]
    if (enable) {
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d004      	beq.n	8000940 <LSM6DSL_set_sw_reset+0x24>
        ctrl3_c |= 0x01;  // Set the SW_RESET bit
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e003      	b.n	8000948 <LSM6DSL_set_sw_reset+0x2c>
    } else {
        ctrl3_c &= ~0x01; // Clear the SW_RESET bit
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	4619      	mov	r1, r3
 800094c:	2012      	movs	r0, #18
 800094e:	f7ff ffa5 	bl	800089c <LSM6DSL_write_register>
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <LSM6DSL_set_data_rate_xl>:

// Set accelerometer data rate and full scale
void LSM6DSL_set_data_rate_xl(uint8_t data_rate_xl) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl1_data_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
 8000964:	2010      	movs	r0, #16
 8000966:	f7ff ffb5 	bl	80008d4 <LSM6DSL_read_register>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
    ctrl1_data_xl = (ctrl1_data_xl & ~0xFF) | data_rate_xl;  // Mask and set ODR bits
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_data_xl);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	4619      	mov	r1, r3
 8000976:	2010      	movs	r0, #16
 8000978:	f7ff ff90 	bl	800089c <LSM6DSL_write_register>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <LSM6DSL_set_full_scale_xl>:

void LSM6DSL_set_full_scale_xl(uint8_t full_scale_xl) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
 800098e:	2010      	movs	r0, #16
 8000990:	f7ff ffa0 	bl	80008d4 <LSM6DSL_read_register>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
    ctrl1_xl = (ctrl1_xl & ~0x0C) | full_scale_xl;  // Mask and set full-scale bits
 8000998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099c:	f023 030c 	bic.w	r3, r3, #12
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	4619      	mov	r1, r3
 80009b0:	2010      	movs	r0, #16
 80009b2:	f7ff ff73 	bl	800089c <LSM6DSL_write_register>
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <LSM6DSL_set_data_rate_gy>:

// Set gyroscope data rate and full scale
void LSM6DSL_set_data_rate_gy(uint8_t data_rate_g) {
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl2_data_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
 80009c8:	2011      	movs	r0, #17
 80009ca:	f7ff ff83 	bl	80008d4 <LSM6DSL_read_register>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
    ctrl2_data_g = (ctrl2_data_g & ~0xFF) | data_rate_g;  // Mask and set ODR bits
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_data_g);
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	4619      	mov	r1, r3
 80009da:	2011      	movs	r0, #17
 80009dc:	f7ff ff5e 	bl	800089c <LSM6DSL_write_register>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <LSM6DSL_set_full_scale_gy>:

void LSM6DSL_set_full_scale_gy(uint8_t full_scale_g) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
 80009f2:	2011      	movs	r0, #17
 80009f4:	f7ff ff6e 	bl	80008d4 <LSM6DSL_read_register>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]
    ctrl2_g = (ctrl2_g & ~0x0C) | full_scale_g;  // Mask and set full-scale bits
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	f023 030c 	bic.w	r3, r3, #12
 8000a04:	b25a      	sxtb	r2, r3
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	73fb      	strb	r3, [r7, #15]
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4619      	mov	r1, r3
 8000a14:	2011      	movs	r0, #17
 8000a16:	f7ff ff41 	bl	800089c <LSM6DSL_write_register>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <LSM6DSL_set_Filter>:

// set bandwidth of 168Hz
void LSM6DSL_set_Filter (uint8_t bandwidth)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl6_c = LSM6DSL_read_register(LSM6DSL_CTRL6_C);
 8000a2c:	2015      	movs	r0, #21
 8000a2e:	f7ff ff51 	bl	80008d4 <LSM6DSL_read_register>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
	ctrl6_c = (ctrl6_c & ~0x1F) | bandwidth;  // Mask and set full-scale bits
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	f023 031f 	bic.w	r3, r3, #31
 8000a3e:	b25a      	sxtb	r2, r3
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	73fb      	strb	r3, [r7, #15]
	LSM6DSL_write_register(LSM6DSL_CTRL6_C, bandwidth);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2015      	movs	r0, #21
 8000a50:	f7ff ff24 	bl	800089c <LSM6DSL_write_register>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <LSM6DSL_set_block_data_update>:
	ctrl8_c = (ctrl8_c & ~0xFF) | LPF;  // Mask and set full-scale bits
	LSM6DSL_write_register(LSM6DSL_CTRL8_XL, LPF);
}

// Enable/Disable block data update
void LSM6DSL_set_block_data_update(uint8_t enable) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
 8000a66:	2012      	movs	r0, #18
 8000a68:	f7ff ff34 	bl	80008d4 <LSM6DSL_read_register>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	73fb      	strb	r3, [r7, #15]
    if (enable) {
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d004      	beq.n	8000a80 <LSM6DSL_set_block_data_update+0x24>
        ctrl3_c |= 0x40;  // Set the BDU bit (Block Data Update)
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e003      	b.n	8000a88 <LSM6DSL_set_block_data_update+0x2c>
    } else {
        ctrl3_c &= ~0x40; // Clear the BDU bit
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a86:	73fb      	strb	r3, [r7, #15]
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2012      	movs	r0, #18
 8000a8e:	f7ff ff05 	bl	800089c <LSM6DSL_write_register>
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <DataOver_UART>:

/**
  * @brief UART_Transmit Data
  */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz)
{
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	b0a3      	sub	sp, #140	@ 0x8c
 8000aa0:	af06      	add	r7, sp, #24
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	803b      	strh	r3, [r7, #0]
	int buff_length;

//	buff_length = snprintf(uart_buff, sizeof(uart_buff),
//									"/* Acce: x=%d y=%d z=%d | Gyro: x=%d y=%d z=%d */\r\n",
//									ax, ay, az, gx, gy, gz);
	buff_length = snprintf(uart_buff, sizeof(uart_buff),
 8000aba:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8000abe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ac2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ac6:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000aca:	f9b7 0088 	ldrsh.w	r0, [r7, #136]	@ 0x88
 8000ace:	f9b7 408c 	ldrsh.w	r4, [r7, #140]	@ 0x8c
 8000ad2:	f107 050c 	add.w	r5, r7, #12
 8000ad6:	9404      	str	r4, [sp, #16]
 8000ad8:	9003      	str	r0, [sp, #12]
 8000ada:	9102      	str	r1, [sp, #8]
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4633      	mov	r3, r6
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <DataOver_UART+0x6c>)
 8000ae4:	2160      	movs	r1, #96	@ 0x60
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f003 fc1c 	bl	8004324 <sniprintf>
 8000aec:	66f8      	str	r0, [r7, #108]	@ 0x6c
									"/* %d; %d; %d; %d; %d; %d */\r\n",
									ax, ay, az, gx, gy, gz);

	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 8000aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f107 010c 	add.w	r1, r7, #12
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <DataOver_UART+0x70>)
 8000afc:	f002 ff98 	bl	8003a30 <HAL_UART_Transmit>

}
 8000b00:	bf00      	nop
 8000b02:	3774      	adds	r7, #116	@ 0x74
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	08004ca4 	.word	0x08004ca4
 8000b0c:	200000d8 	.word	0x200000d8

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 fa72 	bl	800103c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <HAL_I2C_MspInit+0x8c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d130      	bne.n	8000be8 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <HAL_I2C_MspInit+0x90>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf4 <HAL_I2C_MspInit+0x90>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_I2C_MspInit+0x90>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480f      	ldr	r0, [pc, #60]	@ (8000bf8 <HAL_I2C_MspInit+0x94>)
 8000bbc:	f000 fa72 	bl	80010a4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB8_FMP);
 8000bc0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000bc4:	f001 fa34 	bl	8002030 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB9_FMP);
 8000bc8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000bcc:	f001 fa30 	bl	8002030 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_I2C_MspInit+0x90>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_I2C_MspInit+0x90>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bda:	61d3      	str	r3, [r2, #28]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_I2C_MspInit+0x90>)
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	@ 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <HAL_UART_MspInit+0x7c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d128      	bne.n	8000c70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_UART_MspInit+0x80>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6c:	f000 fa1a 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8bb 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fb44 	bl	800439c <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20010000 	.word	0x20010000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000164 	.word	0x20000164
 8000d48:	200002b8 	.word	0x200002b8

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fb03 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fa6d 	bl	8000280 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000db4:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 8000db8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dbc:	200002b4 	.word	0x200002b4

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f931 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fe9c 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f93b 	bl	800108a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f911 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000168 	.word	0x20000168

08000e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000168 	.word	0x20000168

08000e90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff47 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff5c 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e160      	b.n	8001376 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8152 	beq.w	8001370 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <HAL_GPIO_Init+0x40>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f003 0201 	and.w	r2, r3, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	6939      	ldr	r1, [r7, #16]
 80011d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0203 	and.w	r2, r3, #3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80ac 	beq.w	8001370 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	4b5e      	ldr	r3, [pc, #376]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a5d      	ldr	r2, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HAL_GPIO_Init+0x2f0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001230:	4a59      	ldr	r2, [pc, #356]	@ (8001398 <HAL_GPIO_Init+0x2f4>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800125a:	d025      	beq.n	80012a8 <HAL_GPIO_Init+0x204>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4f      	ldr	r2, [pc, #316]	@ (800139c <HAL_GPIO_Init+0x2f8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d01f      	beq.n	80012a4 <HAL_GPIO_Init+0x200>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4e      	ldr	r2, [pc, #312]	@ (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d019      	beq.n	80012a0 <HAL_GPIO_Init+0x1fc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4d      	ldr	r2, [pc, #308]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d013      	beq.n	800129c <HAL_GPIO_Init+0x1f8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a4c      	ldr	r2, [pc, #304]	@ (80013a8 <HAL_GPIO_Init+0x304>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d00d      	beq.n	8001298 <HAL_GPIO_Init+0x1f4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a4b      	ldr	r2, [pc, #300]	@ (80013ac <HAL_GPIO_Init+0x308>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x1f0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a4a      	ldr	r2, [pc, #296]	@ (80013b0 <HAL_GPIO_Init+0x30c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_GPIO_Init+0x1ec>
 800128c:	2306      	movs	r3, #6
 800128e:	e00c      	b.n	80012aa <HAL_GPIO_Init+0x206>
 8001290:	2307      	movs	r3, #7
 8001292:	e00a      	b.n	80012aa <HAL_GPIO_Init+0x206>
 8001294:	2305      	movs	r3, #5
 8001296:	e008      	b.n	80012aa <HAL_GPIO_Init+0x206>
 8001298:	2304      	movs	r3, #4
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x206>
 800129c:	2303      	movs	r3, #3
 800129e:	e004      	b.n	80012aa <HAL_GPIO_Init+0x206>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x206>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_GPIO_Init+0x206>
 80012a8:	2300      	movs	r3, #0
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ba:	4937      	ldr	r1, [pc, #220]	@ (8001398 <HAL_GPIO_Init+0x2f4>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f2:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001316:	4a27      	ldr	r2, [pc, #156]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001340:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f ae97 	bne.w	80010b4 <HAL_GPIO_Init+0x10>
  }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00
 80013a8:	48001000 	.word	0x48001000
 80013ac:	48001400 	.word	0x48001400
 80013b0:	48001800 	.word	0x48001800
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e08d      	b.n	8001516 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fba8 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2224      	movs	r2, #36	@ 0x24
 8001418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	e006      	b.n	8001470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800146e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d108      	bne.n	800148a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	e007      	b.n	800149a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69d9      	ldr	r1, [r3, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1a      	ldr	r2, [r3, #32]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	817b      	strh	r3, [r7, #10]
 8001532:	460b      	mov	r3, r1
 8001534:	813b      	strh	r3, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	f040 80f9 	bne.w	800173a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_I2C_Mem_Write+0x34>
 800154e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0ed      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_I2C_Mem_Write+0x4e>
 800156a:	2302      	movs	r3, #2
 800156c:	e0e6      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001576:	f7ff fc7f 	bl	8000e78 <HAL_GetTick>
 800157a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2319      	movs	r3, #25
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fac3 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d1      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2221      	movs	r2, #33	@ 0x21
 800159c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2240      	movs	r2, #64	@ 0x40
 80015a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a3a      	ldr	r2, [r7, #32]
 80015b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015c0:	88f8      	ldrh	r0, [r7, #6]
 80015c2:	893a      	ldrh	r2, [r7, #8]
 80015c4:	8979      	ldrh	r1, [r7, #10]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4603      	mov	r3, r0
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f9d3 	bl	800197c <I2C_RequestMemoryWrite>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0a9      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	d90e      	bls.n	8001610 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	22ff      	movs	r2, #255	@ 0xff
 80015f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	8979      	ldrh	r1, [r7, #10]
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fc47 	bl	8001e9c <I2C_TransferConfig>
 800160e:	e00f      	b.n	8001630 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161e:	b2da      	uxtb	r2, r3
 8001620:	8979      	ldrh	r1, [r7, #10]
 8001622:	2300      	movs	r3, #0
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 fc36 	bl	8001e9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fac6 	bl	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e07b      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d034      	beq.n	80016e8 <HAL_I2C_Mem_Write+0x1c8>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	d130      	bne.n	80016e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168c:	2200      	movs	r2, #0
 800168e:	2180      	movs	r1, #128	@ 0x80
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fa3f 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e04d      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2bff      	cmp	r3, #255	@ 0xff
 80016a8:	d90e      	bls.n	80016c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	22ff      	movs	r2, #255	@ 0xff
 80016ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	8979      	ldrh	r1, [r7, #10]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 fbeb 	bl	8001e9c <I2C_TransferConfig>
 80016c6:	e00f      	b.n	80016e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fbda 	bl	8001e9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d19e      	bne.n	8001630 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 faac 	bl	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01a      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2220      	movs	r2, #32
 800170c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_I2C_Mem_Write+0x224>)
 800171a:	400b      	ands	r3, r1
 800171c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800173a:	2302      	movs	r3, #2
  }
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	fe00e800 	.word	0xfe00e800

08001748 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	460b      	mov	r3, r1
 800175c:	813b      	strh	r3, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	f040 80fd 	bne.w	800196a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <HAL_I2C_Mem_Read+0x34>
 8001776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001782:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0f1      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_I2C_Mem_Read+0x4e>
 8001792:	2302      	movs	r3, #2
 8001794:	e0ea      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800179e:	f7ff fb6b 	bl	8000e78 <HAL_GetTick>
 80017a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2319      	movs	r3, #25
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f9af 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0d5      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2222      	movs	r2, #34	@ 0x22
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2240      	movs	r2, #64	@ 0x40
 80017cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a3a      	ldr	r2, [r7, #32]
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017e8:	88f8      	ldrh	r0, [r7, #6]
 80017ea:	893a      	ldrh	r2, [r7, #8]
 80017ec:	8979      	ldrh	r1, [r7, #10]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4603      	mov	r3, r0
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f913 	bl	8001a24 <I2C_RequestMemoryRead>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0ad      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	2bff      	cmp	r3, #255	@ 0xff
 8001818:	d90e      	bls.n	8001838 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001824:	b2da      	uxtb	r2, r3
 8001826:	8979      	ldrh	r1, [r7, #10]
 8001828:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <HAL_I2C_Mem_Read+0x22c>)
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 fb33 	bl	8001e9c <I2C_TransferConfig>
 8001836:	e00f      	b.n	8001858 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001846:	b2da      	uxtb	r2, r3
 8001848:	8979      	ldrh	r1, [r7, #10]
 800184a:	4b4a      	ldr	r3, [pc, #296]	@ (8001974 <HAL_I2C_Mem_Read+0x22c>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fb22 	bl	8001e9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185e:	2200      	movs	r2, #0
 8001860:	2104      	movs	r1, #4
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f956 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07c      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d034      	beq.n	8001918 <HAL_I2C_Mem_Read+0x1d0>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d130      	bne.n	8001918 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018bc:	2200      	movs	r2, #0
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f927 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e04d      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2bff      	cmp	r3, #255	@ 0xff
 80018d8:	d90e      	bls.n	80018f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	8979      	ldrh	r1, [r7, #10]
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 fad3 	bl	8001e9c <I2C_TransferConfig>
 80018f6:	e00f      	b.n	8001918 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	b2da      	uxtb	r2, r3
 8001908:	8979      	ldrh	r1, [r7, #10]
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fac2 	bl	8001e9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d19a      	bne.n	8001858 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f994 	bl	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e01a      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2220      	movs	r2, #32
 800193c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_I2C_Mem_Read+0x230>)
 800194a:	400b      	ands	r3, r1
 800194c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	80002400 	.word	0x80002400
 8001978:	fe00e800 	.word	0xfe00e800

0800197c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	817b      	strh	r3, [r7, #10]
 800198e:	460b      	mov	r3, r1
 8001990:	813b      	strh	r3, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	8979      	ldrh	r1, [r7, #10]
 800199c:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <I2C_RequestMemoryWrite+0xa4>)
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fa79 	bl	8001e9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	69b9      	ldr	r1, [r7, #24]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f909 	bl	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e02c      	b.n	8001a18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019c4:	893b      	ldrh	r3, [r7, #8]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80019ce:	e015      	b.n	80019fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019d0:	893b      	ldrh	r3, [r7, #8]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	69b9      	ldr	r1, [r7, #24]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f8ef 	bl	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e012      	b.n	8001a18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019f2:	893b      	ldrh	r3, [r7, #8]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f884 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	80002000 	.word	0x80002000

08001a24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	817b      	strh	r3, [r7, #10]
 8001a36:	460b      	mov	r3, r1
 8001a38:	813b      	strh	r3, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	8979      	ldrh	r1, [r7, #10]
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <I2C_RequestMemoryRead+0xa4>)
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa26 	bl	8001e9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8b6 	bl	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e02c      	b.n	8001abe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a74:	e015      	b.n	8001aa2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f89c 	bl	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e012      	b.n	8001abe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a98:	893b      	ldrh	r3, [r7, #8]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2140      	movs	r1, #64	@ 0x40
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f831 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	80002000 	.word	0x80002000

08001acc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d103      	bne.n	8001aea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d007      	beq.n	8001b08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	619a      	str	r2, [r3, #24]
  }
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b24:	e03b      	b.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f8d6 	bl	8001cdc <I2C_IsErrorOccurred>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e041      	b.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d02d      	beq.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff f999 	bl	8000e78 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d122      	bne.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4013      	ands	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d113      	bne.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f043 0220 	orr.w	r2, r3, #32
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d0b4      	beq.n	8001b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd2:	e033      	b.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f87f 	bl	8001cdc <I2C_IsErrorOccurred>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e031      	b.n	8001c4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bee:	d025      	beq.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf0:	f7ff f942 	bl	8000e78 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d302      	bcc.n	8001c06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d11a      	bne.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d013      	beq.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e007      	b.n	8001c4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d1c4      	bne.n	8001bd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c60:	e02f      	b.n	8001cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f838 	bl	8001cdc <I2C_IsErrorOccurred>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e02d      	b.n	8001cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c76:	f7ff f8ff 	bl	8000e78 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d302      	bcc.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11a      	bne.n	8001cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d013      	beq.n	8001cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f043 0220 	orr.w	r2, r3, #32
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e007      	b.n	8001cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d1c8      	bne.n	8001c62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	@ 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d068      	beq.n	8001dda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d10:	e049      	b.n	8001da6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d045      	beq.n	8001da6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d1a:	f7ff f8ad 	bl	8000e78 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d302      	bcc.n	8001d30 <I2C_IsErrorOccurred+0x54>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13a      	bne.n	8001da6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d52:	d121      	bne.n	8001d98 <I2C_IsErrorOccurred+0xbc>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d5a:	d01d      	beq.n	8001d98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d5c:	7cfb      	ldrb	r3, [r7, #19]
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d01a      	beq.n	8001d98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d72:	f7ff f881 	bl	8000e78 <HAL_GetTick>
 8001d76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d78:	e00e      	b.n	8001d98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d7a:	f7ff f87d 	bl	8000e78 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b19      	cmp	r3, #25
 8001d86:	d907      	bls.n	8001d98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d96:	e006      	b.n	8001da6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d1e9      	bne.n	8001d7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d003      	beq.n	8001dbc <I2C_IsErrorOccurred+0xe0>
 8001db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0aa      	beq.n	8001d12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00b      	beq.n	8001e04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01c      	beq.n	8001e8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff fe3b 	bl	8001acc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <I2C_IsErrorOccurred+0x1bc>)
 8001e62:	400b      	ands	r3, r1
 8001e64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3728      	adds	r7, #40	@ 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	fe00e800 	.word	0xfe00e800

08001e9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eae:	897b      	ldrh	r3, [r7, #10]
 8001eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eb4:	7a7b      	ldrb	r3, [r7, #9]
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ebc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	0d5b      	lsrs	r3, r3, #21
 8001ed6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <I2C_TransferConfig+0x60>)
 8001edc:	430b      	orrs	r3, r1
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	ea02 0103 	and.w	r1, r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	03ff63ff 	.word	0x03ff63ff

08001f00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d138      	bne.n	8001f88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e032      	b.n	8001f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	@ 0x24
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
  }
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d139      	bne.n	8002020 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e033      	b.n	8002022 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2224      	movs	r2, #36	@ 0x24
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fe8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4905      	ldr	r1, [pc, #20]	@ (800206c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002076:	af00      	add	r7, sp, #0
 8002078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002080:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002086:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	f001 b83a 	b.w	800310a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 816f 	beq.w	800238a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020ac:	4bb5      	ldr	r3, [pc, #724]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b8:	4bb2      	ldr	r3, [pc, #712]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d15c      	bne.n	800217e <HAL_RCC_OscConfig+0x10e>
 80020c4:	4baf      	ldr	r3, [pc, #700]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d0:	d155      	bne.n	800217e <HAL_RCC_OscConfig+0x10e>
 80020d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0x94>
 80020fe:	4ba1      	ldr	r3, [pc, #644]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	e015      	b.n	8002130 <HAL_RCC_OscConfig+0xc0>
 8002104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002108:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002118:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800211c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002120:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800212c:	4b95      	ldr	r3, [pc, #596]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002134:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002138:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002144:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8111 	beq.w	8002388 <HAL_RCC_OscConfig+0x318>
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 8108 	bne.w	8002388 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f000 bfc6 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002182:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x12e>
 8002190:	4b7c      	ldr	r3, [pc, #496]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7b      	ldr	r2, [pc, #492]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e036      	b.n	800220c <HAL_RCC_OscConfig+0x19c>
 800219e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x158>
 80021ae:	4b75      	ldr	r3, [pc, #468]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a74      	ldr	r2, [pc, #464]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b72      	ldr	r3, [pc, #456]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a71      	ldr	r2, [pc, #452]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e021      	b.n	800220c <HAL_RCC_OscConfig+0x19c>
 80021c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x184>
 80021da:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a69      	ldr	r2, [pc, #420]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b67      	ldr	r3, [pc, #412]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a66      	ldr	r2, [pc, #408]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0x19c>
 80021f4:	4b63      	ldr	r3, [pc, #396]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a62      	ldr	r2, [pc, #392]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b60      	ldr	r3, [pc, #384]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5f      	ldr	r2, [pc, #380]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d059      	beq.n	80022d0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fe2c 	bl	8000e78 <HAL_GetTick>
 8002220:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002226:	f7fe fe27 	bl	8000e78 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d902      	bls.n	800223c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	f000 bf67 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
 800223c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002240:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002250:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_RCC_OscConfig+0x1fe>
 8002268:	4b46      	ldr	r3, [pc, #280]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x22a>
 800226e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002272:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002282:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002286:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800228a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800229e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80022a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80022a6:	fa92 f2a2 	rbit	r2, r2
 80022aa:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80022ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f002 021f 	and.w	r2, r2, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f202 	lsl.w	r2, r1, r2
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ab      	beq.n	8002226 <HAL_RCC_OscConfig+0x1b6>
 80022ce:	e05c      	b.n	800238a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fdd2 	bl	8000e78 <HAL_GetTick>
 80022d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022da:	f7fe fdcd 	bl	8000e78 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d902      	bls.n	80022f0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f000 bf0d 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
 80022f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002304:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_OscConfig+0x2b2>
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x2de>
 8002322:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002326:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002336:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800233a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800233e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800234a:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_RCC_OscConfig+0x314>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002352:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002356:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800235a:	fa92 f2a2 	rbit	r2, r2
 800235e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002362:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ab      	bne.n	80022da <HAL_RCC_OscConfig+0x26a>
 8002382:	e002      	b.n	800238a <HAL_RCC_OscConfig+0x31a>
 8002384:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 817f 	beq.w	800269e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023a0:	4ba7      	ldr	r3, [pc, #668]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ac:	4ba4      	ldr	r3, [pc, #656]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d173      	bne.n	80024a0 <HAL_RCC_OscConfig+0x430>
 80023b8:	4ba1      	ldr	r3, [pc, #644]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c4:	d16c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x430>
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80023d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d102      	bne.n	80023f6 <HAL_RCC_OscConfig+0x386>
 80023f0:	4b93      	ldr	r3, [pc, #588]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	e013      	b.n	800241e <HAL_RCC_OscConfig+0x3ae>
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800240e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800241a:	4b89      	ldr	r3, [pc, #548]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2202      	movs	r2, #2
 8002420:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002424:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002430:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCC_OscConfig+0x3f6>
 8002450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002454:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d002      	beq.n	8002466 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 be52 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b76      	ldr	r3, [pc, #472]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	21f8      	movs	r1, #248	@ 0xf8
 800247c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002484:	fa91 f1a1 	rbit	r1, r1
 8002488:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800248c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002490:	fab1 f181 	clz	r1, r1
 8002494:	b2c9      	uxtb	r1, r1
 8002496:	408b      	lsls	r3, r1
 8002498:	4969      	ldr	r1, [pc, #420]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e0fe      	b.n	800269e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8088 	beq.w	80025c2 <HAL_RCC_OscConfig+0x552>
 80024b2:	2301      	movs	r3, #1
 80024b4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80024c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2301      	movs	r3, #1
 80024dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fccb 	bl	8000e78 <HAL_GetTick>
 80024e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fcc6 	bl	8000e78 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d902      	bls.n	80024fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f000 be06 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
 80024fe:	2302      	movs	r3, #2
 8002500:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002510:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0x4be>
 8002528:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e013      	b.n	8002556 <HAL_RCC_OscConfig+0x4e6>
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002540:	2302      	movs	r3, #2
 8002542:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002546:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002552:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	2202      	movs	r2, #2
 8002558:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800255c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002560:	fa92 f2a2 	rbit	r2, r2
 8002564:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002568:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f042 0220 	orr.w	r2, r2, #32
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f002 021f 	and.w	r2, r2, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0af      	beq.n	80024e8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b2d      	ldr	r3, [pc, #180]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002594:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	21f8      	movs	r1, #248	@ 0xf8
 800259e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80025a6:	fa91 f1a1 	rbit	r1, r1
 80025aa:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80025ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80025b2:	fab1 f181 	clz	r1, r1
 80025b6:	b2c9      	uxtb	r1, r1
 80025b8:	408b      	lsls	r3, r1
 80025ba:	4921      	ldr	r1, [pc, #132]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e06d      	b.n	800269e <HAL_RCC_OscConfig+0x62e>
 80025c2:	2301      	movs	r3, #1
 80025c4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80025d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fc43 	bl	8000e78 <HAL_GetTick>
 80025f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe fc3e 	bl	8000e78 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d902      	bls.n	800260e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	f000 bd7e 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002620:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x5d4>
 8002638:	4b01      	ldr	r3, [pc, #4]	@ (8002640 <HAL_RCC_OscConfig+0x5d0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	e016      	b.n	800266c <HAL_RCC_OscConfig+0x5fc>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	2302      	movs	r3, #2
 8002646:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800265c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002668:	4bbf      	ldr	r3, [pc, #764]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	2202      	movs	r2, #2
 800266e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002672:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002676:	fa92 f2a2 	rbit	r2, r2
 800267a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800267e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002682:	fab2 f282 	clz	r2, r2
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f002 021f 	and.w	r2, r2, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ac      	bne.n	80025f8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8113 	beq.w	80028da <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d07c      	beq.n	80027be <HAL_RCC_OscConfig+0x74e>
 80026c4:	2301      	movs	r3, #1
 80026c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80026d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4ba2      	ldr	r3, [pc, #648]	@ (800296c <HAL_RCC_OscConfig+0x8fc>)
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	461a      	mov	r2, r3
 80026ea:	2301      	movs	r3, #1
 80026ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fbc3 	bl	8000e78 <HAL_GetTick>
 80026f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fbbe 	bl	8000e78 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d902      	bls.n	800270e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	f000 bcfe 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002720:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002768:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800276c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b7e      	ldr	r3, [pc, #504]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 8002770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002776:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800277a:	2102      	movs	r1, #2
 800277c:	6019      	str	r1, [r3, #0]
 800277e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002782:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f1a3 	rbit	r1, r3
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002794:	6019      	str	r1, [r3, #0]
  return result;
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d09d      	beq.n	80026f8 <HAL_RCC_OscConfig+0x688>
 80027bc:	e08d      	b.n	80028da <HAL_RCC_OscConfig+0x86a>
 80027be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027dc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027e0:	601a      	str	r2, [r3, #0]
  return result;
 80027e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <HAL_RCC_OscConfig+0x8fc>)
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	461a      	mov	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe fb3a 	bl	8000e78 <HAL_GetTick>
 8002804:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fb35 	bl	8000e78 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	f000 bc75 	b.w	800310a <HAL_RCC_OscConfig+0x109a>
 8002820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002824:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002828:	2202      	movs	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002830:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002848:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002854:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002862:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002878:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002886:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800288a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 800288e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002894:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002898:	2102      	movs	r1, #2
 800289a:	6019      	str	r1, [r3, #0]
 800289c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa93 f1a3 	rbit	r1, r3
 80028aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80028b2:	6019      	str	r1, [r3, #0]
  return result;
 80028b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d197      	bne.n	800280a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 81a5 	beq.w	8002c3a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a18      	ldr	r2, [pc, #96]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_RCC_OscConfig+0x8f8>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002928:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <HAL_RCC_OscConfig+0x900>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d121      	bne.n	8002980 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <HAL_RCC_OscConfig+0x900>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x900>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002948:	f7fe fa96 	bl	8000e78 <HAL_GetTick>
 800294c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e010      	b.n	8002974 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe fa91 	bl	8000e78 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d908      	bls.n	8002974 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e3d1      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	10908120 	.word	0x10908120
 8002970:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_RCC_OscConfig+0xb3c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0e8      	beq.n	8002952 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002984:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x92e>
 8002990:	4b87      	ldr	r3, [pc, #540]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a86      	ldr	r2, [pc, #536]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	e035      	b.n	8002a0a <HAL_RCC_OscConfig+0x99a>
 800299e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x958>
 80029ae:	4b80      	ldr	r3, [pc, #512]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6213      	str	r3, [r2, #32]
 80029ba:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	e020      	b.n	8002a0a <HAL_RCC_OscConfig+0x99a>
 80029c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCC_OscConfig+0x982>
 80029d8:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a74      	ldr	r2, [pc, #464]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6213      	str	r3, [r2, #32]
 80029e4:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a71      	ldr	r2, [pc, #452]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e00b      	b.n	8002a0a <HAL_RCC_OscConfig+0x99a>
 80029f2:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6213      	str	r3, [r2, #32]
 80029fe:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002a04:	f023 0304 	bic.w	r3, r3, #4
 8002a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8081 	beq.w	8002b1e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fa2c 	bl	8000e78 <HAL_GetTick>
 8002a20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	e00b      	b.n	8002a3e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fa27 	bl	8000e78 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e365      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
 8002a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a46:	2202      	movs	r2, #2
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a72:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a84:	601a      	str	r2, [r3, #0]
  return result;
 8002a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_OscConfig+0xa3a>
 8002aa4:	4b42      	ldr	r3, [pc, #264]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	e013      	b.n	8002ad2 <HAL_RCC_OscConfig+0xa62>
 8002aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fa93 f2a3 	rbit	r2, r3
 8002ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	4b38      	ldr	r3, [pc, #224]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ad6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ada:	2102      	movs	r1, #2
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ae2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fa92 f1a2 	rbit	r1, r2
 8002aec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002af0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002af4:	6011      	str	r1, [r2, #0]
  return result;
 8002af6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002afa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d084      	beq.n	8002a26 <HAL_RCC_OscConfig+0x9b6>
 8002b1c:	e083      	b.n	8002c26 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe f9ab 	bl	8000e78 <HAL_GetTick>
 8002b22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe f9a6 	bl	8000e78 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e2e4      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
 8002b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b44:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b48:	2202      	movs	r2, #2
 8002b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b50:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	fa93 f2a3 	rbit	r2, r3
 8002b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b74:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b82:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xb44>
 8002ba6:	4b02      	ldr	r3, [pc, #8]	@ (8002bb0 <HAL_RCC_OscConfig+0xb40>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	e017      	b.n	8002bdc <HAL_RCC_OscConfig+0xb6c>
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	4bb3      	ldr	r3, [pc, #716]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002be0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002be4:	2102      	movs	r1, #2
 8002be6:	6011      	str	r1, [r2, #0]
 8002be8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bec:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	fa92 f1a2 	rbit	r1, r2
 8002bf6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bfa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002bfe:	6011      	str	r1, [r2, #0]
  return result;
 8002c00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c04:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f002 021f 	and.w	r2, r2, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d180      	bne.n	8002b28 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c26:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a9d      	ldr	r2, [pc, #628]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 825e 	beq.w	8003108 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4c:	4b96      	ldr	r3, [pc, #600]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	f000 821f 	beq.w	8003098 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	f040 8170 	bne.w	8002f4c <HAL_RCC_OscConfig+0xedc>
 8002c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c90:	601a      	str	r2, [r3, #0]
  return result;
 8002c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c96:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c9a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ca6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	461a      	mov	r2, r3
 8002cae:	2300      	movs	r3, #0
 8002cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f8e1 	bl	8000e78 <HAL_GetTick>
 8002cb6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cba:	e009      	b.n	8002cd0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe f8dc 	bl	8000e78 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e21c      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
 8002cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002cd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cf4:	601a      	str	r2, [r3, #0]
  return result;
 8002cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_OscConfig+0xcaa>
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	e027      	b.n	8002d6a <HAL_RCC_OscConfig+0xcfa>
 8002d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d44:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d52:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d60:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	4b50      	ldr	r3, [pc, #320]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d6e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d72:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d76:	6011      	str	r1, [r2, #0]
 8002d78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d7c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	fa92 f1a2 	rbit	r1, r2
 8002d86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d8a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d8e:	6011      	str	r1, [r2, #0]
  return result;
 8002d90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d94:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f042 0220 	orr.w	r2, r2, #32
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f002 021f 	and.w	r2, r2, #31
 8002daa:	2101      	movs	r1, #1
 8002dac:	fa01 f202 	lsl.w	r2, r1, r2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d182      	bne.n	8002cbc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	4937      	ldr	r1, [pc, #220]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002dd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ddc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	492d      	ldr	r1, [pc, #180]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
 8002df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e1c:	601a      	str	r2, [r3, #0]
  return result;
 8002e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e22:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e32:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f81b 	bl	8000e78 <HAL_GetTick>
 8002e42:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e46:	e009      	b.n	8002e5c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f816 	bl	8000e78 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e156      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
 8002e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e60:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e80:	601a      	str	r2, [r3, #0]
  return result;
 8002e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0xe3c>
 8002ea0:	4b01      	ldr	r3, [pc, #4]	@ (8002ea8 <HAL_RCC_OscConfig+0xe38>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	e02a      	b.n	8002efc <HAL_RCC_OscConfig+0xe8c>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002eb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ebe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ecc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002eda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	4b86      	ldr	r3, [pc, #536]	@ (8003114 <HAL_RCC_OscConfig+0x10a4>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f04:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f0e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fa92 f1a2 	rbit	r1, r2
 8002f18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f1c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002f20:	6011      	str	r1, [r2, #0]
  return result;
 8002f22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f26:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f43f af7f 	beq.w	8002e48 <HAL_RCC_OscConfig+0xdd8>
 8002f4a:	e0dd      	b.n	8003108 <HAL_RCC_OscConfig+0x1098>
 8002f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f50:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f70:	601a      	str	r2, [r3, #0]
  return result;
 8002f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f76:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f7a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fd ff71 	bl	8000e78 <HAL_GetTick>
 8002f96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fd ff6c 	bl	8000e78 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0ac      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
 8002fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fd4:	601a      	str	r2, [r3, #0]
  return result;
 8002fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fda:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_OscConfig+0xf8a>
 8002ff4:	4b47      	ldr	r3, [pc, #284]	@ (8003114 <HAL_RCC_OscConfig+0x10a4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	e027      	b.n	800304a <HAL_RCC_OscConfig+0xfda>
 8002ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ffe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003002:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003024:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003040:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	4b33      	ldr	r3, [pc, #204]	@ (8003114 <HAL_RCC_OscConfig+0x10a4>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800304e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003052:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003056:	6011      	str	r1, [r2, #0]
 8003058:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800305c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	fa92 f1a2 	rbit	r1, r2
 8003066:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800306a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800306e:	6011      	str	r1, [r2, #0]
  return result;
 8003070:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003074:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	fab2 f282 	clz	r2, r2
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	f042 0220 	orr.w	r2, r2, #32
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d182      	bne.n	8002f9c <HAL_RCC_OscConfig+0xf2c>
 8003096:	e037      	b.n	8003108 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800309c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e02e      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ac:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_RCC_OscConfig+0x10a4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <HAL_RCC_OscConfig+0x10a4>)
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80030c0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80030c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d117      	bne.n	8003104 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80030d8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d10b      	bne.n	8003104 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80030ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b09e      	sub	sp, #120	@ 0x78
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e162      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b90      	ldr	r3, [pc, #576]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d910      	bls.n	8003160 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b8d      	ldr	r3, [pc, #564]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	498b      	ldr	r1, [pc, #556]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b89      	ldr	r3, [pc, #548]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e14a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b82      	ldr	r3, [pc, #520]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	497f      	ldr	r1, [pc, #508]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80dc 	beq.w	8003344 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d13c      	bne.n	800320e <HAL_RCC_ClockConfig+0xf6>
 8003194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003198:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80031a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d102      	bne.n	80031be <HAL_RCC_ClockConfig+0xa6>
 80031b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	e00f      	b.n	80031de <HAL_RCC_ClockConfig+0xc6>
 80031be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80031cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031da:	4b67      	ldr	r3, [pc, #412]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031e6:	fa92 f2a2 	rbit	r2, r2
 80031ea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80031ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031ee:	fab2 f282 	clz	r2, r2
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f042 0220 	orr.w	r2, r2, #32
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f002 021f 	and.w	r2, r2, #31
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d17b      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0f3      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d13c      	bne.n	8003290 <HAL_RCC_ClockConfig+0x178>
 8003216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_RCC_ClockConfig+0x128>
 800323a:	4b4f      	ldr	r3, [pc, #316]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	e00f      	b.n	8003260 <HAL_RCC_ClockConfig+0x148>
 8003240:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003244:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	647b      	str	r3, [r7, #68]	@ 0x44
 800324e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003252:	643b      	str	r3, [r7, #64]	@ 0x40
 8003254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325c:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003264:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003266:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003268:	fa92 f2a2 	rbit	r2, r2
 800326c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800326e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003270:	fab2 f282 	clz	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f002 021f 	and.w	r2, r2, #31
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d13a      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b2      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
 8003290:	2302      	movs	r3, #2
 8003292:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d102      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x1a0>
 80032b2:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	e00d      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1bc>
 80032b8:	2302      	movs	r3, #2
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c4:	2302      	movs	r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	2202      	movs	r2, #2
 80032d6:	61ba      	str	r2, [r7, #24]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	fa92 f2a2 	rbit	r2, r2
 80032de:	617a      	str	r2, [r7, #20]
  return result;
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f042 0220 	orr.w	r2, r2, #32
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f002 021f 	and.w	r2, r2, #31
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e079      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	491a      	ldr	r1, [pc, #104]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fd fdb0 	bl	8000e78 <HAL_GetTick>
 8003318:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fd fdac 	bl	8000e78 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e061      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <HAL_RCC_ClockConfig+0x260>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d214      	bcs.n	800337c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4906      	ldr	r1, [pc, #24]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <HAL_RCC_ClockConfig+0x25c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e040      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2de>
 8003374:	40022000 	.word	0x40022000
 8003378:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_RCC_ClockConfig+0x2e8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	491a      	ldr	r1, [pc, #104]	@ (8003400 <HAL_RCC_ClockConfig+0x2e8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_RCC_ClockConfig+0x2e8>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4912      	ldr	r1, [pc, #72]	@ (8003400 <HAL_RCC_ClockConfig+0x2e8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033ba:	f000 f829 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033be:	4601      	mov	r1, r0
 80033c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_RCC_ClockConfig+0x2e8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033c8:	22f0      	movs	r2, #240	@ 0xf0
 80033ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	60fa      	str	r2, [r7, #12]
  return result;
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	fab2 f282 	clz	r2, r2
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	40d3      	lsrs	r3, r2
 80033de:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <HAL_RCC_ClockConfig+0x2ec>)
 80033e0:	5cd3      	ldrb	r3, [r2, r3]
 80033e2:	fa21 f303 	lsr.w	r3, r1, r3
 80033e6:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <HAL_RCC_ClockConfig+0x2f0>)
 80033e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033ea:	4b08      	ldr	r3, [pc, #32]	@ (800340c <HAL_RCC_ClockConfig+0x2f4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fcfe 	bl	8000df0 <HAL_InitTick>
  
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3778      	adds	r7, #120	@ 0x78
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	08004cc4 	.word	0x08004cc4
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	2300      	movs	r3, #0
 8003424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800342a:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b04      	cmp	r3, #4
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x30>
 800343a:	2b08      	cmp	r3, #8
 800343c:	d003      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x36>
 800343e:	e029      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003440:	4b1a      	ldr	r3, [pc, #104]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003442:	613b      	str	r3, [r7, #16]
      break;
 8003444:	e029      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003450:	5cd3      	ldrb	r3, [r2, r3]
 8003452:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	4a15      	ldr	r2, [pc, #84]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800346c:	4a0f      	ldr	r2, [pc, #60]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x9c>)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	fbb2 f2f3 	udiv	r2, r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e007      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800347e:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	fbb2 f2f3 	udiv	r2, r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	613b      	str	r3, [r7, #16]
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003496:	613b      	str	r3, [r7, #16]
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	693b      	ldr	r3, [r7, #16]
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40021000 	.word	0x40021000
 80034ac:	007a1200 	.word	0x007a1200
 80034b0:	08004cdc 	.word	0x08004cdc
 80034b4:	08004cec 	.word	0x08004cec

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034d6:	f7ff ffef 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034da:	4601      	mov	r1, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034e4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	fa92 f2a2 	rbit	r2, r2
 80034f0:	603a      	str	r2, [r7, #0]
  return result;
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	fab2 f282 	clz	r2, r2
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	40d3      	lsrs	r3, r2
 80034fc:	4a04      	ldr	r2, [pc, #16]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	08004cd4 	.word	0x08004cd4

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800351a:	f7ff ffcd 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 800351e:	4601      	mov	r1, r0
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003528:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800352c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	603a      	str	r2, [r7, #0]
  return result;
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	fab2 f282 	clz	r2, r2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	40d3      	lsrs	r3, r2
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	08004cd4 	.word	0x08004cd4

08003558 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b092      	sub	sp, #72	@ 0x48
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80d4 	beq.w	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357c:	4b4e      	ldr	r3, [pc, #312]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10e      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	4b4b      	ldr	r3, [pc, #300]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	4a4a      	ldr	r2, [pc, #296]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003592:	61d3      	str	r3, [r2, #28]
 8003594:	4b48      	ldr	r3, [pc, #288]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d118      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b2:	4b42      	ldr	r3, [pc, #264]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a41      	ldr	r2, [pc, #260]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035be:	f7fd fc5b 	bl	8000e78 <HAL_GetTick>
 80035c2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e008      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fd fc57 	bl	8000e78 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b64      	cmp	r3, #100	@ 0x64
 80035d2:	d901      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1d6      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b38      	ldr	r3, [pc, #224]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035e4:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8084 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003600:	429a      	cmp	r2, r3
 8003602:	d07c      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003604:	4b2c      	ldr	r3, [pc, #176]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800360e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	461a      	mov	r2, r3
 800362e:	2301      	movs	r3, #1
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	461a      	mov	r2, r3
 8003652:	2300      	movs	r3, #0
 8003654:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003656:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800365a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04b      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fc07 	bl	8000e78 <HAL_GetTick>
 800366a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd fc03 	bl	8000e78 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e180      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003684:	2302      	movs	r3, #2
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003690:	2302      	movs	r3, #2
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	61fb      	str	r3, [r7, #28]
  return result;
 800369c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d108      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036b2:	4b01      	ldr	r3, [pc, #4]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	e00d      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
 80036c0:	10908100 	.word	0x10908100
 80036c4:	2302      	movs	r3, #2
 80036c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	4b9a      	ldr	r3, [pc, #616]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	2202      	movs	r2, #2
 80036d6:	613a      	str	r2, [r7, #16]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	fa92 f2a2 	rbit	r2, r2
 80036de:	60fa      	str	r2, [r7, #12]
  return result;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f002 021f 	and.w	r2, r2, #31
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0b7      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036fe:	4b8f      	ldr	r3, [pc, #572]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	498c      	ldr	r1, [pc, #560]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003710:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b88      	ldr	r3, [pc, #544]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a87      	ldr	r2, [pc, #540]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003730:	4b82      	ldr	r3, [pc, #520]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	f023 0203 	bic.w	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	497f      	ldr	r1, [pc, #508]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800374e:	4b7b      	ldr	r3, [pc, #492]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4978      	ldr	r1, [pc, #480]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800376c:	4b73      	ldr	r3, [pc, #460]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	4970      	ldr	r1, [pc, #448]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378a:	4b6c      	ldr	r3, [pc, #432]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f023 0210 	bic.w	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4969      	ldr	r1, [pc, #420]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037a8:	4b64      	ldr	r3, [pc, #400]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b4:	4961      	ldr	r1, [pc, #388]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c6:	4b5d      	ldr	r3, [pc, #372]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f023 0220 	bic.w	r2, r3, #32
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	495a      	ldr	r1, [pc, #360]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e4:	4b55      	ldr	r3, [pc, #340]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	4952      	ldr	r1, [pc, #328]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003802:	4b4e      	ldr	r3, [pc, #312]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	494b      	ldr	r1, [pc, #300]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003820:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4943      	ldr	r1, [pc, #268]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800383e:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	493c      	ldr	r1, [pc, #240]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800385c:	4b37      	ldr	r3, [pc, #220]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	4934      	ldr	r1, [pc, #208]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800387a:	4b30      	ldr	r3, [pc, #192]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	492d      	ldr	r1, [pc, #180]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003898:	4b28      	ldr	r3, [pc, #160]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a4:	4925      	ldr	r1, [pc, #148]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038b6:	4b21      	ldr	r3, [pc, #132]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	491e      	ldr	r1, [pc, #120]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038d4:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	4916      	ldr	r1, [pc, #88]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	490f      	ldr	r1, [pc, #60]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	4907      	ldr	r1, [pc, #28]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003942:	4913      	ldr	r1, [pc, #76]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003944:	4313      	orrs	r3, r2
 8003946:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003954:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003958:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003960:	490b      	ldr	r1, [pc, #44]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003962:	4313      	orrs	r3, r2
 8003964:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397e:	4904      	ldr	r1, [pc, #16]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003980:	4313      	orrs	r3, r2
 8003982:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3748      	adds	r7, #72	@ 0x48
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000

08003994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e040      	b.n	8003a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd f920 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	@ 0x24
 80039c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa86 	bl	8003eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8af 	bl	8003b44 <UART_SetConfig>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e01b      	b.n	8003a28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb05 	bl	8004030 <UART_CheckIdleState>
 8003a26:	4603      	mov	r3, r0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d177      	bne.n	8003b38 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_UART_Transmit+0x24>
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e070      	b.n	8003b3a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2221      	movs	r2, #33	@ 0x21
 8003a64:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a66:	f7fd fa07 	bl	8000e78 <HAL_GetTick>
 8003a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a84:	d108      	bne.n	8003a98 <HAL_UART_Transmit+0x68>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e003      	b.n	8003aa0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aa0:	e02f      	b.n	8003b02 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fb67 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e03b      	b.n	8003b3a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	3302      	adds	r3, #2
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e007      	b.n	8003af0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1c9      	bne.n	8003aa2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2140      	movs	r1, #64	@ 0x40
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fb31 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e005      	b.n	8003b3a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b92      	ldr	r3, [pc, #584]	@ (8003db8 <UART_SetConfig+0x274>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6979      	ldr	r1, [r7, #20]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a80      	ldr	r2, [pc, #512]	@ (8003dbc <UART_SetConfig+0x278>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d120      	bne.n	8003c02 <UART_SetConfig+0xbe>
 8003bc0:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc0 <UART_SetConfig+0x27c>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d817      	bhi.n	8003bfc <UART_SetConfig+0xb8>
 8003bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <UART_SetConfig+0x90>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003bf1 	.word	0x08003bf1
 8003bdc:	08003bf7 	.word	0x08003bf7
 8003be0:	08003beb 	.word	0x08003beb
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e0b5      	b.n	8003d56 <UART_SetConfig+0x212>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e0b2      	b.n	8003d56 <UART_SetConfig+0x212>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e0af      	b.n	8003d56 <UART_SetConfig+0x212>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e0ac      	b.n	8003d56 <UART_SetConfig+0x212>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e0a9      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6f      	ldr	r2, [pc, #444]	@ (8003dc4 <UART_SetConfig+0x280>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d124      	bne.n	8003c56 <UART_SetConfig+0x112>
 8003c0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003dc0 <UART_SetConfig+0x27c>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c18:	d011      	beq.n	8003c3e <UART_SetConfig+0xfa>
 8003c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c1e:	d817      	bhi.n	8003c50 <UART_SetConfig+0x10c>
 8003c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c24:	d011      	beq.n	8003c4a <UART_SetConfig+0x106>
 8003c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c2a:	d811      	bhi.n	8003c50 <UART_SetConfig+0x10c>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <UART_SetConfig+0xf4>
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c34:	d006      	beq.n	8003c44 <UART_SetConfig+0x100>
 8003c36:	e00b      	b.n	8003c50 <UART_SetConfig+0x10c>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e08b      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e088      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c44:	2304      	movs	r3, #4
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e085      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e082      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c50:	2310      	movs	r3, #16
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e07f      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc8 <UART_SetConfig+0x284>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d124      	bne.n	8003caa <UART_SetConfig+0x166>
 8003c60:	4b57      	ldr	r3, [pc, #348]	@ (8003dc0 <UART_SetConfig+0x27c>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c6c:	d011      	beq.n	8003c92 <UART_SetConfig+0x14e>
 8003c6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c72:	d817      	bhi.n	8003ca4 <UART_SetConfig+0x160>
 8003c74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c78:	d011      	beq.n	8003c9e <UART_SetConfig+0x15a>
 8003c7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c7e:	d811      	bhi.n	8003ca4 <UART_SetConfig+0x160>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <UART_SetConfig+0x148>
 8003c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c88:	d006      	beq.n	8003c98 <UART_SetConfig+0x154>
 8003c8a:	e00b      	b.n	8003ca4 <UART_SetConfig+0x160>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e061      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c92:	2302      	movs	r3, #2
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e05e      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e05b      	b.n	8003d56 <UART_SetConfig+0x212>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e058      	b.n	8003d56 <UART_SetConfig+0x212>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e055      	b.n	8003d56 <UART_SetConfig+0x212>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a47      	ldr	r2, [pc, #284]	@ (8003dcc <UART_SetConfig+0x288>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d124      	bne.n	8003cfe <UART_SetConfig+0x1ba>
 8003cb4:	4b42      	ldr	r3, [pc, #264]	@ (8003dc0 <UART_SetConfig+0x27c>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003cbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cc0:	d011      	beq.n	8003ce6 <UART_SetConfig+0x1a2>
 8003cc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cc6:	d817      	bhi.n	8003cf8 <UART_SetConfig+0x1b4>
 8003cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ccc:	d011      	beq.n	8003cf2 <UART_SetConfig+0x1ae>
 8003cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd2:	d811      	bhi.n	8003cf8 <UART_SetConfig+0x1b4>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <UART_SetConfig+0x19c>
 8003cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cdc:	d006      	beq.n	8003cec <UART_SetConfig+0x1a8>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x1b4>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e037      	b.n	8003d56 <UART_SetConfig+0x212>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e034      	b.n	8003d56 <UART_SetConfig+0x212>
 8003cec:	2304      	movs	r3, #4
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e031      	b.n	8003d56 <UART_SetConfig+0x212>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e02e      	b.n	8003d56 <UART_SetConfig+0x212>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e02b      	b.n	8003d56 <UART_SetConfig+0x212>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <UART_SetConfig+0x28c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d124      	bne.n	8003d52 <UART_SetConfig+0x20e>
 8003d08:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <UART_SetConfig+0x27c>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003d10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d14:	d011      	beq.n	8003d3a <UART_SetConfig+0x1f6>
 8003d16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d1a:	d817      	bhi.n	8003d4c <UART_SetConfig+0x208>
 8003d1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d20:	d011      	beq.n	8003d46 <UART_SetConfig+0x202>
 8003d22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d26:	d811      	bhi.n	8003d4c <UART_SetConfig+0x208>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <UART_SetConfig+0x1f0>
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d30:	d006      	beq.n	8003d40 <UART_SetConfig+0x1fc>
 8003d32:	e00b      	b.n	8003d4c <UART_SetConfig+0x208>
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e00d      	b.n	8003d56 <UART_SetConfig+0x212>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e00a      	b.n	8003d56 <UART_SetConfig+0x212>
 8003d40:	2304      	movs	r3, #4
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e007      	b.n	8003d56 <UART_SetConfig+0x212>
 8003d46:	2308      	movs	r3, #8
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e004      	b.n	8003d56 <UART_SetConfig+0x212>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e001      	b.n	8003d56 <UART_SetConfig+0x212>
 8003d52:	2310      	movs	r3, #16
 8003d54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5e:	d16b      	bne.n	8003e38 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d838      	bhi.n	8003dd8 <UART_SetConfig+0x294>
 8003d66:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <UART_SetConfig+0x228>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003da1 	.word	0x08003da1
 8003d78:	08003dd9 	.word	0x08003dd9
 8003d7c:	08003da7 	.word	0x08003da7
 8003d80:	08003dd9 	.word	0x08003dd9
 8003d84:	08003dd9 	.word	0x08003dd9
 8003d88:	08003dd9 	.word	0x08003dd9
 8003d8c:	08003daf 	.word	0x08003daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7ff fb9e 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8003d94:	61b8      	str	r0, [r7, #24]
        break;
 8003d96:	e024      	b.n	8003de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7ff fbbc 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	61b8      	str	r0, [r7, #24]
        break;
 8003d9e:	e020      	b.n	8003de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <UART_SetConfig+0x290>)
 8003da2:	61bb      	str	r3, [r7, #24]
        break;
 8003da4:	e01d      	b.n	8003de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da6:	f7ff fb33 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8003daa:	61b8      	str	r0, [r7, #24]
        break;
 8003dac:	e019      	b.n	8003de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db2:	61bb      	str	r3, [r7, #24]
        break;
 8003db4:	e015      	b.n	8003de2 <UART_SetConfig+0x29e>
 8003db6:	bf00      	nop
 8003db8:	efff69f3 	.word	0xefff69f3
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	40004800 	.word	0x40004800
 8003dcc:	40004c00 	.word	0x40004c00
 8003dd0:	40005000 	.word	0x40005000
 8003dd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77bb      	strb	r3, [r7, #30]
        break;
 8003de0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d073      	beq.n	8003ed0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	005a      	lsls	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	441a      	add	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d916      	bls.n	8003e32 <UART_SetConfig+0x2ee>
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0a:	d212      	bcs.n	8003e32 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f023 030f 	bic.w	r3, r3, #15
 8003e14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	89fb      	ldrh	r3, [r7, #14]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	89fa      	ldrh	r2, [r7, #14]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	e04e      	b.n	8003ed0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	77bb      	strb	r3, [r7, #30]
 8003e36:	e04b      	b.n	8003ed0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d827      	bhi.n	8003e8e <UART_SetConfig+0x34a>
 8003e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <UART_SetConfig+0x300>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e8f 	.word	0x08003e8f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7ff fb32 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	61b8      	str	r0, [r7, #24]
        break;
 8003e6e:	e013      	b.n	8003e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7ff fb50 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8003e74:	61b8      	str	r0, [r7, #24]
        break;
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <UART_SetConfig+0x3a4>)
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e00c      	b.n	8003e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7ff fac7 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8003e82:	61b8      	str	r0, [r7, #24]
        break;
 8003e84:	e008      	b.n	8003e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e8a:	61bb      	str	r3, [r7, #24]
        break;
 8003e8c:	e004      	b.n	8003e98 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	77bb      	strb	r3, [r7, #30]
        break;
 8003e96:	bf00      	nop
    }

    if (pclk != 0U)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	085a      	lsrs	r2, r3, #1
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	441a      	add	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b0f      	cmp	r3, #15
 8003eb6:	d909      	bls.n	8003ecc <UART_SetConfig+0x388>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebe:	d205      	bcs.n	8003ecc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e001      	b.n	8003ed0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003edc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01a      	beq.n	8004002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fea:	d10a      	bne.n	8004002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b098      	sub	sp, #96	@ 0x60
 8004034:	af02      	add	r7, sp, #8
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004040:	f7fc ff1a 	bl	8000e78 <HAL_GetTick>
 8004044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d12e      	bne.n	80040b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f88c 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d021      	beq.n	80040b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004082:	653b      	str	r3, [r7, #80]	@ 0x50
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800409a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e062      	b.n	8004178 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d149      	bne.n	8004154 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f856 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d03c      	beq.n	8004154 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	623b      	str	r3, [r7, #32]
   return(result);
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e6      	bne.n	80040da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3308      	adds	r3, #8
 8004112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60fb      	str	r3, [r7, #12]
   return(result);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3308      	adds	r3, #8
 800412a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800412c:	61fa      	str	r2, [r7, #28]
 800412e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	617b      	str	r3, [r7, #20]
   return(result);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e011      	b.n	8004178 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3758      	adds	r7, #88	@ 0x58
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004190:	e04f      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d04b      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fc fe6d 	bl	8000e78 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e04e      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d037      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b80      	cmp	r3, #128	@ 0x80
 80041c6:	d034      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b40      	cmp	r3, #64	@ 0x40
 80041cc:	d031      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d110      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2208      	movs	r2, #8
 80041e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f838 	bl	800425a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2208      	movs	r2, #8
 80041ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e029      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420c:	d111      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f81e 	bl	800425a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e00f      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d0a0      	beq.n	8004192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b095      	sub	sp, #84	@ 0x54
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
 8004282:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004286:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d118      	bne.n	8004302 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	613b      	str	r3, [r7, #16]
   return(result);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e6      	bne.n	80042d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004316:	bf00      	nop
 8004318:	3754      	adds	r7, #84	@ 0x54
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <sniprintf>:
 8004324:	b40c      	push	{r2, r3}
 8004326:	b530      	push	{r4, r5, lr}
 8004328:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <sniprintf+0x64>)
 800432a:	1e0c      	subs	r4, r1, #0
 800432c:	681d      	ldr	r5, [r3, #0]
 800432e:	b09d      	sub	sp, #116	@ 0x74
 8004330:	da08      	bge.n	8004344 <sniprintf+0x20>
 8004332:	238b      	movs	r3, #139	@ 0x8b
 8004334:	602b      	str	r3, [r5, #0]
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	b01d      	add	sp, #116	@ 0x74
 800433c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004340:	b002      	add	sp, #8
 8004342:	4770      	bx	lr
 8004344:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004348:	f8ad 3014 	strh.w	r3, [sp, #20]
 800434c:	bf14      	ite	ne
 800434e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004352:	4623      	moveq	r3, r4
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	9307      	str	r3, [sp, #28]
 8004358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800435c:	9002      	str	r0, [sp, #8]
 800435e:	9006      	str	r0, [sp, #24]
 8004360:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004364:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004366:	ab21      	add	r3, sp, #132	@ 0x84
 8004368:	a902      	add	r1, sp, #8
 800436a:	4628      	mov	r0, r5
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	f000 f995 	bl	800469c <_svfiprintf_r>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	bfbc      	itt	lt
 8004376:	238b      	movlt	r3, #139	@ 0x8b
 8004378:	602b      	strlt	r3, [r5, #0]
 800437a:	2c00      	cmp	r4, #0
 800437c:	d0dd      	beq.n	800433a <sniprintf+0x16>
 800437e:	9b02      	ldr	r3, [sp, #8]
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e7d9      	b.n	800433a <sniprintf+0x16>
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c

0800438c <memset>:
 800438c:	4402      	add	r2, r0
 800438e:	4603      	mov	r3, r0
 8004390:	4293      	cmp	r3, r2
 8004392:	d100      	bne.n	8004396 <memset+0xa>
 8004394:	4770      	bx	lr
 8004396:	f803 1b01 	strb.w	r1, [r3], #1
 800439a:	e7f9      	b.n	8004390 <memset+0x4>

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	@ (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	@ (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	@ (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	@ (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	@ (80043ec <__libc_init_array+0x44>)
 80043bc:	f000 fc66 	bl	8004c8c <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	08004d38 	.word	0x08004d38
 80043e4:	08004d38 	.word	0x08004d38
 80043e8:	08004d38 	.word	0x08004d38
 80043ec:	08004d3c 	.word	0x08004d3c

080043f0 <__retarget_lock_acquire_recursive>:
 80043f0:	4770      	bx	lr

080043f2 <__retarget_lock_release_recursive>:
 80043f2:	4770      	bx	lr

080043f4 <_free_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4605      	mov	r5, r0
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d041      	beq.n	8004480 <_free_r+0x8c>
 80043fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004400:	1f0c      	subs	r4, r1, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfb8      	it	lt
 8004406:	18e4      	addlt	r4, r4, r3
 8004408:	f000 f8e0 	bl	80045cc <__malloc_lock>
 800440c:	4a1d      	ldr	r2, [pc, #116]	@ (8004484 <_free_r+0x90>)
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	b933      	cbnz	r3, 8004420 <_free_r+0x2c>
 8004412:	6063      	str	r3, [r4, #4]
 8004414:	6014      	str	r4, [r2, #0]
 8004416:	4628      	mov	r0, r5
 8004418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800441c:	f000 b8dc 	b.w	80045d8 <__malloc_unlock>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d908      	bls.n	8004436 <_free_r+0x42>
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	1821      	adds	r1, r4, r0
 8004428:	428b      	cmp	r3, r1
 800442a:	bf01      	itttt	eq
 800442c:	6819      	ldreq	r1, [r3, #0]
 800442e:	685b      	ldreq	r3, [r3, #4]
 8004430:	1809      	addeq	r1, r1, r0
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	e7ed      	b.n	8004412 <_free_r+0x1e>
 8004436:	461a      	mov	r2, r3
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b10b      	cbz	r3, 8004440 <_free_r+0x4c>
 800443c:	42a3      	cmp	r3, r4
 800443e:	d9fa      	bls.n	8004436 <_free_r+0x42>
 8004440:	6811      	ldr	r1, [r2, #0]
 8004442:	1850      	adds	r0, r2, r1
 8004444:	42a0      	cmp	r0, r4
 8004446:	d10b      	bne.n	8004460 <_free_r+0x6c>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	4401      	add	r1, r0
 800444c:	1850      	adds	r0, r2, r1
 800444e:	4283      	cmp	r3, r0
 8004450:	6011      	str	r1, [r2, #0]
 8004452:	d1e0      	bne.n	8004416 <_free_r+0x22>
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	6053      	str	r3, [r2, #4]
 800445a:	4408      	add	r0, r1
 800445c:	6010      	str	r0, [r2, #0]
 800445e:	e7da      	b.n	8004416 <_free_r+0x22>
 8004460:	d902      	bls.n	8004468 <_free_r+0x74>
 8004462:	230c      	movs	r3, #12
 8004464:	602b      	str	r3, [r5, #0]
 8004466:	e7d6      	b.n	8004416 <_free_r+0x22>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	1821      	adds	r1, r4, r0
 800446c:	428b      	cmp	r3, r1
 800446e:	bf04      	itt	eq
 8004470:	6819      	ldreq	r1, [r3, #0]
 8004472:	685b      	ldreq	r3, [r3, #4]
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	bf04      	itt	eq
 8004478:	1809      	addeq	r1, r1, r0
 800447a:	6021      	streq	r1, [r4, #0]
 800447c:	6054      	str	r4, [r2, #4]
 800447e:	e7ca      	b.n	8004416 <_free_r+0x22>
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	bf00      	nop
 8004484:	200002b0 	.word	0x200002b0

08004488 <sbrk_aligned>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4e0f      	ldr	r6, [pc, #60]	@ (80044c8 <sbrk_aligned+0x40>)
 800448c:	460c      	mov	r4, r1
 800448e:	6831      	ldr	r1, [r6, #0]
 8004490:	4605      	mov	r5, r0
 8004492:	b911      	cbnz	r1, 800449a <sbrk_aligned+0x12>
 8004494:	f000 fba6 	bl	8004be4 <_sbrk_r>
 8004498:	6030      	str	r0, [r6, #0]
 800449a:	4621      	mov	r1, r4
 800449c:	4628      	mov	r0, r5
 800449e:	f000 fba1 	bl	8004be4 <_sbrk_r>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d103      	bne.n	80044ae <sbrk_aligned+0x26>
 80044a6:	f04f 34ff 	mov.w	r4, #4294967295
 80044aa:	4620      	mov	r0, r4
 80044ac:	bd70      	pop	{r4, r5, r6, pc}
 80044ae:	1cc4      	adds	r4, r0, #3
 80044b0:	f024 0403 	bic.w	r4, r4, #3
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d0f8      	beq.n	80044aa <sbrk_aligned+0x22>
 80044b8:	1a21      	subs	r1, r4, r0
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 fb92 	bl	8004be4 <_sbrk_r>
 80044c0:	3001      	adds	r0, #1
 80044c2:	d1f2      	bne.n	80044aa <sbrk_aligned+0x22>
 80044c4:	e7ef      	b.n	80044a6 <sbrk_aligned+0x1e>
 80044c6:	bf00      	nop
 80044c8:	200002ac 	.word	0x200002ac

080044cc <_malloc_r>:
 80044cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d0:	1ccd      	adds	r5, r1, #3
 80044d2:	f025 0503 	bic.w	r5, r5, #3
 80044d6:	3508      	adds	r5, #8
 80044d8:	2d0c      	cmp	r5, #12
 80044da:	bf38      	it	cc
 80044dc:	250c      	movcc	r5, #12
 80044de:	2d00      	cmp	r5, #0
 80044e0:	4606      	mov	r6, r0
 80044e2:	db01      	blt.n	80044e8 <_malloc_r+0x1c>
 80044e4:	42a9      	cmp	r1, r5
 80044e6:	d904      	bls.n	80044f2 <_malloc_r+0x26>
 80044e8:	230c      	movs	r3, #12
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	2000      	movs	r0, #0
 80044ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045c8 <_malloc_r+0xfc>
 80044f6:	f000 f869 	bl	80045cc <__malloc_lock>
 80044fa:	f8d8 3000 	ldr.w	r3, [r8]
 80044fe:	461c      	mov	r4, r3
 8004500:	bb44      	cbnz	r4, 8004554 <_malloc_r+0x88>
 8004502:	4629      	mov	r1, r5
 8004504:	4630      	mov	r0, r6
 8004506:	f7ff ffbf 	bl	8004488 <sbrk_aligned>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	4604      	mov	r4, r0
 800450e:	d158      	bne.n	80045c2 <_malloc_r+0xf6>
 8004510:	f8d8 4000 	ldr.w	r4, [r8]
 8004514:	4627      	mov	r7, r4
 8004516:	2f00      	cmp	r7, #0
 8004518:	d143      	bne.n	80045a2 <_malloc_r+0xd6>
 800451a:	2c00      	cmp	r4, #0
 800451c:	d04b      	beq.n	80045b6 <_malloc_r+0xea>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	4639      	mov	r1, r7
 8004522:	4630      	mov	r0, r6
 8004524:	eb04 0903 	add.w	r9, r4, r3
 8004528:	f000 fb5c 	bl	8004be4 <_sbrk_r>
 800452c:	4581      	cmp	r9, r0
 800452e:	d142      	bne.n	80045b6 <_malloc_r+0xea>
 8004530:	6821      	ldr	r1, [r4, #0]
 8004532:	1a6d      	subs	r5, r5, r1
 8004534:	4629      	mov	r1, r5
 8004536:	4630      	mov	r0, r6
 8004538:	f7ff ffa6 	bl	8004488 <sbrk_aligned>
 800453c:	3001      	adds	r0, #1
 800453e:	d03a      	beq.n	80045b6 <_malloc_r+0xea>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	442b      	add	r3, r5
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	f8d8 3000 	ldr.w	r3, [r8]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	bb62      	cbnz	r2, 80045a8 <_malloc_r+0xdc>
 800454e:	f8c8 7000 	str.w	r7, [r8]
 8004552:	e00f      	b.n	8004574 <_malloc_r+0xa8>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	1b52      	subs	r2, r2, r5
 8004558:	d420      	bmi.n	800459c <_malloc_r+0xd0>
 800455a:	2a0b      	cmp	r2, #11
 800455c:	d917      	bls.n	800458e <_malloc_r+0xc2>
 800455e:	1961      	adds	r1, r4, r5
 8004560:	42a3      	cmp	r3, r4
 8004562:	6025      	str	r5, [r4, #0]
 8004564:	bf18      	it	ne
 8004566:	6059      	strne	r1, [r3, #4]
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	bf08      	it	eq
 800456c:	f8c8 1000 	streq.w	r1, [r8]
 8004570:	5162      	str	r2, [r4, r5]
 8004572:	604b      	str	r3, [r1, #4]
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f82f 	bl	80045d8 <__malloc_unlock>
 800457a:	f104 000b 	add.w	r0, r4, #11
 800457e:	1d23      	adds	r3, r4, #4
 8004580:	f020 0007 	bic.w	r0, r0, #7
 8004584:	1ac2      	subs	r2, r0, r3
 8004586:	bf1c      	itt	ne
 8004588:	1a1b      	subne	r3, r3, r0
 800458a:	50a3      	strne	r3, [r4, r2]
 800458c:	e7af      	b.n	80044ee <_malloc_r+0x22>
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	42a3      	cmp	r3, r4
 8004592:	bf0c      	ite	eq
 8004594:	f8c8 2000 	streq.w	r2, [r8]
 8004598:	605a      	strne	r2, [r3, #4]
 800459a:	e7eb      	b.n	8004574 <_malloc_r+0xa8>
 800459c:	4623      	mov	r3, r4
 800459e:	6864      	ldr	r4, [r4, #4]
 80045a0:	e7ae      	b.n	8004500 <_malloc_r+0x34>
 80045a2:	463c      	mov	r4, r7
 80045a4:	687f      	ldr	r7, [r7, #4]
 80045a6:	e7b6      	b.n	8004516 <_malloc_r+0x4a>
 80045a8:	461a      	mov	r2, r3
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d1fb      	bne.n	80045a8 <_malloc_r+0xdc>
 80045b0:	2300      	movs	r3, #0
 80045b2:	6053      	str	r3, [r2, #4]
 80045b4:	e7de      	b.n	8004574 <_malloc_r+0xa8>
 80045b6:	230c      	movs	r3, #12
 80045b8:	6033      	str	r3, [r6, #0]
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 f80c 	bl	80045d8 <__malloc_unlock>
 80045c0:	e794      	b.n	80044ec <_malloc_r+0x20>
 80045c2:	6005      	str	r5, [r0, #0]
 80045c4:	e7d6      	b.n	8004574 <_malloc_r+0xa8>
 80045c6:	bf00      	nop
 80045c8:	200002b0 	.word	0x200002b0

080045cc <__malloc_lock>:
 80045cc:	4801      	ldr	r0, [pc, #4]	@ (80045d4 <__malloc_lock+0x8>)
 80045ce:	f7ff bf0f 	b.w	80043f0 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200002a8 	.word	0x200002a8

080045d8 <__malloc_unlock>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__malloc_unlock+0x8>)
 80045da:	f7ff bf0a 	b.w	80043f2 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200002a8 	.word	0x200002a8

080045e4 <__ssputs_r>:
 80045e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	688e      	ldr	r6, [r1, #8]
 80045ea:	461f      	mov	r7, r3
 80045ec:	42be      	cmp	r6, r7
 80045ee:	680b      	ldr	r3, [r1, #0]
 80045f0:	4682      	mov	sl, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	4690      	mov	r8, r2
 80045f6:	d82d      	bhi.n	8004654 <__ssputs_r+0x70>
 80045f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004600:	d026      	beq.n	8004650 <__ssputs_r+0x6c>
 8004602:	6965      	ldr	r5, [r4, #20]
 8004604:	6909      	ldr	r1, [r1, #16]
 8004606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800460a:	eba3 0901 	sub.w	r9, r3, r1
 800460e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004612:	1c7b      	adds	r3, r7, #1
 8004614:	444b      	add	r3, r9
 8004616:	106d      	asrs	r5, r5, #1
 8004618:	429d      	cmp	r5, r3
 800461a:	bf38      	it	cc
 800461c:	461d      	movcc	r5, r3
 800461e:	0553      	lsls	r3, r2, #21
 8004620:	d527      	bpl.n	8004672 <__ssputs_r+0x8e>
 8004622:	4629      	mov	r1, r5
 8004624:	f7ff ff52 	bl	80044cc <_malloc_r>
 8004628:	4606      	mov	r6, r0
 800462a:	b360      	cbz	r0, 8004686 <__ssputs_r+0xa2>
 800462c:	6921      	ldr	r1, [r4, #16]
 800462e:	464a      	mov	r2, r9
 8004630:	f000 fae8 	bl	8004c04 <memcpy>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800463a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	6126      	str	r6, [r4, #16]
 8004642:	6165      	str	r5, [r4, #20]
 8004644:	444e      	add	r6, r9
 8004646:	eba5 0509 	sub.w	r5, r5, r9
 800464a:	6026      	str	r6, [r4, #0]
 800464c:	60a5      	str	r5, [r4, #8]
 800464e:	463e      	mov	r6, r7
 8004650:	42be      	cmp	r6, r7
 8004652:	d900      	bls.n	8004656 <__ssputs_r+0x72>
 8004654:	463e      	mov	r6, r7
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	4632      	mov	r2, r6
 800465a:	4641      	mov	r1, r8
 800465c:	f000 faa8 	bl	8004bb0 <memmove>
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	1b9b      	subs	r3, r3, r6
 8004664:	60a3      	str	r3, [r4, #8]
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	4433      	add	r3, r6
 800466a:	6023      	str	r3, [r4, #0]
 800466c:	2000      	movs	r0, #0
 800466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004672:	462a      	mov	r2, r5
 8004674:	f000 fad4 	bl	8004c20 <_realloc_r>
 8004678:	4606      	mov	r6, r0
 800467a:	2800      	cmp	r0, #0
 800467c:	d1e0      	bne.n	8004640 <__ssputs_r+0x5c>
 800467e:	6921      	ldr	r1, [r4, #16]
 8004680:	4650      	mov	r0, sl
 8004682:	f7ff feb7 	bl	80043f4 <_free_r>
 8004686:	230c      	movs	r3, #12
 8004688:	f8ca 3000 	str.w	r3, [sl]
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	e7e9      	b.n	800466e <__ssputs_r+0x8a>
	...

0800469c <_svfiprintf_r>:
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	4698      	mov	r8, r3
 80046a2:	898b      	ldrh	r3, [r1, #12]
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	b09d      	sub	sp, #116	@ 0x74
 80046a8:	4607      	mov	r7, r0
 80046aa:	460d      	mov	r5, r1
 80046ac:	4614      	mov	r4, r2
 80046ae:	d510      	bpl.n	80046d2 <_svfiprintf_r+0x36>
 80046b0:	690b      	ldr	r3, [r1, #16]
 80046b2:	b973      	cbnz	r3, 80046d2 <_svfiprintf_r+0x36>
 80046b4:	2140      	movs	r1, #64	@ 0x40
 80046b6:	f7ff ff09 	bl	80044cc <_malloc_r>
 80046ba:	6028      	str	r0, [r5, #0]
 80046bc:	6128      	str	r0, [r5, #16]
 80046be:	b930      	cbnz	r0, 80046ce <_svfiprintf_r+0x32>
 80046c0:	230c      	movs	r3, #12
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	b01d      	add	sp, #116	@ 0x74
 80046ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ce:	2340      	movs	r3, #64	@ 0x40
 80046d0:	616b      	str	r3, [r5, #20]
 80046d2:	2300      	movs	r3, #0
 80046d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046d6:	2320      	movs	r3, #32
 80046d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80046e0:	2330      	movs	r3, #48	@ 0x30
 80046e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004880 <_svfiprintf_r+0x1e4>
 80046e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046ea:	f04f 0901 	mov.w	r9, #1
 80046ee:	4623      	mov	r3, r4
 80046f0:	469a      	mov	sl, r3
 80046f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046f6:	b10a      	cbz	r2, 80046fc <_svfiprintf_r+0x60>
 80046f8:	2a25      	cmp	r2, #37	@ 0x25
 80046fa:	d1f9      	bne.n	80046f0 <_svfiprintf_r+0x54>
 80046fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004700:	d00b      	beq.n	800471a <_svfiprintf_r+0x7e>
 8004702:	465b      	mov	r3, fp
 8004704:	4622      	mov	r2, r4
 8004706:	4629      	mov	r1, r5
 8004708:	4638      	mov	r0, r7
 800470a:	f7ff ff6b 	bl	80045e4 <__ssputs_r>
 800470e:	3001      	adds	r0, #1
 8004710:	f000 80a7 	beq.w	8004862 <_svfiprintf_r+0x1c6>
 8004714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004716:	445a      	add	r2, fp
 8004718:	9209      	str	r2, [sp, #36]	@ 0x24
 800471a:	f89a 3000 	ldrb.w	r3, [sl]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 809f 	beq.w	8004862 <_svfiprintf_r+0x1c6>
 8004724:	2300      	movs	r3, #0
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800472e:	f10a 0a01 	add.w	sl, sl, #1
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	9307      	str	r3, [sp, #28]
 8004736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800473a:	931a      	str	r3, [sp, #104]	@ 0x68
 800473c:	4654      	mov	r4, sl
 800473e:	2205      	movs	r2, #5
 8004740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004744:	484e      	ldr	r0, [pc, #312]	@ (8004880 <_svfiprintf_r+0x1e4>)
 8004746:	f7fb fd4b 	bl	80001e0 <memchr>
 800474a:	9a04      	ldr	r2, [sp, #16]
 800474c:	b9d8      	cbnz	r0, 8004786 <_svfiprintf_r+0xea>
 800474e:	06d0      	lsls	r0, r2, #27
 8004750:	bf44      	itt	mi
 8004752:	2320      	movmi	r3, #32
 8004754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004758:	0711      	lsls	r1, r2, #28
 800475a:	bf44      	itt	mi
 800475c:	232b      	movmi	r3, #43	@ 0x2b
 800475e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004762:	f89a 3000 	ldrb.w	r3, [sl]
 8004766:	2b2a      	cmp	r3, #42	@ 0x2a
 8004768:	d015      	beq.n	8004796 <_svfiprintf_r+0xfa>
 800476a:	9a07      	ldr	r2, [sp, #28]
 800476c:	4654      	mov	r4, sl
 800476e:	2000      	movs	r0, #0
 8004770:	f04f 0c0a 	mov.w	ip, #10
 8004774:	4621      	mov	r1, r4
 8004776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800477a:	3b30      	subs	r3, #48	@ 0x30
 800477c:	2b09      	cmp	r3, #9
 800477e:	d94b      	bls.n	8004818 <_svfiprintf_r+0x17c>
 8004780:	b1b0      	cbz	r0, 80047b0 <_svfiprintf_r+0x114>
 8004782:	9207      	str	r2, [sp, #28]
 8004784:	e014      	b.n	80047b0 <_svfiprintf_r+0x114>
 8004786:	eba0 0308 	sub.w	r3, r0, r8
 800478a:	fa09 f303 	lsl.w	r3, r9, r3
 800478e:	4313      	orrs	r3, r2
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	46a2      	mov	sl, r4
 8004794:	e7d2      	b.n	800473c <_svfiprintf_r+0xa0>
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	1d19      	adds	r1, r3, #4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	9103      	str	r1, [sp, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bfbb      	ittet	lt
 80047a2:	425b      	neglt	r3, r3
 80047a4:	f042 0202 	orrlt.w	r2, r2, #2
 80047a8:	9307      	strge	r3, [sp, #28]
 80047aa:	9307      	strlt	r3, [sp, #28]
 80047ac:	bfb8      	it	lt
 80047ae:	9204      	strlt	r2, [sp, #16]
 80047b0:	7823      	ldrb	r3, [r4, #0]
 80047b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80047b4:	d10a      	bne.n	80047cc <_svfiprintf_r+0x130>
 80047b6:	7863      	ldrb	r3, [r4, #1]
 80047b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ba:	d132      	bne.n	8004822 <_svfiprintf_r+0x186>
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	9203      	str	r2, [sp, #12]
 80047c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047c8:	3402      	adds	r4, #2
 80047ca:	9305      	str	r3, [sp, #20]
 80047cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004890 <_svfiprintf_r+0x1f4>
 80047d0:	7821      	ldrb	r1, [r4, #0]
 80047d2:	2203      	movs	r2, #3
 80047d4:	4650      	mov	r0, sl
 80047d6:	f7fb fd03 	bl	80001e0 <memchr>
 80047da:	b138      	cbz	r0, 80047ec <_svfiprintf_r+0x150>
 80047dc:	9b04      	ldr	r3, [sp, #16]
 80047de:	eba0 000a 	sub.w	r0, r0, sl
 80047e2:	2240      	movs	r2, #64	@ 0x40
 80047e4:	4082      	lsls	r2, r0
 80047e6:	4313      	orrs	r3, r2
 80047e8:	3401      	adds	r4, #1
 80047ea:	9304      	str	r3, [sp, #16]
 80047ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f0:	4824      	ldr	r0, [pc, #144]	@ (8004884 <_svfiprintf_r+0x1e8>)
 80047f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047f6:	2206      	movs	r2, #6
 80047f8:	f7fb fcf2 	bl	80001e0 <memchr>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d036      	beq.n	800486e <_svfiprintf_r+0x1d2>
 8004800:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <_svfiprintf_r+0x1ec>)
 8004802:	bb1b      	cbnz	r3, 800484c <_svfiprintf_r+0x1b0>
 8004804:	9b03      	ldr	r3, [sp, #12]
 8004806:	3307      	adds	r3, #7
 8004808:	f023 0307 	bic.w	r3, r3, #7
 800480c:	3308      	adds	r3, #8
 800480e:	9303      	str	r3, [sp, #12]
 8004810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004812:	4433      	add	r3, r6
 8004814:	9309      	str	r3, [sp, #36]	@ 0x24
 8004816:	e76a      	b.n	80046ee <_svfiprintf_r+0x52>
 8004818:	fb0c 3202 	mla	r2, ip, r2, r3
 800481c:	460c      	mov	r4, r1
 800481e:	2001      	movs	r0, #1
 8004820:	e7a8      	b.n	8004774 <_svfiprintf_r+0xd8>
 8004822:	2300      	movs	r3, #0
 8004824:	3401      	adds	r4, #1
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	4619      	mov	r1, r3
 800482a:	f04f 0c0a 	mov.w	ip, #10
 800482e:	4620      	mov	r0, r4
 8004830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004834:	3a30      	subs	r2, #48	@ 0x30
 8004836:	2a09      	cmp	r2, #9
 8004838:	d903      	bls.n	8004842 <_svfiprintf_r+0x1a6>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0c6      	beq.n	80047cc <_svfiprintf_r+0x130>
 800483e:	9105      	str	r1, [sp, #20]
 8004840:	e7c4      	b.n	80047cc <_svfiprintf_r+0x130>
 8004842:	fb0c 2101 	mla	r1, ip, r1, r2
 8004846:	4604      	mov	r4, r0
 8004848:	2301      	movs	r3, #1
 800484a:	e7f0      	b.n	800482e <_svfiprintf_r+0x192>
 800484c:	ab03      	add	r3, sp, #12
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	462a      	mov	r2, r5
 8004852:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <_svfiprintf_r+0x1f0>)
 8004854:	a904      	add	r1, sp, #16
 8004856:	4638      	mov	r0, r7
 8004858:	f3af 8000 	nop.w
 800485c:	1c42      	adds	r2, r0, #1
 800485e:	4606      	mov	r6, r0
 8004860:	d1d6      	bne.n	8004810 <_svfiprintf_r+0x174>
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	065b      	lsls	r3, r3, #25
 8004866:	f53f af2d 	bmi.w	80046c4 <_svfiprintf_r+0x28>
 800486a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800486c:	e72c      	b.n	80046c8 <_svfiprintf_r+0x2c>
 800486e:	ab03      	add	r3, sp, #12
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	462a      	mov	r2, r5
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <_svfiprintf_r+0x1f0>)
 8004876:	a904      	add	r1, sp, #16
 8004878:	4638      	mov	r0, r7
 800487a:	f000 f879 	bl	8004970 <_printf_i>
 800487e:	e7ed      	b.n	800485c <_svfiprintf_r+0x1c0>
 8004880:	08004cfc 	.word	0x08004cfc
 8004884:	08004d06 	.word	0x08004d06
 8004888:	00000000 	.word	0x00000000
 800488c:	080045e5 	.word	0x080045e5
 8004890:	08004d02 	.word	0x08004d02

08004894 <_printf_common>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	4616      	mov	r6, r2
 800489a:	4698      	mov	r8, r3
 800489c:	688a      	ldr	r2, [r1, #8]
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048a4:	4293      	cmp	r3, r2
 80048a6:	bfb8      	it	lt
 80048a8:	4613      	movlt	r3, r2
 80048aa:	6033      	str	r3, [r6, #0]
 80048ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048b0:	4607      	mov	r7, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	b10a      	cbz	r2, 80048ba <_printf_common+0x26>
 80048b6:	3301      	adds	r3, #1
 80048b8:	6033      	str	r3, [r6, #0]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	0699      	lsls	r1, r3, #26
 80048be:	bf42      	ittt	mi
 80048c0:	6833      	ldrmi	r3, [r6, #0]
 80048c2:	3302      	addmi	r3, #2
 80048c4:	6033      	strmi	r3, [r6, #0]
 80048c6:	6825      	ldr	r5, [r4, #0]
 80048c8:	f015 0506 	ands.w	r5, r5, #6
 80048cc:	d106      	bne.n	80048dc <_printf_common+0x48>
 80048ce:	f104 0a19 	add.w	sl, r4, #25
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	6832      	ldr	r2, [r6, #0]
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	42ab      	cmp	r3, r5
 80048da:	dc26      	bgt.n	800492a <_printf_common+0x96>
 80048dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	3b00      	subs	r3, #0
 80048e4:	bf18      	it	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	0692      	lsls	r2, r2, #26
 80048ea:	d42b      	bmi.n	8004944 <_printf_common+0xb0>
 80048ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048f0:	4641      	mov	r1, r8
 80048f2:	4638      	mov	r0, r7
 80048f4:	47c8      	blx	r9
 80048f6:	3001      	adds	r0, #1
 80048f8:	d01e      	beq.n	8004938 <_printf_common+0xa4>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	f003 0306 	and.w	r3, r3, #6
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf02      	ittt	eq
 8004906:	68e5      	ldreq	r5, [r4, #12]
 8004908:	6833      	ldreq	r3, [r6, #0]
 800490a:	1aed      	subeq	r5, r5, r3
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	bf0c      	ite	eq
 8004910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004914:	2500      	movne	r5, #0
 8004916:	4293      	cmp	r3, r2
 8004918:	bfc4      	itt	gt
 800491a:	1a9b      	subgt	r3, r3, r2
 800491c:	18ed      	addgt	r5, r5, r3
 800491e:	2600      	movs	r6, #0
 8004920:	341a      	adds	r4, #26
 8004922:	42b5      	cmp	r5, r6
 8004924:	d11a      	bne.n	800495c <_printf_common+0xc8>
 8004926:	2000      	movs	r0, #0
 8004928:	e008      	b.n	800493c <_printf_common+0xa8>
 800492a:	2301      	movs	r3, #1
 800492c:	4652      	mov	r2, sl
 800492e:	4641      	mov	r1, r8
 8004930:	4638      	mov	r0, r7
 8004932:	47c8      	blx	r9
 8004934:	3001      	adds	r0, #1
 8004936:	d103      	bne.n	8004940 <_printf_common+0xac>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004940:	3501      	adds	r5, #1
 8004942:	e7c6      	b.n	80048d2 <_printf_common+0x3e>
 8004944:	18e1      	adds	r1, r4, r3
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	2030      	movs	r0, #48	@ 0x30
 800494a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800494e:	4422      	add	r2, r4
 8004950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004958:	3302      	adds	r3, #2
 800495a:	e7c7      	b.n	80048ec <_printf_common+0x58>
 800495c:	2301      	movs	r3, #1
 800495e:	4622      	mov	r2, r4
 8004960:	4641      	mov	r1, r8
 8004962:	4638      	mov	r0, r7
 8004964:	47c8      	blx	r9
 8004966:	3001      	adds	r0, #1
 8004968:	d0e6      	beq.n	8004938 <_printf_common+0xa4>
 800496a:	3601      	adds	r6, #1
 800496c:	e7d9      	b.n	8004922 <_printf_common+0x8e>
	...

08004970 <_printf_i>:
 8004970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	7e0f      	ldrb	r7, [r1, #24]
 8004976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004978:	2f78      	cmp	r7, #120	@ 0x78
 800497a:	4691      	mov	r9, r2
 800497c:	4680      	mov	r8, r0
 800497e:	460c      	mov	r4, r1
 8004980:	469a      	mov	sl, r3
 8004982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004986:	d807      	bhi.n	8004998 <_printf_i+0x28>
 8004988:	2f62      	cmp	r7, #98	@ 0x62
 800498a:	d80a      	bhi.n	80049a2 <_printf_i+0x32>
 800498c:	2f00      	cmp	r7, #0
 800498e:	f000 80d2 	beq.w	8004b36 <_printf_i+0x1c6>
 8004992:	2f58      	cmp	r7, #88	@ 0x58
 8004994:	f000 80b9 	beq.w	8004b0a <_printf_i+0x19a>
 8004998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800499c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049a0:	e03a      	b.n	8004a18 <_printf_i+0xa8>
 80049a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049a6:	2b15      	cmp	r3, #21
 80049a8:	d8f6      	bhi.n	8004998 <_printf_i+0x28>
 80049aa:	a101      	add	r1, pc, #4	@ (adr r1, 80049b0 <_printf_i+0x40>)
 80049ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a1d 	.word	0x08004a1d
 80049b8:	08004999 	.word	0x08004999
 80049bc:	08004999 	.word	0x08004999
 80049c0:	08004999 	.word	0x08004999
 80049c4:	08004999 	.word	0x08004999
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004999 	.word	0x08004999
 80049d0:	08004999 	.word	0x08004999
 80049d4:	08004999 	.word	0x08004999
 80049d8:	08004999 	.word	0x08004999
 80049dc:	08004b1d 	.word	0x08004b1d
 80049e0:	08004a47 	.word	0x08004a47
 80049e4:	08004ad7 	.word	0x08004ad7
 80049e8:	08004999 	.word	0x08004999
 80049ec:	08004999 	.word	0x08004999
 80049f0:	08004b3f 	.word	0x08004b3f
 80049f4:	08004999 	.word	0x08004999
 80049f8:	08004a47 	.word	0x08004a47
 80049fc:	08004999 	.word	0x08004999
 8004a00:	08004999 	.word	0x08004999
 8004a04:	08004adf 	.word	0x08004adf
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6032      	str	r2, [r6, #0]
 8004a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e09d      	b.n	8004b58 <_printf_i+0x1e8>
 8004a1c:	6833      	ldr	r3, [r6, #0]
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	1d19      	adds	r1, r3, #4
 8004a22:	6031      	str	r1, [r6, #0]
 8004a24:	0606      	lsls	r6, r0, #24
 8004a26:	d501      	bpl.n	8004a2c <_printf_i+0xbc>
 8004a28:	681d      	ldr	r5, [r3, #0]
 8004a2a:	e003      	b.n	8004a34 <_printf_i+0xc4>
 8004a2c:	0645      	lsls	r5, r0, #25
 8004a2e:	d5fb      	bpl.n	8004a28 <_printf_i+0xb8>
 8004a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	da03      	bge.n	8004a40 <_printf_i+0xd0>
 8004a38:	232d      	movs	r3, #45	@ 0x2d
 8004a3a:	426d      	negs	r5, r5
 8004a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a40:	4859      	ldr	r0, [pc, #356]	@ (8004ba8 <_printf_i+0x238>)
 8004a42:	230a      	movs	r3, #10
 8004a44:	e011      	b.n	8004a6a <_printf_i+0xfa>
 8004a46:	6821      	ldr	r1, [r4, #0]
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	0608      	lsls	r0, r1, #24
 8004a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a50:	d402      	bmi.n	8004a58 <_printf_i+0xe8>
 8004a52:	0649      	lsls	r1, r1, #25
 8004a54:	bf48      	it	mi
 8004a56:	b2ad      	uxthmi	r5, r5
 8004a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a5a:	4853      	ldr	r0, [pc, #332]	@ (8004ba8 <_printf_i+0x238>)
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	bf14      	ite	ne
 8004a60:	230a      	movne	r3, #10
 8004a62:	2308      	moveq	r3, #8
 8004a64:	2100      	movs	r1, #0
 8004a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a6a:	6866      	ldr	r6, [r4, #4]
 8004a6c:	60a6      	str	r6, [r4, #8]
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	bfa2      	ittt	ge
 8004a72:	6821      	ldrge	r1, [r4, #0]
 8004a74:	f021 0104 	bicge.w	r1, r1, #4
 8004a78:	6021      	strge	r1, [r4, #0]
 8004a7a:	b90d      	cbnz	r5, 8004a80 <_printf_i+0x110>
 8004a7c:	2e00      	cmp	r6, #0
 8004a7e:	d04b      	beq.n	8004b18 <_printf_i+0x1a8>
 8004a80:	4616      	mov	r6, r2
 8004a82:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a86:	fb03 5711 	mls	r7, r3, r1, r5
 8004a8a:	5dc7      	ldrb	r7, [r0, r7]
 8004a8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a90:	462f      	mov	r7, r5
 8004a92:	42bb      	cmp	r3, r7
 8004a94:	460d      	mov	r5, r1
 8004a96:	d9f4      	bls.n	8004a82 <_printf_i+0x112>
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d10b      	bne.n	8004ab4 <_printf_i+0x144>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	07df      	lsls	r7, r3, #31
 8004aa0:	d508      	bpl.n	8004ab4 <_printf_i+0x144>
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	6861      	ldr	r1, [r4, #4]
 8004aa6:	4299      	cmp	r1, r3
 8004aa8:	bfde      	ittt	le
 8004aaa:	2330      	movle	r3, #48	@ 0x30
 8004aac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ab0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ab4:	1b92      	subs	r2, r2, r6
 8004ab6:	6122      	str	r2, [r4, #16]
 8004ab8:	f8cd a000 	str.w	sl, [sp]
 8004abc:	464b      	mov	r3, r9
 8004abe:	aa03      	add	r2, sp, #12
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	f7ff fee6 	bl	8004894 <_printf_common>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d14a      	bne.n	8004b62 <_printf_i+0x1f2>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	b004      	add	sp, #16
 8004ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	f043 0320 	orr.w	r3, r3, #32
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	4833      	ldr	r0, [pc, #204]	@ (8004bac <_printf_i+0x23c>)
 8004ae0:	2778      	movs	r7, #120	@ 0x78
 8004ae2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	6831      	ldr	r1, [r6, #0]
 8004aea:	061f      	lsls	r7, r3, #24
 8004aec:	f851 5b04 	ldr.w	r5, [r1], #4
 8004af0:	d402      	bmi.n	8004af8 <_printf_i+0x188>
 8004af2:	065f      	lsls	r7, r3, #25
 8004af4:	bf48      	it	mi
 8004af6:	b2ad      	uxthmi	r5, r5
 8004af8:	6031      	str	r1, [r6, #0]
 8004afa:	07d9      	lsls	r1, r3, #31
 8004afc:	bf44      	itt	mi
 8004afe:	f043 0320 	orrmi.w	r3, r3, #32
 8004b02:	6023      	strmi	r3, [r4, #0]
 8004b04:	b11d      	cbz	r5, 8004b0e <_printf_i+0x19e>
 8004b06:	2310      	movs	r3, #16
 8004b08:	e7ac      	b.n	8004a64 <_printf_i+0xf4>
 8004b0a:	4827      	ldr	r0, [pc, #156]	@ (8004ba8 <_printf_i+0x238>)
 8004b0c:	e7e9      	b.n	8004ae2 <_printf_i+0x172>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f023 0320 	bic.w	r3, r3, #32
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	e7f6      	b.n	8004b06 <_printf_i+0x196>
 8004b18:	4616      	mov	r6, r2
 8004b1a:	e7bd      	b.n	8004a98 <_printf_i+0x128>
 8004b1c:	6833      	ldr	r3, [r6, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	6961      	ldr	r1, [r4, #20]
 8004b22:	1d18      	adds	r0, r3, #4
 8004b24:	6030      	str	r0, [r6, #0]
 8004b26:	062e      	lsls	r6, r5, #24
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	d501      	bpl.n	8004b30 <_printf_i+0x1c0>
 8004b2c:	6019      	str	r1, [r3, #0]
 8004b2e:	e002      	b.n	8004b36 <_printf_i+0x1c6>
 8004b30:	0668      	lsls	r0, r5, #25
 8004b32:	d5fb      	bpl.n	8004b2c <_printf_i+0x1bc>
 8004b34:	8019      	strh	r1, [r3, #0]
 8004b36:	2300      	movs	r3, #0
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	4616      	mov	r6, r2
 8004b3c:	e7bc      	b.n	8004ab8 <_printf_i+0x148>
 8004b3e:	6833      	ldr	r3, [r6, #0]
 8004b40:	1d1a      	adds	r2, r3, #4
 8004b42:	6032      	str	r2, [r6, #0]
 8004b44:	681e      	ldr	r6, [r3, #0]
 8004b46:	6862      	ldr	r2, [r4, #4]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7fb fb48 	bl	80001e0 <memchr>
 8004b50:	b108      	cbz	r0, 8004b56 <_printf_i+0x1e6>
 8004b52:	1b80      	subs	r0, r0, r6
 8004b54:	6060      	str	r0, [r4, #4]
 8004b56:	6863      	ldr	r3, [r4, #4]
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b60:	e7aa      	b.n	8004ab8 <_printf_i+0x148>
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	4632      	mov	r2, r6
 8004b66:	4649      	mov	r1, r9
 8004b68:	4640      	mov	r0, r8
 8004b6a:	47d0      	blx	sl
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d0ad      	beq.n	8004acc <_printf_i+0x15c>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	079b      	lsls	r3, r3, #30
 8004b74:	d413      	bmi.n	8004b9e <_printf_i+0x22e>
 8004b76:	68e0      	ldr	r0, [r4, #12]
 8004b78:	9b03      	ldr	r3, [sp, #12]
 8004b7a:	4298      	cmp	r0, r3
 8004b7c:	bfb8      	it	lt
 8004b7e:	4618      	movlt	r0, r3
 8004b80:	e7a6      	b.n	8004ad0 <_printf_i+0x160>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4632      	mov	r2, r6
 8004b86:	4649      	mov	r1, r9
 8004b88:	4640      	mov	r0, r8
 8004b8a:	47d0      	blx	sl
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d09d      	beq.n	8004acc <_printf_i+0x15c>
 8004b90:	3501      	adds	r5, #1
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	9903      	ldr	r1, [sp, #12]
 8004b96:	1a5b      	subs	r3, r3, r1
 8004b98:	42ab      	cmp	r3, r5
 8004b9a:	dcf2      	bgt.n	8004b82 <_printf_i+0x212>
 8004b9c:	e7eb      	b.n	8004b76 <_printf_i+0x206>
 8004b9e:	2500      	movs	r5, #0
 8004ba0:	f104 0619 	add.w	r6, r4, #25
 8004ba4:	e7f5      	b.n	8004b92 <_printf_i+0x222>
 8004ba6:	bf00      	nop
 8004ba8:	08004d0d 	.word	0x08004d0d
 8004bac:	08004d1e 	.word	0x08004d1e

08004bb0 <memmove>:
 8004bb0:	4288      	cmp	r0, r1
 8004bb2:	b510      	push	{r4, lr}
 8004bb4:	eb01 0402 	add.w	r4, r1, r2
 8004bb8:	d902      	bls.n	8004bc0 <memmove+0x10>
 8004bba:	4284      	cmp	r4, r0
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	d807      	bhi.n	8004bd0 <memmove+0x20>
 8004bc0:	1e43      	subs	r3, r0, #1
 8004bc2:	42a1      	cmp	r1, r4
 8004bc4:	d008      	beq.n	8004bd8 <memmove+0x28>
 8004bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bce:	e7f8      	b.n	8004bc2 <memmove+0x12>
 8004bd0:	4402      	add	r2, r0
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	428a      	cmp	r2, r1
 8004bd6:	d100      	bne.n	8004bda <memmove+0x2a>
 8004bd8:	bd10      	pop	{r4, pc}
 8004bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004be2:	e7f7      	b.n	8004bd4 <memmove+0x24>

08004be4 <_sbrk_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d06      	ldr	r5, [pc, #24]	@ (8004c00 <_sbrk_r+0x1c>)
 8004be8:	2300      	movs	r3, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fc f876 	bl	8000ce0 <_sbrk>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_sbrk_r+0x1a>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_sbrk_r+0x1a>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	200002a4 	.word	0x200002a4

08004c04 <memcpy>:
 8004c04:	440a      	add	r2, r1
 8004c06:	4291      	cmp	r1, r2
 8004c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c0c:	d100      	bne.n	8004c10 <memcpy+0xc>
 8004c0e:	4770      	bx	lr
 8004c10:	b510      	push	{r4, lr}
 8004c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	d1f9      	bne.n	8004c12 <memcpy+0xe>
 8004c1e:	bd10      	pop	{r4, pc}

08004c20 <_realloc_r>:
 8004c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c24:	4680      	mov	r8, r0
 8004c26:	4615      	mov	r5, r2
 8004c28:	460c      	mov	r4, r1
 8004c2a:	b921      	cbnz	r1, 8004c36 <_realloc_r+0x16>
 8004c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	4611      	mov	r1, r2
 8004c32:	f7ff bc4b 	b.w	80044cc <_malloc_r>
 8004c36:	b92a      	cbnz	r2, 8004c44 <_realloc_r+0x24>
 8004c38:	f7ff fbdc 	bl	80043f4 <_free_r>
 8004c3c:	2400      	movs	r4, #0
 8004c3e:	4620      	mov	r0, r4
 8004c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c44:	f000 f81a 	bl	8004c7c <_malloc_usable_size_r>
 8004c48:	4285      	cmp	r5, r0
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	d802      	bhi.n	8004c54 <_realloc_r+0x34>
 8004c4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c52:	d8f4      	bhi.n	8004c3e <_realloc_r+0x1e>
 8004c54:	4629      	mov	r1, r5
 8004c56:	4640      	mov	r0, r8
 8004c58:	f7ff fc38 	bl	80044cc <_malloc_r>
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d0ec      	beq.n	8004c3c <_realloc_r+0x1c>
 8004c62:	42b5      	cmp	r5, r6
 8004c64:	462a      	mov	r2, r5
 8004c66:	4621      	mov	r1, r4
 8004c68:	bf28      	it	cs
 8004c6a:	4632      	movcs	r2, r6
 8004c6c:	f7ff ffca 	bl	8004c04 <memcpy>
 8004c70:	4621      	mov	r1, r4
 8004c72:	4640      	mov	r0, r8
 8004c74:	f7ff fbbe 	bl	80043f4 <_free_r>
 8004c78:	463c      	mov	r4, r7
 8004c7a:	e7e0      	b.n	8004c3e <_realloc_r+0x1e>

08004c7c <_malloc_usable_size_r>:
 8004c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c80:	1f18      	subs	r0, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfbc      	itt	lt
 8004c86:	580b      	ldrlt	r3, [r1, r0]
 8004c88:	18c0      	addlt	r0, r0, r3
 8004c8a:	4770      	bx	lr

08004c8c <_init>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr

08004c98 <_fini>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr
