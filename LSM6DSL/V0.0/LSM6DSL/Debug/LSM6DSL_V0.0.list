
LSM6DSL_V0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004634  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080047d4  080047d4  000057d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004870  08004870  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004878  08004878  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800487c  0800487c  0000587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004880  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000248  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c042  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a22  00000000  00000000  000120ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00013af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000790  00000000  00000000  000144a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203a1  00000000  00000000  00014c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e38c  00000000  00000000  00034fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c28e5  00000000  00000000  00043365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105c4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce4  00000000  00000000  00105c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00108974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047bc 	.word	0x080047bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080047bc 	.word	0x080047bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb91 	bl	80009ac <HAL_Init>




  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f835 	bl	80002f8 <SystemClock_Config>




  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f903 	bl	8000498 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f8d1 	bl	8000438 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000296:	f000 f88f 	bl	80003b8 <MX_I2C1_Init>




  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a4:	f000 fe7c 	bl	8000fa0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE BEGIN 3 */

	  // Read gyroscope data
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);
 80002a8:	f107 020a 	add.w	r2, r7, #10
 80002ac:	f107 010c 	add.w	r1, r7, #12
 80002b0:	f107 030e 	add.w	r3, r7, #14
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f957 	bl	8000568 <LSM6DSL_ReadGyro>

	  // Read accelerometer data
	  LSM6DSL_ReadAccel(&accel_x, &accel_y, &accel_z);
 80002ba:	1d3a      	adds	r2, r7, #4
 80002bc:	1db9      	adds	r1, r7, #6
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f97c 	bl	80005c0 <LSM6DSL_ReadAccel>

	  // send data over uart
	  DataOver_UART(accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);
 80002c8:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80002cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80002d0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80002d4:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 80002d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80002e0:	9201      	str	r2, [sp, #4]
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	462b      	mov	r3, r5
 80002e6:	4622      	mov	r2, r4
 80002e8:	f000 f9b6 	bl	8000658 <DataOver_UART>

	  //delay
	  HAL_Delay(500);
 80002ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002f0:	f000 fbc2 	bl	8000a78 <HAL_Delay>
	  LSM6DSL_ReadGyro(&gyro_x, &gyro_y, &gyro_z);
 80002f4:	bf00      	nop
 80002f6:	e7d7      	b.n	80002a8 <main+0x28>

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a6      	sub	sp, #152	@ 0x98
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000302:	2228      	movs	r2, #40	@ 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f003 fdd8 	bl	8003ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2258      	movs	r2, #88	@ 0x58
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fdca 	bl	8003ebc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000328:	2302      	movs	r3, #2
 800032a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2310      	movs	r3, #16
 8000332:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000344:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000348:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000356:	4618      	mov	r0, r3
 8000358:	f001 fc22 	bl	8001ba0 <HAL_RCC_OscConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000362:	f000 f9b3 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	230f      	movs	r3, #15
 8000368:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	2302      	movs	r3, #2
 800036c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000376:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fc60 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800038e:	f000 f99d 	bl	80006cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000392:	2322      	movs	r3, #34	@ 0x22
 8000394:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f002 fe71 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003ac:	f000 f98e 	bl	80006cc <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3798      	adds	r7, #152	@ 0x98
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_I2C1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_I2C1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_I2C1_Init+0x74>)
 80003c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000434 <MX_I2C1_Init+0x7c>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_I2C1_Init+0x74>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_I2C1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f2:	480e      	ldr	r0, [pc, #56]	@ (800042c <MX_I2C1_Init+0x74>)
 80003f4:	f000 fdec 	bl	8000fd0 <HAL_I2C_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003fe:	f000 f965 	bl	80006cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000402:	2100      	movs	r1, #0
 8000404:	4809      	ldr	r0, [pc, #36]	@ (800042c <MX_I2C1_Init+0x74>)
 8000406:	f001 fb33 	bl	8001a70 <HAL_I2CEx_ConfigAnalogFilter>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000410:	f000 f95c 	bl	80006cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000414:	2100      	movs	r1, #0
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_I2C1_Init+0x74>)
 8000418:	f001 fb75 	bl	8001b06 <HAL_I2CEx_ConfigDigitalFilter>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 f953 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000078 	.word	0x20000078
 8000430:	40005400 	.word	0x40005400
 8000434:	00201d2b 	.word	0x00201d2b

08000438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800043c:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	@ (8000494 <MX_USART2_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047a:	4805      	ldr	r0, [pc, #20]	@ (8000490 <MX_USART2_UART_Init+0x58>)
 800047c:	f003 f822 	bl	80034c4 <HAL_UART_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000486:	f000 f921 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200000cc 	.word	0x200000cc
 8000494:	40004400 	.word	0x40004400

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	@ 0x28
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b29      	ldr	r3, [pc, #164]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b26      	ldr	r3, [pc, #152]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a25      	ldr	r2, [pc, #148]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b23      	ldr	r3, [pc, #140]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <MX_GPIO_Init+0xc8>)
 80004fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <MX_GPIO_Init+0xc8>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000518:	f000 fd42 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000522:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	480c      	ldr	r0, [pc, #48]	@ (8000564 <MX_GPIO_Init+0xcc>)
 8000534:	f000 fbaa 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000538:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 fb9a 	bl	8000c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	@ 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800

08000568 <LSM6DSL_ReadGyro>:

/**
  * @brief LSM6DSL_ReadGyro Initialization Function
  */
void LSM6DSL_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
    uint8_t gyro_data[6];

    // Read 6 bytes of gyro data (OUTX_L_G to OUTZ_H_G)
    LSM6DSL_ReadRegisters(LSM6DSL_ACC_GYRO_OUTX_L_G, gyro_data, 6);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2206      	movs	r2, #6
 800057a:	4619      	mov	r1, r3
 800057c:	2022      	movs	r0, #34	@ 0x22
 800057e:	f000 f84b 	bl	8000618 <LSM6DSL_ReadRegisters>

    // Combine low and high bytes to get 16-bit gyroscope values
    *gx = (int16_t)(gyro_data[1] << 8 | gyro_data[0]);
 8000582:	7c7b      	ldrb	r3, [r7, #17]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	7c3b      	ldrb	r3, [r7, #16]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21a      	sxth	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(gyro_data[3] << 8 | gyro_data[2]);
 8000594:	7cfb      	ldrb	r3, [r7, #19]
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	b21a      	sxth	r2, r3
 800059a:	7cbb      	ldrb	r3, [r7, #18]
 800059c:	b21b      	sxth	r3, r3
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21a      	sxth	r2, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(gyro_data[5] << 8 | gyro_data[4]);
 80005a6:	7d7b      	ldrb	r3, [r7, #21]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	7d3b      	ldrb	r3, [r7, #20]
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b21a      	sxth	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	801a      	strh	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <LSM6DSL_ReadAccel>:

/**
  * @brief LSM6DSL_ReadAccel Initialization Function
  */
void LSM6DSL_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
    uint8_t accel_data[6];

    // Read 6 bytes of accelerometer data (OUTX_L_XL to OUTZ_H_XL)
    LSM6DSL_ReadRegisters(LSM6DSL_ACC_GYRO_OUTX_L_XL, accel_data, 6);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2206      	movs	r2, #6
 80005d2:	4619      	mov	r1, r3
 80005d4:	2028      	movs	r0, #40	@ 0x28
 80005d6:	f000 f81f 	bl	8000618 <LSM6DSL_ReadRegisters>

    // Combine low and high bytes to get 16-bit accelerometer values
    *ax = (int16_t)(accel_data[1] << 8 | accel_data[0]);
 80005da:	7c7b      	ldrb	r3, [r7, #17]
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b21a      	sxth	r2, r3
 80005e0:	7c3b      	ldrb	r3, [r7, #16]
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(accel_data[3] << 8 | accel_data[2]);
 80005ec:	7cfb      	ldrb	r3, [r7, #19]
 80005ee:	021b      	lsls	r3, r3, #8
 80005f0:	b21a      	sxth	r2, r3
 80005f2:	7cbb      	ldrb	r3, [r7, #18]
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b21a      	sxth	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(accel_data[5] << 8 | accel_data[4]);
 80005fe:	7d7b      	ldrb	r3, [r7, #21]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	7d3b      	ldrb	r3, [r7, #20]
 8000606:	b21b      	sxth	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b21a      	sxth	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	801a      	strh	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <LSM6DSL_ReadRegisters>:

/**
  * @brief LSM6DSL_ReadRegisters Initialization Function
  */
void LSM6DSL_ReadRegisters(uint8_t reg_addr, uint8_t *data, uint16_t size)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	80bb      	strh	r3, [r7, #4]
    // Transmit register address
    HAL_I2C_Master_Transmit(&hi2c1, LSM6DSL_ADDR, &reg_addr, 1, HAL_MAX_DELAY);
 8000628:	1dfa      	adds	r2, r7, #7
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	216b      	movs	r1, #107	@ 0x6b
 8000634:	4807      	ldr	r0, [pc, #28]	@ (8000654 <LSM6DSL_ReadRegisters+0x3c>)
 8000636:	f000 fd67 	bl	8001108 <HAL_I2C_Master_Transmit>

    // Receive data from the sensor
    HAL_I2C_Master_Receive(&hi2c1, LSM6DSL_ADDR, data, size, HAL_MAX_DELAY);
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	f04f 32ff 	mov.w	r2, #4294967295
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	216b      	movs	r1, #107	@ 0x6b
 8000646:	4803      	ldr	r0, [pc, #12]	@ (8000654 <LSM6DSL_ReadRegisters+0x3c>)
 8000648:	f000 fe76 	bl	8001338 <HAL_I2C_Master_Receive>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000078 	.word	0x20000078

08000658 <DataOver_UART>:

/**
  * @brief UART_Transmit Data
  */
void DataOver_UART(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz)
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b0a3      	sub	sp, #140	@ 0x8c
 800065c:	af06      	add	r7, sp, #24
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
	// Prepare data string
	char uart_buff[96];
	int buff_length;

	buff_length = snprintf(uart_buff, sizeof(uart_buff),
 8000676:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 800067a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800067e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000682:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000686:	f9b7 0088 	ldrsh.w	r0, [r7, #136]	@ 0x88
 800068a:	f9b7 408c 	ldrsh.w	r4, [r7, #140]	@ 0x8c
 800068e:	f107 050c 	add.w	r5, r7, #12
 8000692:	9404      	str	r4, [sp, #16]
 8000694:	9003      	str	r0, [sp, #12]
 8000696:	9102      	str	r1, [sp, #8]
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4633      	mov	r3, r6
 800069e:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <DataOver_UART+0x6c>)
 80006a0:	2160      	movs	r1, #96	@ 0x60
 80006a2:	4628      	mov	r0, r5
 80006a4:	f003 fbd6 	bl	8003e54 <sniprintf>
 80006a8:	66f8      	str	r0, [r7, #108]	@ 0x6c
									"Acce: x=%d y=%d z=%d | Gyro: x=%d y=%d z=%d \r\n",
									ax, ay, az, gx, gy, gz);

	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, buff_length, HAL_MAX_DELAY);
 80006aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 010c 	add.w	r1, r7, #12
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <DataOver_UART+0x70>)
 80006b8:	f002 ff52 	bl	8003560 <HAL_UART_Transmit>

}
 80006bc:	bf00      	nop
 80006be:	3774      	adds	r7, #116	@ 0x74
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	080047d4 	.word	0x080047d4
 80006c8:	200000cc 	.word	0x200000cc

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <Error_Handler+0x8>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_MspInit+0x44>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_MspInit+0x44>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <HAL_MspInit+0x44>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_MspInit+0x44>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070e:	2007      	movs	r0, #7
 8000710:	f000 fa88 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a26      	ldr	r2, [pc, #152]	@ (80007d8 <HAL_I2C_MspInit+0xb8>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d145      	bne.n	80007ce <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 8000760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fa7b 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000796:	2380      	movs	r3, #128	@ 0x80
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079a:	2312      	movs	r3, #18
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a6:	2304      	movs	r3, #4
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <HAL_I2C_MspInit+0xc0>)
 80007b2:	f000 fa6b 	bl	8000c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 80007bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_I2C_MspInit+0xbc>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	@ 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40005400 	.word	0x40005400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <HAL_UART_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d128      	bne.n	8000858 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <HAL_UART_MspInit+0x80>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <HAL_UART_MspInit+0x80>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_UART_MspInit+0x80>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_UART_MspInit+0x80>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_UART_MspInit+0x80>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_UART_MspInit+0x80>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000836:	230c      	movs	r3, #12
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000846:	2307      	movs	r3, #7
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 fa1a 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	40021000 	.word	0x40021000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <NMI_Handler+0x4>

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <MemManage_Handler+0x4>

08000880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <UsageFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 f8bb 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f003 fae8 	bl	8003ecc <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20010000 	.word	0x20010000
 8000928:	00000400 	.word	0x00000400
 800092c:	20000154 	.word	0x20000154
 8000930:	200002a8 	.word	0x200002a8

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 faa7 	bl	8003ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fc79 	bl	8000280 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000990:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800099c:	08004880 	.word	0x08004880
  ldr r2, =_sbss
 80009a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009a4:	200002a4 	.word	0x200002a4

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f931 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fe86 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f93b 	bl	8000c72 <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f000 f911 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	@ (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000158 	.word	0x20000158

08000a60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000158 	.word	0x20000158

08000a78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff ffee 	bl	8000a60 <HAL_GetTick>
 8000a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a90:	d005      	beq.n	8000a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_Delay+0x44>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9e:	bf00      	nop
 8000aa0:	f7ff ffde 	bl	8000a60 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f7      	bhi.n	8000aa0 <HAL_Delay+0x28>
  {
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	@ 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff47 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff5c 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffb0 	bl	8000be0 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e160      	b.n	8000f5e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8152 	beq.w	8000f58 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 0201 	and.w	r2, r3, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0203 	and.w	r2, r3, #3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80ac 	beq.w	8000f58 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b5e      	ldr	r3, [pc, #376]	@ (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a5d      	ldr	r2, [pc, #372]	@ (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e18:	4a59      	ldr	r2, [pc, #356]	@ (8000f80 <HAL_GPIO_Init+0x2f4>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e42:	d025      	beq.n	8000e90 <HAL_GPIO_Init+0x204>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4f      	ldr	r2, [pc, #316]	@ (8000f84 <HAL_GPIO_Init+0x2f8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d01f      	beq.n	8000e8c <HAL_GPIO_Init+0x200>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f88 <HAL_GPIO_Init+0x2fc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d019      	beq.n	8000e88 <HAL_GPIO_Init+0x1fc>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4d      	ldr	r2, [pc, #308]	@ (8000f8c <HAL_GPIO_Init+0x300>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d013      	beq.n	8000e84 <HAL_GPIO_Init+0x1f8>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <HAL_GPIO_Init+0x304>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d00d      	beq.n	8000e80 <HAL_GPIO_Init+0x1f4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4b      	ldr	r2, [pc, #300]	@ (8000f94 <HAL_GPIO_Init+0x308>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d007      	beq.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000f98 <HAL_GPIO_Init+0x30c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d101      	bne.n	8000e78 <HAL_GPIO_Init+0x1ec>
 8000e74:	2306      	movs	r3, #6
 8000e76:	e00c      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e78:	2307      	movs	r3, #7
 8000e7a:	e00a      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e008      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x206>
 8000e90:	2300      	movs	r3, #0
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea2:	4937      	ldr	r1, [pc, #220]	@ (8000f80 <HAL_GPIO_Init+0x2f4>)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed4:	4a31      	ldr	r2, [pc, #196]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eda:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000efe:	4a27      	ldr	r2, [pc, #156]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f04:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f28:	4a1c      	ldr	r2, [pc, #112]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <HAL_GPIO_Init+0x310>)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f47f ae97 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48001000 	.word	0x48001000
 8000f94:	48001400 	.word	0x48001400
 8000f98:	48001800 	.word	0x48001800
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e08d      	b.n	80010fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fb92 	bl	8000720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	@ 0x24
 8001000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d107      	bne.n	800104a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	e006      	b.n	8001058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d108      	bne.n	8001072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	e007      	b.n	8001082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d9      	ldr	r1, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	461a      	mov	r2, r3
 8001114:	460b      	mov	r3, r1
 8001116:	817b      	strh	r3, [r7, #10]
 8001118:	4613      	mov	r3, r2
 800111a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b20      	cmp	r3, #32
 8001126:	f040 80fd 	bne.w	8001324 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_I2C_Master_Transmit+0x30>
 8001134:	2302      	movs	r3, #2
 8001136:	e0f6      	b.n	8001326 <HAL_I2C_Master_Transmit+0x21e>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001140:	f7ff fc8e 	bl	8000a60 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2319      	movs	r3, #25
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fa0a 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0e1      	b.n	8001326 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2221      	movs	r2, #33	@ 0x21
 8001166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2210      	movs	r2, #16
 800116e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	893a      	ldrh	r2, [r7, #8]
 8001182:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800118e:	b29b      	uxth	r3, r3
 8001190:	2bff      	cmp	r3, #255	@ 0xff
 8001192:	d906      	bls.n	80011a2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	22ff      	movs	r2, #255	@ 0xff
 8001198:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800119a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e007      	b.n	80011b2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80011ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d024      	beq.n	8001204 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	8979      	ldrh	r1, [r7, #10]
 80011f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001330 <HAL_I2C_Master_Transmit+0x228>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 fc05 	bl	8001a0c <I2C_TransferConfig>
 8001202:	e066      	b.n	80012d2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001208:	b2da      	uxtb	r2, r3
 800120a:	8979      	ldrh	r1, [r7, #10]
 800120c:	4b48      	ldr	r3, [pc, #288]	@ (8001330 <HAL_I2C_Master_Transmit+0x228>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fbfa 	bl	8001a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001218:	e05b      	b.n	80012d2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f9fd 	bl	800161e <I2C_WaitOnTXISFlagUntilTimeout>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07b      	b.n	8001326 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001256:	3b01      	subs	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001262:	b29b      	uxth	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d034      	beq.n	80012d2 <HAL_I2C_Master_Transmit+0x1ca>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800126c:	2b00      	cmp	r3, #0
 800126e:	d130      	bne.n	80012d2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	2200      	movs	r2, #0
 8001278:	2180      	movs	r1, #128	@ 0x80
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f976 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e04d      	b.n	8001326 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800128e:	b29b      	uxth	r3, r3
 8001290:	2bff      	cmp	r3, #255	@ 0xff
 8001292:	d90e      	bls.n	80012b2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	22ff      	movs	r2, #255	@ 0xff
 8001298:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	8979      	ldrh	r1, [r7, #10]
 80012a2:	2300      	movs	r3, #0
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 fbae 	bl	8001a0c <I2C_TransferConfig>
 80012b0:	e00f      	b.n	80012d2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	8979      	ldrh	r1, [r7, #10]
 80012c4:	2300      	movs	r3, #0
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fb9d 	bl	8001a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d19e      	bne.n	800121a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	6a39      	ldr	r1, [r7, #32]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f9e3 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e01a      	b.n	8001326 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2220      	movs	r2, #32
 80012f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6859      	ldr	r1, [r3, #4]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_I2C_Master_Transmit+0x22c>)
 8001304:	400b      	ands	r3, r1
 8001306:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2220      	movs	r2, #32
 800130c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	e000      	b.n	8001326 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001324:	2302      	movs	r3, #2
  }
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	80002000 	.word	0x80002000
 8001334:	fe00e800 	.word	0xfe00e800

08001338 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	460b      	mov	r3, r1
 8001346:	817b      	strh	r3, [r7, #10]
 8001348:	4613      	mov	r3, r2
 800134a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b20      	cmp	r3, #32
 8001356:	f040 80db 	bne.w	8001510 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_I2C_Master_Receive+0x30>
 8001364:	2302      	movs	r3, #2
 8001366:	e0d4      	b.n	8001512 <HAL_I2C_Master_Receive+0x1da>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001370:	f7ff fb76 	bl	8000a60 <HAL_GetTick>
 8001374:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2319      	movs	r3, #25
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f8f2 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0bf      	b.n	8001512 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2222      	movs	r2, #34	@ 0x22
 8001396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2210      	movs	r2, #16
 800139e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	893a      	ldrh	r2, [r7, #8]
 80013b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2bff      	cmp	r3, #255	@ 0xff
 80013c2:	d90e      	bls.n	80013e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2201      	movs	r2, #1
 80013c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	8979      	ldrh	r1, [r7, #10]
 80013d2:	4b52      	ldr	r3, [pc, #328]	@ (800151c <HAL_I2C_Master_Receive+0x1e4>)
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fb16 	bl	8001a0c <I2C_TransferConfig>
 80013e0:	e06d      	b.n	80014be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	8979      	ldrh	r1, [r7, #10]
 80013f4:	4b49      	ldr	r3, [pc, #292]	@ (800151c <HAL_I2C_Master_Receive+0x1e4>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 fb05 	bl	8001a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001402:	e05c      	b.n	80014be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	6a39      	ldr	r1, [r7, #32]
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f993 	bl	8001734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e07c      	b.n	8001512 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001434:	3b01      	subs	r3, #1
 8001436:	b29a      	uxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800144e:	b29b      	uxth	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d034      	beq.n	80014be <HAL_I2C_Master_Receive+0x186>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001458:	2b00      	cmp	r3, #0
 800145a:	d130      	bne.n	80014be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	2200      	movs	r2, #0
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f880 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e04d      	b.n	8001512 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	2bff      	cmp	r3, #255	@ 0xff
 800147e:	d90e      	bls.n	800149e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	22ff      	movs	r2, #255	@ 0xff
 8001484:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148a:	b2da      	uxtb	r2, r3
 800148c:	8979      	ldrh	r1, [r7, #10]
 800148e:	2300      	movs	r3, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 fab8 	bl	8001a0c <I2C_TransferConfig>
 800149c:	e00f      	b.n	80014be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	8979      	ldrh	r1, [r7, #10]
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 faa7 	bl	8001a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d19d      	bne.n	8001404 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	6a39      	ldr	r1, [r7, #32]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f8ed 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e01a      	b.n	8001512 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2220      	movs	r2, #32
 80014e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <HAL_I2C_Master_Receive+0x1e8>)
 80014f0:	400b      	ands	r3, r1
 80014f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001510:	2302      	movs	r3, #2
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	80002400 	.word	0x80002400
 8001520:	fe00e800 	.word	0xfe00e800

08001524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d103      	bne.n	8001542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d007      	beq.n	8001560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	619a      	str	r2, [r3, #24]
  }
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157c:	e03b      	b.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	6839      	ldr	r1, [r7, #0]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f962 	bl	800184c <I2C_IsErrorOccurred>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e041      	b.n	8001616 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d02d      	beq.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159a:	f7ff fa61 	bl	8000a60 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d302      	bcc.n	80015b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d122      	bne.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	4013      	ands	r3, r2
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	429a      	cmp	r2, r3
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d113      	bne.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f043 0220 	orr.w	r2, r3, #32
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4013      	ands	r3, r2
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	bf0c      	ite	eq
 8001606:	2301      	moveq	r3, #1
 8001608:	2300      	movne	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	429a      	cmp	r2, r3
 8001612:	d0b4      	beq.n	800157e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800162a:	e033      	b.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f90b 	bl	800184c <I2C_IsErrorOccurred>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e031      	b.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001646:	d025      	beq.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001648:	f7ff fa0a 	bl	8000a60 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	429a      	cmp	r2, r3
 8001656:	d302      	bcc.n	800165e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11a      	bne.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d013      	beq.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	f043 0220 	orr.w	r2, r3, #32
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e007      	b.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d1c4      	bne.n	800162c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b8:	e02f      	b.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f8c4 	bl	800184c <I2C_IsErrorOccurred>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e02d      	b.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff f9c7 	bl	8000a60 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d302      	bcc.n	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11a      	bne.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	d013      	beq.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f043 0220 	orr.w	r2, r3, #32
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e007      	b.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d1c8      	bne.n	80016ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001744:	e071      	b.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f87e 	bl	800184c <I2C_IsErrorOccurred>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d13b      	bne.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d138      	bne.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b04      	cmp	r3, #4
 800177a:	d105      	bne.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b10      	cmp	r3, #16
 8001794:	d121      	bne.n	80017da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2204      	movs	r2, #4
 80017a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2220      	movs	r2, #32
 80017aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80017b8:	400b      	ands	r3, r1
 80017ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	75fb      	strb	r3, [r7, #23]
 80017d8:	e002      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80017e0:	f7ff f93e 	bl	8000a60 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d302      	bcc.n	80017f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d116      	bne.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00f      	beq.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d002      	beq.n	800183e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d083      	beq.n	8001746 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800183e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	fe00e800 	.word	0xfe00e800

0800184c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d068      	beq.n	800194a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2210      	movs	r2, #16
 800187e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001880:	e049      	b.n	8001916 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d045      	beq.n	8001916 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7ff f8e9 	bl	8000a60 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_IsErrorOccurred+0x54>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d13a      	bne.n	8001916 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018c2:	d121      	bne.n	8001908 <I2C_IsErrorOccurred+0xbc>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018ca:	d01d      	beq.n	8001908 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018cc:	7cfb      	ldrb	r3, [r7, #19]
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d01a      	beq.n	8001908 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018e2:	f7ff f8bd 	bl	8000a60 <HAL_GetTick>
 80018e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e8:	e00e      	b.n	8001908 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ea:	f7ff f8b9 	bl	8000a60 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b19      	cmp	r3, #25
 80018f6:	d907      	bls.n	8001908 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f043 0320 	orr.w	r3, r3, #32
 80018fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001906:	e006      	b.n	8001916 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b20      	cmp	r3, #32
 8001914:	d1e9      	bne.n	80018ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b20      	cmp	r3, #32
 8001922:	d003      	beq.n	800192c <I2C_IsErrorOccurred+0xe0>
 8001924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0aa      	beq.n	8001882 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800192c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2220      	movs	r2, #32
 800193a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800196c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800198e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80019b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fdaf 	bl	8001524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <I2C_IsErrorOccurred+0x1bc>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80019fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	fe00e800 	.word	0xfe00e800

08001a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	817b      	strh	r3, [r7, #10]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a1e:	897b      	ldrh	r3, [r7, #10]
 8001a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	0d5b      	lsrs	r3, r3, #21
 8001a46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <I2C_TransferConfig+0x60>)
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	ea02 0103 	and.w	r1, r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	03ff63ff 	.word	0x03ff63ff

08001a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d138      	bne.n	8001af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e032      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	@ 0x24
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d139      	bne.n	8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e033      	b.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2224      	movs	r2, #36	@ 0x24
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f001 b83a 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 816f 	beq.w	8001eba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bdc:	4bb5      	ldr	r3, [pc, #724]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4bb2      	ldr	r3, [pc, #712]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d15c      	bne.n	8001cae <HAL_RCC_OscConfig+0x10e>
 8001bf4:	4baf      	ldr	r3, [pc, #700]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c00:	d155      	bne.n	8001cae <HAL_RCC_OscConfig+0x10e>
 8001c02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c06:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x94>
 8001c2e:	4ba1      	ldr	r3, [pc, #644]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	e015      	b.n	8001c60 <HAL_RCC_OscConfig+0xc0>
 8001c34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c38:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001c48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c50:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c5c:	4b95      	ldr	r3, [pc, #596]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c64:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001c68:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001c6c:	fa92 f2a2 	rbit	r2, r2
 8001c70:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001c74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8111 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x318>
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 8108 	bne.w	8001eb8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f000 bfc6 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x12e>
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7b      	ldr	r2, [pc, #492]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e036      	b.n	8001d3c <HAL_RCC_OscConfig+0x19c>
 8001cce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x158>
 8001cde:	4b75      	ldr	r3, [pc, #468]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a74      	ldr	r2, [pc, #464]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b72      	ldr	r3, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a71      	ldr	r2, [pc, #452]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e021      	b.n	8001d3c <HAL_RCC_OscConfig+0x19c>
 8001cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x184>
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a69      	ldr	r2, [pc, #420]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a66      	ldr	r2, [pc, #408]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0x19c>
 8001d24:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a62      	ldr	r2, [pc, #392]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b60      	ldr	r3, [pc, #384]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d059      	beq.n	8001e00 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fe88 	bl	8000a60 <HAL_GetTick>
 8001d50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d56:	f7fe fe83 	bl	8000a60 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d902      	bls.n	8001d6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f000 bf67 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
 8001d6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d70:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001d80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1fe>
 8001d98:	4b46      	ldr	r3, [pc, #280]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0x22a>
 8001d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001dba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dce:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001dd2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001dde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ab      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1b6>
 8001dfe:	e05c      	b.n	8001eba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe fe2e 	bl	8000a60 <HAL_GetTick>
 8001e04:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7fe fe29 	bl	8000a60 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d902      	bls.n	8001e20 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f000 bf0d 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
 8001e20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e24:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001e34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d102      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2b2>
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x2de>
 8001e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e56:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001e66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e6a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_RCC_OscConfig+0x314>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e82:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001e86:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001e92:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ab      	bne.n	8001e0a <HAL_RCC_OscConfig+0x26a>
 8001eb2:	e002      	b.n	8001eba <HAL_RCC_OscConfig+0x31a>
 8001eb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 817f 	beq.w	80021ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ed0:	4ba7      	ldr	r3, [pc, #668]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001edc:	4ba4      	ldr	r3, [pc, #656]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d173      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x430>
 8001ee8:	4ba1      	ldr	r3, [pc, #644]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ef4:	d16c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x430>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001f08:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0x386>
 8001f20:	4b93      	ldr	r3, [pc, #588]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	e013      	b.n	8001f4e <HAL_RCC_OscConfig+0x3ae>
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001f54:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001f60:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3f6>
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d002      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f000 be52 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	21f8      	movs	r1, #248	@ 0xf8
 8001fac:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001fb4:	fa91 f1a1 	rbit	r1, r1
 8001fb8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001fbc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001fc0:	fab1 f181 	clz	r1, r1
 8001fc4:	b2c9      	uxtb	r1, r1
 8001fc6:	408b      	lsls	r3, r1
 8001fc8:	4969      	ldr	r1, [pc, #420]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e0fe      	b.n	80021ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8088 	beq.w	80020f2 <HAL_RCC_OscConfig+0x552>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001ff4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002002:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	461a      	mov	r2, r3
 800200a:	2301      	movs	r3, #1
 800200c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe fd27 	bl	8000a60 <HAL_GetTick>
 8002012:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	e00a      	b.n	800202e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fd22 	bl	8000a60 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d902      	bls.n	800202e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	f000 be06 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002040:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0x4be>
 8002058:	4b45      	ldr	r3, [pc, #276]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0x4e6>
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002076:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	2202      	movs	r2, #2
 8002088:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800208c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002098:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0af      	beq.n	8002018 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	21f8      	movs	r1, #248	@ 0xf8
 80020ce:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80020d6:	fa91 f1a1 	rbit	r1, r1
 80020da:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80020de:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80020e2:	fab1 f181 	clz	r1, r1
 80020e6:	b2c9      	uxtb	r1, r1
 80020e8:	408b      	lsls	r3, r1
 80020ea:	4921      	ldr	r1, [pc, #132]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	e06d      	b.n	80021ce <HAL_RCC_OscConfig+0x62e>
 80020f2:	2301      	movs	r3, #1
 80020f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002104:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002112:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	461a      	mov	r2, r3
 800211a:	2300      	movs	r3, #0
 800211c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fc9f 	bl	8000a60 <HAL_GetTick>
 8002122:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002128:	f7fe fc9a 	bl	8000a60 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d902      	bls.n	800213e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	f000 bd7e 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002150:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCC_OscConfig+0x5d4>
 8002168:	4b01      	ldr	r3, [pc, #4]	@ (8002170 <HAL_RCC_OscConfig+0x5d0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e016      	b.n	800219c <HAL_RCC_OscConfig+0x5fc>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	2302      	movs	r3, #2
 8002176:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800218c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002198:	4bbf      	ldr	r3, [pc, #764]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	2202      	movs	r2, #2
 800219e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80021a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80021a6:	fa92 f2a2 	rbit	r2, r2
 80021aa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80021ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f042 0220 	orr.w	r2, r2, #32
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 021f 	and.w	r2, r2, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ac      	bne.n	8002128 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8113 	beq.w	800240a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d07c      	beq.n	80022ee <HAL_RCC_OscConfig+0x74e>
 80021f4:	2301      	movs	r3, #1
 80021f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002206:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4ba2      	ldr	r3, [pc, #648]	@ (800249c <HAL_RCC_OscConfig+0x8fc>)
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	461a      	mov	r2, r3
 800221a:	2301      	movs	r3, #1
 800221c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7fe fc1f 	bl	8000a60 <HAL_GetTick>
 8002222:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe fc1a 	bl	8000a60 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d902      	bls.n	800223e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	f000 bcfe 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002250:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800225e:	2202      	movs	r2, #2
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002298:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800229c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 80022a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022aa:	2102      	movs	r1, #2
 80022ac:	6019      	str	r1, [r3, #0]
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f1a3 	rbit	r1, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022c4:	6019      	str	r1, [r3, #0]
  return result;
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d09d      	beq.n	8002228 <HAL_RCC_OscConfig+0x688>
 80022ec:	e08d      	b.n	800240a <HAL_RCC_OscConfig+0x86a>
 80022ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002310:	601a      	str	r2, [r3, #0]
  return result;
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800231a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	4b5d      	ldr	r3, [pc, #372]	@ (800249c <HAL_RCC_OscConfig+0x8fc>)
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	461a      	mov	r2, r3
 800232c:	2300      	movs	r3, #0
 800232e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe fb96 	bl	8000a60 <HAL_GetTick>
 8002334:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233a:	f7fe fb91 	bl	8000a60 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d902      	bls.n	8002350 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	f000 bc75 	b.w	8002c3a <HAL_RCC_OscConfig+0x109a>
 8002350:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002354:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002358:	2202      	movs	r2, #2
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002378:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800237c:	2202      	movs	r2, #2
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002384:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002392:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80023a0:	2202      	movs	r2, #2
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80023ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 80023be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023c8:	2102      	movs	r1, #2
 80023ca:	6019      	str	r1, [r3, #0]
 80023cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f1a3 	rbit	r1, r3
 80023da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023de:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023e2:	6019      	str	r1, [r3, #0]
  return result;
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d197      	bne.n	800233a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 81a5 	beq.w	800276a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a18      	ldr	r2, [pc, #96]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <HAL_RCC_OscConfig+0x8f8>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <HAL_RCC_OscConfig+0x900>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d121      	bne.n	80024b0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <HAL_RCC_OscConfig+0x900>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0b      	ldr	r2, [pc, #44]	@ (80024a0 <HAL_RCC_OscConfig+0x900>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002476:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7fe faf2 	bl	8000a60 <HAL_GetTick>
 800247c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e010      	b.n	80024a4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fe faed 	bl	8000a60 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d908      	bls.n	80024a4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e3d1      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	10908120 	.word	0x10908120
 80024a0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b8d      	ldr	r3, [pc, #564]	@ (80026dc <HAL_RCC_OscConfig+0xb3c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0e8      	beq.n	8002482 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x92e>
 80024c0:	4b87      	ldr	r3, [pc, #540]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a86      	ldr	r2, [pc, #536]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e035      	b.n	800253a <HAL_RCC_OscConfig+0x99a>
 80024ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x958>
 80024de:	4b80      	ldr	r3, [pc, #512]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a7f      	ldr	r2, [pc, #508]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b7d      	ldr	r3, [pc, #500]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a7c      	ldr	r2, [pc, #496]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e020      	b.n	800253a <HAL_RCC_OscConfig+0x99a>
 80024f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x982>
 8002508:	4b75      	ldr	r3, [pc, #468]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a74      	ldr	r2, [pc, #464]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	4b72      	ldr	r3, [pc, #456]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a71      	ldr	r2, [pc, #452]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x99a>
 8002522:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	4b6c      	ldr	r3, [pc, #432]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a6b      	ldr	r2, [pc, #428]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8081 	beq.w	800264e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe fa88 	bl	8000a60 <HAL_GetTick>
 8002550:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fa83 	bl	8000a60 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e365      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
 800256e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002572:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025b4:	601a      	str	r2, [r3, #0]
  return result;
 80025b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d102      	bne.n	80025da <HAL_RCC_OscConfig+0xa3a>
 80025d4:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	e013      	b.n	8002602 <HAL_RCC_OscConfig+0xa62>
 80025da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002606:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800260a:	2102      	movs	r1, #2
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002612:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	fa92 f1a2 	rbit	r1, r2
 800261c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002620:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002624:	6011      	str	r1, [r2, #0]
  return result;
 8002626:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800262a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f002 021f 	and.w	r2, r2, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d084      	beq.n	8002556 <HAL_RCC_OscConfig+0x9b6>
 800264c:	e083      	b.n	8002756 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fe fa07 	bl	8000a60 <HAL_GetTick>
 8002652:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe fa02 	bl	8000a60 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e2e4      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
 8002670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002674:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002678:	2202      	movs	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002698:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026b6:	601a      	str	r2, [r3, #0]
  return result;
 80026b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0xb44>
 80026d6:	4b02      	ldr	r3, [pc, #8]	@ (80026e0 <HAL_RCC_OscConfig+0xb40>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	e017      	b.n	800270c <HAL_RCC_OscConfig+0xb6c>
 80026dc:	40007000 	.word	0x40007000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026ec:	2202      	movs	r2, #2
 80026ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002702:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4bb3      	ldr	r3, [pc, #716]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002710:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002714:	2102      	movs	r1, #2
 8002716:	6011      	str	r1, [r2, #0]
 8002718:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800271c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	fa92 f1a2 	rbit	r1, r2
 8002726:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800272a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800272e:	6011      	str	r1, [r2, #0]
  return result;
 8002730:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002734:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	fab2 f282 	clz	r2, r2
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f002 021f 	and.w	r2, r2, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f202 	lsl.w	r2, r1, r2
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d180      	bne.n	8002658 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002756:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b9e      	ldr	r3, [pc, #632]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a9d      	ldr	r2, [pc, #628]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 825e 	beq.w	8002c38 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	4b96      	ldr	r3, [pc, #600]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	f000 821f 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b02      	cmp	r3, #2
 8002798:	f040 8170 	bne.w	8002a7c <HAL_RCC_OscConfig+0xedc>
 800279c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027c0:	601a      	str	r2, [r3, #0]
  return result;
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027ca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	461a      	mov	r2, r3
 80027de:	2300      	movs	r3, #0
 80027e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe f93d 	bl	8000a60 <HAL_GetTick>
 80027e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	e009      	b.n	8002800 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe f938 	bl	8000a60 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e21c      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002808:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002820:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002824:	601a      	str	r2, [r3, #0]
  return result;
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800282e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d102      	bne.n	800284a <HAL_RCC_OscConfig+0xcaa>
 8002844:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e027      	b.n	800289a <HAL_RCC_OscConfig+0xcfa>
 800284a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002852:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002878:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002882:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002890:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800289e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028a6:	6011      	str	r1, [r2, #0]
 80028a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	fa92 f1a2 	rbit	r1, r2
 80028b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028ba:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80028be:	6011      	str	r1, [r2, #0]
  return result;
 80028c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028c4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d182      	bne.n	80027ec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e6:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	f023 020f 	bic.w	r2, r3, #15
 80028ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	4937      	ldr	r1, [pc, #220]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002900:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a19      	ldr	r1, [r3, #32]
 8002914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002918:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	430b      	orrs	r3, r1
 8002922:	492d      	ldr	r1, [pc, #180]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002930:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002948:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800294c:	601a      	str	r2, [r3, #0]
  return result;
 800294e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002952:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002956:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002962:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	461a      	mov	r2, r3
 800296a:	2301      	movs	r3, #1
 800296c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7fe f877 	bl	8000a60 <HAL_GetTick>
 8002972:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002976:	e009      	b.n	800298c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe f872 	bl	8000a60 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e156      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
 800298c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002990:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002994:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80029b0:	601a      	str	r2, [r3, #0]
  return result;
 80029b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80029ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0xe3c>
 80029d0:	4b01      	ldr	r3, [pc, #4]	@ (80029d8 <HAL_RCC_OscConfig+0xe38>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	e02a      	b.n	8002a2c <HAL_RCC_OscConfig+0xe8c>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a06:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a14:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a22:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4b86      	ldr	r3, [pc, #536]	@ (8002c44 <HAL_RCC_OscConfig+0x10a4>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a30:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a38:	6011      	str	r1, [r2, #0]
 8002a3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a3e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	fa92 f1a2 	rbit	r1, r2
 8002a48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a4c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002a50:	6011      	str	r1, [r2, #0]
  return result;
 8002a52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a56:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f002 021f 	and.w	r2, r2, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f43f af7f 	beq.w	8002978 <HAL_RCC_OscConfig+0xdd8>
 8002a7a:	e0dd      	b.n	8002c38 <HAL_RCC_OscConfig+0x1098>
 8002a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a80:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002aa0:	601a      	str	r2, [r3, #0]
  return result;
 8002aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002aaa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ab6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fd ffcd 	bl	8000a60 <HAL_GetTick>
 8002ac6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aca:	e009      	b.n	8002ae0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fd ffc8 	bl	8000a60 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0ac      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
 8002ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b00:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b04:	601a      	str	r2, [r3, #0]
  return result;
 8002b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0xf8a>
 8002b24:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <HAL_RCC_OscConfig+0x10a4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e027      	b.n	8002b7a <HAL_RCC_OscConfig+0xfda>
 8002b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b2e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b62:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b70:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <HAL_RCC_OscConfig+0x10a4>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b7e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b82:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b86:	6011      	str	r1, [r2, #0]
 8002b88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b8c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	fa92 f1a2 	rbit	r1, r2
 8002b96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b9a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ba0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ba4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d182      	bne.n	8002acc <HAL_RCC_OscConfig+0xf2c>
 8002bc6:	e037      	b.n	8002c38 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e02e      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <HAL_RCC_OscConfig+0x10a4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002be4:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_RCC_OscConfig+0x10a4>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002bf0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d117      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002c08:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b09e      	sub	sp, #120	@ 0x78
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e162      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b90      	ldr	r3, [pc, #576]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0207 	bic.w	r2, r3, #7
 8002c76:	498b      	ldr	r1, [pc, #556]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b89      	ldr	r3, [pc, #548]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e14a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b82      	ldr	r3, [pc, #520]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	497f      	ldr	r1, [pc, #508]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80dc 	beq.w	8002e74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d13c      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xf6>
 8002cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <HAL_RCC_ClockConfig+0xa6>
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	e00f      	b.n	8002d0e <HAL_RCC_ClockConfig+0xc6>
 8002cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d16:	fa92 f2a2 	rbit	r2, r2
 8002d1a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0220 	orr.w	r2, r2, #32
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d17b      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0f3      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d13c      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x178>
 8002d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x128>
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	e00f      	b.n	8002d90 <HAL_RCC_ClockConfig+0x148>
 8002d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d13a      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b2      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1a0>
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e00d      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1bc>
 8002de8:	2302      	movs	r3, #2
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df4:	2302      	movs	r3, #2
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2202      	movs	r2, #2
 8002e06:	61ba      	str	r2, [r7, #24]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	fa92 f2a2 	rbit	r2, r2
 8002e0e:	617a      	str	r2, [r7, #20]
  return result;
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e079      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	491a      	ldr	r1, [pc, #104]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7fd fe0c 	bl	8000a60 <HAL_GetTick>
 8002e48:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fd fe08 	bl	8000a60 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e061      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d214      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4906      	ldr	r1, [pc, #24]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e040      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	491a      	ldr	r1, [pc, #104]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eea:	f000 f829 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	22f0      	movs	r2, #240	@ 0xf0
 8002efa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	60fa      	str	r2, [r7, #12]
  return result;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	40d3      	lsrs	r3, r2
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x2ec>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	fa21 f303 	lsr.w	r3, r1, r3
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HAL_RCC_ClockConfig+0x2f0>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <HAL_RCC_ClockConfig+0x2f4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fd5a 	bl	80009d8 <HAL_InitTick>
  
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3778      	adds	r7, #120	@ 0x78
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08004804 	.word	0x08004804
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	20000004 	.word	0x20000004

08002f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x30>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6e:	e029      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	e029      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0c9b      	lsrs	r3, r3, #18
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a18      	ldr	r2, [pc, #96]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e007      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fae:	4a0b      	ldr	r2, [pc, #44]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fc6:	613b      	str	r3, [r7, #16]
      break;
 8002fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fca:	693b      	ldr	r3, [r7, #16]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	007a1200 	.word	0x007a1200
 8002fe0:	0800481c 	.word	0x0800481c
 8002fe4:	0800482c 	.word	0x0800482c

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003006:	f7ff ffef 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800300a:	4601      	mov	r1, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003014:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003018:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	fa92 f2a2 	rbit	r2, r2
 8003020:	603a      	str	r2, [r7, #0]
  return result;
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	40d3      	lsrs	r3, r2
 800302c:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x40>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08004814 	.word	0x08004814

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800304a:	f7ff ffcd 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800304e:	4601      	mov	r1, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003058:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800305c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	fa92 f2a2 	rbit	r2, r2
 8003064:	603a      	str	r2, [r7, #0]
  return result;
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	40d3      	lsrs	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08004814 	.word	0x08004814

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b092      	sub	sp, #72	@ 0x48
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80d4 	beq.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ac:	4b4e      	ldr	r3, [pc, #312]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b4b      	ldr	r3, [pc, #300]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4a4a      	ldr	r2, [pc, #296]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	61d3      	str	r3, [r2, #28]
 80030c4:	4b48      	ldr	r3, [pc, #288]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b45      	ldr	r3, [pc, #276]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a41      	ldr	r2, [pc, #260]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fd fcb7 	bl	8000a60 <HAL_GetTick>
 80030f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fd fcb3 	bl	8000a60 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b64      	cmp	r3, #100	@ 0x64
 8003102:	d901      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1d6      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003114:	4b34      	ldr	r3, [pc, #208]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800311e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8084 	beq.w	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003130:	429a      	cmp	r2, r3
 8003132:	d07c      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003134:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800313e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003142:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	2301      	movs	r3, #1
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	2300      	movs	r3, #0
 8003184:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003186:	4a18      	ldr	r2, [pc, #96]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800318c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04b      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fd fc63 	bl	8000a60 <HAL_GetTick>
 800319a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fd fc5f 	bl	8000a60 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e180      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031b4:	2302      	movs	r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	61fb      	str	r3, [r7, #28]
  return result;
 80031cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d108      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031e2:	4b01      	ldr	r3, [pc, #4]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	e00d      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	10908100 	.word	0x10908100
 80031f4:	2302      	movs	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	4b9a      	ldr	r3, [pc, #616]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	2202      	movs	r2, #2
 8003206:	613a      	str	r2, [r7, #16]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	fa92 f2a2 	rbit	r2, r2
 800320e:	60fa      	str	r2, [r7, #12]
  return result;
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0b7      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800322e:	4b8f      	ldr	r3, [pc, #572]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	498c      	ldr	r1, [pc, #560]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003240:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003248:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4a87      	ldr	r2, [pc, #540]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003260:	4b82      	ldr	r3, [pc, #520]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f023 0203 	bic.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	497f      	ldr	r1, [pc, #508]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800327e:	4b7b      	ldr	r3, [pc, #492]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4978      	ldr	r1, [pc, #480]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800329c:	4b73      	ldr	r3, [pc, #460]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4970      	ldr	r1, [pc, #448]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ba:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f023 0210 	bic.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4969      	ldr	r1, [pc, #420]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032d8:	4b64      	ldr	r3, [pc, #400]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	4961      	ldr	r1, [pc, #388]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f023 0220 	bic.w	r2, r3, #32
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	495a      	ldr	r1, [pc, #360]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003314:	4b55      	ldr	r3, [pc, #340]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	4952      	ldr	r1, [pc, #328]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003332:	4b4e      	ldr	r3, [pc, #312]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	494b      	ldr	r1, [pc, #300]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003350:	4b46      	ldr	r3, [pc, #280]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4943      	ldr	r1, [pc, #268]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800336e:	4b3f      	ldr	r3, [pc, #252]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	493c      	ldr	r1, [pc, #240]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800338c:	4b37      	ldr	r3, [pc, #220]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	4934      	ldr	r1, [pc, #208]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033aa:	4b30      	ldr	r3, [pc, #192]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	492d      	ldr	r1, [pc, #180]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033c8:	4b28      	ldr	r3, [pc, #160]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d4:	4925      	ldr	r1, [pc, #148]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033e6:	4b21      	ldr	r3, [pc, #132]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	491e      	ldr	r1, [pc, #120]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	4916      	ldr	r1, [pc, #88]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	490f      	ldr	r1, [pc, #60]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003430:	4313      	orrs	r3, r2
 8003432:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003440:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	4907      	ldr	r1, [pc, #28]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800345e:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	e002      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	4913      	ldr	r1, [pc, #76]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003474:	4313      	orrs	r3, r2
 8003476:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003490:	490b      	ldr	r1, [pc, #44]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003492:	4313      	orrs	r3, r2
 8003494:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3748      	adds	r7, #72	@ 0x48
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e040      	b.n	8003558 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd f97c 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	@ 0x24
 80034f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa86 	bl	8003a1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8af 	bl	8003674 <UART_SetConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e01b      	b.n	8003558 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800352e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800353e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb05 	bl	8003b60 <UART_CheckIdleState>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003574:	2b20      	cmp	r3, #32
 8003576:	d177      	bne.n	8003668 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Transmit+0x24>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e070      	b.n	800366a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2221      	movs	r2, #33	@ 0x21
 8003594:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003596:	f7fd fa63 	bl	8000a60 <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b4:	d108      	bne.n	80035c8 <HAL_UART_Transmit+0x68>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e003      	b.n	80035d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d0:	e02f      	b.n	8003632 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	@ 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fb67 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e03b      	b.n	800366a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003604:	b292      	uxth	r2, r2
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	3302      	adds	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	e007      	b.n	8003620 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1c9      	bne.n	80035d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	@ 0x40
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fb31 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e005      	b.n	800366a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b92      	ldr	r3, [pc, #584]	@ (80038e8 <UART_SetConfig+0x274>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a80      	ldr	r2, [pc, #512]	@ (80038ec <UART_SetConfig+0x278>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d120      	bne.n	8003732 <UART_SetConfig+0xbe>
 80036f0:	4b7f      	ldr	r3, [pc, #508]	@ (80038f0 <UART_SetConfig+0x27c>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d817      	bhi.n	800372c <UART_SetConfig+0xb8>
 80036fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <UART_SetConfig+0x90>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	08003721 	.word	0x08003721
 800370c:	08003727 	.word	0x08003727
 8003710:	0800371b 	.word	0x0800371b
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e0b5      	b.n	8003886 <UART_SetConfig+0x212>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e0b2      	b.n	8003886 <UART_SetConfig+0x212>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e0af      	b.n	8003886 <UART_SetConfig+0x212>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e0ac      	b.n	8003886 <UART_SetConfig+0x212>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e0a9      	b.n	8003886 <UART_SetConfig+0x212>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6f      	ldr	r2, [pc, #444]	@ (80038f4 <UART_SetConfig+0x280>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d124      	bne.n	8003786 <UART_SetConfig+0x112>
 800373c:	4b6c      	ldr	r3, [pc, #432]	@ (80038f0 <UART_SetConfig+0x27c>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003744:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003748:	d011      	beq.n	800376e <UART_SetConfig+0xfa>
 800374a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800374e:	d817      	bhi.n	8003780 <UART_SetConfig+0x10c>
 8003750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003754:	d011      	beq.n	800377a <UART_SetConfig+0x106>
 8003756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800375a:	d811      	bhi.n	8003780 <UART_SetConfig+0x10c>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <UART_SetConfig+0xf4>
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	d006      	beq.n	8003774 <UART_SetConfig+0x100>
 8003766:	e00b      	b.n	8003780 <UART_SetConfig+0x10c>
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e08b      	b.n	8003886 <UART_SetConfig+0x212>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e088      	b.n	8003886 <UART_SetConfig+0x212>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e085      	b.n	8003886 <UART_SetConfig+0x212>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e082      	b.n	8003886 <UART_SetConfig+0x212>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e07f      	b.n	8003886 <UART_SetConfig+0x212>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a5b      	ldr	r2, [pc, #364]	@ (80038f8 <UART_SetConfig+0x284>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d124      	bne.n	80037da <UART_SetConfig+0x166>
 8003790:	4b57      	ldr	r3, [pc, #348]	@ (80038f0 <UART_SetConfig+0x27c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003798:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800379c:	d011      	beq.n	80037c2 <UART_SetConfig+0x14e>
 800379e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037a2:	d817      	bhi.n	80037d4 <UART_SetConfig+0x160>
 80037a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037a8:	d011      	beq.n	80037ce <UART_SetConfig+0x15a>
 80037aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037ae:	d811      	bhi.n	80037d4 <UART_SetConfig+0x160>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <UART_SetConfig+0x148>
 80037b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037b8:	d006      	beq.n	80037c8 <UART_SetConfig+0x154>
 80037ba:	e00b      	b.n	80037d4 <UART_SetConfig+0x160>
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e061      	b.n	8003886 <UART_SetConfig+0x212>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e05e      	b.n	8003886 <UART_SetConfig+0x212>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e05b      	b.n	8003886 <UART_SetConfig+0x212>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e058      	b.n	8003886 <UART_SetConfig+0x212>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e055      	b.n	8003886 <UART_SetConfig+0x212>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a47      	ldr	r2, [pc, #284]	@ (80038fc <UART_SetConfig+0x288>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d124      	bne.n	800382e <UART_SetConfig+0x1ba>
 80037e4:	4b42      	ldr	r3, [pc, #264]	@ (80038f0 <UART_SetConfig+0x27c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80037ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037f0:	d011      	beq.n	8003816 <UART_SetConfig+0x1a2>
 80037f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037f6:	d817      	bhi.n	8003828 <UART_SetConfig+0x1b4>
 80037f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037fc:	d011      	beq.n	8003822 <UART_SetConfig+0x1ae>
 80037fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003802:	d811      	bhi.n	8003828 <UART_SetConfig+0x1b4>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <UART_SetConfig+0x19c>
 8003808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380c:	d006      	beq.n	800381c <UART_SetConfig+0x1a8>
 800380e:	e00b      	b.n	8003828 <UART_SetConfig+0x1b4>
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e037      	b.n	8003886 <UART_SetConfig+0x212>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e034      	b.n	8003886 <UART_SetConfig+0x212>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e031      	b.n	8003886 <UART_SetConfig+0x212>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e02e      	b.n	8003886 <UART_SetConfig+0x212>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e02b      	b.n	8003886 <UART_SetConfig+0x212>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a33      	ldr	r2, [pc, #204]	@ (8003900 <UART_SetConfig+0x28c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d124      	bne.n	8003882 <UART_SetConfig+0x20e>
 8003838:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <UART_SetConfig+0x27c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003840:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003844:	d011      	beq.n	800386a <UART_SetConfig+0x1f6>
 8003846:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800384a:	d817      	bhi.n	800387c <UART_SetConfig+0x208>
 800384c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003850:	d011      	beq.n	8003876 <UART_SetConfig+0x202>
 8003852:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003856:	d811      	bhi.n	800387c <UART_SetConfig+0x208>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <UART_SetConfig+0x1f0>
 800385c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003860:	d006      	beq.n	8003870 <UART_SetConfig+0x1fc>
 8003862:	e00b      	b.n	800387c <UART_SetConfig+0x208>
 8003864:	2300      	movs	r3, #0
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x212>
 800386a:	2302      	movs	r3, #2
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e00a      	b.n	8003886 <UART_SetConfig+0x212>
 8003870:	2304      	movs	r3, #4
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e007      	b.n	8003886 <UART_SetConfig+0x212>
 8003876:	2308      	movs	r3, #8
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e004      	b.n	8003886 <UART_SetConfig+0x212>
 800387c:	2310      	movs	r3, #16
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e001      	b.n	8003886 <UART_SetConfig+0x212>
 8003882:	2310      	movs	r3, #16
 8003884:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800388e:	d16b      	bne.n	8003968 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003890:	7ffb      	ldrb	r3, [r7, #31]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d838      	bhi.n	8003908 <UART_SetConfig+0x294>
 8003896:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <UART_SetConfig+0x228>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038d1 	.word	0x080038d1
 80038a8:	08003909 	.word	0x08003909
 80038ac:	080038d7 	.word	0x080038d7
 80038b0:	08003909 	.word	0x08003909
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003909 	.word	0x08003909
 80038bc:	080038df 	.word	0x080038df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c0:	f7ff fb9e 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80038c4:	61b8      	str	r0, [r7, #24]
        break;
 80038c6:	e024      	b.n	8003912 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c8:	f7ff fbbc 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 80038cc:	61b8      	str	r0, [r7, #24]
        break;
 80038ce:	e020      	b.n	8003912 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <UART_SetConfig+0x290>)
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e01d      	b.n	8003912 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d6:	f7ff fb33 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 80038da:	61b8      	str	r0, [r7, #24]
        break;
 80038dc:	e019      	b.n	8003912 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e2:	61bb      	str	r3, [r7, #24]
        break;
 80038e4:	e015      	b.n	8003912 <UART_SetConfig+0x29e>
 80038e6:	bf00      	nop
 80038e8:	efff69f3 	.word	0xefff69f3
 80038ec:	40013800 	.word	0x40013800
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40004400 	.word	0x40004400
 80038f8:	40004800 	.word	0x40004800
 80038fc:	40004c00 	.word	0x40004c00
 8003900:	40005000 	.word	0x40005000
 8003904:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	77bb      	strb	r3, [r7, #30]
        break;
 8003910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d073      	beq.n	8003a00 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	005a      	lsls	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	441a      	add	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b0f      	cmp	r3, #15
 8003932:	d916      	bls.n	8003962 <UART_SetConfig+0x2ee>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800393a:	d212      	bcs.n	8003962 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f023 030f 	bic.w	r3, r3, #15
 8003944:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	b29a      	uxth	r2, r3
 8003952:	89fb      	ldrh	r3, [r7, #14]
 8003954:	4313      	orrs	r3, r2
 8003956:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	89fa      	ldrh	r2, [r7, #14]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	e04e      	b.n	8003a00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	77bb      	strb	r3, [r7, #30]
 8003966:	e04b      	b.n	8003a00 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003968:	7ffb      	ldrb	r3, [r7, #31]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d827      	bhi.n	80039be <UART_SetConfig+0x34a>
 800396e:	a201      	add	r2, pc, #4	@ (adr r2, 8003974 <UART_SetConfig+0x300>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003999 	.word	0x08003999
 8003978:	080039a1 	.word	0x080039a1
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039bf 	.word	0x080039bf
 8003984:	080039af 	.word	0x080039af
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039bf 	.word	0x080039bf
 8003990:	080039bf 	.word	0x080039bf
 8003994:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7ff fb32 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 800399c:	61b8      	str	r0, [r7, #24]
        break;
 800399e:	e013      	b.n	80039c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7ff fb50 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 80039a4:	61b8      	str	r0, [r7, #24]
        break;
 80039a6:	e00f      	b.n	80039c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <UART_SetConfig+0x3a4>)
 80039aa:	61bb      	str	r3, [r7, #24]
        break;
 80039ac:	e00c      	b.n	80039c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7ff fac7 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 80039b2:	61b8      	str	r0, [r7, #24]
        break;
 80039b4:	e008      	b.n	80039c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ba:	61bb      	str	r3, [r7, #24]
        break;
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	77bb      	strb	r3, [r7, #30]
        break;
 80039c6:	bf00      	nop
    }

    if (pclk != 0U)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085a      	lsrs	r2, r3, #1
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	441a      	add	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d909      	bls.n	80039fc <UART_SetConfig+0x388>
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ee:	d205      	bcs.n	80039fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e001      	b.n	8003a00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	007a1200 	.word	0x007a1200

08003a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b1a:	d10a      	bne.n	8003b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b098      	sub	sp, #96	@ 0x60
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b70:	f7fc ff76 	bl	8000a60 <HAL_GetTick>
 8003b74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d12e      	bne.n	8003be2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f88c 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d021      	beq.n	8003be2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e6      	bne.n	8003b9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e062      	b.n	8003ca8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d149      	bne.n	8003c84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f856 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d03c      	beq.n	8003c84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	623b      	str	r3, [r7, #32]
   return(result);
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e6      	bne.n	8003c0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c5c:	61fa      	str	r2, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e5      	bne.n	8003c3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e011      	b.n	8003ca8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3758      	adds	r7, #88	@ 0x58
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc0:	e04f      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d04b      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fc fec9 	bl	8000a60 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e04e      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d037      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b80      	cmp	r3, #128	@ 0x80
 8003cf6:	d034      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b40      	cmp	r3, #64	@ 0x40
 8003cfc:	d031      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d110      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f838 	bl	8003d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e029      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d3c:	d111      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f81e 	bl	8003d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	bf0c      	ite	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	2300      	movne	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d0a0      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b095      	sub	sp, #84	@ 0x54
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003db2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e6      	bne.n	8003d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d118      	bne.n	8003e32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f023 0310 	bic.w	r3, r3, #16
 8003e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6979      	ldr	r1, [r7, #20]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e6      	bne.n	8003e00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e46:	bf00      	nop
 8003e48:	3754      	adds	r7, #84	@ 0x54
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <sniprintf>:
 8003e54:	b40c      	push	{r2, r3}
 8003e56:	b530      	push	{r4, r5, lr}
 8003e58:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <sniprintf+0x64>)
 8003e5a:	1e0c      	subs	r4, r1, #0
 8003e5c:	681d      	ldr	r5, [r3, #0]
 8003e5e:	b09d      	sub	sp, #116	@ 0x74
 8003e60:	da08      	bge.n	8003e74 <sniprintf+0x20>
 8003e62:	238b      	movs	r3, #139	@ 0x8b
 8003e64:	602b      	str	r3, [r5, #0]
 8003e66:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6a:	b01d      	add	sp, #116	@ 0x74
 8003e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e70:	b002      	add	sp, #8
 8003e72:	4770      	bx	lr
 8003e74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003e78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e7c:	bf14      	ite	ne
 8003e7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e82:	4623      	moveq	r3, r4
 8003e84:	9304      	str	r3, [sp, #16]
 8003e86:	9307      	str	r3, [sp, #28]
 8003e88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e8c:	9002      	str	r0, [sp, #8]
 8003e8e:	9006      	str	r0, [sp, #24]
 8003e90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e96:	ab21      	add	r3, sp, #132	@ 0x84
 8003e98:	a902      	add	r1, sp, #8
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	f000 f995 	bl	80041cc <_svfiprintf_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	bfbc      	itt	lt
 8003ea6:	238b      	movlt	r3, #139	@ 0x8b
 8003ea8:	602b      	strlt	r3, [r5, #0]
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	d0dd      	beq.n	8003e6a <sniprintf+0x16>
 8003eae:	9b02      	ldr	r3, [sp, #8]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e7d9      	b.n	8003e6a <sniprintf+0x16>
 8003eb6:	bf00      	nop
 8003eb8:	2000000c 	.word	0x2000000c

08003ebc <memset>:
 8003ebc:	4402      	add	r2, r0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <__errno>:
 8003ecc:	4b01      	ldr	r3, [pc, #4]	@ (8003ed4 <__errno+0x8>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	2000000c 	.word	0x2000000c

08003ed8 <__libc_init_array>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	4d0d      	ldr	r5, [pc, #52]	@ (8003f10 <__libc_init_array+0x38>)
 8003edc:	4c0d      	ldr	r4, [pc, #52]	@ (8003f14 <__libc_init_array+0x3c>)
 8003ede:	1b64      	subs	r4, r4, r5
 8003ee0:	10a4      	asrs	r4, r4, #2
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	42a6      	cmp	r6, r4
 8003ee6:	d109      	bne.n	8003efc <__libc_init_array+0x24>
 8003ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8003f18 <__libc_init_array+0x40>)
 8003eea:	4c0c      	ldr	r4, [pc, #48]	@ (8003f1c <__libc_init_array+0x44>)
 8003eec:	f000 fc66 	bl	80047bc <_init>
 8003ef0:	1b64      	subs	r4, r4, r5
 8003ef2:	10a4      	asrs	r4, r4, #2
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	42a6      	cmp	r6, r4
 8003ef8:	d105      	bne.n	8003f06 <__libc_init_array+0x2e>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f00:	4798      	blx	r3
 8003f02:	3601      	adds	r6, #1
 8003f04:	e7ee      	b.n	8003ee4 <__libc_init_array+0xc>
 8003f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0a:	4798      	blx	r3
 8003f0c:	3601      	adds	r6, #1
 8003f0e:	e7f2      	b.n	8003ef6 <__libc_init_array+0x1e>
 8003f10:	08004878 	.word	0x08004878
 8003f14:	08004878 	.word	0x08004878
 8003f18:	08004878 	.word	0x08004878
 8003f1c:	0800487c 	.word	0x0800487c

08003f20 <__retarget_lock_acquire_recursive>:
 8003f20:	4770      	bx	lr

08003f22 <__retarget_lock_release_recursive>:
 8003f22:	4770      	bx	lr

08003f24 <_free_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4605      	mov	r5, r0
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d041      	beq.n	8003fb0 <_free_r+0x8c>
 8003f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f30:	1f0c      	subs	r4, r1, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfb8      	it	lt
 8003f36:	18e4      	addlt	r4, r4, r3
 8003f38:	f000 f8e0 	bl	80040fc <__malloc_lock>
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <_free_r+0x90>)
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	b933      	cbnz	r3, 8003f50 <_free_r+0x2c>
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	4628      	mov	r0, r5
 8003f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f4c:	f000 b8dc 	b.w	8004108 <__malloc_unlock>
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d908      	bls.n	8003f66 <_free_r+0x42>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	1821      	adds	r1, r4, r0
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf01      	itttt	eq
 8003f5c:	6819      	ldreq	r1, [r3, #0]
 8003f5e:	685b      	ldreq	r3, [r3, #4]
 8003f60:	1809      	addeq	r1, r1, r0
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	e7ed      	b.n	8003f42 <_free_r+0x1e>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x4c>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x42>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1850      	adds	r0, r2, r1
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x6c>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	4401      	add	r1, r0
 8003f7c:	1850      	adds	r0, r2, r1
 8003f7e:	4283      	cmp	r3, r0
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1e0      	bne.n	8003f46 <_free_r+0x22>
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	4408      	add	r0, r1
 8003f8c:	6010      	str	r0, [r2, #0]
 8003f8e:	e7da      	b.n	8003f46 <_free_r+0x22>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x74>
 8003f92:	230c      	movs	r3, #12
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	e7d6      	b.n	8003f46 <_free_r+0x22>
 8003f98:	6820      	ldr	r0, [r4, #0]
 8003f9a:	1821      	adds	r1, r4, r0
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf04      	itt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	bf04      	itt	eq
 8003fa8:	1809      	addeq	r1, r1, r0
 8003faa:	6021      	streq	r1, [r4, #0]
 8003fac:	6054      	str	r4, [r2, #4]
 8003fae:	e7ca      	b.n	8003f46 <_free_r+0x22>
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200002a0 	.word	0x200002a0

08003fb8 <sbrk_aligned>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	4e0f      	ldr	r6, [pc, #60]	@ (8003ff8 <sbrk_aligned+0x40>)
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	6831      	ldr	r1, [r6, #0]
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	b911      	cbnz	r1, 8003fca <sbrk_aligned+0x12>
 8003fc4:	f000 fba6 	bl	8004714 <_sbrk_r>
 8003fc8:	6030      	str	r0, [r6, #0]
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f000 fba1 	bl	8004714 <_sbrk_r>
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	d103      	bne.n	8003fde <sbrk_aligned+0x26>
 8003fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8003fda:	4620      	mov	r0, r4
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
 8003fde:	1cc4      	adds	r4, r0, #3
 8003fe0:	f024 0403 	bic.w	r4, r4, #3
 8003fe4:	42a0      	cmp	r0, r4
 8003fe6:	d0f8      	beq.n	8003fda <sbrk_aligned+0x22>
 8003fe8:	1a21      	subs	r1, r4, r0
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 fb92 	bl	8004714 <_sbrk_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d1f2      	bne.n	8003fda <sbrk_aligned+0x22>
 8003ff4:	e7ef      	b.n	8003fd6 <sbrk_aligned+0x1e>
 8003ff6:	bf00      	nop
 8003ff8:	2000029c 	.word	0x2000029c

08003ffc <_malloc_r>:
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004000:	1ccd      	adds	r5, r1, #3
 8004002:	f025 0503 	bic.w	r5, r5, #3
 8004006:	3508      	adds	r5, #8
 8004008:	2d0c      	cmp	r5, #12
 800400a:	bf38      	it	cc
 800400c:	250c      	movcc	r5, #12
 800400e:	2d00      	cmp	r5, #0
 8004010:	4606      	mov	r6, r0
 8004012:	db01      	blt.n	8004018 <_malloc_r+0x1c>
 8004014:	42a9      	cmp	r1, r5
 8004016:	d904      	bls.n	8004022 <_malloc_r+0x26>
 8004018:	230c      	movs	r3, #12
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	2000      	movs	r0, #0
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040f8 <_malloc_r+0xfc>
 8004026:	f000 f869 	bl	80040fc <__malloc_lock>
 800402a:	f8d8 3000 	ldr.w	r3, [r8]
 800402e:	461c      	mov	r4, r3
 8004030:	bb44      	cbnz	r4, 8004084 <_malloc_r+0x88>
 8004032:	4629      	mov	r1, r5
 8004034:	4630      	mov	r0, r6
 8004036:	f7ff ffbf 	bl	8003fb8 <sbrk_aligned>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	4604      	mov	r4, r0
 800403e:	d158      	bne.n	80040f2 <_malloc_r+0xf6>
 8004040:	f8d8 4000 	ldr.w	r4, [r8]
 8004044:	4627      	mov	r7, r4
 8004046:	2f00      	cmp	r7, #0
 8004048:	d143      	bne.n	80040d2 <_malloc_r+0xd6>
 800404a:	2c00      	cmp	r4, #0
 800404c:	d04b      	beq.n	80040e6 <_malloc_r+0xea>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	4639      	mov	r1, r7
 8004052:	4630      	mov	r0, r6
 8004054:	eb04 0903 	add.w	r9, r4, r3
 8004058:	f000 fb5c 	bl	8004714 <_sbrk_r>
 800405c:	4581      	cmp	r9, r0
 800405e:	d142      	bne.n	80040e6 <_malloc_r+0xea>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	1a6d      	subs	r5, r5, r1
 8004064:	4629      	mov	r1, r5
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff ffa6 	bl	8003fb8 <sbrk_aligned>
 800406c:	3001      	adds	r0, #1
 800406e:	d03a      	beq.n	80040e6 <_malloc_r+0xea>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	442b      	add	r3, r5
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	f8d8 3000 	ldr.w	r3, [r8]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	bb62      	cbnz	r2, 80040d8 <_malloc_r+0xdc>
 800407e:	f8c8 7000 	str.w	r7, [r8]
 8004082:	e00f      	b.n	80040a4 <_malloc_r+0xa8>
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	1b52      	subs	r2, r2, r5
 8004088:	d420      	bmi.n	80040cc <_malloc_r+0xd0>
 800408a:	2a0b      	cmp	r2, #11
 800408c:	d917      	bls.n	80040be <_malloc_r+0xc2>
 800408e:	1961      	adds	r1, r4, r5
 8004090:	42a3      	cmp	r3, r4
 8004092:	6025      	str	r5, [r4, #0]
 8004094:	bf18      	it	ne
 8004096:	6059      	strne	r1, [r3, #4]
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	bf08      	it	eq
 800409c:	f8c8 1000 	streq.w	r1, [r8]
 80040a0:	5162      	str	r2, [r4, r5]
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 f82f 	bl	8004108 <__malloc_unlock>
 80040aa:	f104 000b 	add.w	r0, r4, #11
 80040ae:	1d23      	adds	r3, r4, #4
 80040b0:	f020 0007 	bic.w	r0, r0, #7
 80040b4:	1ac2      	subs	r2, r0, r3
 80040b6:	bf1c      	itt	ne
 80040b8:	1a1b      	subne	r3, r3, r0
 80040ba:	50a3      	strne	r3, [r4, r2]
 80040bc:	e7af      	b.n	800401e <_malloc_r+0x22>
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	bf0c      	ite	eq
 80040c4:	f8c8 2000 	streq.w	r2, [r8]
 80040c8:	605a      	strne	r2, [r3, #4]
 80040ca:	e7eb      	b.n	80040a4 <_malloc_r+0xa8>
 80040cc:	4623      	mov	r3, r4
 80040ce:	6864      	ldr	r4, [r4, #4]
 80040d0:	e7ae      	b.n	8004030 <_malloc_r+0x34>
 80040d2:	463c      	mov	r4, r7
 80040d4:	687f      	ldr	r7, [r7, #4]
 80040d6:	e7b6      	b.n	8004046 <_malloc_r+0x4a>
 80040d8:	461a      	mov	r2, r3
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d1fb      	bne.n	80040d8 <_malloc_r+0xdc>
 80040e0:	2300      	movs	r3, #0
 80040e2:	6053      	str	r3, [r2, #4]
 80040e4:	e7de      	b.n	80040a4 <_malloc_r+0xa8>
 80040e6:	230c      	movs	r3, #12
 80040e8:	6033      	str	r3, [r6, #0]
 80040ea:	4630      	mov	r0, r6
 80040ec:	f000 f80c 	bl	8004108 <__malloc_unlock>
 80040f0:	e794      	b.n	800401c <_malloc_r+0x20>
 80040f2:	6005      	str	r5, [r0, #0]
 80040f4:	e7d6      	b.n	80040a4 <_malloc_r+0xa8>
 80040f6:	bf00      	nop
 80040f8:	200002a0 	.word	0x200002a0

080040fc <__malloc_lock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	@ (8004104 <__malloc_lock+0x8>)
 80040fe:	f7ff bf0f 	b.w	8003f20 <__retarget_lock_acquire_recursive>
 8004102:	bf00      	nop
 8004104:	20000298 	.word	0x20000298

08004108 <__malloc_unlock>:
 8004108:	4801      	ldr	r0, [pc, #4]	@ (8004110 <__malloc_unlock+0x8>)
 800410a:	f7ff bf0a 	b.w	8003f22 <__retarget_lock_release_recursive>
 800410e:	bf00      	nop
 8004110:	20000298 	.word	0x20000298

08004114 <__ssputs_r>:
 8004114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	688e      	ldr	r6, [r1, #8]
 800411a:	461f      	mov	r7, r3
 800411c:	42be      	cmp	r6, r7
 800411e:	680b      	ldr	r3, [r1, #0]
 8004120:	4682      	mov	sl, r0
 8004122:	460c      	mov	r4, r1
 8004124:	4690      	mov	r8, r2
 8004126:	d82d      	bhi.n	8004184 <__ssputs_r+0x70>
 8004128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800412c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004130:	d026      	beq.n	8004180 <__ssputs_r+0x6c>
 8004132:	6965      	ldr	r5, [r4, #20]
 8004134:	6909      	ldr	r1, [r1, #16]
 8004136:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800413a:	eba3 0901 	sub.w	r9, r3, r1
 800413e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004142:	1c7b      	adds	r3, r7, #1
 8004144:	444b      	add	r3, r9
 8004146:	106d      	asrs	r5, r5, #1
 8004148:	429d      	cmp	r5, r3
 800414a:	bf38      	it	cc
 800414c:	461d      	movcc	r5, r3
 800414e:	0553      	lsls	r3, r2, #21
 8004150:	d527      	bpl.n	80041a2 <__ssputs_r+0x8e>
 8004152:	4629      	mov	r1, r5
 8004154:	f7ff ff52 	bl	8003ffc <_malloc_r>
 8004158:	4606      	mov	r6, r0
 800415a:	b360      	cbz	r0, 80041b6 <__ssputs_r+0xa2>
 800415c:	6921      	ldr	r1, [r4, #16]
 800415e:	464a      	mov	r2, r9
 8004160:	f000 fae8 	bl	8004734 <memcpy>
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800416a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	6126      	str	r6, [r4, #16]
 8004172:	6165      	str	r5, [r4, #20]
 8004174:	444e      	add	r6, r9
 8004176:	eba5 0509 	sub.w	r5, r5, r9
 800417a:	6026      	str	r6, [r4, #0]
 800417c:	60a5      	str	r5, [r4, #8]
 800417e:	463e      	mov	r6, r7
 8004180:	42be      	cmp	r6, r7
 8004182:	d900      	bls.n	8004186 <__ssputs_r+0x72>
 8004184:	463e      	mov	r6, r7
 8004186:	6820      	ldr	r0, [r4, #0]
 8004188:	4632      	mov	r2, r6
 800418a:	4641      	mov	r1, r8
 800418c:	f000 faa8 	bl	80046e0 <memmove>
 8004190:	68a3      	ldr	r3, [r4, #8]
 8004192:	1b9b      	subs	r3, r3, r6
 8004194:	60a3      	str	r3, [r4, #8]
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	4433      	add	r3, r6
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	2000      	movs	r0, #0
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a2:	462a      	mov	r2, r5
 80041a4:	f000 fad4 	bl	8004750 <_realloc_r>
 80041a8:	4606      	mov	r6, r0
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d1e0      	bne.n	8004170 <__ssputs_r+0x5c>
 80041ae:	6921      	ldr	r1, [r4, #16]
 80041b0:	4650      	mov	r0, sl
 80041b2:	f7ff feb7 	bl	8003f24 <_free_r>
 80041b6:	230c      	movs	r3, #12
 80041b8:	f8ca 3000 	str.w	r3, [sl]
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	e7e9      	b.n	800419e <__ssputs_r+0x8a>
	...

080041cc <_svfiprintf_r>:
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	4698      	mov	r8, r3
 80041d2:	898b      	ldrh	r3, [r1, #12]
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	b09d      	sub	sp, #116	@ 0x74
 80041d8:	4607      	mov	r7, r0
 80041da:	460d      	mov	r5, r1
 80041dc:	4614      	mov	r4, r2
 80041de:	d510      	bpl.n	8004202 <_svfiprintf_r+0x36>
 80041e0:	690b      	ldr	r3, [r1, #16]
 80041e2:	b973      	cbnz	r3, 8004202 <_svfiprintf_r+0x36>
 80041e4:	2140      	movs	r1, #64	@ 0x40
 80041e6:	f7ff ff09 	bl	8003ffc <_malloc_r>
 80041ea:	6028      	str	r0, [r5, #0]
 80041ec:	6128      	str	r0, [r5, #16]
 80041ee:	b930      	cbnz	r0, 80041fe <_svfiprintf_r+0x32>
 80041f0:	230c      	movs	r3, #12
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	b01d      	add	sp, #116	@ 0x74
 80041fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fe:	2340      	movs	r3, #64	@ 0x40
 8004200:	616b      	str	r3, [r5, #20]
 8004202:	2300      	movs	r3, #0
 8004204:	9309      	str	r3, [sp, #36]	@ 0x24
 8004206:	2320      	movs	r3, #32
 8004208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800420c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004210:	2330      	movs	r3, #48	@ 0x30
 8004212:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043b0 <_svfiprintf_r+0x1e4>
 8004216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800421a:	f04f 0901 	mov.w	r9, #1
 800421e:	4623      	mov	r3, r4
 8004220:	469a      	mov	sl, r3
 8004222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004226:	b10a      	cbz	r2, 800422c <_svfiprintf_r+0x60>
 8004228:	2a25      	cmp	r2, #37	@ 0x25
 800422a:	d1f9      	bne.n	8004220 <_svfiprintf_r+0x54>
 800422c:	ebba 0b04 	subs.w	fp, sl, r4
 8004230:	d00b      	beq.n	800424a <_svfiprintf_r+0x7e>
 8004232:	465b      	mov	r3, fp
 8004234:	4622      	mov	r2, r4
 8004236:	4629      	mov	r1, r5
 8004238:	4638      	mov	r0, r7
 800423a:	f7ff ff6b 	bl	8004114 <__ssputs_r>
 800423e:	3001      	adds	r0, #1
 8004240:	f000 80a7 	beq.w	8004392 <_svfiprintf_r+0x1c6>
 8004244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004246:	445a      	add	r2, fp
 8004248:	9209      	str	r2, [sp, #36]	@ 0x24
 800424a:	f89a 3000 	ldrb.w	r3, [sl]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 809f 	beq.w	8004392 <_svfiprintf_r+0x1c6>
 8004254:	2300      	movs	r3, #0
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800425e:	f10a 0a01 	add.w	sl, sl, #1
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	9307      	str	r3, [sp, #28]
 8004266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800426a:	931a      	str	r3, [sp, #104]	@ 0x68
 800426c:	4654      	mov	r4, sl
 800426e:	2205      	movs	r2, #5
 8004270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004274:	484e      	ldr	r0, [pc, #312]	@ (80043b0 <_svfiprintf_r+0x1e4>)
 8004276:	f7fb ffb3 	bl	80001e0 <memchr>
 800427a:	9a04      	ldr	r2, [sp, #16]
 800427c:	b9d8      	cbnz	r0, 80042b6 <_svfiprintf_r+0xea>
 800427e:	06d0      	lsls	r0, r2, #27
 8004280:	bf44      	itt	mi
 8004282:	2320      	movmi	r3, #32
 8004284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004288:	0711      	lsls	r1, r2, #28
 800428a:	bf44      	itt	mi
 800428c:	232b      	movmi	r3, #43	@ 0x2b
 800428e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004292:	f89a 3000 	ldrb.w	r3, [sl]
 8004296:	2b2a      	cmp	r3, #42	@ 0x2a
 8004298:	d015      	beq.n	80042c6 <_svfiprintf_r+0xfa>
 800429a:	9a07      	ldr	r2, [sp, #28]
 800429c:	4654      	mov	r4, sl
 800429e:	2000      	movs	r0, #0
 80042a0:	f04f 0c0a 	mov.w	ip, #10
 80042a4:	4621      	mov	r1, r4
 80042a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042aa:	3b30      	subs	r3, #48	@ 0x30
 80042ac:	2b09      	cmp	r3, #9
 80042ae:	d94b      	bls.n	8004348 <_svfiprintf_r+0x17c>
 80042b0:	b1b0      	cbz	r0, 80042e0 <_svfiprintf_r+0x114>
 80042b2:	9207      	str	r2, [sp, #28]
 80042b4:	e014      	b.n	80042e0 <_svfiprintf_r+0x114>
 80042b6:	eba0 0308 	sub.w	r3, r0, r8
 80042ba:	fa09 f303 	lsl.w	r3, r9, r3
 80042be:	4313      	orrs	r3, r2
 80042c0:	9304      	str	r3, [sp, #16]
 80042c2:	46a2      	mov	sl, r4
 80042c4:	e7d2      	b.n	800426c <_svfiprintf_r+0xa0>
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	1d19      	adds	r1, r3, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	9103      	str	r1, [sp, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bfbb      	ittet	lt
 80042d2:	425b      	neglt	r3, r3
 80042d4:	f042 0202 	orrlt.w	r2, r2, #2
 80042d8:	9307      	strge	r3, [sp, #28]
 80042da:	9307      	strlt	r3, [sp, #28]
 80042dc:	bfb8      	it	lt
 80042de:	9204      	strlt	r2, [sp, #16]
 80042e0:	7823      	ldrb	r3, [r4, #0]
 80042e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80042e4:	d10a      	bne.n	80042fc <_svfiprintf_r+0x130>
 80042e6:	7863      	ldrb	r3, [r4, #1]
 80042e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ea:	d132      	bne.n	8004352 <_svfiprintf_r+0x186>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	9203      	str	r2, [sp, #12]
 80042f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042f8:	3402      	adds	r4, #2
 80042fa:	9305      	str	r3, [sp, #20]
 80042fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043c0 <_svfiprintf_r+0x1f4>
 8004300:	7821      	ldrb	r1, [r4, #0]
 8004302:	2203      	movs	r2, #3
 8004304:	4650      	mov	r0, sl
 8004306:	f7fb ff6b 	bl	80001e0 <memchr>
 800430a:	b138      	cbz	r0, 800431c <_svfiprintf_r+0x150>
 800430c:	9b04      	ldr	r3, [sp, #16]
 800430e:	eba0 000a 	sub.w	r0, r0, sl
 8004312:	2240      	movs	r2, #64	@ 0x40
 8004314:	4082      	lsls	r2, r0
 8004316:	4313      	orrs	r3, r2
 8004318:	3401      	adds	r4, #1
 800431a:	9304      	str	r3, [sp, #16]
 800431c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004320:	4824      	ldr	r0, [pc, #144]	@ (80043b4 <_svfiprintf_r+0x1e8>)
 8004322:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004326:	2206      	movs	r2, #6
 8004328:	f7fb ff5a 	bl	80001e0 <memchr>
 800432c:	2800      	cmp	r0, #0
 800432e:	d036      	beq.n	800439e <_svfiprintf_r+0x1d2>
 8004330:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <_svfiprintf_r+0x1ec>)
 8004332:	bb1b      	cbnz	r3, 800437c <_svfiprintf_r+0x1b0>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	3307      	adds	r3, #7
 8004338:	f023 0307 	bic.w	r3, r3, #7
 800433c:	3308      	adds	r3, #8
 800433e:	9303      	str	r3, [sp, #12]
 8004340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004342:	4433      	add	r3, r6
 8004344:	9309      	str	r3, [sp, #36]	@ 0x24
 8004346:	e76a      	b.n	800421e <_svfiprintf_r+0x52>
 8004348:	fb0c 3202 	mla	r2, ip, r2, r3
 800434c:	460c      	mov	r4, r1
 800434e:	2001      	movs	r0, #1
 8004350:	e7a8      	b.n	80042a4 <_svfiprintf_r+0xd8>
 8004352:	2300      	movs	r3, #0
 8004354:	3401      	adds	r4, #1
 8004356:	9305      	str	r3, [sp, #20]
 8004358:	4619      	mov	r1, r3
 800435a:	f04f 0c0a 	mov.w	ip, #10
 800435e:	4620      	mov	r0, r4
 8004360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004364:	3a30      	subs	r2, #48	@ 0x30
 8004366:	2a09      	cmp	r2, #9
 8004368:	d903      	bls.n	8004372 <_svfiprintf_r+0x1a6>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0c6      	beq.n	80042fc <_svfiprintf_r+0x130>
 800436e:	9105      	str	r1, [sp, #20]
 8004370:	e7c4      	b.n	80042fc <_svfiprintf_r+0x130>
 8004372:	fb0c 2101 	mla	r1, ip, r1, r2
 8004376:	4604      	mov	r4, r0
 8004378:	2301      	movs	r3, #1
 800437a:	e7f0      	b.n	800435e <_svfiprintf_r+0x192>
 800437c:	ab03      	add	r3, sp, #12
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	462a      	mov	r2, r5
 8004382:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <_svfiprintf_r+0x1f0>)
 8004384:	a904      	add	r1, sp, #16
 8004386:	4638      	mov	r0, r7
 8004388:	f3af 8000 	nop.w
 800438c:	1c42      	adds	r2, r0, #1
 800438e:	4606      	mov	r6, r0
 8004390:	d1d6      	bne.n	8004340 <_svfiprintf_r+0x174>
 8004392:	89ab      	ldrh	r3, [r5, #12]
 8004394:	065b      	lsls	r3, r3, #25
 8004396:	f53f af2d 	bmi.w	80041f4 <_svfiprintf_r+0x28>
 800439a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800439c:	e72c      	b.n	80041f8 <_svfiprintf_r+0x2c>
 800439e:	ab03      	add	r3, sp, #12
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	462a      	mov	r2, r5
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <_svfiprintf_r+0x1f0>)
 80043a6:	a904      	add	r1, sp, #16
 80043a8:	4638      	mov	r0, r7
 80043aa:	f000 f879 	bl	80044a0 <_printf_i>
 80043ae:	e7ed      	b.n	800438c <_svfiprintf_r+0x1c0>
 80043b0:	0800483c 	.word	0x0800483c
 80043b4:	08004846 	.word	0x08004846
 80043b8:	00000000 	.word	0x00000000
 80043bc:	08004115 	.word	0x08004115
 80043c0:	08004842 	.word	0x08004842

080043c4 <_printf_common>:
 80043c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	4616      	mov	r6, r2
 80043ca:	4698      	mov	r8, r3
 80043cc:	688a      	ldr	r2, [r1, #8]
 80043ce:	690b      	ldr	r3, [r1, #16]
 80043d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bfb8      	it	lt
 80043d8:	4613      	movlt	r3, r2
 80043da:	6033      	str	r3, [r6, #0]
 80043dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043e0:	4607      	mov	r7, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	b10a      	cbz	r2, 80043ea <_printf_common+0x26>
 80043e6:	3301      	adds	r3, #1
 80043e8:	6033      	str	r3, [r6, #0]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	0699      	lsls	r1, r3, #26
 80043ee:	bf42      	ittt	mi
 80043f0:	6833      	ldrmi	r3, [r6, #0]
 80043f2:	3302      	addmi	r3, #2
 80043f4:	6033      	strmi	r3, [r6, #0]
 80043f6:	6825      	ldr	r5, [r4, #0]
 80043f8:	f015 0506 	ands.w	r5, r5, #6
 80043fc:	d106      	bne.n	800440c <_printf_common+0x48>
 80043fe:	f104 0a19 	add.w	sl, r4, #25
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	6832      	ldr	r2, [r6, #0]
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	42ab      	cmp	r3, r5
 800440a:	dc26      	bgt.n	800445a <_printf_common+0x96>
 800440c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	3b00      	subs	r3, #0
 8004414:	bf18      	it	ne
 8004416:	2301      	movne	r3, #1
 8004418:	0692      	lsls	r2, r2, #26
 800441a:	d42b      	bmi.n	8004474 <_printf_common+0xb0>
 800441c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004420:	4641      	mov	r1, r8
 8004422:	4638      	mov	r0, r7
 8004424:	47c8      	blx	r9
 8004426:	3001      	adds	r0, #1
 8004428:	d01e      	beq.n	8004468 <_printf_common+0xa4>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	6922      	ldr	r2, [r4, #16]
 800442e:	f003 0306 	and.w	r3, r3, #6
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf02      	ittt	eq
 8004436:	68e5      	ldreq	r5, [r4, #12]
 8004438:	6833      	ldreq	r3, [r6, #0]
 800443a:	1aed      	subeq	r5, r5, r3
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	bf0c      	ite	eq
 8004440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004444:	2500      	movne	r5, #0
 8004446:	4293      	cmp	r3, r2
 8004448:	bfc4      	itt	gt
 800444a:	1a9b      	subgt	r3, r3, r2
 800444c:	18ed      	addgt	r5, r5, r3
 800444e:	2600      	movs	r6, #0
 8004450:	341a      	adds	r4, #26
 8004452:	42b5      	cmp	r5, r6
 8004454:	d11a      	bne.n	800448c <_printf_common+0xc8>
 8004456:	2000      	movs	r0, #0
 8004458:	e008      	b.n	800446c <_printf_common+0xa8>
 800445a:	2301      	movs	r3, #1
 800445c:	4652      	mov	r2, sl
 800445e:	4641      	mov	r1, r8
 8004460:	4638      	mov	r0, r7
 8004462:	47c8      	blx	r9
 8004464:	3001      	adds	r0, #1
 8004466:	d103      	bne.n	8004470 <_printf_common+0xac>
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004470:	3501      	adds	r5, #1
 8004472:	e7c6      	b.n	8004402 <_printf_common+0x3e>
 8004474:	18e1      	adds	r1, r4, r3
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	2030      	movs	r0, #48	@ 0x30
 800447a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800447e:	4422      	add	r2, r4
 8004480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004488:	3302      	adds	r3, #2
 800448a:	e7c7      	b.n	800441c <_printf_common+0x58>
 800448c:	2301      	movs	r3, #1
 800448e:	4622      	mov	r2, r4
 8004490:	4641      	mov	r1, r8
 8004492:	4638      	mov	r0, r7
 8004494:	47c8      	blx	r9
 8004496:	3001      	adds	r0, #1
 8004498:	d0e6      	beq.n	8004468 <_printf_common+0xa4>
 800449a:	3601      	adds	r6, #1
 800449c:	e7d9      	b.n	8004452 <_printf_common+0x8e>
	...

080044a0 <_printf_i>:
 80044a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	7e0f      	ldrb	r7, [r1, #24]
 80044a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044a8:	2f78      	cmp	r7, #120	@ 0x78
 80044aa:	4691      	mov	r9, r2
 80044ac:	4680      	mov	r8, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	469a      	mov	sl, r3
 80044b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044b6:	d807      	bhi.n	80044c8 <_printf_i+0x28>
 80044b8:	2f62      	cmp	r7, #98	@ 0x62
 80044ba:	d80a      	bhi.n	80044d2 <_printf_i+0x32>
 80044bc:	2f00      	cmp	r7, #0
 80044be:	f000 80d2 	beq.w	8004666 <_printf_i+0x1c6>
 80044c2:	2f58      	cmp	r7, #88	@ 0x58
 80044c4:	f000 80b9 	beq.w	800463a <_printf_i+0x19a>
 80044c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044d0:	e03a      	b.n	8004548 <_printf_i+0xa8>
 80044d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044d6:	2b15      	cmp	r3, #21
 80044d8:	d8f6      	bhi.n	80044c8 <_printf_i+0x28>
 80044da:	a101      	add	r1, pc, #4	@ (adr r1, 80044e0 <_printf_i+0x40>)
 80044dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e0:	08004539 	.word	0x08004539
 80044e4:	0800454d 	.word	0x0800454d
 80044e8:	080044c9 	.word	0x080044c9
 80044ec:	080044c9 	.word	0x080044c9
 80044f0:	080044c9 	.word	0x080044c9
 80044f4:	080044c9 	.word	0x080044c9
 80044f8:	0800454d 	.word	0x0800454d
 80044fc:	080044c9 	.word	0x080044c9
 8004500:	080044c9 	.word	0x080044c9
 8004504:	080044c9 	.word	0x080044c9
 8004508:	080044c9 	.word	0x080044c9
 800450c:	0800464d 	.word	0x0800464d
 8004510:	08004577 	.word	0x08004577
 8004514:	08004607 	.word	0x08004607
 8004518:	080044c9 	.word	0x080044c9
 800451c:	080044c9 	.word	0x080044c9
 8004520:	0800466f 	.word	0x0800466f
 8004524:	080044c9 	.word	0x080044c9
 8004528:	08004577 	.word	0x08004577
 800452c:	080044c9 	.word	0x080044c9
 8004530:	080044c9 	.word	0x080044c9
 8004534:	0800460f 	.word	0x0800460f
 8004538:	6833      	ldr	r3, [r6, #0]
 800453a:	1d1a      	adds	r2, r3, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6032      	str	r2, [r6, #0]
 8004540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004548:	2301      	movs	r3, #1
 800454a:	e09d      	b.n	8004688 <_printf_i+0x1e8>
 800454c:	6833      	ldr	r3, [r6, #0]
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	1d19      	adds	r1, r3, #4
 8004552:	6031      	str	r1, [r6, #0]
 8004554:	0606      	lsls	r6, r0, #24
 8004556:	d501      	bpl.n	800455c <_printf_i+0xbc>
 8004558:	681d      	ldr	r5, [r3, #0]
 800455a:	e003      	b.n	8004564 <_printf_i+0xc4>
 800455c:	0645      	lsls	r5, r0, #25
 800455e:	d5fb      	bpl.n	8004558 <_printf_i+0xb8>
 8004560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004564:	2d00      	cmp	r5, #0
 8004566:	da03      	bge.n	8004570 <_printf_i+0xd0>
 8004568:	232d      	movs	r3, #45	@ 0x2d
 800456a:	426d      	negs	r5, r5
 800456c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004570:	4859      	ldr	r0, [pc, #356]	@ (80046d8 <_printf_i+0x238>)
 8004572:	230a      	movs	r3, #10
 8004574:	e011      	b.n	800459a <_printf_i+0xfa>
 8004576:	6821      	ldr	r1, [r4, #0]
 8004578:	6833      	ldr	r3, [r6, #0]
 800457a:	0608      	lsls	r0, r1, #24
 800457c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004580:	d402      	bmi.n	8004588 <_printf_i+0xe8>
 8004582:	0649      	lsls	r1, r1, #25
 8004584:	bf48      	it	mi
 8004586:	b2ad      	uxthmi	r5, r5
 8004588:	2f6f      	cmp	r7, #111	@ 0x6f
 800458a:	4853      	ldr	r0, [pc, #332]	@ (80046d8 <_printf_i+0x238>)
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	bf14      	ite	ne
 8004590:	230a      	movne	r3, #10
 8004592:	2308      	moveq	r3, #8
 8004594:	2100      	movs	r1, #0
 8004596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800459a:	6866      	ldr	r6, [r4, #4]
 800459c:	60a6      	str	r6, [r4, #8]
 800459e:	2e00      	cmp	r6, #0
 80045a0:	bfa2      	ittt	ge
 80045a2:	6821      	ldrge	r1, [r4, #0]
 80045a4:	f021 0104 	bicge.w	r1, r1, #4
 80045a8:	6021      	strge	r1, [r4, #0]
 80045aa:	b90d      	cbnz	r5, 80045b0 <_printf_i+0x110>
 80045ac:	2e00      	cmp	r6, #0
 80045ae:	d04b      	beq.n	8004648 <_printf_i+0x1a8>
 80045b0:	4616      	mov	r6, r2
 80045b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b6:	fb03 5711 	mls	r7, r3, r1, r5
 80045ba:	5dc7      	ldrb	r7, [r0, r7]
 80045bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045c0:	462f      	mov	r7, r5
 80045c2:	42bb      	cmp	r3, r7
 80045c4:	460d      	mov	r5, r1
 80045c6:	d9f4      	bls.n	80045b2 <_printf_i+0x112>
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d10b      	bne.n	80045e4 <_printf_i+0x144>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	07df      	lsls	r7, r3, #31
 80045d0:	d508      	bpl.n	80045e4 <_printf_i+0x144>
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	6861      	ldr	r1, [r4, #4]
 80045d6:	4299      	cmp	r1, r3
 80045d8:	bfde      	ittt	le
 80045da:	2330      	movle	r3, #48	@ 0x30
 80045dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e4:	1b92      	subs	r2, r2, r6
 80045e6:	6122      	str	r2, [r4, #16]
 80045e8:	f8cd a000 	str.w	sl, [sp]
 80045ec:	464b      	mov	r3, r9
 80045ee:	aa03      	add	r2, sp, #12
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f7ff fee6 	bl	80043c4 <_printf_common>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d14a      	bne.n	8004692 <_printf_i+0x1f2>
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	b004      	add	sp, #16
 8004602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	f043 0320 	orr.w	r3, r3, #32
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	4833      	ldr	r0, [pc, #204]	@ (80046dc <_printf_i+0x23c>)
 8004610:	2778      	movs	r7, #120	@ 0x78
 8004612:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	6831      	ldr	r1, [r6, #0]
 800461a:	061f      	lsls	r7, r3, #24
 800461c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004620:	d402      	bmi.n	8004628 <_printf_i+0x188>
 8004622:	065f      	lsls	r7, r3, #25
 8004624:	bf48      	it	mi
 8004626:	b2ad      	uxthmi	r5, r5
 8004628:	6031      	str	r1, [r6, #0]
 800462a:	07d9      	lsls	r1, r3, #31
 800462c:	bf44      	itt	mi
 800462e:	f043 0320 	orrmi.w	r3, r3, #32
 8004632:	6023      	strmi	r3, [r4, #0]
 8004634:	b11d      	cbz	r5, 800463e <_printf_i+0x19e>
 8004636:	2310      	movs	r3, #16
 8004638:	e7ac      	b.n	8004594 <_printf_i+0xf4>
 800463a:	4827      	ldr	r0, [pc, #156]	@ (80046d8 <_printf_i+0x238>)
 800463c:	e7e9      	b.n	8004612 <_printf_i+0x172>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	f023 0320 	bic.w	r3, r3, #32
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	e7f6      	b.n	8004636 <_printf_i+0x196>
 8004648:	4616      	mov	r6, r2
 800464a:	e7bd      	b.n	80045c8 <_printf_i+0x128>
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	6825      	ldr	r5, [r4, #0]
 8004650:	6961      	ldr	r1, [r4, #20]
 8004652:	1d18      	adds	r0, r3, #4
 8004654:	6030      	str	r0, [r6, #0]
 8004656:	062e      	lsls	r6, r5, #24
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	d501      	bpl.n	8004660 <_printf_i+0x1c0>
 800465c:	6019      	str	r1, [r3, #0]
 800465e:	e002      	b.n	8004666 <_printf_i+0x1c6>
 8004660:	0668      	lsls	r0, r5, #25
 8004662:	d5fb      	bpl.n	800465c <_printf_i+0x1bc>
 8004664:	8019      	strh	r1, [r3, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	4616      	mov	r6, r2
 800466c:	e7bc      	b.n	80045e8 <_printf_i+0x148>
 800466e:	6833      	ldr	r3, [r6, #0]
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	6032      	str	r2, [r6, #0]
 8004674:	681e      	ldr	r6, [r3, #0]
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	2100      	movs	r1, #0
 800467a:	4630      	mov	r0, r6
 800467c:	f7fb fdb0 	bl	80001e0 <memchr>
 8004680:	b108      	cbz	r0, 8004686 <_printf_i+0x1e6>
 8004682:	1b80      	subs	r0, r0, r6
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004690:	e7aa      	b.n	80045e8 <_printf_i+0x148>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d0ad      	beq.n	80045fc <_printf_i+0x15c>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	079b      	lsls	r3, r3, #30
 80046a4:	d413      	bmi.n	80046ce <_printf_i+0x22e>
 80046a6:	68e0      	ldr	r0, [r4, #12]
 80046a8:	9b03      	ldr	r3, [sp, #12]
 80046aa:	4298      	cmp	r0, r3
 80046ac:	bfb8      	it	lt
 80046ae:	4618      	movlt	r0, r3
 80046b0:	e7a6      	b.n	8004600 <_printf_i+0x160>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4632      	mov	r2, r6
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d09d      	beq.n	80045fc <_printf_i+0x15c>
 80046c0:	3501      	adds	r5, #1
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	9903      	ldr	r1, [sp, #12]
 80046c6:	1a5b      	subs	r3, r3, r1
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	dcf2      	bgt.n	80046b2 <_printf_i+0x212>
 80046cc:	e7eb      	b.n	80046a6 <_printf_i+0x206>
 80046ce:	2500      	movs	r5, #0
 80046d0:	f104 0619 	add.w	r6, r4, #25
 80046d4:	e7f5      	b.n	80046c2 <_printf_i+0x222>
 80046d6:	bf00      	nop
 80046d8:	0800484d 	.word	0x0800484d
 80046dc:	0800485e 	.word	0x0800485e

080046e0 <memmove>:
 80046e0:	4288      	cmp	r0, r1
 80046e2:	b510      	push	{r4, lr}
 80046e4:	eb01 0402 	add.w	r4, r1, r2
 80046e8:	d902      	bls.n	80046f0 <memmove+0x10>
 80046ea:	4284      	cmp	r4, r0
 80046ec:	4623      	mov	r3, r4
 80046ee:	d807      	bhi.n	8004700 <memmove+0x20>
 80046f0:	1e43      	subs	r3, r0, #1
 80046f2:	42a1      	cmp	r1, r4
 80046f4:	d008      	beq.n	8004708 <memmove+0x28>
 80046f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046fe:	e7f8      	b.n	80046f2 <memmove+0x12>
 8004700:	4402      	add	r2, r0
 8004702:	4601      	mov	r1, r0
 8004704:	428a      	cmp	r2, r1
 8004706:	d100      	bne.n	800470a <memmove+0x2a>
 8004708:	bd10      	pop	{r4, pc}
 800470a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800470e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004712:	e7f7      	b.n	8004704 <memmove+0x24>

08004714 <_sbrk_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d06      	ldr	r5, [pc, #24]	@ (8004730 <_sbrk_r+0x1c>)
 8004718:	2300      	movs	r3, #0
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	f7fc f8d2 	bl	80008c8 <_sbrk>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_sbrk_r+0x1a>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_sbrk_r+0x1a>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	20000294 	.word	0x20000294

08004734 <memcpy>:
 8004734:	440a      	add	r2, r1
 8004736:	4291      	cmp	r1, r2
 8004738:	f100 33ff 	add.w	r3, r0, #4294967295
 800473c:	d100      	bne.n	8004740 <memcpy+0xc>
 800473e:	4770      	bx	lr
 8004740:	b510      	push	{r4, lr}
 8004742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800474a:	4291      	cmp	r1, r2
 800474c:	d1f9      	bne.n	8004742 <memcpy+0xe>
 800474e:	bd10      	pop	{r4, pc}

08004750 <_realloc_r>:
 8004750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004754:	4680      	mov	r8, r0
 8004756:	4615      	mov	r5, r2
 8004758:	460c      	mov	r4, r1
 800475a:	b921      	cbnz	r1, 8004766 <_realloc_r+0x16>
 800475c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004760:	4611      	mov	r1, r2
 8004762:	f7ff bc4b 	b.w	8003ffc <_malloc_r>
 8004766:	b92a      	cbnz	r2, 8004774 <_realloc_r+0x24>
 8004768:	f7ff fbdc 	bl	8003f24 <_free_r>
 800476c:	2400      	movs	r4, #0
 800476e:	4620      	mov	r0, r4
 8004770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004774:	f000 f81a 	bl	80047ac <_malloc_usable_size_r>
 8004778:	4285      	cmp	r5, r0
 800477a:	4606      	mov	r6, r0
 800477c:	d802      	bhi.n	8004784 <_realloc_r+0x34>
 800477e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004782:	d8f4      	bhi.n	800476e <_realloc_r+0x1e>
 8004784:	4629      	mov	r1, r5
 8004786:	4640      	mov	r0, r8
 8004788:	f7ff fc38 	bl	8003ffc <_malloc_r>
 800478c:	4607      	mov	r7, r0
 800478e:	2800      	cmp	r0, #0
 8004790:	d0ec      	beq.n	800476c <_realloc_r+0x1c>
 8004792:	42b5      	cmp	r5, r6
 8004794:	462a      	mov	r2, r5
 8004796:	4621      	mov	r1, r4
 8004798:	bf28      	it	cs
 800479a:	4632      	movcs	r2, r6
 800479c:	f7ff ffca 	bl	8004734 <memcpy>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4640      	mov	r0, r8
 80047a4:	f7ff fbbe 	bl	8003f24 <_free_r>
 80047a8:	463c      	mov	r4, r7
 80047aa:	e7e0      	b.n	800476e <_realloc_r+0x1e>

080047ac <_malloc_usable_size_r>:
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f18      	subs	r0, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbc      	itt	lt
 80047b6:	580b      	ldrlt	r3, [r1, r0]
 80047b8:	18c0      	addlt	r0, r0, r3
 80047ba:	4770      	bx	lr

080047bc <_init>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	bf00      	nop
 80047c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c2:	bc08      	pop	{r3}
 80047c4:	469e      	mov	lr, r3
 80047c6:	4770      	bx	lr

080047c8 <_fini>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr
