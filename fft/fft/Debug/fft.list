
fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009a78  08009a78  0000aa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  0000b1f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee0  08009ee0  0000aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  0000b1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009eec  08009eec  0000aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08009ef0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1f4  2**0
                  CONTENTS
 10 .bss          000002e0  200001f4  200001f4  0000b1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  0000b1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6e2  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e8  00000000  00000000  00019906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0001b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095c  00000000  00000000  0001c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224cb  00000000  00000000  0001cf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e90  00000000  00000000  0003f43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfa47  00000000  00000000  000502cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011fd16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004700  00000000  00000000  0011fd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0012445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a5c 	.word	0x08009a5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08009a5c 	.word	0x08009a5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f000 fd4b 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f847 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f000 f9a7 	bl	8001064 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d16:	f000 f975 	bl	8001004 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d1a:	f000 f89f 	bl	8000e5c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d1e:	f000 f90d 	bl	8000f3c <MX_DAC1_Init>
  MX_SPI1_Init();
 8000d22:	f000 f935 	bl	8000f90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000d26:	481b      	ldr	r0, [pc, #108]	@ (8000d94 <main+0x90>)
 8000d28:	f000 ff9c 	bl	8001c64 <HAL_ADC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	481a      	ldr	r0, [pc, #104]	@ (8000d98 <main+0x94>)
 8000d30:	f001 ff90 	bl	8002c54 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	4816      	ldr	r0, [pc, #88]	@ (8000d94 <main+0x90>)
 8000d3a:	f001 f8a9 	bl	8001e90 <HAL_ADC_PollForConversion>
	  // Get ADC value
	  uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000d3e:	4815      	ldr	r0, [pc, #84]	@ (8000d94 <main+0x90>)
 8000d40:	f001 f9a8 	bl	8002094 <HAL_ADC_GetValue>
 8000d44:	4603      	mov	r3, r0
 8000d46:	81fb      	strh	r3, [r7, #14]


	  // Scale it to a floating point value (adjust the scaling if needed)
	  float x0 = (float)adc_value;  // Example scaling for 12-bit ADC
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d52:	edc7 7a02 	vstr	s15, [r7, #8]

	  // Apply high-pass filter to the low-pass output
	  float high_pass_output = high_pass_filter(x0) + 550;
 8000d56:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d5a:	f000 fa4f 	bl	80011fc <high_pass_filter>
 8000d5e:	eef0 7a40 	vmov.f32	s15, s0
 8000d62:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000d9c <main+0x98>
 8000d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d6a:	edc7 7a01 	vstr	s15, [r7, #4]

	  // Apply low-pass filter to the input
	  float low_pass_output = low_pass_filter(high_pass_output);
 8000d6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d72:	f000 f9c9 	bl	8001108 <low_pass_filter>
 8000d76:	ed87 0a00 	vstr	s0, [r7]
//	  float band_stop = (low_pass_output - high_pass_output);



	  // Write ADC value to DAC
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, high_pass_output);
 8000d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d82:	ee17 3a90 	vmov	r3, s15
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <main+0x94>)
 8000d8c:	f001 ff3d 	bl	8002c0a <HAL_DAC_SetValue>
  {
 8000d90:	bf00      	nop
 8000d92:	e7cf      	b.n	8000d34 <main+0x30>
 8000d94:	20000230 	.word	0x20000230
 8000d98:	20000280 	.word	0x20000280
 8000d9c:	44098000 	.word	0x44098000

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0a6      	sub	sp, #152	@ 0x98
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000daa:	2228      	movs	r2, #40	@ 0x28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fa7d 	bl	80062ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2258      	movs	r2, #88	@ 0x58
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fa6f 	bl	80062ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000de8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f94a 	bl	8003098 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 fa71 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f988 	bl	8004140 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e36:	f000 fa5b 	bl	80012f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fb9b 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e50:	f000 fa4e 	bl	80012f0 <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3798      	adds	r7, #152	@ 0x98
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000e80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000e88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eda:	4817      	ldr	r0, [pc, #92]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000edc:	f000 fcc8 	bl	8001870 <HAL_ADC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ee6:	f000 fa03 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000ef6:	f001 fbc5 	bl	8002684 <HAL_ADCEx_MultiModeConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000f00:	f000 f9f6 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_ADC1_Init+0xdc>)
 8000f22:	f001 f8c5 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000f2c:	f000 f9e0 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000230 	.word	0x20000230

08000f3c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_DAC1_Init+0x4c>)
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <MX_DAC1_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_DAC1_Init+0x4c>)
 8000f54:	f001 fe37 	bl	8002bc6 <HAL_DAC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000f5e:	f000 f9c7 	bl	80012f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_DAC1_Init+0x4c>)
 8000f72:	f001 feba 	bl	8002cea <HAL_DAC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000f7c:	f000 f9b8 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000280 	.word	0x20000280
 8000f8c:	40007400 	.word	0x40007400

08000f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000f96:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <MX_SPI1_Init+0x70>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fa8:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_SPI1_Init+0x6c>)
 8000fe8:	f003 fce8 	bl	80049bc <HAL_SPI_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000ff2:	f000 f97d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000294 	.word	0x20000294
 8001000:	40013000 	.word	0x40013000

08001004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_USART2_UART_Init+0x58>)
 800100a:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <MX_USART2_UART_Init+0x5c>)
 800100c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001010:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_USART2_UART_Init+0x58>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_USART2_UART_Init+0x58>)
 8001048:	f003 fd63 	bl	8004b12 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001052:	f000 f94d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002f8 	.word	0x200002f8
 8001060:	40004400 	.word	0x40004400

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_GPIO_Init+0x9c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <MX_GPIO_Init+0x9c>)
 8001080:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_GPIO_Init+0x9c>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_GPIO_Init+0x9c>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a1a      	ldr	r2, [pc, #104]	@ (8001100 <MX_GPIO_Init+0x9c>)
 8001098:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_GPIO_Init+0x9c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_GPIO_Init+0xa0>)
 80010f2:	f001 fe47 	bl	8002d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	@ 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800

08001108 <low_pass_filter>:

/* USER CODE BEGIN 4 */
// Function to apply the filter to the ADC data
float low_pass_filter(float x0) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Shift old samples in the buffer
    for (int i = FILTER_ORDER; i > 0; i--) {
 8001112:	2301      	movs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e018      	b.n	800114a <low_pass_filter+0x42>
        x_lp[i] = x_lp[i - 1];
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3b01      	subs	r3, #1
 800111c:	4a33      	ldr	r2, [pc, #204]	@ (80011ec <low_pass_filter+0xe4>)
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4931      	ldr	r1, [pc, #196]	@ (80011ec <low_pass_filter+0xe4>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	601a      	str	r2, [r3, #0]
        y_lp[i] = y_lp[i - 1];
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a2f      	ldr	r2, [pc, #188]	@ (80011f0 <low_pass_filter+0xe8>)
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	492d      	ldr	r1, [pc, #180]	@ (80011f0 <low_pass_filter+0xe8>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	601a      	str	r2, [r3, #0]
    for (int i = FILTER_ORDER; i > 0; i--) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b01      	subs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dce3      	bgt.n	8001118 <low_pass_filter+0x10>
    }

    // Add the new sample to the buffer
    x_lp[0] = x0;
 8001150:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <low_pass_filter+0xe4>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]

    // Apply the difference equation (numerator and denominator)
    y_lp[0] = b_lp[0] * x_lp[0];
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <low_pass_filter+0xec>)
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <low_pass_filter+0xe4>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <low_pass_filter+0xe8>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < FILTER_ORDER + 1; i++) {
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	e02e      	b.n	80011d0 <low_pass_filter+0xc8>
        y_lp[0] += b_lp[i] * x_lp[i];
 8001172:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <low_pass_filter+0xe8>)
 8001174:	ed93 7a00 	vldr	s14, [r3]
 8001178:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <low_pass_filter+0xec>)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	edd3 6a00 	vldr	s13, [r3]
 8001184:	4a19      	ldr	r2, [pc, #100]	@ (80011ec <low_pass_filter+0xe4>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <low_pass_filter+0xe8>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
        y_lp[0] -= a_lp[i] * y_lp[i];
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <low_pass_filter+0xe8>)
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <low_pass_filter+0xf0>)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	edd3 6a00 	vldr	s13, [r3]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <low_pass_filter+0xe8>)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <low_pass_filter+0xe8>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < FILTER_ORDER + 1; i++) {
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3301      	adds	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	ddcd      	ble.n	8001172 <low_pass_filter+0x6a>
    }

    return y_lp[0];  // Return filtered output
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <low_pass_filter+0xe8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	ee07 3a90 	vmov	s15, r3
}
 80011de:	eeb0 0a67 	vmov.f32	s0, s15
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000210 	.word	0x20000210
 80011f0:	20000218 	.word	0x20000218
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008

080011fc <high_pass_filter>:

// High-pass filter function
float high_pass_filter(float x0) {
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	ed87 0a01 	vstr	s0, [r7, #4]
    // Shift old samples in the buffer
    for (int i = FILTER_ORDER; i > 0; i--) {
 8001206:	2301      	movs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e018      	b.n	800123e <high_pass_filter+0x42>
        x_hp[i] = x_hp[i - 1];
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a33      	ldr	r2, [pc, #204]	@ (80012e0 <high_pass_filter+0xe4>)
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4931      	ldr	r1, [pc, #196]	@ (80012e0 <high_pass_filter+0xe4>)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	601a      	str	r2, [r3, #0]
        y_hp[i] = y_hp[i - 1];
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3b01      	subs	r3, #1
 8001226:	4a2f      	ldr	r2, [pc, #188]	@ (80012e4 <high_pass_filter+0xe8>)
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	492d      	ldr	r1, [pc, #180]	@ (80012e4 <high_pass_filter+0xe8>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	601a      	str	r2, [r3, #0]
    for (int i = FILTER_ORDER; i > 0; i--) {
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	dce3      	bgt.n	800120c <high_pass_filter+0x10>
    }

    // Add new input sample to the buffer
    x_hp[0] = x0;
 8001244:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <high_pass_filter+0xe4>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]

    // Apply the difference equation (numerator and denominator)
    y_hp[0] = b_hp[0] * x_hp[0];
 800124a:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <high_pass_filter+0xec>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <high_pass_filter+0xe4>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125a:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <high_pass_filter+0xe8>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < FILTER_ORDER + 1; i++) {
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	e02e      	b.n	80012c4 <high_pass_filter+0xc8>
        y_hp[0] += b_hp[i] * x_hp[i];
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <high_pass_filter+0xe8>)
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	4a1e      	ldr	r2, [pc, #120]	@ (80012e8 <high_pass_filter+0xec>)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	edd3 6a00 	vldr	s13, [r3]
 8001278:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <high_pass_filter+0xe4>)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <high_pass_filter+0xe8>)
 800128e:	edc3 7a00 	vstr	s15, [r3]
        y_hp[0] -= a_hp[i] * y_hp[i];
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <high_pass_filter+0xe8>)
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <high_pass_filter+0xf0>)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	edd3 6a00 	vldr	s13, [r3]
 80012a4:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <high_pass_filter+0xe8>)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <high_pass_filter+0xe8>)
 80012ba:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < FILTER_ORDER + 1; i++) {
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	ddcd      	ble.n	8001266 <high_pass_filter+0x6a>
    }

    return y_hp[0];  // Return filtered output
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <high_pass_filter+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
}
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000220 	.word	0x20000220
 80012e4:	20000228 	.word	0x20000228
 80012e8:	20000010 	.word	0x20000010
 80012ec:	20000018 	.word	0x20000018

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_MspInit+0x44>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_MspInit+0x44>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x44>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x44>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f001 fc14 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001364:	d124      	bne.n	80013b0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_ADC_MspInit+0x74>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <HAL_ADC_MspInit+0x74>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6153      	str	r3, [r2, #20]
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <HAL_ADC_MspInit+0x74>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_ADC_MspInit+0x74>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_ADC_MspInit+0x74>)
 8001384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001388:	6153      	str	r3, [r2, #20]
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_ADC_MspInit+0x74>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ac:	f001 fcea 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	@ 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a15      	ldr	r2, [pc, #84]	@ (8001430 <HAL_DAC_MspInit+0x74>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d124      	bne.n	8001428 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_DAC_MspInit+0x78>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <HAL_DAC_MspInit+0x78>)
 80013e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_DAC_MspInit+0x78>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <HAL_DAC_MspInit+0x78>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <HAL_DAC_MspInit+0x78>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_DAC_MspInit+0x78>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800140e:	2310      	movs	r3, #16
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f001 fcae 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40007400 	.word	0x40007400
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <HAL_SPI_MspInit+0x7c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d128      	bne.n	80014ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_SPI_MspInit+0x80>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <HAL_SPI_MspInit+0x80>)
 8001460:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_SPI_MspInit+0x80>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_SPI_MspInit+0x80>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <HAL_SPI_MspInit+0x80>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_SPI_MspInit+0x80>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800148a:	2360      	movs	r3, #96	@ 0x60
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149a:	2305      	movs	r3, #5
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f001 fc6c 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013000 	.word	0x40013000
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <HAL_UART_MspInit+0x7c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d128      	bne.n	8001530 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <HAL_UART_MspInit+0x80>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_UART_MspInit+0x80>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800150e:	230c      	movs	r3, #12
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151e:	2307      	movs	r3, #7
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f001 fc2a 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40004400 	.word	0x40004400
 800153c:	40021000 	.word	0x40021000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 f94b 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}

0800159e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <_kill>:

int _kill(int pid, int sig)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b8:	f004 fecc 	bl	8006354 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	2216      	movs	r2, #22
 80015c0:	601a      	str	r2, [r3, #0]
  return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_exit>:

void _exit (int status)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d6:	f04f 31ff 	mov.w	r1, #4294967295
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffe7 	bl	80015ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <_exit+0x12>

080015e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
  }

  return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
  }
  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800167e:	605a      	str	r2, [r3, #4]
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f004 fe30 	bl	8006354 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20010000 	.word	0x20010000
 8001720:	00000400 	.word	0x00000400
 8001724:	20000380 	.word	0x20000380
 8001728:	200004d8 	.word	0x200004d8

0800172c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001788 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001754:	f7ff ffea 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177e:	f004 fdef 	bl	8006360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001782:	f7ff fabf 	bl	8000d04 <main>

08001786 <LoopForever>:

LoopForever:
    b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001788:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001794:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 8001798:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800179c:	200004d4 	.word	0x200004d4

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_Init+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_Init+0x28>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f001 f9d3 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fd9c 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 f9dd 	bl	8002bae <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f001 f9b3 	bl	8002b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000020 	.word	0x20000020
 8001828:	20000028 	.word	0x20000028
 800182c:	20000024 	.word	0x20000024

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000028 	.word	0x20000028
 8001854:	20000384 	.word	0x20000384

08001858 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;  
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000384 	.word	0x20000384

08001870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b09a      	sub	sp, #104	@ 0x68
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e1e3      	b.n	8001c58 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d176      	bne.n	8001990 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d152      	bne.n	8001950 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fd3d 	bl	8001344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d13b      	bne.n	8001950 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 f829 	bl	8002930 <ADC_Disable>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d12f      	bne.n	8001950 <HAL_ADC_Init+0xe0>
 80018f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12b      	bne.n	8001950 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001900:	f023 0302 	bic.w	r3, r3, #2
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800191a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800192a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b92      	ldr	r3, [pc, #584]	@ (8001b78 <HAL_ADC_Init+0x308>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a92      	ldr	r2, [pc, #584]	@ (8001b7c <HAL_ADC_Init+0x30c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001942:	e002      	b.n	800194a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3b01      	subs	r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800196c:	d110      	bne.n	8001990 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f023 0312 	bic.w	r3, r3, #18
 8001976:	f043 0210 	orr.w	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8150 	bne.w	8001c3e <HAL_ADC_Init+0x3ce>
 800199e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 814b 	bne.w	8001c3e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 8143 	bne.w	8001c3e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d0:	d004      	beq.n	80019dc <HAL_ADC_Init+0x16c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001b80 <HAL_ADC_Init+0x310>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_Init+0x170>
 80019dc:	4b69      	ldr	r3, [pc, #420]	@ (8001b84 <HAL_ADC_Init+0x314>)
 80019de:	e000      	b.n	80019e2 <HAL_ADC_Init+0x172>
 80019e0:	4b69      	ldr	r3, [pc, #420]	@ (8001b88 <HAL_ADC_Init+0x318>)
 80019e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ec:	d102      	bne.n	80019f4 <HAL_ADC_Init+0x184>
 80019ee:	4b64      	ldr	r3, [pc, #400]	@ (8001b80 <HAL_ADC_Init+0x310>)
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e01a      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a61      	ldr	r2, [pc, #388]	@ (8001b80 <HAL_ADC_Init+0x310>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d103      	bne.n	8001a06 <HAL_ADC_Init+0x196>
 80019fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e011      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a60      	ldr	r2, [pc, #384]	@ (8001b8c <HAL_ADC_Init+0x31c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d102      	bne.n	8001a16 <HAL_ADC_Init+0x1a6>
 8001a10:	4b5f      	ldr	r3, [pc, #380]	@ (8001b90 <HAL_ADC_Init+0x320>)
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e009      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b90 <HAL_ADC_Init+0x320>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <HAL_ADC_Init+0x1b6>
 8001a20:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <HAL_ADC_Init+0x31c>)
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e001      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_ADC_Init+0x1da>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Init+0x1da>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_ADC_Init+0x1dc>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11c      	bne.n	8001a8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d010      	beq.n	8001a78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_ADC_Init+0x202>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Init+0x202>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_Init+0x204>
 8001a72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7e5b      	ldrb	r3, [r3, #25]
 8001a8e:	035b      	lsls	r3, r3, #13
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a94:	2a01      	cmp	r2, #1
 8001a96:	d002      	beq.n	8001a9e <HAL_ADC_Init+0x22e>
 8001a98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_Init+0x230>
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d11b      	bne.n	8001af6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7e5b      	ldrb	r3, [r3, #25]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	3b01      	subs	r3, #1
 8001acc:	045a      	lsls	r2, r3, #17
 8001ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ad8:	e00d      	b.n	8001af6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001ae2:	f043 0220 	orr.w	r2, r3, #32
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d054      	beq.n	8001ba8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <HAL_ADC_Init+0x31c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_Init+0x2a2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a20      	ldr	r2, [pc, #128]	@ (8001b90 <HAL_ADC_Init+0x320>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d140      	bne.n	8001b94 <HAL_ADC_Init+0x324>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001b1a:	d02a      	beq.n	8001b72 <HAL_ADC_Init+0x302>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b24:	d022      	beq.n	8001b6c <HAL_ADC_Init+0x2fc>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001b2e:	d01a      	beq.n	8001b66 <HAL_ADC_Init+0x2f6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001b38:	d012      	beq.n	8001b60 <HAL_ADC_Init+0x2f0>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001b42:	d00a      	beq.n	8001b5a <HAL_ADC_Init+0x2ea>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001b4c:	d002      	beq.n	8001b54 <HAL_ADC_Init+0x2e4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	e023      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b58:	e020      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b5e:	e01d      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001b64:	e01a      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b6a:	e017      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b6c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001b70:	e014      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b72:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001b76:	e011      	b.n	8001b9c <HAL_ADC_Init+0x32c>
 8001b78:	20000020 	.word	0x20000020
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	50000100 	.word	0x50000100
 8001b84:	50000300 	.word	0x50000300
 8001b88:	50000700 	.word	0x50000700
 8001b8c:	50000400 	.word	0x50000400
 8001b90:	50000500 	.word	0x50000500
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d114      	bne.n	8001be0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bc4:	f023 0302 	bic.w	r3, r3, #2
 8001bc8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7e1b      	ldrb	r3, [r3, #24]
 8001bce:	039a      	lsls	r2, r3, #14
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <HAL_ADC_Init+0x3f0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10c      	bne.n	8001c16 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f023 010f 	bic.w	r1, r3, #15
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c14:	e007      	b.n	8001c26 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020f 	bic.w	r2, r2, #15
 8001c24:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f023 0303 	bic.w	r3, r3, #3
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c3c:	e00a      	b.n	8001c54 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f023 0312 	bic.w	r3, r3, #18
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3768      	adds	r7, #104	@ 0x68
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	fff0c007 	.word	0xfff0c007

08001c64 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80f9 	bne.w	8001e72 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Start+0x2a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0f4      	b.n	8001e78 <HAL_ADC_Start+0x214>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fde6 	bl	8002868 <ADC_Enable>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 80e0 	bne.w	8001e68 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cc4:	d004      	beq.n	8001cd0 <HAL_ADC_Start+0x6c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6d      	ldr	r2, [pc, #436]	@ (8001e80 <HAL_ADC_Start+0x21c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_Start+0x7a>
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e84 <HAL_ADC_Start+0x220>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d010      	beq.n	8001cfe <HAL_ADC_Start+0x9a>
 8001cdc:	e005      	b.n	8001cea <HAL_ADC_Start+0x86>
 8001cde:	4b6a      	ldr	r3, [pc, #424]	@ (8001e88 <HAL_ADC_Start+0x224>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_ADC_Start+0x9a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf2:	d004      	beq.n	8001cfe <HAL_ADC_Start+0x9a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a64      	ldr	r2, [pc, #400]	@ (8001e8c <HAL_ADC_Start+0x228>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d115      	bne.n	8001d2a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d036      	beq.n	8001d86 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d28:	e02d      	b.n	8001d86 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_Start+0xe6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4e      	ldr	r2, [pc, #312]	@ (8001e80 <HAL_ADC_Start+0x21c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10a      	bne.n	8001d60 <HAL_ADC_Start+0xfc>
 8001d4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e008      	b.n	8001d72 <HAL_ADC_Start+0x10e>
 8001d60:	4b4a      	ldr	r3, [pc, #296]	@ (8001e8c <HAL_ADC_Start+0x228>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	f023 0206 	bic.w	r2, r3, #6
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	221c      	movs	r2, #28
 8001db6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_Start+0x168>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001e80 <HAL_ADC_Start+0x21c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_Start+0x176>
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_ADC_Start+0x220>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d03e      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001dd8:	e005      	b.n	8001de6 <HAL_ADC_Start+0x182>
 8001dda:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_ADC_Start+0x224>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d037      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dee:	d004      	beq.n	8001dfa <HAL_ADC_Start+0x196>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a22      	ldr	r2, [pc, #136]	@ (8001e80 <HAL_ADC_Start+0x21c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_Start+0x1a4>
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_ADC_Start+0x220>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d027      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001e06:	e005      	b.n	8001e14 <HAL_ADC_Start+0x1b0>
 8001e08:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <HAL_ADC_Start+0x224>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d020      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_Start+0x1c4>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_ADC_Start+0x21c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d106      	bne.n	8001e36 <HAL_ADC_Start+0x1d2>
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <HAL_ADC_Start+0x220>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d010      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001e34:	e005      	b.n	8001e42 <HAL_ADC_Start+0x1de>
 8001e36:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <HAL_ADC_Start+0x224>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d009      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Start+0x1f2>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <HAL_ADC_Start+0x228>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10f      	bne.n	8001e76 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0204 	orr.w	r2, r2, #4
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	e006      	b.n	8001e76 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001e70:	e001      	b.n	8001e76 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
 8001e74:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	50000100 	.word	0x50000100
 8001e84:	50000300 	.word	0x50000300
 8001e88:	50000700 	.word	0x50000700
 8001e8c:	50000400 	.word	0x50000400

08001e90 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d102      	bne.n	8001eac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e03a      	b.n	8001f22 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ADC_PollForConversion+0x30>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a72      	ldr	r2, [pc, #456]	@ (8002084 <HAL_ADC_PollForConversion+0x1f4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x34>
 8001ec0:	4b71      	ldr	r3, [pc, #452]	@ (8002088 <HAL_ADC_PollForConversion+0x1f8>)
 8001ec2:	e000      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x36>
 8001ec4:	4b71      	ldr	r3, [pc, #452]	@ (800208c <HAL_ADC_PollForConversion+0x1fc>)
 8001ec6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d112      	bne.n	8001efa <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d11d      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f043 0220 	orr.w	r2, r3, #32
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0bf      	b.n	800207a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0ad      	b.n	800207a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f1e:	230c      	movs	r3, #12
 8001f20:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f2a:	d004      	beq.n	8001f36 <HAL_ADC_PollForConversion+0xa6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a54      	ldr	r2, [pc, #336]	@ (8002084 <HAL_ADC_PollForConversion+0x1f4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d106      	bne.n	8001f44 <HAL_ADC_PollForConversion+0xb4>
 8001f36:	4b54      	ldr	r3, [pc, #336]	@ (8002088 <HAL_ADC_PollForConversion+0x1f8>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d010      	beq.n	8001f64 <HAL_ADC_PollForConversion+0xd4>
 8001f42:	e005      	b.n	8001f50 <HAL_ADC_PollForConversion+0xc0>
 8001f44:	4b51      	ldr	r3, [pc, #324]	@ (800208c <HAL_ADC_PollForConversion+0x1fc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <HAL_ADC_PollForConversion+0xd4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f58:	d004      	beq.n	8001f64 <HAL_ADC_PollForConversion+0xd4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <HAL_ADC_PollForConversion+0x200>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d104      	bne.n	8001f6e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e00f      	b.n	8001f8e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_PollForConversion+0xf2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a41      	ldr	r2, [pc, #260]	@ (8002084 <HAL_ADC_PollForConversion+0x1f4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d102      	bne.n	8001f88 <HAL_ADC_PollForConversion+0xf8>
 8001f82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f86:	e000      	b.n	8001f8a <HAL_ADC_PollForConversion+0xfa>
 8001f88:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_ADC_PollForConversion+0x200>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001f8e:	f7ff fc63 	bl	8001858 <HAL_GetTick>
 8001f92:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f94:	e021      	b.n	8001fda <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d01d      	beq.n	8001fda <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_ADC_PollForConversion+0x124>
 8001fa4:	f7ff fc58 	bl	8001858 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d212      	bcs.n	8001fda <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f043 0204 	orr.w	r2, r3, #4
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0d6      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d131      	bne.n	8002066 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002008:	2b00      	cmp	r3, #0
 800200a:	d12c      	bne.n	8002066 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d125      	bne.n	8002066 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d112      	bne.n	800204e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d112      	bne.n	8002066 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40
 800204c:	e00b      	b.n	8002066 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	50000100 	.word	0x50000100
 8002088:	50000300 	.word	0x50000300
 800208c:	50000700 	.word	0x50000700
 8002090:	50000400 	.word	0x50000400

08002094 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b09b      	sub	sp, #108	@ 0x6c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x22>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e2c8      	b.n	8002664 <HAL_ADC_ConfigChannel+0x5b4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 82ac 	bne.w	8002642 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d81c      	bhi.n	800212c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	461a      	mov	r2, r3
 8002106:	231f      	movs	r3, #31
 8002108:	4093      	lsls	r3, r2
 800210a:	43db      	mvns	r3, r3
 800210c:	4019      	ands	r1, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
 800212a:	e063      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b09      	cmp	r3, #9
 8002132:	d81e      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	3b1e      	subs	r3, #30
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	4019      	ands	r1, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	3b1e      	subs	r3, #30
 8002164:	fa00 f203 	lsl.w	r2, r0, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002170:	e040      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b0e      	cmp	r3, #14
 8002178:	d81e      	bhi.n	80021b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	3b3c      	subs	r3, #60	@ 0x3c
 800218e:	221f      	movs	r2, #31
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	3b3c      	subs	r3, #60	@ 0x3c
 80021aa:	fa00 f203 	lsl.w	r2, r0, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80021b6:	e01d      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	3b5a      	subs	r3, #90	@ 0x5a
 80021cc:	221f      	movs	r2, #31
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	4019      	ands	r1, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	3b5a      	subs	r3, #90	@ 0x5a
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 80e5 	bne.w	80023ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b09      	cmp	r3, #9
 800220a:	d91c      	bls.n	8002246 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6999      	ldr	r1, [r3, #24]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	3b1e      	subs	r3, #30
 800221e:	2207      	movs	r2, #7
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	4019      	ands	r1, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6898      	ldr	r0, [r3, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	3b1e      	subs	r3, #30
 8002238:	fa00 f203 	lsl.w	r2, r0, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	619a      	str	r2, [r3, #24]
 8002244:	e019      	b.n	800227a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6959      	ldr	r1, [r3, #20]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	2207      	movs	r2, #7
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	4019      	ands	r1, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6898      	ldr	r0, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	3b01      	subs	r3, #1
 8002298:	2b03      	cmp	r3, #3
 800229a:	d84f      	bhi.n	800233c <HAL_ADC_ConfigChannel+0x28c>
 800229c:	a201      	add	r2, pc, #4	@ (adr r2, 80022a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	080022d7 	.word	0x080022d7
 80022ac:	080022f9 	.word	0x080022f9
 80022b0:	0800231b 	.word	0x0800231b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ba:	4b99      	ldr	r3, [pc, #612]	@ (8002520 <HAL_ADC_ConfigChannel+0x470>)
 80022bc:	4013      	ands	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	0691      	lsls	r1, r2, #26
 80022c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022c6:	430a      	orrs	r2, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022d2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022d4:	e07b      	b.n	80023ce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022dc:	4b90      	ldr	r3, [pc, #576]	@ (8002520 <HAL_ADC_ConfigChannel+0x470>)
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	0691      	lsls	r1, r2, #26
 80022e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022e8:	430a      	orrs	r2, r1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022f4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f6:	e06a      	b.n	80023ce <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022fe:	4b88      	ldr	r3, [pc, #544]	@ (8002520 <HAL_ADC_ConfigChannel+0x470>)
 8002300:	4013      	ands	r3, r2
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	0691      	lsls	r1, r2, #26
 8002308:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800230a:	430a      	orrs	r2, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002316:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002318:	e059      	b.n	80023ce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002320:	4b7f      	ldr	r3, [pc, #508]	@ (8002520 <HAL_ADC_ConfigChannel+0x470>)
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	0691      	lsls	r1, r2, #26
 800232a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800232c:	430a      	orrs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002338:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800233a:	e048      	b.n	80023ce <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800235e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002382:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023a6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80023cc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x33e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x33e>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x340>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 8131 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d00f      	beq.n	800241e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43da      	mvns	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	400a      	ands	r2, r1
 8002418:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800241c:	e049      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d91c      	bls.n	800247a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6999      	ldr	r1, [r3, #24]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1b      	subs	r3, #27
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	4019      	ands	r1, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6898      	ldr	r0, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1b      	subs	r3, #27
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	619a      	str	r2, [r3, #24]
 8002478:	e01b      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6959      	ldr	r1, [r3, #20]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	2207      	movs	r2, #7
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	4019      	ands	r1, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6898      	ldr	r0, [r3, #8]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	fa00 f203 	lsl.w	r2, r0, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ba:	d004      	beq.n	80024c6 <HAL_ADC_ConfigChannel+0x416>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	@ (8002524 <HAL_ADC_ConfigChannel+0x474>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x41a>
 80024c6:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_ADC_ConfigChannel+0x478>)
 80024c8:	e000      	b.n	80024cc <HAL_ADC_ConfigChannel+0x41c>
 80024ca:	4b18      	ldr	r3, [pc, #96]	@ (800252c <HAL_ADC_ConfigChannel+0x47c>)
 80024cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d015      	beq.n	800250e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024e6:	2b11      	cmp	r3, #17
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	f040 80ac 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 80a5 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002516:	d10b      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x480>
 8002518:	4b02      	ldr	r3, [pc, #8]	@ (8002524 <HAL_ADC_ConfigChannel+0x474>)
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e023      	b.n	8002566 <HAL_ADC_ConfigChannel+0x4b6>
 800251e:	bf00      	nop
 8002520:	83fff000 	.word	0x83fff000
 8002524:	50000100 	.word	0x50000100
 8002528:	50000300 	.word	0x50000300
 800252c:	50000700 	.word	0x50000700
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4e      	ldr	r2, [pc, #312]	@ (8002670 <HAL_ADC_ConfigChannel+0x5c0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d103      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x492>
 800253a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e011      	b.n	8002566 <HAL_ADC_ConfigChannel+0x4b6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4b      	ldr	r2, [pc, #300]	@ (8002674 <HAL_ADC_ConfigChannel+0x5c4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x4a2>
 800254c:	4b4a      	ldr	r3, [pc, #296]	@ (8002678 <HAL_ADC_ConfigChannel+0x5c8>)
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e009      	b.n	8002566 <HAL_ADC_ConfigChannel+0x4b6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <HAL_ADC_ConfigChannel+0x5c8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x4b2>
 800255c:	4b45      	ldr	r3, [pc, #276]	@ (8002674 <HAL_ADC_ConfigChannel+0x5c4>)
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e001      	b.n	8002566 <HAL_ADC_ConfigChannel+0x4b6>
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d108      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x4d6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x4d6>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_ADC_ConfigChannel+0x4d8>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d150      	bne.n	800262e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800258c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x4fe>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x4fe>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x500>
 80025ae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d13c      	bne.n	800262e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d11d      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x548>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c4:	d118      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025d2:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <HAL_ADC_ConfigChannel+0x5cc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <HAL_ADC_ConfigChannel+0x5d0>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	0c9a      	lsrs	r2, r3, #18
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f6:	e02e      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b11      	cmp	r3, #17
 80025fe:	d10b      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x568>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002608:	d106      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800260a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002614:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002616:	e01e      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b12      	cmp	r3, #18
 800261e:	d11a      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800262a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800262c:	e013      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002640:	e00a      	b.n	8002658 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002654:	e000      	b.n	8002658 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002656:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002664:	4618      	mov	r0, r3
 8002666:	376c      	adds	r7, #108	@ 0x6c
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	50000100 	.word	0x50000100
 8002674:	50000400 	.word	0x50000400
 8002678:	50000500 	.word	0x50000500
 800267c:	20000020 	.word	0x20000020
 8002680:	431bde83 	.word	0x431bde83

08002684 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002684:	b480      	push	{r7}
 8002686:	b099      	sub	sp, #100	@ 0x64
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269c:	d102      	bne.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800269e:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	e01a      	b.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d103      	bne.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80026ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	e011      	b.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a67      	ldr	r2, [pc, #412]	@ (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d102      	bne.n	80026c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026c0:	4b66      	ldr	r3, [pc, #408]	@ (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	e009      	b.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a64      	ldr	r2, [pc, #400]	@ (800285c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026d0:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	e001      	b.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b0      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e0a9      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 808d 	bne.w	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 8086 	bne.w	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a4b      	ldr	r2, [pc, #300]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800272c:	4b4c      	ldr	r3, [pc, #304]	@ (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800272e:	e000      	b.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002730:	4b4c      	ldr	r3, [pc, #304]	@ (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002732:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d040      	beq.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800273c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800274e:	035b      	lsls	r3, r3, #13
 8002750:	430b      	orrs	r3, r1
 8002752:	431a      	orrs	r2, r3
 8002754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002756:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d15c      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800279a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d14b      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80027a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027a8:	f023 030f 	bic.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	6811      	ldr	r1, [r2, #0]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027bc:	e03c      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d108      	bne.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d123      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800280c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800281a:	f023 030f 	bic.w	r3, r3, #15
 800281e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002820:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002822:	e009      	b.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002836:	e000      	b.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002838:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002842:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002846:	4618      	mov	r0, r3
 8002848:	3764      	adds	r7, #100	@ 0x64
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	50000100 	.word	0x50000100
 8002858:	50000400 	.word	0x50000400
 800285c:	50000500 	.word	0x50000500
 8002860:	50000300 	.word	0x50000300
 8002864:	50000700 	.word	0x50000700

08002868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <ADC_Enable+0x2c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <ADC_Enable+0x2c>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <ADC_Enable+0x2e>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d143      	bne.n	8002922 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	4b22      	ldr	r3, [pc, #136]	@ (800292c <ADC_Enable+0xc4>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f043 0210 	orr.w	r2, r3, #16
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02f      	b.n	8002924 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028d4:	f7fe ffc0 	bl	8001858 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028da:	e01b      	b.n	8002914 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028dc:	f7fe ffbc 	bl	8001858 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d914      	bls.n	8002914 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d00d      	beq.n	8002914 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d1dc      	bne.n	80028dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	8000003f 	.word	0x8000003f

08002930 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <ADC_Disable+0x2c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <ADC_Disable+0x2c>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <ADC_Disable+0x2e>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d047      	beq.n	80029f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030d 	and.w	r3, r3, #13
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10f      	bne.n	8002990 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0202 	orr.w	r2, r2, #2
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2203      	movs	r2, #3
 8002986:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002988:	f7fe ff66 	bl	8001858 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800298e:	e029      	b.n	80029e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f043 0210 	orr.w	r2, r3, #16
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e023      	b.n	80029f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029ac:	f7fe ff54 	bl	8001858 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d914      	bls.n	80029e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10d      	bne.n	80029e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f043 0210 	orr.w	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d0dc      	beq.n	80029ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	@ (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff47 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff5c 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff8e 	bl	8002ab4 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5d 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ffb0 	bl	8002b1c <SysTick_Config>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e014      	b.n	8002c02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe fbe7 	bl	80013bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002c0a:	b480      	push	{r7}
 8002c0c:	b087      	sub	sp, #28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3308      	adds	r3, #8
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e004      	b.n	8002c3e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	461a      	mov	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	795b      	ldrb	r3, [r3, #5]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_DAC_Start+0x16>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e039      	b.n	8002cde <HAL_DAC_Start+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6819      	ldr	r1, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	409a      	lsls	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002c9a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002c9c:	d118      	bne.n	8002cd0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	e00f      	b.n	8002cd0 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002cba:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002cbe:	d107      	bne.n	8002cd0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0202 	orr.w	r2, r2, #2
 8002cce:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	795b      	ldrb	r3, [r3, #5]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_DAC_ConfigChannel+0x20>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e036      	b.n	8002d78 <HAL_DAC_ConfigChannel+0x8e>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2202      	movs	r2, #2
 8002d14:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002d1e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	22c0      	movs	r2, #192	@ 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	400a      	ands	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d92:	e160      	b.n	8003056 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8152 	beq.w	8003050 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d005      	beq.n	8002dc4 <HAL_GPIO_Init+0x40>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d130      	bne.n	8002e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0201 	and.w	r2, r3, #1
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d017      	beq.n	8002e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d123      	bne.n	8002eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	6939      	ldr	r1, [r7, #16]
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80ac 	beq.w	8003050 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8003074 <HAL_GPIO_Init+0x2f0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a5d      	ldr	r2, [pc, #372]	@ (8003074 <HAL_GPIO_Init+0x2f0>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <HAL_GPIO_Init+0x2f0>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f10:	4a59      	ldr	r2, [pc, #356]	@ (8003078 <HAL_GPIO_Init+0x2f4>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f3a:	d025      	beq.n	8002f88 <HAL_GPIO_Init+0x204>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4f      	ldr	r2, [pc, #316]	@ (800307c <HAL_GPIO_Init+0x2f8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01f      	beq.n	8002f84 <HAL_GPIO_Init+0x200>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a4e      	ldr	r2, [pc, #312]	@ (8003080 <HAL_GPIO_Init+0x2fc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d019      	beq.n	8002f80 <HAL_GPIO_Init+0x1fc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a4d      	ldr	r2, [pc, #308]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_GPIO_Init+0x1f8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a4c      	ldr	r2, [pc, #304]	@ (8003088 <HAL_GPIO_Init+0x304>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00d      	beq.n	8002f78 <HAL_GPIO_Init+0x1f4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800308c <HAL_GPIO_Init+0x308>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <HAL_GPIO_Init+0x1f0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a4a      	ldr	r2, [pc, #296]	@ (8003090 <HAL_GPIO_Init+0x30c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_GPIO_Init+0x1ec>
 8002f6c:	2306      	movs	r3, #6
 8002f6e:	e00c      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f70:	2307      	movs	r3, #7
 8002f72:	e00a      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f74:	2305      	movs	r3, #5
 8002f76:	e008      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e006      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e004      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e002      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_GPIO_Init+0x206>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	f002 0203 	and.w	r2, r2, #3
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4093      	lsls	r3, r2
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f9a:	4937      	ldr	r1, [pc, #220]	@ (8003078 <HAL_GPIO_Init+0x2f4>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fcc:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd2:	4b30      	ldr	r3, [pc, #192]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ff6:	4a27      	ldr	r2, [pc, #156]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffc:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003020:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800304a:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <HAL_GPIO_Init+0x310>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f ae97 	bne.w	8002d94 <HAL_GPIO_Init+0x10>
  }
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	40010000 	.word	0x40010000
 800307c:	48000400 	.word	0x48000400
 8003080:	48000800 	.word	0x48000800
 8003084:	48000c00 	.word	0x48000c00
 8003088:	48001000 	.word	0x48001000
 800308c:	48001400 	.word	0x48001400
 8003090:	48001800 	.word	0x48001800
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800309e:	af00      	add	r7, sp, #0
 80030a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f001 b83a 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 816f 	beq.w	80033b2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030d4:	4bb5      	ldr	r3, [pc, #724]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d00c      	beq.n	80030fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e0:	4bb2      	ldr	r3, [pc, #712]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d15c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x10e>
 80030ec:	4baf      	ldr	r3, [pc, #700]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f8:	d155      	bne.n	80031a6 <HAL_RCC_OscConfig+0x10e>
 80030fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030fe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800310e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_RCC_OscConfig+0x94>
 8003126:	4ba1      	ldr	r3, [pc, #644]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e015      	b.n	8003158 <HAL_RCC_OscConfig+0xc0>
 800312c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003130:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003140:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003144:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003148:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003154:	4b95      	ldr	r3, [pc, #596]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800315c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003160:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800316c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003170:	fab2 f282 	clz	r2, r2
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	f042 0220 	orr.w	r2, r2, #32
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	f002 021f 	and.w	r2, r2, #31
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f202 	lsl.w	r2, r1, r2
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8111 	beq.w	80033b0 <HAL_RCC_OscConfig+0x318>
 800318e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003192:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8108 	bne.w	80033b0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f000 bfc6 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12e>
 80031b8:	4b7c      	ldr	r3, [pc, #496]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a7b      	ldr	r2, [pc, #492]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	e036      	b.n	8003234 <HAL_RCC_OscConfig+0x19c>
 80031c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x158>
 80031d6:	4b75      	ldr	r3, [pc, #468]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a74      	ldr	r2, [pc, #464]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b72      	ldr	r3, [pc, #456]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a71      	ldr	r2, [pc, #452]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80031e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e021      	b.n	8003234 <HAL_RCC_OscConfig+0x19c>
 80031f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x184>
 8003202:	4b6a      	ldr	r3, [pc, #424]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a69      	ldr	r2, [pc, #420]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b67      	ldr	r3, [pc, #412]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a66      	ldr	r2, [pc, #408]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x19c>
 800321c:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a62      	ldr	r2, [pc, #392]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b60      	ldr	r3, [pc, #384]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5f      	ldr	r2, [pc, #380]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003232:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d059      	beq.n	80032f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe fb08 	bl	8001858 <HAL_GetTick>
 8003248:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324e:	f7fe fb03 	bl	8001858 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d902      	bls.n	8003264 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f000 bf67 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
 8003264:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003268:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003278:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_RCC_OscConfig+0x1fe>
 8003290:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x22a>
 8003296:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800329a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80032aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032ae:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80032b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032c6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80032ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80032ce:	fa92 f2a2 	rbit	r2, r2
 80032d2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80032d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f002 021f 	and.w	r2, r2, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ab      	beq.n	800324e <HAL_RCC_OscConfig+0x1b6>
 80032f6:	e05c      	b.n	80033b2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe faae 	bl	8001858 <HAL_GetTick>
 80032fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003302:	f7fe faa9 	bl	8001858 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d902      	bls.n	8003318 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	f000 bf0d 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
 8003318:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800331c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800332c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_RCC_OscConfig+0x2b2>
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	e015      	b.n	8003376 <HAL_RCC_OscConfig+0x2de>
 800334a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800334e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800335e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003362:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003366:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003372:	4b0e      	ldr	r3, [pc, #56]	@ (80033ac <HAL_RCC_OscConfig+0x314>)
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800337a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800337e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003382:	fa92 f2a2 	rbit	r2, r2
 8003386:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800338a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800338e:	fab2 f282 	clz	r2, r2
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f042 0220 	orr.w	r2, r2, #32
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	f002 021f 	and.w	r2, r2, #31
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ab      	bne.n	8003302 <HAL_RCC_OscConfig+0x26a>
 80033aa:	e002      	b.n	80033b2 <HAL_RCC_OscConfig+0x31a>
 80033ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 817f 	beq.w	80036c6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033c8:	4ba7      	ldr	r3, [pc, #668]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00c      	beq.n	80033ee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033d4:	4ba4      	ldr	r3, [pc, #656]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d173      	bne.n	80034c8 <HAL_RCC_OscConfig+0x430>
 80033e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80033e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ec:	d16c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x430>
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003400:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_RCC_OscConfig+0x386>
 8003418:	4b93      	ldr	r3, [pc, #588]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	e013      	b.n	8003446 <HAL_RCC_OscConfig+0x3ae>
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003430:	2302      	movs	r3, #2
 8003432:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003436:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003442:	4b89      	ldr	r3, [pc, #548]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	2202      	movs	r2, #2
 8003448:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800344c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003458:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800345c:	fab2 f282 	clz	r2, r2
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f002 021f 	and.w	r2, r2, #31
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCC_OscConfig+0x3f6>
 8003478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d002      	beq.n	800348e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f000 be52 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b76      	ldr	r3, [pc, #472]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	21f8      	movs	r1, #248	@ 0xf8
 80034a4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80034ac:	fa91 f1a1 	rbit	r1, r1
 80034b0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80034b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80034b8:	fab1 f181 	clz	r1, r1
 80034bc:	b2c9      	uxtb	r1, r1
 80034be:	408b      	lsls	r3, r1
 80034c0:	4969      	ldr	r1, [pc, #420]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e0fe      	b.n	80036c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8088 	beq.w	80035ea <HAL_RCC_OscConfig+0x552>
 80034da:	2301      	movs	r3, #1
 80034dc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80034ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	461a      	mov	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fe f9a7 	bl	8001858 <HAL_GetTick>
 800350a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7fe f9a2 	bl	8001858 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d902      	bls.n	8003526 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	f000 be06 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003538:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d102      	bne.n	8003556 <HAL_RCC_OscConfig+0x4be>
 8003550:	4b45      	ldr	r3, [pc, #276]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	e013      	b.n	800357e <HAL_RCC_OscConfig+0x4e6>
 8003556:	2302      	movs	r3, #2
 8003558:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003568:	2302      	movs	r3, #2
 800356a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800356e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800357a:	4b3b      	ldr	r3, [pc, #236]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	2202      	movs	r2, #2
 8003580:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003584:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003588:	fa92 f2a2 	rbit	r2, r2
 800358c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003590:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f042 0220 	orr.w	r2, r2, #32
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f002 021f 	and.w	r2, r2, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0af      	beq.n	8003510 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	21f8      	movs	r1, #248	@ 0xf8
 80035c6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80035ce:	fa91 f1a1 	rbit	r1, r1
 80035d2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80035d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80035da:	fab1 f181 	clz	r1, r1
 80035de:	b2c9      	uxtb	r1, r1
 80035e0:	408b      	lsls	r3, r1
 80035e2:	4921      	ldr	r1, [pc, #132]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	e06d      	b.n	80036c6 <HAL_RCC_OscConfig+0x62e>
 80035ea:	2301      	movs	r3, #1
 80035ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80035fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800360a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe f91f 	bl	8001858 <HAL_GetTick>
 800361a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe f91a 	bl	8001858 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d902      	bls.n	8003636 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	f000 bd7e 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
 8003636:	2302      	movs	r3, #2
 8003638:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003648:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0x5d4>
 8003660:	4b01      	ldr	r3, [pc, #4]	@ (8003668 <HAL_RCC_OscConfig+0x5d0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	e016      	b.n	8003694 <HAL_RCC_OscConfig+0x5fc>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	2302      	movs	r3, #2
 800366e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800367e:	2302      	movs	r3, #2
 8003680:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003684:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003690:	4bbf      	ldr	r3, [pc, #764]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	2202      	movs	r2, #2
 8003696:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800369a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800369e:	fa92 f2a2 	rbit	r2, r2
 80036a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80036a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f042 0220 	orr.w	r2, r2, #32
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ac      	bne.n	8003620 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8113 	beq.w	8003902 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d07c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x74e>
 80036ec:	2301      	movs	r3, #1
 80036ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80036fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4ba2      	ldr	r3, [pc, #648]	@ (8003994 <HAL_RCC_OscConfig+0x8fc>)
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	2301      	movs	r3, #1
 8003714:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe f89f 	bl	8001858 <HAL_GetTick>
 800371a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fe f89a 	bl	8001858 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f000 bcfe 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003748:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800375e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003776:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800377a:	2202      	movs	r2, #2
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003790:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003794:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b7e      	ldr	r3, [pc, #504]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 8003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800379e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80037a2:	2102      	movs	r1, #2
 80037a4:	6019      	str	r1, [r3, #0]
 80037a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f1a3 	rbit	r1, r3
 80037b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80037bc:	6019      	str	r1, [r3, #0]
  return result;
 80037be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d09d      	beq.n	8003720 <HAL_RCC_OscConfig+0x688>
 80037e4:	e08d      	b.n	8003902 <HAL_RCC_OscConfig+0x86a>
 80037e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003808:	601a      	str	r2, [r3, #0]
  return result;
 800380a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003812:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	4b5d      	ldr	r3, [pc, #372]	@ (8003994 <HAL_RCC_OscConfig+0x8fc>)
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003828:	f7fe f816 	bl	8001858 <HAL_GetTick>
 800382c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe f811 	bl	8001858 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	f000 bc75 	b.w	8004132 <HAL_RCC_OscConfig+0x109a>
 8003848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003850:	2202      	movs	r2, #2
 8003852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003858:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003866:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003894:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003898:	2202      	movs	r2, #2
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80038b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 80038b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80038c0:	2102      	movs	r1, #2
 80038c2:	6019      	str	r1, [r3, #0]
 80038c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f1a3 	rbit	r1, r3
 80038d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038da:	6019      	str	r1, [r3, #0]
  return result;
 80038dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d197      	bne.n	8003832 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003906:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 81a5 	beq.w	8003c62 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391e:	4b1c      	ldr	r3, [pc, #112]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003934:	61d3      	str	r3, [r2, #28]
 8003936:	4b16      	ldr	r3, [pc, #88]	@ (8003990 <HAL_RCC_OscConfig+0x8f8>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800393e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003950:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <HAL_RCC_OscConfig+0x900>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d121      	bne.n	80039a8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <HAL_RCC_OscConfig+0x900>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0b      	ldr	r2, [pc, #44]	@ (8003998 <HAL_RCC_OscConfig+0x900>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003970:	f7fd ff72 	bl	8001858 <HAL_GetTick>
 8003974:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e010      	b.n	800399c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fd ff6d 	bl	8001858 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	@ 0x64
 8003988:	d908      	bls.n	800399c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e3d1      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	10908120 	.word	0x10908120
 8003998:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd4 <HAL_RCC_OscConfig+0xb3c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0e8      	beq.n	800397a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x92e>
 80039b8:	4b87      	ldr	r3, [pc, #540]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4a86      	ldr	r2, [pc, #536]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6213      	str	r3, [r2, #32]
 80039c4:	e035      	b.n	8003a32 <HAL_RCC_OscConfig+0x99a>
 80039c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x958>
 80039d6:	4b80      	ldr	r3, [pc, #512]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6213      	str	r3, [r2, #32]
 80039e2:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6213      	str	r3, [r2, #32]
 80039ee:	e020      	b.n	8003a32 <HAL_RCC_OscConfig+0x99a>
 80039f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d10c      	bne.n	8003a1a <HAL_RCC_OscConfig+0x982>
 8003a00:	4b75      	ldr	r3, [pc, #468]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a74      	ldr	r2, [pc, #464]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	4b72      	ldr	r3, [pc, #456]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a71      	ldr	r2, [pc, #452]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6213      	str	r3, [r2, #32]
 8003a18:	e00b      	b.n	8003a32 <HAL_RCC_OscConfig+0x99a>
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8081 	beq.w	8003b46 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a44:	f7fd ff08 	bl	8001858 <HAL_GetTick>
 8003a48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f7fd ff03 	bl	8001858 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e365      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
 8003a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003a6e:	2202      	movs	r2, #2
 8003a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a76:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a84:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a92:	2202      	movs	r2, #2
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	fa93 f2a3 	rbit	r2, r3
 8003aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003aac:	601a      	str	r2, [r3, #0]
  return result;
 8003aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ab6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0302 	orr.w	r3, r3, #2
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_OscConfig+0xa3a>
 8003acc:	4b42      	ldr	r3, [pc, #264]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	e013      	b.n	8003afa <HAL_RCC_OscConfig+0xa62>
 8003ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003ada:	2202      	movs	r2, #2
 8003adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	fa93 f2a3 	rbit	r2, r3
 8003aec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	4b38      	ldr	r3, [pc, #224]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003afe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b02:	2102      	movs	r1, #2
 8003b04:	6011      	str	r1, [r2, #0]
 8003b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b0a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	fa92 f1a2 	rbit	r1, r2
 8003b14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b18:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003b1c:	6011      	str	r1, [r2, #0]
  return result;
 8003b1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b22:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	f002 021f 	and.w	r2, r2, #31
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d084      	beq.n	8003a4e <HAL_RCC_OscConfig+0x9b6>
 8003b44:	e083      	b.n	8003c4e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fe87 	bl	8001858 <HAL_GetTick>
 8003b4a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd fe82 	bl	8001858 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e2e4      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
 8003b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003b70:	2202      	movs	r2, #2
 8003b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b78:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b86:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b90:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b94:	2202      	movs	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003baa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bae:	601a      	str	r2, [r3, #0]
  return result;
 8003bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCC_OscConfig+0xb44>
 8003bce:	4b02      	ldr	r3, [pc, #8]	@ (8003bd8 <HAL_RCC_OscConfig+0xb40>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	e017      	b.n	8003c04 <HAL_RCC_OscConfig+0xb6c>
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003be0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003be4:	2202      	movs	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bfa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	4bb3      	ldr	r3, [pc, #716]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c08:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	6011      	str	r1, [r2, #0]
 8003c10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c14:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	fa92 f1a2 	rbit	r1, r2
 8003c1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c22:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003c26:	6011      	str	r1, [r2, #0]
  return result;
 8003c28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c2c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	fab2 f282 	clz	r2, r2
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f002 021f 	and.w	r2, r2, #31
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f202 	lsl.w	r2, r1, r2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d180      	bne.n	8003b50 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c4e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d105      	bne.n	8003c62 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c56:	4b9e      	ldr	r3, [pc, #632]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4a9d      	ldr	r2, [pc, #628]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 825e 	beq.w	8004130 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	4b96      	ldr	r3, [pc, #600]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	f000 821f 	beq.w	80040c0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	f040 8170 	bne.w	8003f74 <HAL_RCC_OscConfig+0xedc>
 8003c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c98:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	fa93 f2a3 	rbit	r2, r3
 8003cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003cb8:	601a      	str	r2, [r3, #0]
  return result;
 8003cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cbe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003cc2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fd fdbd 	bl	8001858 <HAL_GetTick>
 8003cde:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	e009      	b.n	8003cf8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fd fdb8 	bl	8001858 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e21c      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
 8003cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cfc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d0a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	fa93 f2a3 	rbit	r2, r3
 8003d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d18:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d1c:	601a      	str	r2, [r3, #0]
  return result;
 8003d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0xcaa>
 8003d3c:	4b64      	ldr	r3, [pc, #400]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	e027      	b.n	8003d92 <HAL_RCC_OscConfig+0xcfa>
 8003d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d46:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003d4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d54:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	fa93 f2a3 	rbit	r2, r3
 8003d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d62:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d6c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d7a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d88:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	4b50      	ldr	r3, [pc, #320]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d96:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d9a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d9e:	6011      	str	r1, [r2, #0]
 8003da0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003da4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	fa92 f1a2 	rbit	r1, r2
 8003dae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003db2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003db6:	6011      	str	r1, [r2, #0]
  return result;
 8003db8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003dbc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	fab2 f282 	clz	r2, r2
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	f042 0220 	orr.w	r2, r2, #32
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	f002 021f 	and.w	r2, r2, #31
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d182      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dde:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	f023 020f 	bic.w	r2, r3, #15
 8003de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	4937      	ldr	r1, [pc, #220]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003df8:	4b35      	ldr	r3, [pc, #212]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a19      	ldr	r1, [r3, #32]
 8003e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	492d      	ldr	r1, [pc, #180]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e24:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e32:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	fa93 f2a3 	rbit	r2, r3
 8003e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e40:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003e44:	601a      	str	r2, [r3, #0]
  return result;
 8003e46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e4a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003e4e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	461a      	mov	r2, r3
 8003e62:	2301      	movs	r3, #1
 8003e64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fd fcf7 	bl	8001858 <HAL_GetTick>
 8003e6a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e6e:	e009      	b.n	8003e84 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd fcf2 	bl	8001858 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e156      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
 8003e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e88:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003e8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e96:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ea8:	601a      	str	r2, [r3, #0]
  return result;
 8003eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eae:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003eb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xe3c>
 8003ec8:	4b01      	ldr	r3, [pc, #4]	@ (8003ed0 <HAL_RCC_OscConfig+0xe38>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	e02a      	b.n	8003f24 <HAL_RCC_OscConfig+0xe8c>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ee6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003efe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f0c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	fa93 f2a3 	rbit	r2, r3
 8003f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f1a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	4b86      	ldr	r3, [pc, #536]	@ (800413c <HAL_RCC_OscConfig+0x10a4>)
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f36:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fa92 f1a2 	rbit	r1, r2
 8003f40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f44:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003f48:	6011      	str	r1, [r2, #0]
  return result;
 8003f4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f4e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f042 0220 	orr.w	r2, r2, #32
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f002 021f 	and.w	r2, r2, #31
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f43f af7f 	beq.w	8003e70 <HAL_RCC_OscConfig+0xdd8>
 8003f72:	e0dd      	b.n	8004130 <HAL_RCC_OscConfig+0x1098>
 8003f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f78:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f86:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f2a3 	rbit	r2, r3
 8003f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f94:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f98:	601a      	str	r2, [r3, #0]
  return result;
 8003f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f9e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003fa2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fd fc4d 	bl	8001858 <HAL_GetTick>
 8003fbe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd fc48 	bl	8001858 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0ac      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
 8003fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fdc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003fe0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ff8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ffc:	601a      	str	r2, [r3, #0]
  return result;
 8003ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004002:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004006:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d102      	bne.n	8004022 <HAL_RCC_OscConfig+0xf8a>
 800401c:	4b47      	ldr	r3, [pc, #284]	@ (800413c <HAL_RCC_OscConfig+0x10a4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	e027      	b.n	8004072 <HAL_RCC_OscConfig+0xfda>
 8004022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004026:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800402a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800402e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004034:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	fa93 f2a3 	rbit	r2, r3
 800403e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004042:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800404c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004050:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800405a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f2a3 	rbit	r2, r3
 8004064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004068:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_OscConfig+0x10a4>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004076:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800407a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800407e:	6011      	str	r1, [r2, #0]
 8004080:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004084:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	fa92 f1a2 	rbit	r1, r2
 800408e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004092:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004096:	6011      	str	r1, [r2, #0]
  return result;
 8004098:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800409c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	fab2 f282 	clz	r2, r2
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	f042 0220 	orr.w	r2, r2, #32
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	f002 021f 	and.w	r2, r2, #31
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d182      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xf2c>
 80040be:	e037      	b.n	8004130 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e02e      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040d4:	4b19      	ldr	r3, [pc, #100]	@ (800413c <HAL_RCC_OscConfig+0x10a4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80040dc:	4b17      	ldr	r3, [pc, #92]	@ (800413c <HAL_RCC_OscConfig+0x10a4>)
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80040e8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80040ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d117      	bne.n	800412c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004100:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004108:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004110:	429a      	cmp	r2, r3
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004120:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b09e      	sub	sp, #120	@ 0x78
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e162      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b90      	ldr	r3, [pc, #576]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d910      	bls.n	8004188 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b8d      	ldr	r3, [pc, #564]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	498b      	ldr	r1, [pc, #556]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b89      	ldr	r3, [pc, #548]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e14a      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	497f      	ldr	r1, [pc, #508]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80dc 	beq.w	800436c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d13c      	bne.n	8004236 <HAL_RCC_ClockConfig+0xf6>
 80041bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xa6>
 80041e0:	4b6f      	ldr	r3, [pc, #444]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	e00f      	b.n	8004206 <HAL_RCC_ClockConfig+0xc6>
 80041e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80041f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004202:	4b67      	ldr	r3, [pc, #412]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800420a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800420c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800420e:	fa92 f2a2 	rbit	r2, r2
 8004212:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004214:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004216:	fab2 f282 	clz	r2, r2
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f042 0220 	orr.w	r2, r2, #32
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	f002 021f 	and.w	r2, r2, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f202 	lsl.w	r2, r1, r2
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d17b      	bne.n	800432a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0f3      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d13c      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x178>
 800423e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004242:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800424c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d102      	bne.n	8004268 <HAL_RCC_ClockConfig+0x128>
 8004262:	4b4f      	ldr	r3, [pc, #316]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	e00f      	b.n	8004288 <HAL_RCC_ClockConfig+0x148>
 8004268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800426c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	647b      	str	r3, [r7, #68]	@ 0x44
 8004276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800427a:	643b      	str	r3, [r7, #64]	@ 0x40
 800427c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004284:	4b46      	ldr	r3, [pc, #280]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800428c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800428e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004290:	fa92 f2a2 	rbit	r2, r2
 8004294:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004298:	fab2 f282 	clz	r2, r2
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	f002 021f 	and.w	r2, r2, #31
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f202 	lsl.w	r2, r1, r2
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d13a      	bne.n	800432a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b2      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
 80042b8:	2302      	movs	r3, #2
 80042ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80042c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1a0>
 80042da:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	e00d      	b.n	80042fc <HAL_RCC_ClockConfig+0x1bc>
 80042e0:	2302      	movs	r3, #2
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	2302      	movs	r3, #2
 80042ee:	623b      	str	r3, [r7, #32]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	4b29      	ldr	r3, [pc, #164]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	2202      	movs	r2, #2
 80042fe:	61ba      	str	r2, [r7, #24]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	fa92 f2a2 	rbit	r2, r2
 8004306:	617a      	str	r2, [r7, #20]
  return result;
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	fab2 f282 	clz	r2, r2
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f042 0220 	orr.w	r2, r2, #32
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	f002 021f 	and.w	r2, r2, #31
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e079      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	491a      	ldr	r1, [pc, #104]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800433c:	f7fd fa8c 	bl	8001858 <HAL_GetTick>
 8004340:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fd fa88 	bl	8001858 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e061      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <HAL_RCC_ClockConfig+0x260>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d214      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 0207 	bic.w	r2, r3, #7
 8004382:	4906      	ldr	r1, [pc, #24]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b04      	ldr	r3, [pc, #16]	@ (800439c <HAL_RCC_ClockConfig+0x25c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e040      	b.n	800441e <HAL_RCC_ClockConfig+0x2de>
 800439c:	40022000 	.word	0x40022000
 80043a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCC_ClockConfig+0x2e8>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	491a      	ldr	r1, [pc, #104]	@ (8004428 <HAL_RCC_ClockConfig+0x2e8>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ce:	4b16      	ldr	r3, [pc, #88]	@ (8004428 <HAL_RCC_ClockConfig+0x2e8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4912      	ldr	r1, [pc, #72]	@ (8004428 <HAL_RCC_ClockConfig+0x2e8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043e2:	f000 f829 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043e6:	4601      	mov	r1, r0
 80043e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f0:	22f0      	movs	r2, #240	@ 0xf0
 80043f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	fa92 f2a2 	rbit	r2, r2
 80043fa:	60fa      	str	r2, [r7, #12]
  return result;
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	fab2 f282 	clz	r2, r2
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	40d3      	lsrs	r3, r2
 8004406:	4a09      	ldr	r2, [pc, #36]	@ (800442c <HAL_RCC_ClockConfig+0x2ec>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	fa21 f303 	lsr.w	r3, r1, r3
 800440e:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <HAL_RCC_ClockConfig+0x2f0>)
 8004410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004412:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <HAL_RCC_ClockConfig+0x2f4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd f9da 	bl	80017d0 <HAL_InitTick>
  
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3778      	adds	r7, #120	@ 0x78
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	08009a78 	.word	0x08009a78
 8004430:	20000020 	.word	0x20000020
 8004434:	20000024 	.word	0x20000024

08004438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004452:	4b1f      	ldr	r3, [pc, #124]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b04      	cmp	r3, #4
 8004460:	d002      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x30>
 8004462:	2b08      	cmp	r3, #8
 8004464:	d003      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x36>
 8004466:	e029      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004468:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800446a:	613b      	str	r3, [r7, #16]
      break;
 800446c:	e029      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	0c9b      	lsrs	r3, r3, #18
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800447c:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	4a15      	ldr	r2, [pc, #84]	@ (80044dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004494:	4a0f      	ldr	r2, [pc, #60]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	fbb2 f2f3 	udiv	r2, r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e007      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044a6:	4a0b      	ldr	r2, [pc, #44]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	613b      	str	r3, [r7, #16]
      break;
 80044ba:	e002      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044be:	613b      	str	r3, [r7, #16]
      break;
 80044c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c2:	693b      	ldr	r3, [r7, #16]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40021000 	.word	0x40021000
 80044d4:	007a1200 	.word	0x007a1200
 80044d8:	08009a90 	.word	0x08009a90
 80044dc:	08009aa0 	.word	0x08009aa0

080044e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000020 	.word	0x20000020

080044f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044fe:	f7ff ffef 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004502:	4601      	mov	r1, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800450c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004510:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	fa92 f2a2 	rbit	r2, r2
 8004518:	603a      	str	r2, [r7, #0]
  return result;
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	fab2 f282 	clz	r2, r2
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	40d3      	lsrs	r3, r2
 8004524:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	08009a88 	.word	0x08009a88

0800453c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004542:	f7ff ffcd 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004546:	4601      	mov	r1, r0
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004550:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004554:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	fa92 f2a2 	rbit	r2, r2
 800455c:	603a      	str	r2, [r7, #0]
  return result;
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	fab2 f282 	clz	r2, r2
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	40d3      	lsrs	r3, r2
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x40>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	08009a88 	.word	0x08009a88

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b092      	sub	sp, #72	@ 0x48
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004590:	2300      	movs	r3, #0
 8004592:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80d4 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a4:	4b4e      	ldr	r3, [pc, #312]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10e      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b0:	4b4b      	ldr	r3, [pc, #300]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	4a4a      	ldr	r2, [pc, #296]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	61d3      	str	r3, [r2, #28]
 80045bc:	4b48      	ldr	r3, [pc, #288]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ce:	4b45      	ldr	r3, [pc, #276]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045da:	4b42      	ldr	r3, [pc, #264]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a41      	ldr	r2, [pc, #260]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fd f937 	bl	8001858 <HAL_GetTick>
 80045ea:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fd f933 	bl	8001858 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	@ 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1d6      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800460c:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8084 	beq.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004626:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004628:	429a      	cmp	r2, r3
 800462a:	d07c      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800462c:	4b2c      	ldr	r3, [pc, #176]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800463a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	4b26      	ldr	r3, [pc, #152]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	461a      	mov	r2, r3
 8004656:	2301      	movs	r3, #1
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	4b1d      	ldr	r3, [pc, #116]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	461a      	mov	r2, r3
 800467a:	2300      	movs	r3, #0
 800467c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800467e:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004682:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d04b      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fd f8e3 	bl	8001858 <HAL_GetTick>
 8004692:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	e00a      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fd f8df 	bl	8001858 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e180      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046ac:	2302      	movs	r3, #2
 80046ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b8:	2302      	movs	r3, #2
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	61fb      	str	r3, [r7, #28]
  return result;
 80046c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d108      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046da:	4b01      	ldr	r3, [pc, #4]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	e00d      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
 80046e8:	10908100 	.word	0x10908100
 80046ec:	2302      	movs	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	2202      	movs	r2, #2
 80046fe:	613a      	str	r2, [r7, #16]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	fa92 f2a2 	rbit	r2, r2
 8004706:	60fa      	str	r2, [r7, #12]
  return result;
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	fab2 f282 	clz	r2, r2
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	f002 021f 	and.w	r2, r2, #31
 800471a:	2101      	movs	r1, #1
 800471c:	fa01 f202 	lsl.w	r2, r1, r2
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0b7      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004726:	4b8f      	ldr	r3, [pc, #572]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	498c      	ldr	r1, [pc, #560]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004734:	4313      	orrs	r3, r2
 8004736:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004738:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	4b88      	ldr	r3, [pc, #544]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4a87      	ldr	r2, [pc, #540]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004758:	4b82      	ldr	r3, [pc, #520]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	f023 0203 	bic.w	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	497f      	ldr	r1, [pc, #508]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004776:	4b7b      	ldr	r3, [pc, #492]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4978      	ldr	r1, [pc, #480]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004794:	4b73      	ldr	r3, [pc, #460]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	4970      	ldr	r1, [pc, #448]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	f023 0210 	bic.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4969      	ldr	r1, [pc, #420]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047d0:	4b64      	ldr	r3, [pc, #400]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	4961      	ldr	r1, [pc, #388]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	f023 0220 	bic.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	495a      	ldr	r1, [pc, #360]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800480c:	4b55      	ldr	r3, [pc, #340]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	4952      	ldr	r1, [pc, #328]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800482a:	4b4e      	ldr	r3, [pc, #312]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	494b      	ldr	r1, [pc, #300]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004848:	4b46      	ldr	r3, [pc, #280]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4943      	ldr	r1, [pc, #268]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004866:	4b3f      	ldr	r3, [pc, #252]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	493c      	ldr	r1, [pc, #240]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004884:	4b37      	ldr	r3, [pc, #220]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	4934      	ldr	r1, [pc, #208]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048a2:	4b30      	ldr	r3, [pc, #192]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	492d      	ldr	r1, [pc, #180]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048c0:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	4925      	ldr	r1, [pc, #148]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048de:	4b21      	ldr	r3, [pc, #132]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	491e      	ldr	r1, [pc, #120]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80048fc:	4b19      	ldr	r3, [pc, #100]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	4916      	ldr	r1, [pc, #88]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800491a:	4b12      	ldr	r3, [pc, #72]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	490f      	ldr	r1, [pc, #60]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004938:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	4907      	ldr	r1, [pc, #28]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004956:	4b03      	ldr	r3, [pc, #12]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	e002      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	4913      	ldr	r1, [pc, #76]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800496c:	4313      	orrs	r3, r2
 800496e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004988:	490b      	ldr	r1, [pc, #44]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800498a:	4313      	orrs	r3, r2
 800498c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a6:	4904      	ldr	r1, [pc, #16]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3748      	adds	r7, #72	@ 0x48
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000

080049bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e09d      	b.n	8004b0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049de:	d009      	beq.n	80049f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e005      	b.n	80049f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fd12 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a34:	d902      	bls.n	8004a3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e002      	b.n	8004a42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a4a:	d007      	beq.n	8004a5c <HAL_SPI_Init+0xa0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	ea42 0103 	orr.w	r1, r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	0c1b      	lsrs	r3, r3, #16
 8004ab8:	f003 0204 	and.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ad8:	ea42 0103 	orr.w	r1, r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e040      	b.n	8004ba6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc fcc1 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2224      	movs	r2, #36	@ 0x24
 8004b3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f9fd 	bl	8004f58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f826 	bl	8004bb0 <UART_SetConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01b      	b.n	8004ba6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa7c 	bl	800509c <UART_CheckIdleState>
 8004ba4:	4603      	mov	r3, r0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b92      	ldr	r3, [pc, #584]	@ (8004e24 <UART_SetConfig+0x274>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a80      	ldr	r2, [pc, #512]	@ (8004e28 <UART_SetConfig+0x278>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d120      	bne.n	8004c6e <UART_SetConfig+0xbe>
 8004c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8004e2c <UART_SetConfig+0x27c>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d817      	bhi.n	8004c68 <UART_SetConfig+0xb8>
 8004c38:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0x90>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c5d 	.word	0x08004c5d
 8004c48:	08004c63 	.word	0x08004c63
 8004c4c:	08004c57 	.word	0x08004c57
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e0b5      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e0b2      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e0af      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e0ac      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0a9      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a6f      	ldr	r2, [pc, #444]	@ (8004e30 <UART_SetConfig+0x280>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d124      	bne.n	8004cc2 <UART_SetConfig+0x112>
 8004c78:	4b6c      	ldr	r3, [pc, #432]	@ (8004e2c <UART_SetConfig+0x27c>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c84:	d011      	beq.n	8004caa <UART_SetConfig+0xfa>
 8004c86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c8a:	d817      	bhi.n	8004cbc <UART_SetConfig+0x10c>
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c90:	d011      	beq.n	8004cb6 <UART_SetConfig+0x106>
 8004c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c96:	d811      	bhi.n	8004cbc <UART_SetConfig+0x10c>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <UART_SetConfig+0xf4>
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca0:	d006      	beq.n	8004cb0 <UART_SetConfig+0x100>
 8004ca2:	e00b      	b.n	8004cbc <UART_SetConfig+0x10c>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e08b      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004caa:	2302      	movs	r3, #2
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e088      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e085      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e082      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e07f      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004e34 <UART_SetConfig+0x284>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d124      	bne.n	8004d16 <UART_SetConfig+0x166>
 8004ccc:	4b57      	ldr	r3, [pc, #348]	@ (8004e2c <UART_SetConfig+0x27c>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004cd4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cd8:	d011      	beq.n	8004cfe <UART_SetConfig+0x14e>
 8004cda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cde:	d817      	bhi.n	8004d10 <UART_SetConfig+0x160>
 8004ce0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ce4:	d011      	beq.n	8004d0a <UART_SetConfig+0x15a>
 8004ce6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cea:	d811      	bhi.n	8004d10 <UART_SetConfig+0x160>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x148>
 8004cf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf4:	d006      	beq.n	8004d04 <UART_SetConfig+0x154>
 8004cf6:	e00b      	b.n	8004d10 <UART_SetConfig+0x160>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e061      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e05e      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d04:	2304      	movs	r3, #4
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e05b      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e058      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d10:	2310      	movs	r3, #16
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e055      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a47      	ldr	r2, [pc, #284]	@ (8004e38 <UART_SetConfig+0x288>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d124      	bne.n	8004d6a <UART_SetConfig+0x1ba>
 8004d20:	4b42      	ldr	r3, [pc, #264]	@ (8004e2c <UART_SetConfig+0x27c>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d2c:	d011      	beq.n	8004d52 <UART_SetConfig+0x1a2>
 8004d2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d32:	d817      	bhi.n	8004d64 <UART_SetConfig+0x1b4>
 8004d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d38:	d011      	beq.n	8004d5e <UART_SetConfig+0x1ae>
 8004d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d3e:	d811      	bhi.n	8004d64 <UART_SetConfig+0x1b4>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <UART_SetConfig+0x19c>
 8004d44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d48:	d006      	beq.n	8004d58 <UART_SetConfig+0x1a8>
 8004d4a:	e00b      	b.n	8004d64 <UART_SetConfig+0x1b4>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e037      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d52:	2302      	movs	r3, #2
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e034      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e031      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e02e      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e02b      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a33      	ldr	r2, [pc, #204]	@ (8004e3c <UART_SetConfig+0x28c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d124      	bne.n	8004dbe <UART_SetConfig+0x20e>
 8004d74:	4b2d      	ldr	r3, [pc, #180]	@ (8004e2c <UART_SetConfig+0x27c>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d78:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004d7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d80:	d011      	beq.n	8004da6 <UART_SetConfig+0x1f6>
 8004d82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d86:	d817      	bhi.n	8004db8 <UART_SetConfig+0x208>
 8004d88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d8c:	d011      	beq.n	8004db2 <UART_SetConfig+0x202>
 8004d8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d92:	d811      	bhi.n	8004db8 <UART_SetConfig+0x208>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <UART_SetConfig+0x1f0>
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d9c:	d006      	beq.n	8004dac <UART_SetConfig+0x1fc>
 8004d9e:	e00b      	b.n	8004db8 <UART_SetConfig+0x208>
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e00d      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004da6:	2302      	movs	r3, #2
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e00a      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004dac:	2304      	movs	r3, #4
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e007      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004db2:	2308      	movs	r3, #8
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e004      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004db8:	2310      	movs	r3, #16
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e001      	b.n	8004dc2 <UART_SetConfig+0x212>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dca:	d16b      	bne.n	8004ea4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004dcc:	7ffb      	ldrb	r3, [r7, #31]
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d838      	bhi.n	8004e44 <UART_SetConfig+0x294>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x228>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e45 	.word	0x08004e45
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e45 	.word	0x08004e45
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004e45 	.word	0x08004e45
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7ff fb7c 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8004e00:	61b8      	str	r0, [r7, #24]
        break;
 8004e02:	e024      	b.n	8004e4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7ff fb9a 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 8004e08:	61b8      	str	r0, [r7, #24]
        break;
 8004e0a:	e020      	b.n	8004e4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <UART_SetConfig+0x290>)
 8004e0e:	61bb      	str	r3, [r7, #24]
        break;
 8004e10:	e01d      	b.n	8004e4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7ff fb11 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8004e16:	61b8      	str	r0, [r7, #24]
        break;
 8004e18:	e019      	b.n	8004e4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e015      	b.n	8004e4e <UART_SetConfig+0x29e>
 8004e22:	bf00      	nop
 8004e24:	efff69f3 	.word	0xefff69f3
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40004400 	.word	0x40004400
 8004e34:	40004800 	.word	0x40004800
 8004e38:	40004c00 	.word	0x40004c00
 8004e3c:	40005000 	.word	0x40005000
 8004e40:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77bb      	strb	r3, [r7, #30]
        break;
 8004e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d073      	beq.n	8004f3c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d916      	bls.n	8004e9e <UART_SetConfig+0x2ee>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e76:	d212      	bcs.n	8004e9e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f023 030f 	bic.w	r3, r3, #15
 8004e80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	89fa      	ldrh	r2, [r7, #14]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e04e      	b.n	8004f3c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	77bb      	strb	r3, [r7, #30]
 8004ea2:	e04b      	b.n	8004f3c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d827      	bhi.n	8004efa <UART_SetConfig+0x34a>
 8004eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0x300>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7ff fb10 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61b8      	str	r0, [r7, #24]
        break;
 8004eda:	e013      	b.n	8004f04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7ff fb2e 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 8004ee0:	61b8      	str	r0, [r7, #24]
        break;
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f54 <UART_SetConfig+0x3a4>)
 8004ee6:	61bb      	str	r3, [r7, #24]
        break;
 8004ee8:	e00c      	b.n	8004f04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7ff faa5 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8004eee:	61b8      	str	r0, [r7, #24]
        break;
 8004ef0:	e008      	b.n	8004f04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef6:	61bb      	str	r3, [r7, #24]
        break;
 8004ef8:	e004      	b.n	8004f04 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	77bb      	strb	r3, [r7, #30]
        break;
 8004f02:	bf00      	nop
    }

    if (pclk != 0U)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d018      	beq.n	8004f3c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	085a      	lsrs	r2, r3, #1
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	441a      	add	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b0f      	cmp	r3, #15
 8004f22:	d909      	bls.n	8004f38 <UART_SetConfig+0x388>
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2a:	d205      	bcs.n	8004f38 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	e001      	b.n	8004f3c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f48:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	007a1200 	.word	0x007a1200

08004f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d10a      	bne.n	800506e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b098      	sub	sp, #96	@ 0x60
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ac:	f7fc fbd4 	bl	8001858 <HAL_GetTick>
 80050b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d12e      	bne.n	800511e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f88c 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d021      	beq.n	800511e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e062      	b.n	80051e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b04      	cmp	r3, #4
 800512a:	d149      	bne.n	80051c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	2200      	movs	r2, #0
 8005136:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f856 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d03c      	beq.n	80051c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	623b      	str	r3, [r7, #32]
   return(result);
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800515a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005164:	633b      	str	r3, [r7, #48]	@ 0x30
 8005166:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800516a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	60fb      	str	r3, [r7, #12]
   return(result);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005198:	61fa      	str	r2, [r7, #28]
 800519a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	617b      	str	r3, [r7, #20]
   return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e5      	bne.n	8005178 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e011      	b.n	80051e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3758      	adds	r7, #88	@ 0x58
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	e04f      	b.n	800529e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d04b      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005206:	f7fc fb27 	bl	8001858 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <UART_WaitOnFlagUntilTimeout+0x30>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e04e      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d037      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0xb2>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b80      	cmp	r3, #128	@ 0x80
 8005232:	d034      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b40      	cmp	r3, #64	@ 0x40
 8005238:	d031      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d110      	bne.n	800526a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2208      	movs	r2, #8
 800524e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f838 	bl	80052c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2208      	movs	r2, #8
 800525a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e029      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005278:	d111      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f81e 	bl	80052c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e00f      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d0a0      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b095      	sub	sp, #84	@ 0x54
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e6      	bne.n	80052ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005338:	2b01      	cmp	r3, #1
 800533a:	d118      	bne.n	800536e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	60bb      	str	r3, [r7, #8]
   return(result);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 0310 	bic.w	r3, r3, #16
 8005350:	647b      	str	r3, [r7, #68]	@ 0x44
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6979      	ldr	r1, [r7, #20]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	613b      	str	r3, [r7, #16]
   return(result);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e6      	bne.n	800533c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005382:	bf00      	nop
 8005384:	3754      	adds	r7, #84	@ 0x54
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <__cvt>:
 800538e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005392:	ec57 6b10 	vmov	r6, r7, d0
 8005396:	2f00      	cmp	r7, #0
 8005398:	460c      	mov	r4, r1
 800539a:	4619      	mov	r1, r3
 800539c:	463b      	mov	r3, r7
 800539e:	bfbb      	ittet	lt
 80053a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80053a4:	461f      	movlt	r7, r3
 80053a6:	2300      	movge	r3, #0
 80053a8:	232d      	movlt	r3, #45	@ 0x2d
 80053aa:	700b      	strb	r3, [r1, #0]
 80053ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80053b2:	4691      	mov	r9, r2
 80053b4:	f023 0820 	bic.w	r8, r3, #32
 80053b8:	bfbc      	itt	lt
 80053ba:	4632      	movlt	r2, r6
 80053bc:	4616      	movlt	r6, r2
 80053be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053c2:	d005      	beq.n	80053d0 <__cvt+0x42>
 80053c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053c8:	d100      	bne.n	80053cc <__cvt+0x3e>
 80053ca:	3401      	adds	r4, #1
 80053cc:	2102      	movs	r1, #2
 80053ce:	e000      	b.n	80053d2 <__cvt+0x44>
 80053d0:	2103      	movs	r1, #3
 80053d2:	ab03      	add	r3, sp, #12
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	ab02      	add	r3, sp, #8
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	ec47 6b10 	vmov	d0, r6, r7
 80053de:	4653      	mov	r3, sl
 80053e0:	4622      	mov	r2, r4
 80053e2:	f001 f875 	bl	80064d0 <_dtoa_r>
 80053e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053ea:	4605      	mov	r5, r0
 80053ec:	d119      	bne.n	8005422 <__cvt+0x94>
 80053ee:	f019 0f01 	tst.w	r9, #1
 80053f2:	d00e      	beq.n	8005412 <__cvt+0x84>
 80053f4:	eb00 0904 	add.w	r9, r0, r4
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005404:	b108      	cbz	r0, 800540a <__cvt+0x7c>
 8005406:	f8cd 900c 	str.w	r9, [sp, #12]
 800540a:	2230      	movs	r2, #48	@ 0x30
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	454b      	cmp	r3, r9
 8005410:	d31e      	bcc.n	8005450 <__cvt+0xc2>
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005416:	1b5b      	subs	r3, r3, r5
 8005418:	4628      	mov	r0, r5
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	b004      	add	sp, #16
 800541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005422:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005426:	eb00 0904 	add.w	r9, r0, r4
 800542a:	d1e5      	bne.n	80053f8 <__cvt+0x6a>
 800542c:	7803      	ldrb	r3, [r0, #0]
 800542e:	2b30      	cmp	r3, #48	@ 0x30
 8005430:	d10a      	bne.n	8005448 <__cvt+0xba>
 8005432:	2200      	movs	r2, #0
 8005434:	2300      	movs	r3, #0
 8005436:	4630      	mov	r0, r6
 8005438:	4639      	mov	r1, r7
 800543a:	f7fb fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800543e:	b918      	cbnz	r0, 8005448 <__cvt+0xba>
 8005440:	f1c4 0401 	rsb	r4, r4, #1
 8005444:	f8ca 4000 	str.w	r4, [sl]
 8005448:	f8da 3000 	ldr.w	r3, [sl]
 800544c:	4499      	add	r9, r3
 800544e:	e7d3      	b.n	80053f8 <__cvt+0x6a>
 8005450:	1c59      	adds	r1, r3, #1
 8005452:	9103      	str	r1, [sp, #12]
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e7d9      	b.n	800540c <__cvt+0x7e>

08005458 <__exponent>:
 8005458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800545a:	2900      	cmp	r1, #0
 800545c:	bfba      	itte	lt
 800545e:	4249      	neglt	r1, r1
 8005460:	232d      	movlt	r3, #45	@ 0x2d
 8005462:	232b      	movge	r3, #43	@ 0x2b
 8005464:	2909      	cmp	r1, #9
 8005466:	7002      	strb	r2, [r0, #0]
 8005468:	7043      	strb	r3, [r0, #1]
 800546a:	dd29      	ble.n	80054c0 <__exponent+0x68>
 800546c:	f10d 0307 	add.w	r3, sp, #7
 8005470:	461d      	mov	r5, r3
 8005472:	270a      	movs	r7, #10
 8005474:	461a      	mov	r2, r3
 8005476:	fbb1 f6f7 	udiv	r6, r1, r7
 800547a:	fb07 1416 	mls	r4, r7, r6, r1
 800547e:	3430      	adds	r4, #48	@ 0x30
 8005480:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005484:	460c      	mov	r4, r1
 8005486:	2c63      	cmp	r4, #99	@ 0x63
 8005488:	f103 33ff 	add.w	r3, r3, #4294967295
 800548c:	4631      	mov	r1, r6
 800548e:	dcf1      	bgt.n	8005474 <__exponent+0x1c>
 8005490:	3130      	adds	r1, #48	@ 0x30
 8005492:	1e94      	subs	r4, r2, #2
 8005494:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005498:	1c41      	adds	r1, r0, #1
 800549a:	4623      	mov	r3, r4
 800549c:	42ab      	cmp	r3, r5
 800549e:	d30a      	bcc.n	80054b6 <__exponent+0x5e>
 80054a0:	f10d 0309 	add.w	r3, sp, #9
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	42ac      	cmp	r4, r5
 80054a8:	bf88      	it	hi
 80054aa:	2300      	movhi	r3, #0
 80054ac:	3302      	adds	r3, #2
 80054ae:	4403      	add	r3, r0
 80054b0:	1a18      	subs	r0, r3, r0
 80054b2:	b003      	add	sp, #12
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054be:	e7ed      	b.n	800549c <__exponent+0x44>
 80054c0:	2330      	movs	r3, #48	@ 0x30
 80054c2:	3130      	adds	r1, #48	@ 0x30
 80054c4:	7083      	strb	r3, [r0, #2]
 80054c6:	70c1      	strb	r1, [r0, #3]
 80054c8:	1d03      	adds	r3, r0, #4
 80054ca:	e7f1      	b.n	80054b0 <__exponent+0x58>

080054cc <_printf_float>:
 80054cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	b08d      	sub	sp, #52	@ 0x34
 80054d2:	460c      	mov	r4, r1
 80054d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054d8:	4616      	mov	r6, r2
 80054da:	461f      	mov	r7, r3
 80054dc:	4605      	mov	r5, r0
 80054de:	f000 feef 	bl	80062c0 <_localeconv_r>
 80054e2:	6803      	ldr	r3, [r0, #0]
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fa feca 	bl	8000280 <strlen>
 80054ec:	2300      	movs	r3, #0
 80054ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80054f0:	f8d8 3000 	ldr.w	r3, [r8]
 80054f4:	9005      	str	r0, [sp, #20]
 80054f6:	3307      	adds	r3, #7
 80054f8:	f023 0307 	bic.w	r3, r3, #7
 80054fc:	f103 0208 	add.w	r2, r3, #8
 8005500:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005504:	f8d4 b000 	ldr.w	fp, [r4]
 8005508:	f8c8 2000 	str.w	r2, [r8]
 800550c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005510:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005514:	9307      	str	r3, [sp, #28]
 8005516:	f8cd 8018 	str.w	r8, [sp, #24]
 800551a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800551e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005522:	4b9c      	ldr	r3, [pc, #624]	@ (8005794 <_printf_float+0x2c8>)
 8005524:	f04f 32ff 	mov.w	r2, #4294967295
 8005528:	f7fb fb08 	bl	8000b3c <__aeabi_dcmpun>
 800552c:	bb70      	cbnz	r0, 800558c <_printf_float+0xc0>
 800552e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005532:	4b98      	ldr	r3, [pc, #608]	@ (8005794 <_printf_float+0x2c8>)
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	f7fb fae2 	bl	8000b00 <__aeabi_dcmple>
 800553c:	bb30      	cbnz	r0, 800558c <_printf_float+0xc0>
 800553e:	2200      	movs	r2, #0
 8005540:	2300      	movs	r3, #0
 8005542:	4640      	mov	r0, r8
 8005544:	4649      	mov	r1, r9
 8005546:	f7fb fad1 	bl	8000aec <__aeabi_dcmplt>
 800554a:	b110      	cbz	r0, 8005552 <_printf_float+0x86>
 800554c:	232d      	movs	r3, #45	@ 0x2d
 800554e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005552:	4a91      	ldr	r2, [pc, #580]	@ (8005798 <_printf_float+0x2cc>)
 8005554:	4b91      	ldr	r3, [pc, #580]	@ (800579c <_printf_float+0x2d0>)
 8005556:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800555a:	bf94      	ite	ls
 800555c:	4690      	movls	r8, r2
 800555e:	4698      	movhi	r8, r3
 8005560:	2303      	movs	r3, #3
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	f02b 0304 	bic.w	r3, fp, #4
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	f04f 0900 	mov.w	r9, #0
 800556e:	9700      	str	r7, [sp, #0]
 8005570:	4633      	mov	r3, r6
 8005572:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005574:	4621      	mov	r1, r4
 8005576:	4628      	mov	r0, r5
 8005578:	f000 f9d2 	bl	8005920 <_printf_common>
 800557c:	3001      	adds	r0, #1
 800557e:	f040 808d 	bne.w	800569c <_printf_float+0x1d0>
 8005582:	f04f 30ff 	mov.w	r0, #4294967295
 8005586:	b00d      	add	sp, #52	@ 0x34
 8005588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fb fad2 	bl	8000b3c <__aeabi_dcmpun>
 8005598:	b140      	cbz	r0, 80055ac <_printf_float+0xe0>
 800559a:	464b      	mov	r3, r9
 800559c:	2b00      	cmp	r3, #0
 800559e:	bfbc      	itt	lt
 80055a0:	232d      	movlt	r3, #45	@ 0x2d
 80055a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055a6:	4a7e      	ldr	r2, [pc, #504]	@ (80057a0 <_printf_float+0x2d4>)
 80055a8:	4b7e      	ldr	r3, [pc, #504]	@ (80057a4 <_printf_float+0x2d8>)
 80055aa:	e7d4      	b.n	8005556 <_printf_float+0x8a>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80055b2:	9206      	str	r2, [sp, #24]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	d13b      	bne.n	8005630 <_printf_float+0x164>
 80055b8:	2306      	movs	r3, #6
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80055c0:	2300      	movs	r3, #0
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	9303      	str	r3, [sp, #12]
 80055c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80055c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80055cc:	ab09      	add	r3, sp, #36	@ 0x24
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	6861      	ldr	r1, [r4, #4]
 80055d2:	ec49 8b10 	vmov	d0, r8, r9
 80055d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055da:	4628      	mov	r0, r5
 80055dc:	f7ff fed7 	bl	800538e <__cvt>
 80055e0:	9b06      	ldr	r3, [sp, #24]
 80055e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055e4:	2b47      	cmp	r3, #71	@ 0x47
 80055e6:	4680      	mov	r8, r0
 80055e8:	d129      	bne.n	800563e <_printf_float+0x172>
 80055ea:	1cc8      	adds	r0, r1, #3
 80055ec:	db02      	blt.n	80055f4 <_printf_float+0x128>
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	4299      	cmp	r1, r3
 80055f2:	dd41      	ble.n	8005678 <_printf_float+0x1ac>
 80055f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80055f8:	fa5f fa8a 	uxtb.w	sl, sl
 80055fc:	3901      	subs	r1, #1
 80055fe:	4652      	mov	r2, sl
 8005600:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005604:	9109      	str	r1, [sp, #36]	@ 0x24
 8005606:	f7ff ff27 	bl	8005458 <__exponent>
 800560a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800560c:	1813      	adds	r3, r2, r0
 800560e:	2a01      	cmp	r2, #1
 8005610:	4681      	mov	r9, r0
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	dc02      	bgt.n	800561c <_printf_float+0x150>
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	07d2      	lsls	r2, r2, #31
 800561a:	d501      	bpl.n	8005620 <_printf_float+0x154>
 800561c:	3301      	adds	r3, #1
 800561e:	6123      	str	r3, [r4, #16]
 8005620:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0a2      	beq.n	800556e <_printf_float+0xa2>
 8005628:	232d      	movs	r3, #45	@ 0x2d
 800562a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800562e:	e79e      	b.n	800556e <_printf_float+0xa2>
 8005630:	9a06      	ldr	r2, [sp, #24]
 8005632:	2a47      	cmp	r2, #71	@ 0x47
 8005634:	d1c2      	bne.n	80055bc <_printf_float+0xf0>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1c0      	bne.n	80055bc <_printf_float+0xf0>
 800563a:	2301      	movs	r3, #1
 800563c:	e7bd      	b.n	80055ba <_printf_float+0xee>
 800563e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005642:	d9db      	bls.n	80055fc <_printf_float+0x130>
 8005644:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005648:	d118      	bne.n	800567c <_printf_float+0x1b0>
 800564a:	2900      	cmp	r1, #0
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	dd0b      	ble.n	8005668 <_printf_float+0x19c>
 8005650:	6121      	str	r1, [r4, #16]
 8005652:	b913      	cbnz	r3, 800565a <_printf_float+0x18e>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	07d0      	lsls	r0, r2, #31
 8005658:	d502      	bpl.n	8005660 <_printf_float+0x194>
 800565a:	3301      	adds	r3, #1
 800565c:	440b      	add	r3, r1
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005662:	f04f 0900 	mov.w	r9, #0
 8005666:	e7db      	b.n	8005620 <_printf_float+0x154>
 8005668:	b913      	cbnz	r3, 8005670 <_printf_float+0x1a4>
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	07d2      	lsls	r2, r2, #31
 800566e:	d501      	bpl.n	8005674 <_printf_float+0x1a8>
 8005670:	3302      	adds	r3, #2
 8005672:	e7f4      	b.n	800565e <_printf_float+0x192>
 8005674:	2301      	movs	r3, #1
 8005676:	e7f2      	b.n	800565e <_printf_float+0x192>
 8005678:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800567c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800567e:	4299      	cmp	r1, r3
 8005680:	db05      	blt.n	800568e <_printf_float+0x1c2>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	6121      	str	r1, [r4, #16]
 8005686:	07d8      	lsls	r0, r3, #31
 8005688:	d5ea      	bpl.n	8005660 <_printf_float+0x194>
 800568a:	1c4b      	adds	r3, r1, #1
 800568c:	e7e7      	b.n	800565e <_printf_float+0x192>
 800568e:	2900      	cmp	r1, #0
 8005690:	bfd4      	ite	le
 8005692:	f1c1 0202 	rsble	r2, r1, #2
 8005696:	2201      	movgt	r2, #1
 8005698:	4413      	add	r3, r2
 800569a:	e7e0      	b.n	800565e <_printf_float+0x192>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	055a      	lsls	r2, r3, #21
 80056a0:	d407      	bmi.n	80056b2 <_printf_float+0x1e6>
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	4642      	mov	r2, r8
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	d12b      	bne.n	8005708 <_printf_float+0x23c>
 80056b0:	e767      	b.n	8005582 <_printf_float+0xb6>
 80056b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056b6:	f240 80dd 	bls.w	8005874 <_printf_float+0x3a8>
 80056ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056be:	2200      	movs	r2, #0
 80056c0:	2300      	movs	r3, #0
 80056c2:	f7fb fa09 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d033      	beq.n	8005732 <_printf_float+0x266>
 80056ca:	4a37      	ldr	r2, [pc, #220]	@ (80057a8 <_printf_float+0x2dc>)
 80056cc:	2301      	movs	r3, #1
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	f43f af54 	beq.w	8005582 <_printf_float+0xb6>
 80056da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056de:	4543      	cmp	r3, r8
 80056e0:	db02      	blt.n	80056e8 <_printf_float+0x21c>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	07d8      	lsls	r0, r3, #31
 80056e6:	d50f      	bpl.n	8005708 <_printf_float+0x23c>
 80056e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f af45 	beq.w	8005582 <_printf_float+0xb6>
 80056f8:	f04f 0900 	mov.w	r9, #0
 80056fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005700:	f104 0a1a 	add.w	sl, r4, #26
 8005704:	45c8      	cmp	r8, r9
 8005706:	dc09      	bgt.n	800571c <_printf_float+0x250>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	079b      	lsls	r3, r3, #30
 800570c:	f100 8103 	bmi.w	8005916 <_printf_float+0x44a>
 8005710:	68e0      	ldr	r0, [r4, #12]
 8005712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005714:	4298      	cmp	r0, r3
 8005716:	bfb8      	it	lt
 8005718:	4618      	movlt	r0, r3
 800571a:	e734      	b.n	8005586 <_printf_float+0xba>
 800571c:	2301      	movs	r3, #1
 800571e:	4652      	mov	r2, sl
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f af2b 	beq.w	8005582 <_printf_float+0xb6>
 800572c:	f109 0901 	add.w	r9, r9, #1
 8005730:	e7e8      	b.n	8005704 <_printf_float+0x238>
 8005732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	dc39      	bgt.n	80057ac <_printf_float+0x2e0>
 8005738:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <_printf_float+0x2dc>)
 800573a:	2301      	movs	r3, #1
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	f43f af1d 	beq.w	8005582 <_printf_float+0xb6>
 8005748:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800574c:	ea59 0303 	orrs.w	r3, r9, r3
 8005750:	d102      	bne.n	8005758 <_printf_float+0x28c>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	07d9      	lsls	r1, r3, #31
 8005756:	d5d7      	bpl.n	8005708 <_printf_float+0x23c>
 8005758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	47b8      	blx	r7
 8005762:	3001      	adds	r0, #1
 8005764:	f43f af0d 	beq.w	8005582 <_printf_float+0xb6>
 8005768:	f04f 0a00 	mov.w	sl, #0
 800576c:	f104 0b1a 	add.w	fp, r4, #26
 8005770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005772:	425b      	negs	r3, r3
 8005774:	4553      	cmp	r3, sl
 8005776:	dc01      	bgt.n	800577c <_printf_float+0x2b0>
 8005778:	464b      	mov	r3, r9
 800577a:	e793      	b.n	80056a4 <_printf_float+0x1d8>
 800577c:	2301      	movs	r3, #1
 800577e:	465a      	mov	r2, fp
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	f43f aefb 	beq.w	8005582 <_printf_float+0xb6>
 800578c:	f10a 0a01 	add.w	sl, sl, #1
 8005790:	e7ee      	b.n	8005770 <_printf_float+0x2a4>
 8005792:	bf00      	nop
 8005794:	7fefffff 	.word	0x7fefffff
 8005798:	08009ab0 	.word	0x08009ab0
 800579c:	08009ab4 	.word	0x08009ab4
 80057a0:	08009ab8 	.word	0x08009ab8
 80057a4:	08009abc 	.word	0x08009abc
 80057a8:	08009ac0 	.word	0x08009ac0
 80057ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057b2:	4553      	cmp	r3, sl
 80057b4:	bfa8      	it	ge
 80057b6:	4653      	movge	r3, sl
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	4699      	mov	r9, r3
 80057bc:	dc36      	bgt.n	800582c <_printf_float+0x360>
 80057be:	f04f 0b00 	mov.w	fp, #0
 80057c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057c6:	f104 021a 	add.w	r2, r4, #26
 80057ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057cc:	9306      	str	r3, [sp, #24]
 80057ce:	eba3 0309 	sub.w	r3, r3, r9
 80057d2:	455b      	cmp	r3, fp
 80057d4:	dc31      	bgt.n	800583a <_printf_float+0x36e>
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	459a      	cmp	sl, r3
 80057da:	dc3a      	bgt.n	8005852 <_printf_float+0x386>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07da      	lsls	r2, r3, #31
 80057e0:	d437      	bmi.n	8005852 <_printf_float+0x386>
 80057e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e4:	ebaa 0903 	sub.w	r9, sl, r3
 80057e8:	9b06      	ldr	r3, [sp, #24]
 80057ea:	ebaa 0303 	sub.w	r3, sl, r3
 80057ee:	4599      	cmp	r9, r3
 80057f0:	bfa8      	it	ge
 80057f2:	4699      	movge	r9, r3
 80057f4:	f1b9 0f00 	cmp.w	r9, #0
 80057f8:	dc33      	bgt.n	8005862 <_printf_float+0x396>
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005802:	f104 0b1a 	add.w	fp, r4, #26
 8005806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005808:	ebaa 0303 	sub.w	r3, sl, r3
 800580c:	eba3 0309 	sub.w	r3, r3, r9
 8005810:	4543      	cmp	r3, r8
 8005812:	f77f af79 	ble.w	8005708 <_printf_float+0x23c>
 8005816:	2301      	movs	r3, #1
 8005818:	465a      	mov	r2, fp
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f aeae 	beq.w	8005582 <_printf_float+0xb6>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	e7ec      	b.n	8005806 <_printf_float+0x33a>
 800582c:	4642      	mov	r2, r8
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	d1c2      	bne.n	80057be <_printf_float+0x2f2>
 8005838:	e6a3      	b.n	8005582 <_printf_float+0xb6>
 800583a:	2301      	movs	r3, #1
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	9206      	str	r2, [sp, #24]
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f ae9c 	beq.w	8005582 <_printf_float+0xb6>
 800584a:	9a06      	ldr	r2, [sp, #24]
 800584c:	f10b 0b01 	add.w	fp, fp, #1
 8005850:	e7bb      	b.n	80057ca <_printf_float+0x2fe>
 8005852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	d1c0      	bne.n	80057e2 <_printf_float+0x316>
 8005860:	e68f      	b.n	8005582 <_printf_float+0xb6>
 8005862:	9a06      	ldr	r2, [sp, #24]
 8005864:	464b      	mov	r3, r9
 8005866:	4442      	add	r2, r8
 8005868:	4631      	mov	r1, r6
 800586a:	4628      	mov	r0, r5
 800586c:	47b8      	blx	r7
 800586e:	3001      	adds	r0, #1
 8005870:	d1c3      	bne.n	80057fa <_printf_float+0x32e>
 8005872:	e686      	b.n	8005582 <_printf_float+0xb6>
 8005874:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005878:	f1ba 0f01 	cmp.w	sl, #1
 800587c:	dc01      	bgt.n	8005882 <_printf_float+0x3b6>
 800587e:	07db      	lsls	r3, r3, #31
 8005880:	d536      	bpl.n	80058f0 <_printf_float+0x424>
 8005882:	2301      	movs	r3, #1
 8005884:	4642      	mov	r2, r8
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f ae78 	beq.w	8005582 <_printf_float+0xb6>
 8005892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f ae70 	beq.w	8005582 <_printf_float+0xb6>
 80058a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058a6:	2200      	movs	r2, #0
 80058a8:	2300      	movs	r3, #0
 80058aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ae:	f7fb f913 	bl	8000ad8 <__aeabi_dcmpeq>
 80058b2:	b9c0      	cbnz	r0, 80058e6 <_printf_float+0x41a>
 80058b4:	4653      	mov	r3, sl
 80058b6:	f108 0201 	add.w	r2, r8, #1
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	d10c      	bne.n	80058de <_printf_float+0x412>
 80058c4:	e65d      	b.n	8005582 <_printf_float+0xb6>
 80058c6:	2301      	movs	r3, #1
 80058c8:	465a      	mov	r2, fp
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	f43f ae56 	beq.w	8005582 <_printf_float+0xb6>
 80058d6:	f108 0801 	add.w	r8, r8, #1
 80058da:	45d0      	cmp	r8, sl
 80058dc:	dbf3      	blt.n	80058c6 <_printf_float+0x3fa>
 80058de:	464b      	mov	r3, r9
 80058e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058e4:	e6df      	b.n	80056a6 <_printf_float+0x1da>
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	f104 0b1a 	add.w	fp, r4, #26
 80058ee:	e7f4      	b.n	80058da <_printf_float+0x40e>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4642      	mov	r2, r8
 80058f4:	e7e1      	b.n	80058ba <_printf_float+0x3ee>
 80058f6:	2301      	movs	r3, #1
 80058f8:	464a      	mov	r2, r9
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	f43f ae3e 	beq.w	8005582 <_printf_float+0xb6>
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	68e3      	ldr	r3, [r4, #12]
 800590c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800590e:	1a5b      	subs	r3, r3, r1
 8005910:	4543      	cmp	r3, r8
 8005912:	dcf0      	bgt.n	80058f6 <_printf_float+0x42a>
 8005914:	e6fc      	b.n	8005710 <_printf_float+0x244>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	f104 0919 	add.w	r9, r4, #25
 800591e:	e7f4      	b.n	800590a <_printf_float+0x43e>

08005920 <_printf_common>:
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	4616      	mov	r6, r2
 8005926:	4698      	mov	r8, r3
 8005928:	688a      	ldr	r2, [r1, #8]
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005930:	4293      	cmp	r3, r2
 8005932:	bfb8      	it	lt
 8005934:	4613      	movlt	r3, r2
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800593c:	4607      	mov	r7, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b10a      	cbz	r2, 8005946 <_printf_common+0x26>
 8005942:	3301      	adds	r3, #1
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	0699      	lsls	r1, r3, #26
 800594a:	bf42      	ittt	mi
 800594c:	6833      	ldrmi	r3, [r6, #0]
 800594e:	3302      	addmi	r3, #2
 8005950:	6033      	strmi	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	f015 0506 	ands.w	r5, r5, #6
 8005958:	d106      	bne.n	8005968 <_printf_common+0x48>
 800595a:	f104 0a19 	add.w	sl, r4, #25
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	6832      	ldr	r2, [r6, #0]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	42ab      	cmp	r3, r5
 8005966:	dc26      	bgt.n	80059b6 <_printf_common+0x96>
 8005968:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	3b00      	subs	r3, #0
 8005970:	bf18      	it	ne
 8005972:	2301      	movne	r3, #1
 8005974:	0692      	lsls	r2, r2, #26
 8005976:	d42b      	bmi.n	80059d0 <_printf_common+0xb0>
 8005978:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800597c:	4641      	mov	r1, r8
 800597e:	4638      	mov	r0, r7
 8005980:	47c8      	blx	r9
 8005982:	3001      	adds	r0, #1
 8005984:	d01e      	beq.n	80059c4 <_printf_common+0xa4>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6922      	ldr	r2, [r4, #16]
 800598a:	f003 0306 	and.w	r3, r3, #6
 800598e:	2b04      	cmp	r3, #4
 8005990:	bf02      	ittt	eq
 8005992:	68e5      	ldreq	r5, [r4, #12]
 8005994:	6833      	ldreq	r3, [r6, #0]
 8005996:	1aed      	subeq	r5, r5, r3
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	bf0c      	ite	eq
 800599c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a0:	2500      	movne	r5, #0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bfc4      	itt	gt
 80059a6:	1a9b      	subgt	r3, r3, r2
 80059a8:	18ed      	addgt	r5, r5, r3
 80059aa:	2600      	movs	r6, #0
 80059ac:	341a      	adds	r4, #26
 80059ae:	42b5      	cmp	r5, r6
 80059b0:	d11a      	bne.n	80059e8 <_printf_common+0xc8>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e008      	b.n	80059c8 <_printf_common+0xa8>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4652      	mov	r2, sl
 80059ba:	4641      	mov	r1, r8
 80059bc:	4638      	mov	r0, r7
 80059be:	47c8      	blx	r9
 80059c0:	3001      	adds	r0, #1
 80059c2:	d103      	bne.n	80059cc <_printf_common+0xac>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	3501      	adds	r5, #1
 80059ce:	e7c6      	b.n	800595e <_printf_common+0x3e>
 80059d0:	18e1      	adds	r1, r4, r3
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	2030      	movs	r0, #48	@ 0x30
 80059d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059da:	4422      	add	r2, r4
 80059dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059e4:	3302      	adds	r3, #2
 80059e6:	e7c7      	b.n	8005978 <_printf_common+0x58>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4622      	mov	r2, r4
 80059ec:	4641      	mov	r1, r8
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c8      	blx	r9
 80059f2:	3001      	adds	r0, #1
 80059f4:	d0e6      	beq.n	80059c4 <_printf_common+0xa4>
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7d9      	b.n	80059ae <_printf_common+0x8e>
	...

080059fc <_printf_i>:
 80059fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	7e0f      	ldrb	r7, [r1, #24]
 8005a02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a04:	2f78      	cmp	r7, #120	@ 0x78
 8005a06:	4691      	mov	r9, r2
 8005a08:	4680      	mov	r8, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	469a      	mov	sl, r3
 8005a0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a12:	d807      	bhi.n	8005a24 <_printf_i+0x28>
 8005a14:	2f62      	cmp	r7, #98	@ 0x62
 8005a16:	d80a      	bhi.n	8005a2e <_printf_i+0x32>
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	f000 80d2 	beq.w	8005bc2 <_printf_i+0x1c6>
 8005a1e:	2f58      	cmp	r7, #88	@ 0x58
 8005a20:	f000 80b9 	beq.w	8005b96 <_printf_i+0x19a>
 8005a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a2c:	e03a      	b.n	8005aa4 <_printf_i+0xa8>
 8005a2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a32:	2b15      	cmp	r3, #21
 8005a34:	d8f6      	bhi.n	8005a24 <_printf_i+0x28>
 8005a36:	a101      	add	r1, pc, #4	@ (adr r1, 8005a3c <_printf_i+0x40>)
 8005a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005aa9 	.word	0x08005aa9
 8005a44:	08005a25 	.word	0x08005a25
 8005a48:	08005a25 	.word	0x08005a25
 8005a4c:	08005a25 	.word	0x08005a25
 8005a50:	08005a25 	.word	0x08005a25
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005a25 	.word	0x08005a25
 8005a5c:	08005a25 	.word	0x08005a25
 8005a60:	08005a25 	.word	0x08005a25
 8005a64:	08005a25 	.word	0x08005a25
 8005a68:	08005ba9 	.word	0x08005ba9
 8005a6c:	08005ad3 	.word	0x08005ad3
 8005a70:	08005b63 	.word	0x08005b63
 8005a74:	08005a25 	.word	0x08005a25
 8005a78:	08005a25 	.word	0x08005a25
 8005a7c:	08005bcb 	.word	0x08005bcb
 8005a80:	08005a25 	.word	0x08005a25
 8005a84:	08005ad3 	.word	0x08005ad3
 8005a88:	08005a25 	.word	0x08005a25
 8005a8c:	08005a25 	.word	0x08005a25
 8005a90:	08005b6b 	.word	0x08005b6b
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6032      	str	r2, [r6, #0]
 8005a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e09d      	b.n	8005be4 <_printf_i+0x1e8>
 8005aa8:	6833      	ldr	r3, [r6, #0]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1d19      	adds	r1, r3, #4
 8005aae:	6031      	str	r1, [r6, #0]
 8005ab0:	0606      	lsls	r6, r0, #24
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0xbc>
 8005ab4:	681d      	ldr	r5, [r3, #0]
 8005ab6:	e003      	b.n	8005ac0 <_printf_i+0xc4>
 8005ab8:	0645      	lsls	r5, r0, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0xb8>
 8005abc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	da03      	bge.n	8005acc <_printf_i+0xd0>
 8005ac4:	232d      	movs	r3, #45	@ 0x2d
 8005ac6:	426d      	negs	r5, r5
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005acc:	4859      	ldr	r0, [pc, #356]	@ (8005c34 <_printf_i+0x238>)
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e011      	b.n	8005af6 <_printf_i+0xfa>
 8005ad2:	6821      	ldr	r1, [r4, #0]
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	0608      	lsls	r0, r1, #24
 8005ad8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005adc:	d402      	bmi.n	8005ae4 <_printf_i+0xe8>
 8005ade:	0649      	lsls	r1, r1, #25
 8005ae0:	bf48      	it	mi
 8005ae2:	b2ad      	uxthmi	r5, r5
 8005ae4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <_printf_i+0x238>)
 8005ae8:	6033      	str	r3, [r6, #0]
 8005aea:	bf14      	ite	ne
 8005aec:	230a      	movne	r3, #10
 8005aee:	2308      	moveq	r3, #8
 8005af0:	2100      	movs	r1, #0
 8005af2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005af6:	6866      	ldr	r6, [r4, #4]
 8005af8:	60a6      	str	r6, [r4, #8]
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	bfa2      	ittt	ge
 8005afe:	6821      	ldrge	r1, [r4, #0]
 8005b00:	f021 0104 	bicge.w	r1, r1, #4
 8005b04:	6021      	strge	r1, [r4, #0]
 8005b06:	b90d      	cbnz	r5, 8005b0c <_printf_i+0x110>
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	d04b      	beq.n	8005ba4 <_printf_i+0x1a8>
 8005b0c:	4616      	mov	r6, r2
 8005b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b12:	fb03 5711 	mls	r7, r3, r1, r5
 8005b16:	5dc7      	ldrb	r7, [r0, r7]
 8005b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b1c:	462f      	mov	r7, r5
 8005b1e:	42bb      	cmp	r3, r7
 8005b20:	460d      	mov	r5, r1
 8005b22:	d9f4      	bls.n	8005b0e <_printf_i+0x112>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d10b      	bne.n	8005b40 <_printf_i+0x144>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07df      	lsls	r7, r3, #31
 8005b2c:	d508      	bpl.n	8005b40 <_printf_i+0x144>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6861      	ldr	r1, [r4, #4]
 8005b32:	4299      	cmp	r1, r3
 8005b34:	bfde      	ittt	le
 8005b36:	2330      	movle	r3, #48	@ 0x30
 8005b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b40:	1b92      	subs	r2, r2, r6
 8005b42:	6122      	str	r2, [r4, #16]
 8005b44:	f8cd a000 	str.w	sl, [sp]
 8005b48:	464b      	mov	r3, r9
 8005b4a:	aa03      	add	r2, sp, #12
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7ff fee6 	bl	8005920 <_printf_common>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d14a      	bne.n	8005bee <_printf_i+0x1f2>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b004      	add	sp, #16
 8005b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	4833      	ldr	r0, [pc, #204]	@ (8005c38 <_printf_i+0x23c>)
 8005b6c:	2778      	movs	r7, #120	@ 0x78
 8005b6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	6831      	ldr	r1, [r6, #0]
 8005b76:	061f      	lsls	r7, r3, #24
 8005b78:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b7c:	d402      	bmi.n	8005b84 <_printf_i+0x188>
 8005b7e:	065f      	lsls	r7, r3, #25
 8005b80:	bf48      	it	mi
 8005b82:	b2ad      	uxthmi	r5, r5
 8005b84:	6031      	str	r1, [r6, #0]
 8005b86:	07d9      	lsls	r1, r3, #31
 8005b88:	bf44      	itt	mi
 8005b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8e:	6023      	strmi	r3, [r4, #0]
 8005b90:	b11d      	cbz	r5, 8005b9a <_printf_i+0x19e>
 8005b92:	2310      	movs	r3, #16
 8005b94:	e7ac      	b.n	8005af0 <_printf_i+0xf4>
 8005b96:	4827      	ldr	r0, [pc, #156]	@ (8005c34 <_printf_i+0x238>)
 8005b98:	e7e9      	b.n	8005b6e <_printf_i+0x172>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f023 0320 	bic.w	r3, r3, #32
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	e7f6      	b.n	8005b92 <_printf_i+0x196>
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	e7bd      	b.n	8005b24 <_printf_i+0x128>
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	6825      	ldr	r5, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	062e      	lsls	r6, r5, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1c0>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1c6>
 8005bbc:	0668      	lsls	r0, r5, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1bc>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4616      	mov	r6, r2
 8005bc8:	e7bc      	b.n	8005b44 <_printf_i+0x148>
 8005bca:	6833      	ldr	r3, [r6, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	6032      	str	r2, [r6, #0]
 8005bd0:	681e      	ldr	r6, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7fa fb02 	bl	80001e0 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1e6>
 8005bde:	1b80      	subs	r0, r0, r6
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bec:	e7aa      	b.n	8005b44 <_printf_i+0x148>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ad      	beq.n	8005b58 <_printf_i+0x15c>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x22e>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a6      	b.n	8005b5c <_printf_i+0x160>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09d      	beq.n	8005b58 <_printf_i+0x15c>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x212>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x206>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x222>
 8005c32:	bf00      	nop
 8005c34:	08009ac2 	.word	0x08009ac2
 8005c38:	08009ad3 	.word	0x08009ad3

08005c3c <_scanf_float>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	b087      	sub	sp, #28
 8005c42:	4617      	mov	r7, r2
 8005c44:	9303      	str	r3, [sp, #12]
 8005c46:	688b      	ldr	r3, [r1, #8]
 8005c48:	1e5a      	subs	r2, r3, #1
 8005c4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c4e:	bf81      	itttt	hi
 8005c50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c54:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c5c:	608b      	strhi	r3, [r1, #8]
 8005c5e:	680b      	ldr	r3, [r1, #0]
 8005c60:	460a      	mov	r2, r1
 8005c62:	f04f 0500 	mov.w	r5, #0
 8005c66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c6a:	f842 3b1c 	str.w	r3, [r2], #28
 8005c6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c72:	4680      	mov	r8, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	bf98      	it	ls
 8005c78:	f04f 0b00 	movls.w	fp, #0
 8005c7c:	9201      	str	r2, [sp, #4]
 8005c7e:	4616      	mov	r6, r2
 8005c80:	46aa      	mov	sl, r5
 8005c82:	46a9      	mov	r9, r5
 8005c84:	9502      	str	r5, [sp, #8]
 8005c86:	68a2      	ldr	r2, [r4, #8]
 8005c88:	b152      	cbz	r2, 8005ca0 <_scanf_float+0x64>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c90:	d864      	bhi.n	8005d5c <_scanf_float+0x120>
 8005c92:	2b40      	cmp	r3, #64	@ 0x40
 8005c94:	d83c      	bhi.n	8005d10 <_scanf_float+0xd4>
 8005c96:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c9a:	b2c8      	uxtb	r0, r1
 8005c9c:	280e      	cmp	r0, #14
 8005c9e:	d93a      	bls.n	8005d16 <_scanf_float+0xda>
 8005ca0:	f1b9 0f00 	cmp.w	r9, #0
 8005ca4:	d003      	beq.n	8005cae <_scanf_float+0x72>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cb2:	f1ba 0f01 	cmp.w	sl, #1
 8005cb6:	f200 8117 	bhi.w	8005ee8 <_scanf_float+0x2ac>
 8005cba:	9b01      	ldr	r3, [sp, #4]
 8005cbc:	429e      	cmp	r6, r3
 8005cbe:	f200 8108 	bhi.w	8005ed2 <_scanf_float+0x296>
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	b007      	add	sp, #28
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005cce:	2a0d      	cmp	r2, #13
 8005cd0:	d8e6      	bhi.n	8005ca0 <_scanf_float+0x64>
 8005cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8005cd8 <_scanf_float+0x9c>)
 8005cd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cd8:	08005e1f 	.word	0x08005e1f
 8005cdc:	08005ca1 	.word	0x08005ca1
 8005ce0:	08005ca1 	.word	0x08005ca1
 8005ce4:	08005ca1 	.word	0x08005ca1
 8005ce8:	08005e7f 	.word	0x08005e7f
 8005cec:	08005e57 	.word	0x08005e57
 8005cf0:	08005ca1 	.word	0x08005ca1
 8005cf4:	08005ca1 	.word	0x08005ca1
 8005cf8:	08005e2d 	.word	0x08005e2d
 8005cfc:	08005ca1 	.word	0x08005ca1
 8005d00:	08005ca1 	.word	0x08005ca1
 8005d04:	08005ca1 	.word	0x08005ca1
 8005d08:	08005ca1 	.word	0x08005ca1
 8005d0c:	08005de5 	.word	0x08005de5
 8005d10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d14:	e7db      	b.n	8005cce <_scanf_float+0x92>
 8005d16:	290e      	cmp	r1, #14
 8005d18:	d8c2      	bhi.n	8005ca0 <_scanf_float+0x64>
 8005d1a:	a001      	add	r0, pc, #4	@ (adr r0, 8005d20 <_scanf_float+0xe4>)
 8005d1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d20:	08005dd5 	.word	0x08005dd5
 8005d24:	08005ca1 	.word	0x08005ca1
 8005d28:	08005dd5 	.word	0x08005dd5
 8005d2c:	08005e6b 	.word	0x08005e6b
 8005d30:	08005ca1 	.word	0x08005ca1
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005dbb 	.word	0x08005dbb
 8005d3c:	08005dbb 	.word	0x08005dbb
 8005d40:	08005dbb 	.word	0x08005dbb
 8005d44:	08005dbb 	.word	0x08005dbb
 8005d48:	08005dbb 	.word	0x08005dbb
 8005d4c:	08005dbb 	.word	0x08005dbb
 8005d50:	08005dbb 	.word	0x08005dbb
 8005d54:	08005dbb 	.word	0x08005dbb
 8005d58:	08005dbb 	.word	0x08005dbb
 8005d5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d5e:	d809      	bhi.n	8005d74 <_scanf_float+0x138>
 8005d60:	2b60      	cmp	r3, #96	@ 0x60
 8005d62:	d8b2      	bhi.n	8005cca <_scanf_float+0x8e>
 8005d64:	2b54      	cmp	r3, #84	@ 0x54
 8005d66:	d07b      	beq.n	8005e60 <_scanf_float+0x224>
 8005d68:	2b59      	cmp	r3, #89	@ 0x59
 8005d6a:	d199      	bne.n	8005ca0 <_scanf_float+0x64>
 8005d6c:	2d07      	cmp	r5, #7
 8005d6e:	d197      	bne.n	8005ca0 <_scanf_float+0x64>
 8005d70:	2508      	movs	r5, #8
 8005d72:	e02c      	b.n	8005dce <_scanf_float+0x192>
 8005d74:	2b74      	cmp	r3, #116	@ 0x74
 8005d76:	d073      	beq.n	8005e60 <_scanf_float+0x224>
 8005d78:	2b79      	cmp	r3, #121	@ 0x79
 8005d7a:	e7f6      	b.n	8005d6a <_scanf_float+0x12e>
 8005d7c:	6821      	ldr	r1, [r4, #0]
 8005d7e:	05c8      	lsls	r0, r1, #23
 8005d80:	d51b      	bpl.n	8005dba <_scanf_float+0x17e>
 8005d82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d86:	6021      	str	r1, [r4, #0]
 8005d88:	f109 0901 	add.w	r9, r9, #1
 8005d8c:	f1bb 0f00 	cmp.w	fp, #0
 8005d90:	d003      	beq.n	8005d9a <_scanf_float+0x15e>
 8005d92:	3201      	adds	r2, #1
 8005d94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d98:	60a2      	str	r2, [r4, #8]
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	60a3      	str	r3, [r4, #8]
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	3301      	adds	r3, #1
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	f340 8087 	ble.w	8005ec0 <_scanf_float+0x284>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	e765      	b.n	8005c86 <_scanf_float+0x4a>
 8005dba:	eb1a 0105 	adds.w	r1, sl, r5
 8005dbe:	f47f af6f 	bne.w	8005ca0 <_scanf_float+0x64>
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	460d      	mov	r5, r1
 8005dcc:	468a      	mov	sl, r1
 8005dce:	f806 3b01 	strb.w	r3, [r6], #1
 8005dd2:	e7e2      	b.n	8005d9a <_scanf_float+0x15e>
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	0610      	lsls	r0, r2, #24
 8005dd8:	f57f af62 	bpl.w	8005ca0 <_scanf_float+0x64>
 8005ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005de0:	6022      	str	r2, [r4, #0]
 8005de2:	e7f4      	b.n	8005dce <_scanf_float+0x192>
 8005de4:	f1ba 0f00 	cmp.w	sl, #0
 8005de8:	d10e      	bne.n	8005e08 <_scanf_float+0x1cc>
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	d10e      	bne.n	8005e0e <_scanf_float+0x1d2>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005df6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005dfa:	d108      	bne.n	8005e0e <_scanf_float+0x1d2>
 8005dfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e00:	6022      	str	r2, [r4, #0]
 8005e02:	f04f 0a01 	mov.w	sl, #1
 8005e06:	e7e2      	b.n	8005dce <_scanf_float+0x192>
 8005e08:	f1ba 0f02 	cmp.w	sl, #2
 8005e0c:	d055      	beq.n	8005eba <_scanf_float+0x27e>
 8005e0e:	2d01      	cmp	r5, #1
 8005e10:	d002      	beq.n	8005e18 <_scanf_float+0x1dc>
 8005e12:	2d04      	cmp	r5, #4
 8005e14:	f47f af44 	bne.w	8005ca0 <_scanf_float+0x64>
 8005e18:	3501      	adds	r5, #1
 8005e1a:	b2ed      	uxtb	r5, r5
 8005e1c:	e7d7      	b.n	8005dce <_scanf_float+0x192>
 8005e1e:	f1ba 0f01 	cmp.w	sl, #1
 8005e22:	f47f af3d 	bne.w	8005ca0 <_scanf_float+0x64>
 8005e26:	f04f 0a02 	mov.w	sl, #2
 8005e2a:	e7d0      	b.n	8005dce <_scanf_float+0x192>
 8005e2c:	b97d      	cbnz	r5, 8005e4e <_scanf_float+0x212>
 8005e2e:	f1b9 0f00 	cmp.w	r9, #0
 8005e32:	f47f af38 	bne.w	8005ca6 <_scanf_float+0x6a>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e40:	f040 8108 	bne.w	8006054 <_scanf_float+0x418>
 8005e44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e48:	6022      	str	r2, [r4, #0]
 8005e4a:	2501      	movs	r5, #1
 8005e4c:	e7bf      	b.n	8005dce <_scanf_float+0x192>
 8005e4e:	2d03      	cmp	r5, #3
 8005e50:	d0e2      	beq.n	8005e18 <_scanf_float+0x1dc>
 8005e52:	2d05      	cmp	r5, #5
 8005e54:	e7de      	b.n	8005e14 <_scanf_float+0x1d8>
 8005e56:	2d02      	cmp	r5, #2
 8005e58:	f47f af22 	bne.w	8005ca0 <_scanf_float+0x64>
 8005e5c:	2503      	movs	r5, #3
 8005e5e:	e7b6      	b.n	8005dce <_scanf_float+0x192>
 8005e60:	2d06      	cmp	r5, #6
 8005e62:	f47f af1d 	bne.w	8005ca0 <_scanf_float+0x64>
 8005e66:	2507      	movs	r5, #7
 8005e68:	e7b1      	b.n	8005dce <_scanf_float+0x192>
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	0591      	lsls	r1, r2, #22
 8005e6e:	f57f af17 	bpl.w	8005ca0 <_scanf_float+0x64>
 8005e72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e7c:	e7a7      	b.n	8005dce <_scanf_float+0x192>
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e88:	d006      	beq.n	8005e98 <_scanf_float+0x25c>
 8005e8a:	0550      	lsls	r0, r2, #21
 8005e8c:	f57f af08 	bpl.w	8005ca0 <_scanf_float+0x64>
 8005e90:	f1b9 0f00 	cmp.w	r9, #0
 8005e94:	f000 80de 	beq.w	8006054 <_scanf_float+0x418>
 8005e98:	0591      	lsls	r1, r2, #22
 8005e9a:	bf58      	it	pl
 8005e9c:	9902      	ldrpl	r1, [sp, #8]
 8005e9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ea2:	bf58      	it	pl
 8005ea4:	eba9 0101 	subpl.w	r1, r9, r1
 8005ea8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005eac:	bf58      	it	pl
 8005eae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	f04f 0900 	mov.w	r9, #0
 8005eb8:	e789      	b.n	8005dce <_scanf_float+0x192>
 8005eba:	f04f 0a03 	mov.w	sl, #3
 8005ebe:	e786      	b.n	8005dce <_scanf_float+0x192>
 8005ec0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4798      	blx	r3
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f43f aedb 	beq.w	8005c86 <_scanf_float+0x4a>
 8005ed0:	e6e6      	b.n	8005ca0 <_scanf_float+0x64>
 8005ed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ed6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005eda:	463a      	mov	r2, r7
 8005edc:	4640      	mov	r0, r8
 8005ede:	4798      	blx	r3
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	e6e8      	b.n	8005cba <_scanf_float+0x7e>
 8005ee8:	1e6b      	subs	r3, r5, #1
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d824      	bhi.n	8005f38 <_scanf_float+0x2fc>
 8005eee:	2d02      	cmp	r5, #2
 8005ef0:	d836      	bhi.n	8005f60 <_scanf_float+0x324>
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	429e      	cmp	r6, r3
 8005ef6:	f67f aee4 	bls.w	8005cc2 <_scanf_float+0x86>
 8005efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f02:	463a      	mov	r2, r7
 8005f04:	4640      	mov	r0, r8
 8005f06:	4798      	blx	r3
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	e7f0      	b.n	8005ef2 <_scanf_float+0x2b6>
 8005f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f18:	463a      	mov	r2, r7
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	4798      	blx	r3
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f28:	fa5f fa8a 	uxtb.w	sl, sl
 8005f2c:	f1ba 0f02 	cmp.w	sl, #2
 8005f30:	d1ee      	bne.n	8005f10 <_scanf_float+0x2d4>
 8005f32:	3d03      	subs	r5, #3
 8005f34:	b2ed      	uxtb	r5, r5
 8005f36:	1b76      	subs	r6, r6, r5
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	05da      	lsls	r2, r3, #23
 8005f3c:	d530      	bpl.n	8005fa0 <_scanf_float+0x364>
 8005f3e:	055b      	lsls	r3, r3, #21
 8005f40:	d511      	bpl.n	8005f66 <_scanf_float+0x32a>
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	429e      	cmp	r6, r3
 8005f46:	f67f aebc 	bls.w	8005cc2 <_scanf_float+0x86>
 8005f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f52:	463a      	mov	r2, r7
 8005f54:	4640      	mov	r0, r8
 8005f56:	4798      	blx	r3
 8005f58:	6923      	ldr	r3, [r4, #16]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	e7f0      	b.n	8005f42 <_scanf_float+0x306>
 8005f60:	46aa      	mov	sl, r5
 8005f62:	46b3      	mov	fp, r6
 8005f64:	e7de      	b.n	8005f24 <_scanf_float+0x2e8>
 8005f66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	2965      	cmp	r1, #101	@ 0x65
 8005f6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f72:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	d00c      	beq.n	8005f94 <_scanf_float+0x358>
 8005f7a:	2945      	cmp	r1, #69	@ 0x45
 8005f7c:	d00a      	beq.n	8005f94 <_scanf_float+0x358>
 8005f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f82:	463a      	mov	r2, r7
 8005f84:	4640      	mov	r0, r8
 8005f86:	4798      	blx	r3
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	1eb5      	subs	r5, r6, #2
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f98:	463a      	mov	r2, r7
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4798      	blx	r3
 8005f9e:	462e      	mov	r6, r5
 8005fa0:	6822      	ldr	r2, [r4, #0]
 8005fa2:	f012 0210 	ands.w	r2, r2, #16
 8005fa6:	d001      	beq.n	8005fac <_scanf_float+0x370>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e68b      	b.n	8005cc4 <_scanf_float+0x88>
 8005fac:	7032      	strb	r2, [r6, #0]
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb8:	d11c      	bne.n	8005ff4 <_scanf_float+0x3b8>
 8005fba:	9b02      	ldr	r3, [sp, #8]
 8005fbc:	454b      	cmp	r3, r9
 8005fbe:	eba3 0209 	sub.w	r2, r3, r9
 8005fc2:	d123      	bne.n	800600c <_scanf_float+0x3d0>
 8005fc4:	9901      	ldr	r1, [sp, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4640      	mov	r0, r8
 8005fca:	f002 fbf9 	bl	80087c0 <_strtod_r>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	6821      	ldr	r1, [r4, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f011 0f02 	tst.w	r1, #2
 8005fd8:	ec57 6b10 	vmov	r6, r7, d0
 8005fdc:	f103 0204 	add.w	r2, r3, #4
 8005fe0:	d01f      	beq.n	8006022 <_scanf_float+0x3e6>
 8005fe2:	9903      	ldr	r1, [sp, #12]
 8005fe4:	600a      	str	r2, [r1, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	e9c3 6700 	strd	r6, r7, [r3]
 8005fec:	68e3      	ldr	r3, [r4, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60e3      	str	r3, [r4, #12]
 8005ff2:	e7d9      	b.n	8005fa8 <_scanf_float+0x36c>
 8005ff4:	9b04      	ldr	r3, [sp, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0e4      	beq.n	8005fc4 <_scanf_float+0x388>
 8005ffa:	9905      	ldr	r1, [sp, #20]
 8005ffc:	230a      	movs	r3, #10
 8005ffe:	3101      	adds	r1, #1
 8006000:	4640      	mov	r0, r8
 8006002:	f002 fc5d 	bl	80088c0 <_strtol_r>
 8006006:	9b04      	ldr	r3, [sp, #16]
 8006008:	9e05      	ldr	r6, [sp, #20]
 800600a:	1ac2      	subs	r2, r0, r3
 800600c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006010:	429e      	cmp	r6, r3
 8006012:	bf28      	it	cs
 8006014:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006018:	4910      	ldr	r1, [pc, #64]	@ (800605c <_scanf_float+0x420>)
 800601a:	4630      	mov	r0, r6
 800601c:	f000 f8e4 	bl	80061e8 <siprintf>
 8006020:	e7d0      	b.n	8005fc4 <_scanf_float+0x388>
 8006022:	f011 0f04 	tst.w	r1, #4
 8006026:	9903      	ldr	r1, [sp, #12]
 8006028:	600a      	str	r2, [r1, #0]
 800602a:	d1dc      	bne.n	8005fe6 <_scanf_float+0x3aa>
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	4632      	mov	r2, r6
 8006030:	463b      	mov	r3, r7
 8006032:	4630      	mov	r0, r6
 8006034:	4639      	mov	r1, r7
 8006036:	f7fa fd81 	bl	8000b3c <__aeabi_dcmpun>
 800603a:	b128      	cbz	r0, 8006048 <_scanf_float+0x40c>
 800603c:	4808      	ldr	r0, [pc, #32]	@ (8006060 <_scanf_float+0x424>)
 800603e:	f000 f9b7 	bl	80063b0 <nanf>
 8006042:	ed85 0a00 	vstr	s0, [r5]
 8006046:	e7d1      	b.n	8005fec <_scanf_float+0x3b0>
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa fdd4 	bl	8000bf8 <__aeabi_d2f>
 8006050:	6028      	str	r0, [r5, #0]
 8006052:	e7cb      	b.n	8005fec <_scanf_float+0x3b0>
 8006054:	f04f 0900 	mov.w	r9, #0
 8006058:	e629      	b.n	8005cae <_scanf_float+0x72>
 800605a:	bf00      	nop
 800605c:	08009ae4 	.word	0x08009ae4
 8006060:	08009e7d 	.word	0x08009e7d

08006064 <std>:
 8006064:	2300      	movs	r3, #0
 8006066:	b510      	push	{r4, lr}
 8006068:	4604      	mov	r4, r0
 800606a:	e9c0 3300 	strd	r3, r3, [r0]
 800606e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006072:	6083      	str	r3, [r0, #8]
 8006074:	8181      	strh	r1, [r0, #12]
 8006076:	6643      	str	r3, [r0, #100]	@ 0x64
 8006078:	81c2      	strh	r2, [r0, #14]
 800607a:	6183      	str	r3, [r0, #24]
 800607c:	4619      	mov	r1, r3
 800607e:	2208      	movs	r2, #8
 8006080:	305c      	adds	r0, #92	@ 0x5c
 8006082:	f000 f914 	bl	80062ae <memset>
 8006086:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <std+0x58>)
 8006088:	6263      	str	r3, [r4, #36]	@ 0x24
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <std+0x5c>)
 800608c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <std+0x60>)
 8006090:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <std+0x64>)
 8006094:	6323      	str	r3, [r4, #48]	@ 0x30
 8006096:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <std+0x68>)
 8006098:	6224      	str	r4, [r4, #32]
 800609a:	429c      	cmp	r4, r3
 800609c:	d006      	beq.n	80060ac <std+0x48>
 800609e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060a2:	4294      	cmp	r4, r2
 80060a4:	d002      	beq.n	80060ac <std+0x48>
 80060a6:	33d0      	adds	r3, #208	@ 0xd0
 80060a8:	429c      	cmp	r4, r3
 80060aa:	d105      	bne.n	80060b8 <std+0x54>
 80060ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b4:	f000 b978 	b.w	80063a8 <__retarget_lock_init_recursive>
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	bf00      	nop
 80060bc:	08006229 	.word	0x08006229
 80060c0:	0800624b 	.word	0x0800624b
 80060c4:	08006283 	.word	0x08006283
 80060c8:	080062a7 	.word	0x080062a7
 80060cc:	20000388 	.word	0x20000388

080060d0 <stdio_exit_handler>:
 80060d0:	4a02      	ldr	r2, [pc, #8]	@ (80060dc <stdio_exit_handler+0xc>)
 80060d2:	4903      	ldr	r1, [pc, #12]	@ (80060e0 <stdio_exit_handler+0x10>)
 80060d4:	4803      	ldr	r0, [pc, #12]	@ (80060e4 <stdio_exit_handler+0x14>)
 80060d6:	f000 b869 	b.w	80061ac <_fwalk_sglue>
 80060da:	bf00      	nop
 80060dc:	2000002c 	.word	0x2000002c
 80060e0:	08008c7d 	.word	0x08008c7d
 80060e4:	2000003c 	.word	0x2000003c

080060e8 <cleanup_stdio>:
 80060e8:	6841      	ldr	r1, [r0, #4]
 80060ea:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <cleanup_stdio+0x34>)
 80060ec:	4299      	cmp	r1, r3
 80060ee:	b510      	push	{r4, lr}
 80060f0:	4604      	mov	r4, r0
 80060f2:	d001      	beq.n	80060f8 <cleanup_stdio+0x10>
 80060f4:	f002 fdc2 	bl	8008c7c <_fflush_r>
 80060f8:	68a1      	ldr	r1, [r4, #8]
 80060fa:	4b09      	ldr	r3, [pc, #36]	@ (8006120 <cleanup_stdio+0x38>)
 80060fc:	4299      	cmp	r1, r3
 80060fe:	d002      	beq.n	8006106 <cleanup_stdio+0x1e>
 8006100:	4620      	mov	r0, r4
 8006102:	f002 fdbb 	bl	8008c7c <_fflush_r>
 8006106:	68e1      	ldr	r1, [r4, #12]
 8006108:	4b06      	ldr	r3, [pc, #24]	@ (8006124 <cleanup_stdio+0x3c>)
 800610a:	4299      	cmp	r1, r3
 800610c:	d004      	beq.n	8006118 <cleanup_stdio+0x30>
 800610e:	4620      	mov	r0, r4
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006114:	f002 bdb2 	b.w	8008c7c <_fflush_r>
 8006118:	bd10      	pop	{r4, pc}
 800611a:	bf00      	nop
 800611c:	20000388 	.word	0x20000388
 8006120:	200003f0 	.word	0x200003f0
 8006124:	20000458 	.word	0x20000458

08006128 <global_stdio_init.part.0>:
 8006128:	b510      	push	{r4, lr}
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <global_stdio_init.part.0+0x30>)
 800612c:	4c0b      	ldr	r4, [pc, #44]	@ (800615c <global_stdio_init.part.0+0x34>)
 800612e:	4a0c      	ldr	r2, [pc, #48]	@ (8006160 <global_stdio_init.part.0+0x38>)
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	4620      	mov	r0, r4
 8006134:	2200      	movs	r2, #0
 8006136:	2104      	movs	r1, #4
 8006138:	f7ff ff94 	bl	8006064 <std>
 800613c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006140:	2201      	movs	r2, #1
 8006142:	2109      	movs	r1, #9
 8006144:	f7ff ff8e 	bl	8006064 <std>
 8006148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800614c:	2202      	movs	r2, #2
 800614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006152:	2112      	movs	r1, #18
 8006154:	f7ff bf86 	b.w	8006064 <std>
 8006158:	200004c0 	.word	0x200004c0
 800615c:	20000388 	.word	0x20000388
 8006160:	080060d1 	.word	0x080060d1

08006164 <__sfp_lock_acquire>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__sfp_lock_acquire+0x8>)
 8006166:	f000 b920 	b.w	80063aa <__retarget_lock_acquire_recursive>
 800616a:	bf00      	nop
 800616c:	200004c9 	.word	0x200004c9

08006170 <__sfp_lock_release>:
 8006170:	4801      	ldr	r0, [pc, #4]	@ (8006178 <__sfp_lock_release+0x8>)
 8006172:	f000 b91b 	b.w	80063ac <__retarget_lock_release_recursive>
 8006176:	bf00      	nop
 8006178:	200004c9 	.word	0x200004c9

0800617c <__sinit>:
 800617c:	b510      	push	{r4, lr}
 800617e:	4604      	mov	r4, r0
 8006180:	f7ff fff0 	bl	8006164 <__sfp_lock_acquire>
 8006184:	6a23      	ldr	r3, [r4, #32]
 8006186:	b11b      	cbz	r3, 8006190 <__sinit+0x14>
 8006188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800618c:	f7ff bff0 	b.w	8006170 <__sfp_lock_release>
 8006190:	4b04      	ldr	r3, [pc, #16]	@ (80061a4 <__sinit+0x28>)
 8006192:	6223      	str	r3, [r4, #32]
 8006194:	4b04      	ldr	r3, [pc, #16]	@ (80061a8 <__sinit+0x2c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f5      	bne.n	8006188 <__sinit+0xc>
 800619c:	f7ff ffc4 	bl	8006128 <global_stdio_init.part.0>
 80061a0:	e7f2      	b.n	8006188 <__sinit+0xc>
 80061a2:	bf00      	nop
 80061a4:	080060e9 	.word	0x080060e9
 80061a8:	200004c0 	.word	0x200004c0

080061ac <_fwalk_sglue>:
 80061ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b0:	4607      	mov	r7, r0
 80061b2:	4688      	mov	r8, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	2600      	movs	r6, #0
 80061b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061bc:	f1b9 0901 	subs.w	r9, r9, #1
 80061c0:	d505      	bpl.n	80061ce <_fwalk_sglue+0x22>
 80061c2:	6824      	ldr	r4, [r4, #0]
 80061c4:	2c00      	cmp	r4, #0
 80061c6:	d1f7      	bne.n	80061b8 <_fwalk_sglue+0xc>
 80061c8:	4630      	mov	r0, r6
 80061ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d907      	bls.n	80061e4 <_fwalk_sglue+0x38>
 80061d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061d8:	3301      	adds	r3, #1
 80061da:	d003      	beq.n	80061e4 <_fwalk_sglue+0x38>
 80061dc:	4629      	mov	r1, r5
 80061de:	4638      	mov	r0, r7
 80061e0:	47c0      	blx	r8
 80061e2:	4306      	orrs	r6, r0
 80061e4:	3568      	adds	r5, #104	@ 0x68
 80061e6:	e7e9      	b.n	80061bc <_fwalk_sglue+0x10>

080061e8 <siprintf>:
 80061e8:	b40e      	push	{r1, r2, r3}
 80061ea:	b500      	push	{lr}
 80061ec:	b09c      	sub	sp, #112	@ 0x70
 80061ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	9006      	str	r0, [sp, #24]
 80061f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061f8:	4809      	ldr	r0, [pc, #36]	@ (8006220 <siprintf+0x38>)
 80061fa:	9107      	str	r1, [sp, #28]
 80061fc:	9104      	str	r1, [sp, #16]
 80061fe:	4909      	ldr	r1, [pc, #36]	@ (8006224 <siprintf+0x3c>)
 8006200:	f853 2b04 	ldr.w	r2, [r3], #4
 8006204:	9105      	str	r1, [sp, #20]
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	a902      	add	r1, sp, #8
 800620c:	f002 fbb6 	bl	800897c <_svfiprintf_r>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	b01c      	add	sp, #112	@ 0x70
 8006218:	f85d eb04 	ldr.w	lr, [sp], #4
 800621c:	b003      	add	sp, #12
 800621e:	4770      	bx	lr
 8006220:	20000038 	.word	0x20000038
 8006224:	ffff0208 	.word	0xffff0208

08006228 <__sread>:
 8006228:	b510      	push	{r4, lr}
 800622a:	460c      	mov	r4, r1
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	f000 f86c 	bl	800630c <_read_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	bfab      	itete	ge
 8006238:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800623a:	89a3      	ldrhlt	r3, [r4, #12]
 800623c:	181b      	addge	r3, r3, r0
 800623e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006242:	bfac      	ite	ge
 8006244:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006246:	81a3      	strhlt	r3, [r4, #12]
 8006248:	bd10      	pop	{r4, pc}

0800624a <__swrite>:
 800624a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624e:	461f      	mov	r7, r3
 8006250:	898b      	ldrh	r3, [r1, #12]
 8006252:	05db      	lsls	r3, r3, #23
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4616      	mov	r6, r2
 800625a:	d505      	bpl.n	8006268 <__swrite+0x1e>
 800625c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006260:	2302      	movs	r3, #2
 8006262:	2200      	movs	r2, #0
 8006264:	f000 f840 	bl	80062e8 <_lseek_r>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800626e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	4632      	mov	r2, r6
 8006276:	463b      	mov	r3, r7
 8006278:	4628      	mov	r0, r5
 800627a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627e:	f000 b857 	b.w	8006330 <_write_r>

08006282 <__sseek>:
 8006282:	b510      	push	{r4, lr}
 8006284:	460c      	mov	r4, r1
 8006286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628a:	f000 f82d 	bl	80062e8 <_lseek_r>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	bf15      	itete	ne
 8006294:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006296:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800629a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800629e:	81a3      	strheq	r3, [r4, #12]
 80062a0:	bf18      	it	ne
 80062a2:	81a3      	strhne	r3, [r4, #12]
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <__sclose>:
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f000 b80d 	b.w	80062c8 <_close_r>

080062ae <memset>:
 80062ae:	4402      	add	r2, r0
 80062b0:	4603      	mov	r3, r0
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d100      	bne.n	80062b8 <memset+0xa>
 80062b6:	4770      	bx	lr
 80062b8:	f803 1b01 	strb.w	r1, [r3], #1
 80062bc:	e7f9      	b.n	80062b2 <memset+0x4>
	...

080062c0 <_localeconv_r>:
 80062c0:	4800      	ldr	r0, [pc, #0]	@ (80062c4 <_localeconv_r+0x4>)
 80062c2:	4770      	bx	lr
 80062c4:	20000178 	.word	0x20000178

080062c8 <_close_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d06      	ldr	r5, [pc, #24]	@ (80062e4 <_close_r+0x1c>)
 80062cc:	2300      	movs	r3, #0
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	602b      	str	r3, [r5, #0]
 80062d4:	f7fb f9bf 	bl	8001656 <_close>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_close_r+0x1a>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_close_r+0x1a>
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	200004c4 	.word	0x200004c4

080062e8 <_lseek_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d07      	ldr	r5, [pc, #28]	@ (8006308 <_lseek_r+0x20>)
 80062ec:	4604      	mov	r4, r0
 80062ee:	4608      	mov	r0, r1
 80062f0:	4611      	mov	r1, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	602a      	str	r2, [r5, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f7fb f9d4 	bl	80016a4 <_lseek>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_lseek_r+0x1e>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_lseek_r+0x1e>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	200004c4 	.word	0x200004c4

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	@ (800632c <_read_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fb f962 	bl	80015e4 <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	200004c4 	.word	0x200004c4

08006330 <_write_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	@ (8006350 <_write_r+0x20>)
 8006334:	4604      	mov	r4, r0
 8006336:	4608      	mov	r0, r1
 8006338:	4611      	mov	r1, r2
 800633a:	2200      	movs	r2, #0
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f7fb f96d 	bl	800161e <_write>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_write_r+0x1e>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_write_r+0x1e>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	200004c4 	.word	0x200004c4

08006354 <__errno>:
 8006354:	4b01      	ldr	r3, [pc, #4]	@ (800635c <__errno+0x8>)
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000038 	.word	0x20000038

08006360 <__libc_init_array>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4d0d      	ldr	r5, [pc, #52]	@ (8006398 <__libc_init_array+0x38>)
 8006364:	4c0d      	ldr	r4, [pc, #52]	@ (800639c <__libc_init_array+0x3c>)
 8006366:	1b64      	subs	r4, r4, r5
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	2600      	movs	r6, #0
 800636c:	42a6      	cmp	r6, r4
 800636e:	d109      	bne.n	8006384 <__libc_init_array+0x24>
 8006370:	4d0b      	ldr	r5, [pc, #44]	@ (80063a0 <__libc_init_array+0x40>)
 8006372:	4c0c      	ldr	r4, [pc, #48]	@ (80063a4 <__libc_init_array+0x44>)
 8006374:	f003 fb72 	bl	8009a5c <_init>
 8006378:	1b64      	subs	r4, r4, r5
 800637a:	10a4      	asrs	r4, r4, #2
 800637c:	2600      	movs	r6, #0
 800637e:	42a6      	cmp	r6, r4
 8006380:	d105      	bne.n	800638e <__libc_init_array+0x2e>
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	f855 3b04 	ldr.w	r3, [r5], #4
 8006388:	4798      	blx	r3
 800638a:	3601      	adds	r6, #1
 800638c:	e7ee      	b.n	800636c <__libc_init_array+0xc>
 800638e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006392:	4798      	blx	r3
 8006394:	3601      	adds	r6, #1
 8006396:	e7f2      	b.n	800637e <__libc_init_array+0x1e>
 8006398:	08009ee8 	.word	0x08009ee8
 800639c:	08009ee8 	.word	0x08009ee8
 80063a0:	08009ee8 	.word	0x08009ee8
 80063a4:	08009eec 	.word	0x08009eec

080063a8 <__retarget_lock_init_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_acquire_recursive>:
 80063aa:	4770      	bx	lr

080063ac <__retarget_lock_release_recursive>:
 80063ac:	4770      	bx	lr
	...

080063b0 <nanf>:
 80063b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80063b8 <nanf+0x8>
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	7fc00000 	.word	0x7fc00000

080063bc <quorem>:
 80063bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	6903      	ldr	r3, [r0, #16]
 80063c2:	690c      	ldr	r4, [r1, #16]
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	4607      	mov	r7, r0
 80063c8:	db7e      	blt.n	80064c8 <quorem+0x10c>
 80063ca:	3c01      	subs	r4, #1
 80063cc:	f101 0814 	add.w	r8, r1, #20
 80063d0:	00a3      	lsls	r3, r4, #2
 80063d2:	f100 0514 	add.w	r5, r0, #20
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063e6:	3301      	adds	r3, #1
 80063e8:	429a      	cmp	r2, r3
 80063ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80063f2:	d32e      	bcc.n	8006452 <quorem+0x96>
 80063f4:	f04f 0a00 	mov.w	sl, #0
 80063f8:	46c4      	mov	ip, r8
 80063fa:	46ae      	mov	lr, r5
 80063fc:	46d3      	mov	fp, sl
 80063fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006402:	b298      	uxth	r0, r3
 8006404:	fb06 a000 	mla	r0, r6, r0, sl
 8006408:	0c02      	lsrs	r2, r0, #16
 800640a:	0c1b      	lsrs	r3, r3, #16
 800640c:	fb06 2303 	mla	r3, r6, r3, r2
 8006410:	f8de 2000 	ldr.w	r2, [lr]
 8006414:	b280      	uxth	r0, r0
 8006416:	b292      	uxth	r2, r2
 8006418:	1a12      	subs	r2, r2, r0
 800641a:	445a      	add	r2, fp
 800641c:	f8de 0000 	ldr.w	r0, [lr]
 8006420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006424:	b29b      	uxth	r3, r3
 8006426:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800642a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800642e:	b292      	uxth	r2, r2
 8006430:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006434:	45e1      	cmp	r9, ip
 8006436:	f84e 2b04 	str.w	r2, [lr], #4
 800643a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800643e:	d2de      	bcs.n	80063fe <quorem+0x42>
 8006440:	9b00      	ldr	r3, [sp, #0]
 8006442:	58eb      	ldr	r3, [r5, r3]
 8006444:	b92b      	cbnz	r3, 8006452 <quorem+0x96>
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	3b04      	subs	r3, #4
 800644a:	429d      	cmp	r5, r3
 800644c:	461a      	mov	r2, r3
 800644e:	d32f      	bcc.n	80064b0 <quorem+0xf4>
 8006450:	613c      	str	r4, [r7, #16]
 8006452:	4638      	mov	r0, r7
 8006454:	f001 f9c4 	bl	80077e0 <__mcmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	db25      	blt.n	80064a8 <quorem+0xec>
 800645c:	4629      	mov	r1, r5
 800645e:	2000      	movs	r0, #0
 8006460:	f858 2b04 	ldr.w	r2, [r8], #4
 8006464:	f8d1 c000 	ldr.w	ip, [r1]
 8006468:	fa1f fe82 	uxth.w	lr, r2
 800646c:	fa1f f38c 	uxth.w	r3, ip
 8006470:	eba3 030e 	sub.w	r3, r3, lr
 8006474:	4403      	add	r3, r0
 8006476:	0c12      	lsrs	r2, r2, #16
 8006478:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800647c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006486:	45c1      	cmp	r9, r8
 8006488:	f841 3b04 	str.w	r3, [r1], #4
 800648c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006490:	d2e6      	bcs.n	8006460 <quorem+0xa4>
 8006492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800649a:	b922      	cbnz	r2, 80064a6 <quorem+0xea>
 800649c:	3b04      	subs	r3, #4
 800649e:	429d      	cmp	r5, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	d30b      	bcc.n	80064bc <quorem+0x100>
 80064a4:	613c      	str	r4, [r7, #16]
 80064a6:	3601      	adds	r6, #1
 80064a8:	4630      	mov	r0, r6
 80064aa:	b003      	add	sp, #12
 80064ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	3b04      	subs	r3, #4
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d1cb      	bne.n	8006450 <quorem+0x94>
 80064b8:	3c01      	subs	r4, #1
 80064ba:	e7c6      	b.n	800644a <quorem+0x8e>
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	3b04      	subs	r3, #4
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	d1ef      	bne.n	80064a4 <quorem+0xe8>
 80064c4:	3c01      	subs	r4, #1
 80064c6:	e7ea      	b.n	800649e <quorem+0xe2>
 80064c8:	2000      	movs	r0, #0
 80064ca:	e7ee      	b.n	80064aa <quorem+0xee>
 80064cc:	0000      	movs	r0, r0
	...

080064d0 <_dtoa_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	69c7      	ldr	r7, [r0, #28]
 80064d6:	b099      	sub	sp, #100	@ 0x64
 80064d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064dc:	ec55 4b10 	vmov	r4, r5, d0
 80064e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80064e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80064e4:	4683      	mov	fp, r0
 80064e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80064e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064ea:	b97f      	cbnz	r7, 800650c <_dtoa_r+0x3c>
 80064ec:	2010      	movs	r0, #16
 80064ee:	f000 fdfd 	bl	80070ec <malloc>
 80064f2:	4602      	mov	r2, r0
 80064f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80064f8:	b920      	cbnz	r0, 8006504 <_dtoa_r+0x34>
 80064fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006798 <_dtoa_r+0x2c8>)
 80064fc:	21ef      	movs	r1, #239	@ 0xef
 80064fe:	48a7      	ldr	r0, [pc, #668]	@ (800679c <_dtoa_r+0x2cc>)
 8006500:	f002 fc36 	bl	8008d70 <__assert_func>
 8006504:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006508:	6007      	str	r7, [r0, #0]
 800650a:	60c7      	str	r7, [r0, #12]
 800650c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006510:	6819      	ldr	r1, [r3, #0]
 8006512:	b159      	cbz	r1, 800652c <_dtoa_r+0x5c>
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	604a      	str	r2, [r1, #4]
 8006518:	2301      	movs	r3, #1
 800651a:	4093      	lsls	r3, r2
 800651c:	608b      	str	r3, [r1, #8]
 800651e:	4658      	mov	r0, fp
 8006520:	f000 feda 	bl	80072d8 <_Bfree>
 8006524:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	1e2b      	subs	r3, r5, #0
 800652e:	bfb9      	ittee	lt
 8006530:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006534:	9303      	strlt	r3, [sp, #12]
 8006536:	2300      	movge	r3, #0
 8006538:	6033      	strge	r3, [r6, #0]
 800653a:	9f03      	ldr	r7, [sp, #12]
 800653c:	4b98      	ldr	r3, [pc, #608]	@ (80067a0 <_dtoa_r+0x2d0>)
 800653e:	bfbc      	itt	lt
 8006540:	2201      	movlt	r2, #1
 8006542:	6032      	strlt	r2, [r6, #0]
 8006544:	43bb      	bics	r3, r7
 8006546:	d112      	bne.n	800656e <_dtoa_r+0x9e>
 8006548:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800654a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006554:	4323      	orrs	r3, r4
 8006556:	f000 854d 	beq.w	8006ff4 <_dtoa_r+0xb24>
 800655a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800655c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067b4 <_dtoa_r+0x2e4>
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 854f 	beq.w	8007004 <_dtoa_r+0xb34>
 8006566:	f10a 0303 	add.w	r3, sl, #3
 800656a:	f000 bd49 	b.w	8007000 <_dtoa_r+0xb30>
 800656e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	ec51 0b17 	vmov	r0, r1, d7
 8006578:	2300      	movs	r3, #0
 800657a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800657e:	f7fa faab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006582:	4680      	mov	r8, r0
 8006584:	b158      	cbz	r0, 800659e <_dtoa_r+0xce>
 8006586:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006588:	2301      	movs	r3, #1
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800658e:	b113      	cbz	r3, 8006596 <_dtoa_r+0xc6>
 8006590:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006592:	4b84      	ldr	r3, [pc, #528]	@ (80067a4 <_dtoa_r+0x2d4>)
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80067b8 <_dtoa_r+0x2e8>
 800659a:	f000 bd33 	b.w	8007004 <_dtoa_r+0xb34>
 800659e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065a2:	aa16      	add	r2, sp, #88	@ 0x58
 80065a4:	a917      	add	r1, sp, #92	@ 0x5c
 80065a6:	4658      	mov	r0, fp
 80065a8:	f001 fa3a 	bl	8007a20 <__d2b>
 80065ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065b0:	4681      	mov	r9, r0
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	d077      	beq.n	80066a6 <_dtoa_r+0x1d6>
 80065b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80065bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065d0:	4619      	mov	r1, r3
 80065d2:	2200      	movs	r2, #0
 80065d4:	4b74      	ldr	r3, [pc, #464]	@ (80067a8 <_dtoa_r+0x2d8>)
 80065d6:	f7f9 fe5f 	bl	8000298 <__aeabi_dsub>
 80065da:	a369      	add	r3, pc, #420	@ (adr r3, 8006780 <_dtoa_r+0x2b0>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f7fa f812 	bl	8000608 <__aeabi_dmul>
 80065e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006788 <_dtoa_r+0x2b8>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fe57 	bl	800029c <__adddf3>
 80065ee:	4604      	mov	r4, r0
 80065f0:	4630      	mov	r0, r6
 80065f2:	460d      	mov	r5, r1
 80065f4:	f7f9 ff9e 	bl	8000534 <__aeabi_i2d>
 80065f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006790 <_dtoa_r+0x2c0>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7fa f803 	bl	8000608 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7f9 fe47 	bl	800029c <__adddf3>
 800660e:	4604      	mov	r4, r0
 8006610:	460d      	mov	r5, r1
 8006612:	f7fa faa9 	bl	8000b68 <__aeabi_d2iz>
 8006616:	2200      	movs	r2, #0
 8006618:	4607      	mov	r7, r0
 800661a:	2300      	movs	r3, #0
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7fa fa64 	bl	8000aec <__aeabi_dcmplt>
 8006624:	b140      	cbz	r0, 8006638 <_dtoa_r+0x168>
 8006626:	4638      	mov	r0, r7
 8006628:	f7f9 ff84 	bl	8000534 <__aeabi_i2d>
 800662c:	4622      	mov	r2, r4
 800662e:	462b      	mov	r3, r5
 8006630:	f7fa fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8006634:	b900      	cbnz	r0, 8006638 <_dtoa_r+0x168>
 8006636:	3f01      	subs	r7, #1
 8006638:	2f16      	cmp	r7, #22
 800663a:	d851      	bhi.n	80066e0 <_dtoa_r+0x210>
 800663c:	4b5b      	ldr	r3, [pc, #364]	@ (80067ac <_dtoa_r+0x2dc>)
 800663e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800664a:	f7fa fa4f 	bl	8000aec <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	d048      	beq.n	80066e4 <_dtoa_r+0x214>
 8006652:	3f01      	subs	r7, #1
 8006654:	2300      	movs	r3, #0
 8006656:	9312      	str	r3, [sp, #72]	@ 0x48
 8006658:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800665a:	1b9b      	subs	r3, r3, r6
 800665c:	1e5a      	subs	r2, r3, #1
 800665e:	bf44      	itt	mi
 8006660:	f1c3 0801 	rsbmi	r8, r3, #1
 8006664:	2300      	movmi	r3, #0
 8006666:	9208      	str	r2, [sp, #32]
 8006668:	bf54      	ite	pl
 800666a:	f04f 0800 	movpl.w	r8, #0
 800666e:	9308      	strmi	r3, [sp, #32]
 8006670:	2f00      	cmp	r7, #0
 8006672:	db39      	blt.n	80066e8 <_dtoa_r+0x218>
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006678:	443b      	add	r3, r7
 800667a:	9308      	str	r3, [sp, #32]
 800667c:	2300      	movs	r3, #0
 800667e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006682:	2b09      	cmp	r3, #9
 8006684:	d864      	bhi.n	8006750 <_dtoa_r+0x280>
 8006686:	2b05      	cmp	r3, #5
 8006688:	bfc4      	itt	gt
 800668a:	3b04      	subgt	r3, #4
 800668c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800668e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006690:	f1a3 0302 	sub.w	r3, r3, #2
 8006694:	bfcc      	ite	gt
 8006696:	2400      	movgt	r4, #0
 8006698:	2401      	movle	r4, #1
 800669a:	2b03      	cmp	r3, #3
 800669c:	d863      	bhi.n	8006766 <_dtoa_r+0x296>
 800669e:	e8df f003 	tbb	[pc, r3]
 80066a2:	372a      	.short	0x372a
 80066a4:	5535      	.short	0x5535
 80066a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066aa:	441e      	add	r6, r3
 80066ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	bfc1      	itttt	gt
 80066b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066b8:	409f      	lslgt	r7, r3
 80066ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066c2:	bfd6      	itet	le
 80066c4:	f1c3 0320 	rsble	r3, r3, #32
 80066c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80066cc:	fa04 f003 	lslle.w	r0, r4, r3
 80066d0:	f7f9 ff20 	bl	8000514 <__aeabi_ui2d>
 80066d4:	2201      	movs	r2, #1
 80066d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066da:	3e01      	subs	r6, #1
 80066dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80066de:	e777      	b.n	80065d0 <_dtoa_r+0x100>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7b8      	b.n	8006656 <_dtoa_r+0x186>
 80066e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80066e6:	e7b7      	b.n	8006658 <_dtoa_r+0x188>
 80066e8:	427b      	negs	r3, r7
 80066ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ec:	2300      	movs	r3, #0
 80066ee:	eba8 0807 	sub.w	r8, r8, r7
 80066f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066f4:	e7c4      	b.n	8006680 <_dtoa_r+0x1b0>
 80066f6:	2300      	movs	r3, #0
 80066f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dc35      	bgt.n	800676c <_dtoa_r+0x29c>
 8006700:	2301      	movs	r3, #1
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	9307      	str	r3, [sp, #28]
 8006706:	461a      	mov	r2, r3
 8006708:	920e      	str	r2, [sp, #56]	@ 0x38
 800670a:	e00b      	b.n	8006724 <_dtoa_r+0x254>
 800670c:	2301      	movs	r3, #1
 800670e:	e7f3      	b.n	80066f8 <_dtoa_r+0x228>
 8006710:	2300      	movs	r3, #0
 8006712:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	bfb8      	it	lt
 8006722:	2301      	movlt	r3, #1
 8006724:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006728:	2100      	movs	r1, #0
 800672a:	2204      	movs	r2, #4
 800672c:	f102 0514 	add.w	r5, r2, #20
 8006730:	429d      	cmp	r5, r3
 8006732:	d91f      	bls.n	8006774 <_dtoa_r+0x2a4>
 8006734:	6041      	str	r1, [r0, #4]
 8006736:	4658      	mov	r0, fp
 8006738:	f000 fd8e 	bl	8007258 <_Balloc>
 800673c:	4682      	mov	sl, r0
 800673e:	2800      	cmp	r0, #0
 8006740:	d13c      	bne.n	80067bc <_dtoa_r+0x2ec>
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <_dtoa_r+0x2e0>)
 8006744:	4602      	mov	r2, r0
 8006746:	f240 11af 	movw	r1, #431	@ 0x1af
 800674a:	e6d8      	b.n	80064fe <_dtoa_r+0x2e>
 800674c:	2301      	movs	r3, #1
 800674e:	e7e0      	b.n	8006712 <_dtoa_r+0x242>
 8006750:	2401      	movs	r4, #1
 8006752:	2300      	movs	r3, #0
 8006754:	9309      	str	r3, [sp, #36]	@ 0x24
 8006756:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	2200      	movs	r2, #0
 8006762:	2312      	movs	r3, #18
 8006764:	e7d0      	b.n	8006708 <_dtoa_r+0x238>
 8006766:	2301      	movs	r3, #1
 8006768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800676a:	e7f5      	b.n	8006758 <_dtoa_r+0x288>
 800676c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	9307      	str	r3, [sp, #28]
 8006772:	e7d7      	b.n	8006724 <_dtoa_r+0x254>
 8006774:	3101      	adds	r1, #1
 8006776:	0052      	lsls	r2, r2, #1
 8006778:	e7d8      	b.n	800672c <_dtoa_r+0x25c>
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	636f4361 	.word	0x636f4361
 8006784:	3fd287a7 	.word	0x3fd287a7
 8006788:	8b60c8b3 	.word	0x8b60c8b3
 800678c:	3fc68a28 	.word	0x3fc68a28
 8006790:	509f79fb 	.word	0x509f79fb
 8006794:	3fd34413 	.word	0x3fd34413
 8006798:	08009af6 	.word	0x08009af6
 800679c:	08009b0d 	.word	0x08009b0d
 80067a0:	7ff00000 	.word	0x7ff00000
 80067a4:	08009ac1 	.word	0x08009ac1
 80067a8:	3ff80000 	.word	0x3ff80000
 80067ac:	08009c08 	.word	0x08009c08
 80067b0:	08009b65 	.word	0x08009b65
 80067b4:	08009af2 	.word	0x08009af2
 80067b8:	08009ac0 	.word	0x08009ac0
 80067bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067c0:	6018      	str	r0, [r3, #0]
 80067c2:	9b07      	ldr	r3, [sp, #28]
 80067c4:	2b0e      	cmp	r3, #14
 80067c6:	f200 80a4 	bhi.w	8006912 <_dtoa_r+0x442>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	f000 80a1 	beq.w	8006912 <_dtoa_r+0x442>
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	dd33      	ble.n	800683c <_dtoa_r+0x36c>
 80067d4:	4bad      	ldr	r3, [pc, #692]	@ (8006a8c <_dtoa_r+0x5bc>)
 80067d6:	f007 020f 	and.w	r2, r7, #15
 80067da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067de:	ed93 7b00 	vldr	d7, [r3]
 80067e2:	05f8      	lsls	r0, r7, #23
 80067e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80067e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067ec:	d516      	bpl.n	800681c <_dtoa_r+0x34c>
 80067ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006a90 <_dtoa_r+0x5c0>)
 80067f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f8:	f7fa f830 	bl	800085c <__aeabi_ddiv>
 80067fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006800:	f004 040f 	and.w	r4, r4, #15
 8006804:	2603      	movs	r6, #3
 8006806:	4da2      	ldr	r5, [pc, #648]	@ (8006a90 <_dtoa_r+0x5c0>)
 8006808:	b954      	cbnz	r4, 8006820 <_dtoa_r+0x350>
 800680a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006812:	f7fa f823 	bl	800085c <__aeabi_ddiv>
 8006816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681a:	e028      	b.n	800686e <_dtoa_r+0x39e>
 800681c:	2602      	movs	r6, #2
 800681e:	e7f2      	b.n	8006806 <_dtoa_r+0x336>
 8006820:	07e1      	lsls	r1, r4, #31
 8006822:	d508      	bpl.n	8006836 <_dtoa_r+0x366>
 8006824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006828:	e9d5 2300 	ldrd	r2, r3, [r5]
 800682c:	f7f9 feec 	bl	8000608 <__aeabi_dmul>
 8006830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006834:	3601      	adds	r6, #1
 8006836:	1064      	asrs	r4, r4, #1
 8006838:	3508      	adds	r5, #8
 800683a:	e7e5      	b.n	8006808 <_dtoa_r+0x338>
 800683c:	f000 80d2 	beq.w	80069e4 <_dtoa_r+0x514>
 8006840:	427c      	negs	r4, r7
 8006842:	4b92      	ldr	r3, [pc, #584]	@ (8006a8c <_dtoa_r+0x5bc>)
 8006844:	4d92      	ldr	r5, [pc, #584]	@ (8006a90 <_dtoa_r+0x5c0>)
 8006846:	f004 020f 	and.w	r2, r4, #15
 800684a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006856:	f7f9 fed7 	bl	8000608 <__aeabi_dmul>
 800685a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685e:	1124      	asrs	r4, r4, #4
 8006860:	2300      	movs	r3, #0
 8006862:	2602      	movs	r6, #2
 8006864:	2c00      	cmp	r4, #0
 8006866:	f040 80b2 	bne.w	80069ce <_dtoa_r+0x4fe>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1d3      	bne.n	8006816 <_dtoa_r+0x346>
 800686e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006870:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80b7 	beq.w	80069e8 <_dtoa_r+0x518>
 800687a:	4b86      	ldr	r3, [pc, #536]	@ (8006a94 <_dtoa_r+0x5c4>)
 800687c:	2200      	movs	r2, #0
 800687e:	4620      	mov	r0, r4
 8006880:	4629      	mov	r1, r5
 8006882:	f7fa f933 	bl	8000aec <__aeabi_dcmplt>
 8006886:	2800      	cmp	r0, #0
 8006888:	f000 80ae 	beq.w	80069e8 <_dtoa_r+0x518>
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80aa 	beq.w	80069e8 <_dtoa_r+0x518>
 8006894:	9b00      	ldr	r3, [sp, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dd37      	ble.n	800690a <_dtoa_r+0x43a>
 800689a:	1e7b      	subs	r3, r7, #1
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	4620      	mov	r0, r4
 80068a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006a98 <_dtoa_r+0x5c8>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7f9 feaf 	bl	8000608 <__aeabi_dmul>
 80068aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ae:	9c00      	ldr	r4, [sp, #0]
 80068b0:	3601      	adds	r6, #1
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7f9 fe3e 	bl	8000534 <__aeabi_i2d>
 80068b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068bc:	f7f9 fea4 	bl	8000608 <__aeabi_dmul>
 80068c0:	4b76      	ldr	r3, [pc, #472]	@ (8006a9c <_dtoa_r+0x5cc>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f7f9 fcea 	bl	800029c <__adddf3>
 80068c8:	4605      	mov	r5, r0
 80068ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068ce:	2c00      	cmp	r4, #0
 80068d0:	f040 808d 	bne.w	80069ee <_dtoa_r+0x51e>
 80068d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d8:	4b71      	ldr	r3, [pc, #452]	@ (8006aa0 <_dtoa_r+0x5d0>)
 80068da:	2200      	movs	r2, #0
 80068dc:	f7f9 fcdc 	bl	8000298 <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068e8:	462a      	mov	r2, r5
 80068ea:	4633      	mov	r3, r6
 80068ec:	f7fa f91c 	bl	8000b28 <__aeabi_dcmpgt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f040 828b 	bne.w	8006e0c <_dtoa_r+0x93c>
 80068f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068fa:	462a      	mov	r2, r5
 80068fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006900:	f7fa f8f4 	bl	8000aec <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f040 8128 	bne.w	8006b5a <_dtoa_r+0x68a>
 800690a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800690e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006912:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006914:	2b00      	cmp	r3, #0
 8006916:	f2c0 815a 	blt.w	8006bce <_dtoa_r+0x6fe>
 800691a:	2f0e      	cmp	r7, #14
 800691c:	f300 8157 	bgt.w	8006bce <_dtoa_r+0x6fe>
 8006920:	4b5a      	ldr	r3, [pc, #360]	@ (8006a8c <_dtoa_r+0x5bc>)
 8006922:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006926:	ed93 7b00 	vldr	d7, [r3]
 800692a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800692c:	2b00      	cmp	r3, #0
 800692e:	ed8d 7b00 	vstr	d7, [sp]
 8006932:	da03      	bge.n	800693c <_dtoa_r+0x46c>
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f340 8101 	ble.w	8006b3e <_dtoa_r+0x66e>
 800693c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006940:	4656      	mov	r6, sl
 8006942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	f7f9 ff87 	bl	800085c <__aeabi_ddiv>
 800694e:	f7fa f90b 	bl	8000b68 <__aeabi_d2iz>
 8006952:	4680      	mov	r8, r0
 8006954:	f7f9 fdee 	bl	8000534 <__aeabi_i2d>
 8006958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800695c:	f7f9 fe54 	bl	8000608 <__aeabi_dmul>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800696c:	f7f9 fc94 	bl	8000298 <__aeabi_dsub>
 8006970:	f806 4b01 	strb.w	r4, [r6], #1
 8006974:	9d07      	ldr	r5, [sp, #28]
 8006976:	eba6 040a 	sub.w	r4, r6, sl
 800697a:	42a5      	cmp	r5, r4
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	f040 8117 	bne.w	8006bb2 <_dtoa_r+0x6e2>
 8006984:	f7f9 fc8a 	bl	800029c <__adddf3>
 8006988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800698c:	4604      	mov	r4, r0
 800698e:	460d      	mov	r5, r1
 8006990:	f7fa f8ca 	bl	8000b28 <__aeabi_dcmpgt>
 8006994:	2800      	cmp	r0, #0
 8006996:	f040 80f9 	bne.w	8006b8c <_dtoa_r+0x6bc>
 800699a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f7fa f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80069a6:	b118      	cbz	r0, 80069b0 <_dtoa_r+0x4e0>
 80069a8:	f018 0f01 	tst.w	r8, #1
 80069ac:	f040 80ee 	bne.w	8006b8c <_dtoa_r+0x6bc>
 80069b0:	4649      	mov	r1, r9
 80069b2:	4658      	mov	r0, fp
 80069b4:	f000 fc90 	bl	80072d8 <_Bfree>
 80069b8:	2300      	movs	r3, #0
 80069ba:	7033      	strb	r3, [r6, #0]
 80069bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069be:	3701      	adds	r7, #1
 80069c0:	601f      	str	r7, [r3, #0]
 80069c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 831d 	beq.w	8007004 <_dtoa_r+0xb34>
 80069ca:	601e      	str	r6, [r3, #0]
 80069cc:	e31a      	b.n	8007004 <_dtoa_r+0xb34>
 80069ce:	07e2      	lsls	r2, r4, #31
 80069d0:	d505      	bpl.n	80069de <_dtoa_r+0x50e>
 80069d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069d6:	f7f9 fe17 	bl	8000608 <__aeabi_dmul>
 80069da:	3601      	adds	r6, #1
 80069dc:	2301      	movs	r3, #1
 80069de:	1064      	asrs	r4, r4, #1
 80069e0:	3508      	adds	r5, #8
 80069e2:	e73f      	b.n	8006864 <_dtoa_r+0x394>
 80069e4:	2602      	movs	r6, #2
 80069e6:	e742      	b.n	800686e <_dtoa_r+0x39e>
 80069e8:	9c07      	ldr	r4, [sp, #28]
 80069ea:	9704      	str	r7, [sp, #16]
 80069ec:	e761      	b.n	80068b2 <_dtoa_r+0x3e2>
 80069ee:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <_dtoa_r+0x5bc>)
 80069f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069fa:	4454      	add	r4, sl
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d053      	beq.n	8006aa8 <_dtoa_r+0x5d8>
 8006a00:	4928      	ldr	r1, [pc, #160]	@ (8006aa4 <_dtoa_r+0x5d4>)
 8006a02:	2000      	movs	r0, #0
 8006a04:	f7f9 ff2a 	bl	800085c <__aeabi_ddiv>
 8006a08:	4633      	mov	r3, r6
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	f7f9 fc44 	bl	8000298 <__aeabi_dsub>
 8006a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a14:	4656      	mov	r6, sl
 8006a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1a:	f7fa f8a5 	bl	8000b68 <__aeabi_d2iz>
 8006a1e:	4605      	mov	r5, r0
 8006a20:	f7f9 fd88 	bl	8000534 <__aeabi_i2d>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2c:	f7f9 fc34 	bl	8000298 <__aeabi_dsub>
 8006a30:	3530      	adds	r5, #48	@ 0x30
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a3a:	f806 5b01 	strb.w	r5, [r6], #1
 8006a3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a42:	f7fa f853 	bl	8000aec <__aeabi_dcmplt>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d171      	bne.n	8006b2e <_dtoa_r+0x65e>
 8006a4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a4e:	4911      	ldr	r1, [pc, #68]	@ (8006a94 <_dtoa_r+0x5c4>)
 8006a50:	2000      	movs	r0, #0
 8006a52:	f7f9 fc21 	bl	8000298 <__aeabi_dsub>
 8006a56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a5a:	f7fa f847 	bl	8000aec <__aeabi_dcmplt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f040 8095 	bne.w	8006b8e <_dtoa_r+0x6be>
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	f43f af50 	beq.w	800690a <_dtoa_r+0x43a>
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a98 <_dtoa_r+0x5c8>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	f7f9 fdc9 	bl	8000608 <__aeabi_dmul>
 8006a76:	4b08      	ldr	r3, [pc, #32]	@ (8006a98 <_dtoa_r+0x5c8>)
 8006a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a82:	f7f9 fdc1 	bl	8000608 <__aeabi_dmul>
 8006a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8a:	e7c4      	b.n	8006a16 <_dtoa_r+0x546>
 8006a8c:	08009c08 	.word	0x08009c08
 8006a90:	08009be0 	.word	0x08009be0
 8006a94:	3ff00000 	.word	0x3ff00000
 8006a98:	40240000 	.word	0x40240000
 8006a9c:	401c0000 	.word	0x401c0000
 8006aa0:	40140000 	.word	0x40140000
 8006aa4:	3fe00000 	.word	0x3fe00000
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7f9 fdac 	bl	8000608 <__aeabi_dmul>
 8006ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ab4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ab6:	4656      	mov	r6, sl
 8006ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006abc:	f7fa f854 	bl	8000b68 <__aeabi_d2iz>
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	f7f9 fd37 	bl	8000534 <__aeabi_i2d>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ace:	f7f9 fbe3 	bl	8000298 <__aeabi_dsub>
 8006ad2:	3530      	adds	r5, #48	@ 0x30
 8006ad4:	f806 5b01 	strb.w	r5, [r6], #1
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	d124      	bne.n	8006b32 <_dtoa_r+0x662>
 8006ae8:	4bac      	ldr	r3, [pc, #688]	@ (8006d9c <_dtoa_r+0x8cc>)
 8006aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006aee:	f7f9 fbd5 	bl	800029c <__adddf3>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afa:	f7fa f815 	bl	8000b28 <__aeabi_dcmpgt>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d145      	bne.n	8006b8e <_dtoa_r+0x6be>
 8006b02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b06:	49a5      	ldr	r1, [pc, #660]	@ (8006d9c <_dtoa_r+0x8cc>)
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f7f9 fbc5 	bl	8000298 <__aeabi_dsub>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b16:	f7f9 ffe9 	bl	8000aec <__aeabi_dcmplt>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	f43f aef5 	beq.w	800690a <_dtoa_r+0x43a>
 8006b20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b22:	1e73      	subs	r3, r6, #1
 8006b24:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b2a:	2b30      	cmp	r3, #48	@ 0x30
 8006b2c:	d0f8      	beq.n	8006b20 <_dtoa_r+0x650>
 8006b2e:	9f04      	ldr	r7, [sp, #16]
 8006b30:	e73e      	b.n	80069b0 <_dtoa_r+0x4e0>
 8006b32:	4b9b      	ldr	r3, [pc, #620]	@ (8006da0 <_dtoa_r+0x8d0>)
 8006b34:	f7f9 fd68 	bl	8000608 <__aeabi_dmul>
 8006b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b3c:	e7bc      	b.n	8006ab8 <_dtoa_r+0x5e8>
 8006b3e:	d10c      	bne.n	8006b5a <_dtoa_r+0x68a>
 8006b40:	4b98      	ldr	r3, [pc, #608]	@ (8006da4 <_dtoa_r+0x8d4>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b48:	f7f9 fd5e 	bl	8000608 <__aeabi_dmul>
 8006b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b50:	f7f9 ffe0 	bl	8000b14 <__aeabi_dcmpge>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	f000 8157 	beq.w	8006e08 <_dtoa_r+0x938>
 8006b5a:	2400      	movs	r4, #0
 8006b5c:	4625      	mov	r5, r4
 8006b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b60:	43db      	mvns	r3, r3
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	4656      	mov	r6, sl
 8006b66:	2700      	movs	r7, #0
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4658      	mov	r0, fp
 8006b6c:	f000 fbb4 	bl	80072d8 <_Bfree>
 8006b70:	2d00      	cmp	r5, #0
 8006b72:	d0dc      	beq.n	8006b2e <_dtoa_r+0x65e>
 8006b74:	b12f      	cbz	r7, 8006b82 <_dtoa_r+0x6b2>
 8006b76:	42af      	cmp	r7, r5
 8006b78:	d003      	beq.n	8006b82 <_dtoa_r+0x6b2>
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	4658      	mov	r0, fp
 8006b7e:	f000 fbab 	bl	80072d8 <_Bfree>
 8006b82:	4629      	mov	r1, r5
 8006b84:	4658      	mov	r0, fp
 8006b86:	f000 fba7 	bl	80072d8 <_Bfree>
 8006b8a:	e7d0      	b.n	8006b2e <_dtoa_r+0x65e>
 8006b8c:	9704      	str	r7, [sp, #16]
 8006b8e:	4633      	mov	r3, r6
 8006b90:	461e      	mov	r6, r3
 8006b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b96:	2a39      	cmp	r2, #57	@ 0x39
 8006b98:	d107      	bne.n	8006baa <_dtoa_r+0x6da>
 8006b9a:	459a      	cmp	sl, r3
 8006b9c:	d1f8      	bne.n	8006b90 <_dtoa_r+0x6c0>
 8006b9e:	9a04      	ldr	r2, [sp, #16]
 8006ba0:	3201      	adds	r2, #1
 8006ba2:	9204      	str	r2, [sp, #16]
 8006ba4:	2230      	movs	r2, #48	@ 0x30
 8006ba6:	f88a 2000 	strb.w	r2, [sl]
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	3201      	adds	r2, #1
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e7bd      	b.n	8006b2e <_dtoa_r+0x65e>
 8006bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8006da0 <_dtoa_r+0x8d0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f7f9 fd27 	bl	8000608 <__aeabi_dmul>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	f7f9 ff89 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f43f aebb 	beq.w	8006942 <_dtoa_r+0x472>
 8006bcc:	e6f0      	b.n	80069b0 <_dtoa_r+0x4e0>
 8006bce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	f000 80db 	beq.w	8006d8c <_dtoa_r+0x8bc>
 8006bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bd8:	2a01      	cmp	r2, #1
 8006bda:	f300 80bf 	bgt.w	8006d5c <_dtoa_r+0x88c>
 8006bde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	f000 80b7 	beq.w	8006d54 <_dtoa_r+0x884>
 8006be6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bec:	4646      	mov	r6, r8
 8006bee:	9a08      	ldr	r2, [sp, #32]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	441a      	add	r2, r3
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	4498      	add	r8, r3
 8006bf8:	9208      	str	r2, [sp, #32]
 8006bfa:	f000 fc6b 	bl	80074d4 <__i2b>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b15e      	cbz	r6, 8006c1a <_dtoa_r+0x74a>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd08      	ble.n	8006c1a <_dtoa_r+0x74a>
 8006c08:	42b3      	cmp	r3, r6
 8006c0a:	9a08      	ldr	r2, [sp, #32]
 8006c0c:	bfa8      	it	ge
 8006c0e:	4633      	movge	r3, r6
 8006c10:	eba8 0803 	sub.w	r8, r8, r3
 8006c14:	1af6      	subs	r6, r6, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c1c:	b1f3      	cbz	r3, 8006c5c <_dtoa_r+0x78c>
 8006c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80b7 	beq.w	8006d94 <_dtoa_r+0x8c4>
 8006c26:	b18c      	cbz	r4, 8006c4c <_dtoa_r+0x77c>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	f000 fd11 	bl	8007654 <__pow5mult>
 8006c32:	464a      	mov	r2, r9
 8006c34:	4601      	mov	r1, r0
 8006c36:	4605      	mov	r5, r0
 8006c38:	4658      	mov	r0, fp
 8006c3a:	f000 fc61 	bl	8007500 <__multiply>
 8006c3e:	4649      	mov	r1, r9
 8006c40:	9004      	str	r0, [sp, #16]
 8006c42:	4658      	mov	r0, fp
 8006c44:	f000 fb48 	bl	80072d8 <_Bfree>
 8006c48:	9b04      	ldr	r3, [sp, #16]
 8006c4a:	4699      	mov	r9, r3
 8006c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c4e:	1b1a      	subs	r2, r3, r4
 8006c50:	d004      	beq.n	8006c5c <_dtoa_r+0x78c>
 8006c52:	4649      	mov	r1, r9
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 fcfd 	bl	8007654 <__pow5mult>
 8006c5a:	4681      	mov	r9, r0
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	4658      	mov	r0, fp
 8006c60:	f000 fc38 	bl	80074d4 <__i2b>
 8006c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c66:	4604      	mov	r4, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 81cf 	beq.w	800700c <_dtoa_r+0xb3c>
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4601      	mov	r1, r0
 8006c72:	4658      	mov	r0, fp
 8006c74:	f000 fcee 	bl	8007654 <__pow5mult>
 8006c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	f300 8095 	bgt.w	8006dac <_dtoa_r+0x8dc>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 8087 	bne.w	8006d98 <_dtoa_r+0x8c8>
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f040 8089 	bne.w	8006da8 <_dtoa_r+0x8d8>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c9c:	0d1b      	lsrs	r3, r3, #20
 8006c9e:	051b      	lsls	r3, r3, #20
 8006ca0:	b12b      	cbz	r3, 8006cae <_dtoa_r+0x7de>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	9308      	str	r3, [sp, #32]
 8006ca8:	f108 0801 	add.w	r8, r8, #1
 8006cac:	2301      	movs	r3, #1
 8006cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 81b0 	beq.w	8007018 <_dtoa_r+0xb48>
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cbe:	6918      	ldr	r0, [r3, #16]
 8006cc0:	f000 fbbc 	bl	800743c <__hi0bits>
 8006cc4:	f1c0 0020 	rsb	r0, r0, #32
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	4418      	add	r0, r3
 8006ccc:	f010 001f 	ands.w	r0, r0, #31
 8006cd0:	d077      	beq.n	8006dc2 <_dtoa_r+0x8f2>
 8006cd2:	f1c0 0320 	rsb	r3, r0, #32
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	dd6b      	ble.n	8006db2 <_dtoa_r+0x8e2>
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	f1c0 001c 	rsb	r0, r0, #28
 8006ce0:	4403      	add	r3, r0
 8006ce2:	4480      	add	r8, r0
 8006ce4:	4406      	add	r6, r0
 8006ce6:	9308      	str	r3, [sp, #32]
 8006ce8:	f1b8 0f00 	cmp.w	r8, #0
 8006cec:	dd05      	ble.n	8006cfa <_dtoa_r+0x82a>
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	4658      	mov	r0, fp
 8006cf4:	f000 fd08 	bl	8007708 <__lshift>
 8006cf8:	4681      	mov	r9, r0
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dd05      	ble.n	8006d0c <_dtoa_r+0x83c>
 8006d00:	4621      	mov	r1, r4
 8006d02:	461a      	mov	r2, r3
 8006d04:	4658      	mov	r0, fp
 8006d06:	f000 fcff 	bl	8007708 <__lshift>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d059      	beq.n	8006dc6 <_dtoa_r+0x8f6>
 8006d12:	4621      	mov	r1, r4
 8006d14:	4648      	mov	r0, r9
 8006d16:	f000 fd63 	bl	80077e0 <__mcmp>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	da53      	bge.n	8006dc6 <_dtoa_r+0x8f6>
 8006d1e:	1e7b      	subs	r3, r7, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	4649      	mov	r1, r9
 8006d24:	2300      	movs	r3, #0
 8006d26:	220a      	movs	r2, #10
 8006d28:	4658      	mov	r0, fp
 8006d2a:	f000 faf7 	bl	800731c <__multadd>
 8006d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d30:	4681      	mov	r9, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8172 	beq.w	800701c <_dtoa_r+0xb4c>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	220a      	movs	r2, #10
 8006d3e:	4658      	mov	r0, fp
 8006d40:	f000 faec 	bl	800731c <__multadd>
 8006d44:	9b00      	ldr	r3, [sp, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	4605      	mov	r5, r0
 8006d4a:	dc67      	bgt.n	8006e1c <_dtoa_r+0x94c>
 8006d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	dc41      	bgt.n	8006dd6 <_dtoa_r+0x906>
 8006d52:	e063      	b.n	8006e1c <_dtoa_r+0x94c>
 8006d54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d5a:	e746      	b.n	8006bea <_dtoa_r+0x71a>
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	1e5c      	subs	r4, r3, #1
 8006d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	bfbf      	itttt	lt
 8006d66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d6c:	1ae3      	sublt	r3, r4, r3
 8006d6e:	bfb4      	ite	lt
 8006d70:	18d2      	addlt	r2, r2, r3
 8006d72:	1b1c      	subge	r4, r3, r4
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	bfbc      	itt	lt
 8006d78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d7a:	2400      	movlt	r4, #0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bfb5      	itete	lt
 8006d80:	eba8 0603 	sublt.w	r6, r8, r3
 8006d84:	9b07      	ldrge	r3, [sp, #28]
 8006d86:	2300      	movlt	r3, #0
 8006d88:	4646      	movge	r6, r8
 8006d8a:	e730      	b.n	8006bee <_dtoa_r+0x71e>
 8006d8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d90:	4646      	mov	r6, r8
 8006d92:	e735      	b.n	8006c00 <_dtoa_r+0x730>
 8006d94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d96:	e75c      	b.n	8006c52 <_dtoa_r+0x782>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e788      	b.n	8006cae <_dtoa_r+0x7de>
 8006d9c:	3fe00000 	.word	0x3fe00000
 8006da0:	40240000 	.word	0x40240000
 8006da4:	40140000 	.word	0x40140000
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	e780      	b.n	8006cae <_dtoa_r+0x7de>
 8006dac:	2300      	movs	r3, #0
 8006dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006db0:	e782      	b.n	8006cb8 <_dtoa_r+0x7e8>
 8006db2:	d099      	beq.n	8006ce8 <_dtoa_r+0x818>
 8006db4:	9a08      	ldr	r2, [sp, #32]
 8006db6:	331c      	adds	r3, #28
 8006db8:	441a      	add	r2, r3
 8006dba:	4498      	add	r8, r3
 8006dbc:	441e      	add	r6, r3
 8006dbe:	9208      	str	r2, [sp, #32]
 8006dc0:	e792      	b.n	8006ce8 <_dtoa_r+0x818>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	e7f6      	b.n	8006db4 <_dtoa_r+0x8e4>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	9704      	str	r7, [sp, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc20      	bgt.n	8006e10 <_dtoa_r+0x940>
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	dd1e      	ble.n	8006e14 <_dtoa_r+0x944>
 8006dd6:	9b00      	ldr	r3, [sp, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f47f aec0 	bne.w	8006b5e <_dtoa_r+0x68e>
 8006dde:	4621      	mov	r1, r4
 8006de0:	2205      	movs	r2, #5
 8006de2:	4658      	mov	r0, fp
 8006de4:	f000 fa9a 	bl	800731c <__multadd>
 8006de8:	4601      	mov	r1, r0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4648      	mov	r0, r9
 8006dee:	f000 fcf7 	bl	80077e0 <__mcmp>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f77f aeb3 	ble.w	8006b5e <_dtoa_r+0x68e>
 8006df8:	4656      	mov	r6, sl
 8006dfa:	2331      	movs	r3, #49	@ 0x31
 8006dfc:	f806 3b01 	strb.w	r3, [r6], #1
 8006e00:	9b04      	ldr	r3, [sp, #16]
 8006e02:	3301      	adds	r3, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	e6ae      	b.n	8006b66 <_dtoa_r+0x696>
 8006e08:	9c07      	ldr	r4, [sp, #28]
 8006e0a:	9704      	str	r7, [sp, #16]
 8006e0c:	4625      	mov	r5, r4
 8006e0e:	e7f3      	b.n	8006df8 <_dtoa_r+0x928>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8104 	beq.w	8007024 <_dtoa_r+0xb54>
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	dd05      	ble.n	8006e2c <_dtoa_r+0x95c>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4632      	mov	r2, r6
 8006e24:	4658      	mov	r0, fp
 8006e26:	f000 fc6f 	bl	8007708 <__lshift>
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05a      	beq.n	8006ee8 <_dtoa_r+0xa18>
 8006e32:	6869      	ldr	r1, [r5, #4]
 8006e34:	4658      	mov	r0, fp
 8006e36:	f000 fa0f 	bl	8007258 <_Balloc>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <_dtoa_r+0x97a>
 8006e3e:	4b84      	ldr	r3, [pc, #528]	@ (8007050 <_dtoa_r+0xb80>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e46:	f7ff bb5a 	b.w	80064fe <_dtoa_r+0x2e>
 8006e4a:	692a      	ldr	r2, [r5, #16]
 8006e4c:	3202      	adds	r2, #2
 8006e4e:	0092      	lsls	r2, r2, #2
 8006e50:	f105 010c 	add.w	r1, r5, #12
 8006e54:	300c      	adds	r0, #12
 8006e56:	f001 ff75 	bl	8008d44 <memcpy>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4658      	mov	r0, fp
 8006e60:	f000 fc52 	bl	8007708 <__lshift>
 8006e64:	f10a 0301 	add.w	r3, sl, #1
 8006e68:	9307      	str	r3, [sp, #28]
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	4453      	add	r3, sl
 8006e6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	462f      	mov	r7, r5
 8006e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	3b01      	subs	r3, #1
 8006e82:	4648      	mov	r0, r9
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	f7ff fa99 	bl	80063bc <quorem>
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e92:	4648      	mov	r0, r9
 8006e94:	f000 fca4 	bl	80077e0 <__mcmp>
 8006e98:	462a      	mov	r2, r5
 8006e9a:	9008      	str	r0, [sp, #32]
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	f000 fcba 	bl	8007818 <__mdiff>
 8006ea4:	68c2      	ldr	r2, [r0, #12]
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	bb02      	cbnz	r2, 8006eec <_dtoa_r+0xa1c>
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4648      	mov	r0, r9
 8006eae:	f000 fc97 	bl	80077e0 <__mcmp>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eba:	f000 fa0d 	bl	80072d8 <_Bfree>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ec2:	9e07      	ldr	r6, [sp, #28]
 8006ec4:	ea43 0102 	orr.w	r1, r3, r2
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eca:	4319      	orrs	r1, r3
 8006ecc:	d110      	bne.n	8006ef0 <_dtoa_r+0xa20>
 8006ece:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ed2:	d029      	beq.n	8006f28 <_dtoa_r+0xa58>
 8006ed4:	9b08      	ldr	r3, [sp, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd02      	ble.n	8006ee0 <_dtoa_r+0xa10>
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	f883 8000 	strb.w	r8, [r3]
 8006ee6:	e63f      	b.n	8006b68 <_dtoa_r+0x698>
 8006ee8:	4628      	mov	r0, r5
 8006eea:	e7bb      	b.n	8006e64 <_dtoa_r+0x994>
 8006eec:	2201      	movs	r2, #1
 8006eee:	e7e1      	b.n	8006eb4 <_dtoa_r+0x9e4>
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db04      	blt.n	8006f00 <_dtoa_r+0xa30>
 8006ef6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006efc:	430b      	orrs	r3, r1
 8006efe:	d120      	bne.n	8006f42 <_dtoa_r+0xa72>
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	dded      	ble.n	8006ee0 <_dtoa_r+0xa10>
 8006f04:	4649      	mov	r1, r9
 8006f06:	2201      	movs	r2, #1
 8006f08:	4658      	mov	r0, fp
 8006f0a:	f000 fbfd 	bl	8007708 <__lshift>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4681      	mov	r9, r0
 8006f12:	f000 fc65 	bl	80077e0 <__mcmp>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	dc03      	bgt.n	8006f22 <_dtoa_r+0xa52>
 8006f1a:	d1e1      	bne.n	8006ee0 <_dtoa_r+0xa10>
 8006f1c:	f018 0f01 	tst.w	r8, #1
 8006f20:	d0de      	beq.n	8006ee0 <_dtoa_r+0xa10>
 8006f22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f26:	d1d8      	bne.n	8006eda <_dtoa_r+0xa0a>
 8006f28:	9a00      	ldr	r2, [sp, #0]
 8006f2a:	2339      	movs	r3, #57	@ 0x39
 8006f2c:	7013      	strb	r3, [r2, #0]
 8006f2e:	4633      	mov	r3, r6
 8006f30:	461e      	mov	r6, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f38:	2a39      	cmp	r2, #57	@ 0x39
 8006f3a:	d052      	beq.n	8006fe2 <_dtoa_r+0xb12>
 8006f3c:	3201      	adds	r2, #1
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e612      	b.n	8006b68 <_dtoa_r+0x698>
 8006f42:	2a00      	cmp	r2, #0
 8006f44:	dd07      	ble.n	8006f56 <_dtoa_r+0xa86>
 8006f46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f4a:	d0ed      	beq.n	8006f28 <_dtoa_r+0xa58>
 8006f4c:	9a00      	ldr	r2, [sp, #0]
 8006f4e:	f108 0301 	add.w	r3, r8, #1
 8006f52:	7013      	strb	r3, [r2, #0]
 8006f54:	e608      	b.n	8006b68 <_dtoa_r+0x698>
 8006f56:	9b07      	ldr	r3, [sp, #28]
 8006f58:	9a07      	ldr	r2, [sp, #28]
 8006f5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d028      	beq.n	8006fb6 <_dtoa_r+0xae6>
 8006f64:	4649      	mov	r1, r9
 8006f66:	2300      	movs	r3, #0
 8006f68:	220a      	movs	r2, #10
 8006f6a:	4658      	mov	r0, fp
 8006f6c:	f000 f9d6 	bl	800731c <__multadd>
 8006f70:	42af      	cmp	r7, r5
 8006f72:	4681      	mov	r9, r0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	f04f 020a 	mov.w	r2, #10
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	4658      	mov	r0, fp
 8006f80:	d107      	bne.n	8006f92 <_dtoa_r+0xac2>
 8006f82:	f000 f9cb 	bl	800731c <__multadd>
 8006f86:	4607      	mov	r7, r0
 8006f88:	4605      	mov	r5, r0
 8006f8a:	9b07      	ldr	r3, [sp, #28]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	9307      	str	r3, [sp, #28]
 8006f90:	e774      	b.n	8006e7c <_dtoa_r+0x9ac>
 8006f92:	f000 f9c3 	bl	800731c <__multadd>
 8006f96:	4629      	mov	r1, r5
 8006f98:	4607      	mov	r7, r0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	220a      	movs	r2, #10
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f000 f9bc 	bl	800731c <__multadd>
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	e7f0      	b.n	8006f8a <_dtoa_r+0xaba>
 8006fa8:	9b00      	ldr	r3, [sp, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bfcc      	ite	gt
 8006fae:	461e      	movgt	r6, r3
 8006fb0:	2601      	movle	r6, #1
 8006fb2:	4456      	add	r6, sl
 8006fb4:	2700      	movs	r7, #0
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	2201      	movs	r2, #1
 8006fba:	4658      	mov	r0, fp
 8006fbc:	f000 fba4 	bl	8007708 <__lshift>
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4681      	mov	r9, r0
 8006fc4:	f000 fc0c 	bl	80077e0 <__mcmp>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	dcb0      	bgt.n	8006f2e <_dtoa_r+0xa5e>
 8006fcc:	d102      	bne.n	8006fd4 <_dtoa_r+0xb04>
 8006fce:	f018 0f01 	tst.w	r8, #1
 8006fd2:	d1ac      	bne.n	8006f2e <_dtoa_r+0xa5e>
 8006fd4:	4633      	mov	r3, r6
 8006fd6:	461e      	mov	r6, r3
 8006fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fdc:	2a30      	cmp	r2, #48	@ 0x30
 8006fde:	d0fa      	beq.n	8006fd6 <_dtoa_r+0xb06>
 8006fe0:	e5c2      	b.n	8006b68 <_dtoa_r+0x698>
 8006fe2:	459a      	cmp	sl, r3
 8006fe4:	d1a4      	bne.n	8006f30 <_dtoa_r+0xa60>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	9304      	str	r3, [sp, #16]
 8006fec:	2331      	movs	r3, #49	@ 0x31
 8006fee:	f88a 3000 	strb.w	r3, [sl]
 8006ff2:	e5b9      	b.n	8006b68 <_dtoa_r+0x698>
 8006ff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ff6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007054 <_dtoa_r+0xb84>
 8006ffa:	b11b      	cbz	r3, 8007004 <_dtoa_r+0xb34>
 8006ffc:	f10a 0308 	add.w	r3, sl, #8
 8007000:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	4650      	mov	r0, sl
 8007006:	b019      	add	sp, #100	@ 0x64
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700e:	2b01      	cmp	r3, #1
 8007010:	f77f ae37 	ble.w	8006c82 <_dtoa_r+0x7b2>
 8007014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007016:	930a      	str	r3, [sp, #40]	@ 0x28
 8007018:	2001      	movs	r0, #1
 800701a:	e655      	b.n	8006cc8 <_dtoa_r+0x7f8>
 800701c:	9b00      	ldr	r3, [sp, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f77f aed6 	ble.w	8006dd0 <_dtoa_r+0x900>
 8007024:	4656      	mov	r6, sl
 8007026:	4621      	mov	r1, r4
 8007028:	4648      	mov	r0, r9
 800702a:	f7ff f9c7 	bl	80063bc <quorem>
 800702e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007032:	f806 8b01 	strb.w	r8, [r6], #1
 8007036:	9b00      	ldr	r3, [sp, #0]
 8007038:	eba6 020a 	sub.w	r2, r6, sl
 800703c:	4293      	cmp	r3, r2
 800703e:	ddb3      	ble.n	8006fa8 <_dtoa_r+0xad8>
 8007040:	4649      	mov	r1, r9
 8007042:	2300      	movs	r3, #0
 8007044:	220a      	movs	r2, #10
 8007046:	4658      	mov	r0, fp
 8007048:	f000 f968 	bl	800731c <__multadd>
 800704c:	4681      	mov	r9, r0
 800704e:	e7ea      	b.n	8007026 <_dtoa_r+0xb56>
 8007050:	08009b65 	.word	0x08009b65
 8007054:	08009ae9 	.word	0x08009ae9

08007058 <_free_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4605      	mov	r5, r0
 800705c:	2900      	cmp	r1, #0
 800705e:	d041      	beq.n	80070e4 <_free_r+0x8c>
 8007060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007064:	1f0c      	subs	r4, r1, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfb8      	it	lt
 800706a:	18e4      	addlt	r4, r4, r3
 800706c:	f000 f8e8 	bl	8007240 <__malloc_lock>
 8007070:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <_free_r+0x90>)
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	b933      	cbnz	r3, 8007084 <_free_r+0x2c>
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	6014      	str	r4, [r2, #0]
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007080:	f000 b8e4 	b.w	800724c <__malloc_unlock>
 8007084:	42a3      	cmp	r3, r4
 8007086:	d908      	bls.n	800709a <_free_r+0x42>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	1821      	adds	r1, r4, r0
 800708c:	428b      	cmp	r3, r1
 800708e:	bf01      	itttt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	e7ed      	b.n	8007076 <_free_r+0x1e>
 800709a:	461a      	mov	r2, r3
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b10b      	cbz	r3, 80070a4 <_free_r+0x4c>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d9fa      	bls.n	800709a <_free_r+0x42>
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	1850      	adds	r0, r2, r1
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d10b      	bne.n	80070c4 <_free_r+0x6c>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	4401      	add	r1, r0
 80070b0:	1850      	adds	r0, r2, r1
 80070b2:	4283      	cmp	r3, r0
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	d1e0      	bne.n	800707a <_free_r+0x22>
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	4408      	add	r0, r1
 80070c0:	6010      	str	r0, [r2, #0]
 80070c2:	e7da      	b.n	800707a <_free_r+0x22>
 80070c4:	d902      	bls.n	80070cc <_free_r+0x74>
 80070c6:	230c      	movs	r3, #12
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	e7d6      	b.n	800707a <_free_r+0x22>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	1821      	adds	r1, r4, r0
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf04      	itt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	bf04      	itt	eq
 80070dc:	1809      	addeq	r1, r1, r0
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	6054      	str	r4, [r2, #4]
 80070e2:	e7ca      	b.n	800707a <_free_r+0x22>
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	200004d0 	.word	0x200004d0

080070ec <malloc>:
 80070ec:	4b02      	ldr	r3, [pc, #8]	@ (80070f8 <malloc+0xc>)
 80070ee:	4601      	mov	r1, r0
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f000 b825 	b.w	8007140 <_malloc_r>
 80070f6:	bf00      	nop
 80070f8:	20000038 	.word	0x20000038

080070fc <sbrk_aligned>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4e0f      	ldr	r6, [pc, #60]	@ (800713c <sbrk_aligned+0x40>)
 8007100:	460c      	mov	r4, r1
 8007102:	6831      	ldr	r1, [r6, #0]
 8007104:	4605      	mov	r5, r0
 8007106:	b911      	cbnz	r1, 800710e <sbrk_aligned+0x12>
 8007108:	f001 fe0c 	bl	8008d24 <_sbrk_r>
 800710c:	6030      	str	r0, [r6, #0]
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f001 fe07 	bl	8008d24 <_sbrk_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d103      	bne.n	8007122 <sbrk_aligned+0x26>
 800711a:	f04f 34ff 	mov.w	r4, #4294967295
 800711e:	4620      	mov	r0, r4
 8007120:	bd70      	pop	{r4, r5, r6, pc}
 8007122:	1cc4      	adds	r4, r0, #3
 8007124:	f024 0403 	bic.w	r4, r4, #3
 8007128:	42a0      	cmp	r0, r4
 800712a:	d0f8      	beq.n	800711e <sbrk_aligned+0x22>
 800712c:	1a21      	subs	r1, r4, r0
 800712e:	4628      	mov	r0, r5
 8007130:	f001 fdf8 	bl	8008d24 <_sbrk_r>
 8007134:	3001      	adds	r0, #1
 8007136:	d1f2      	bne.n	800711e <sbrk_aligned+0x22>
 8007138:	e7ef      	b.n	800711a <sbrk_aligned+0x1e>
 800713a:	bf00      	nop
 800713c:	200004cc 	.word	0x200004cc

08007140 <_malloc_r>:
 8007140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007144:	1ccd      	adds	r5, r1, #3
 8007146:	f025 0503 	bic.w	r5, r5, #3
 800714a:	3508      	adds	r5, #8
 800714c:	2d0c      	cmp	r5, #12
 800714e:	bf38      	it	cc
 8007150:	250c      	movcc	r5, #12
 8007152:	2d00      	cmp	r5, #0
 8007154:	4606      	mov	r6, r0
 8007156:	db01      	blt.n	800715c <_malloc_r+0x1c>
 8007158:	42a9      	cmp	r1, r5
 800715a:	d904      	bls.n	8007166 <_malloc_r+0x26>
 800715c:	230c      	movs	r3, #12
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800723c <_malloc_r+0xfc>
 800716a:	f000 f869 	bl	8007240 <__malloc_lock>
 800716e:	f8d8 3000 	ldr.w	r3, [r8]
 8007172:	461c      	mov	r4, r3
 8007174:	bb44      	cbnz	r4, 80071c8 <_malloc_r+0x88>
 8007176:	4629      	mov	r1, r5
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff ffbf 	bl	80070fc <sbrk_aligned>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	4604      	mov	r4, r0
 8007182:	d158      	bne.n	8007236 <_malloc_r+0xf6>
 8007184:	f8d8 4000 	ldr.w	r4, [r8]
 8007188:	4627      	mov	r7, r4
 800718a:	2f00      	cmp	r7, #0
 800718c:	d143      	bne.n	8007216 <_malloc_r+0xd6>
 800718e:	2c00      	cmp	r4, #0
 8007190:	d04b      	beq.n	800722a <_malloc_r+0xea>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	4639      	mov	r1, r7
 8007196:	4630      	mov	r0, r6
 8007198:	eb04 0903 	add.w	r9, r4, r3
 800719c:	f001 fdc2 	bl	8008d24 <_sbrk_r>
 80071a0:	4581      	cmp	r9, r0
 80071a2:	d142      	bne.n	800722a <_malloc_r+0xea>
 80071a4:	6821      	ldr	r1, [r4, #0]
 80071a6:	1a6d      	subs	r5, r5, r1
 80071a8:	4629      	mov	r1, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ffa6 	bl	80070fc <sbrk_aligned>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d03a      	beq.n	800722a <_malloc_r+0xea>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	442b      	add	r3, r5
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	f8d8 3000 	ldr.w	r3, [r8]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	bb62      	cbnz	r2, 800721c <_malloc_r+0xdc>
 80071c2:	f8c8 7000 	str.w	r7, [r8]
 80071c6:	e00f      	b.n	80071e8 <_malloc_r+0xa8>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	1b52      	subs	r2, r2, r5
 80071cc:	d420      	bmi.n	8007210 <_malloc_r+0xd0>
 80071ce:	2a0b      	cmp	r2, #11
 80071d0:	d917      	bls.n	8007202 <_malloc_r+0xc2>
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	6025      	str	r5, [r4, #0]
 80071d8:	bf18      	it	ne
 80071da:	6059      	strne	r1, [r3, #4]
 80071dc:	6863      	ldr	r3, [r4, #4]
 80071de:	bf08      	it	eq
 80071e0:	f8c8 1000 	streq.w	r1, [r8]
 80071e4:	5162      	str	r2, [r4, r5]
 80071e6:	604b      	str	r3, [r1, #4]
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f82f 	bl	800724c <__malloc_unlock>
 80071ee:	f104 000b 	add.w	r0, r4, #11
 80071f2:	1d23      	adds	r3, r4, #4
 80071f4:	f020 0007 	bic.w	r0, r0, #7
 80071f8:	1ac2      	subs	r2, r0, r3
 80071fa:	bf1c      	itt	ne
 80071fc:	1a1b      	subne	r3, r3, r0
 80071fe:	50a3      	strne	r3, [r4, r2]
 8007200:	e7af      	b.n	8007162 <_malloc_r+0x22>
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	42a3      	cmp	r3, r4
 8007206:	bf0c      	ite	eq
 8007208:	f8c8 2000 	streq.w	r2, [r8]
 800720c:	605a      	strne	r2, [r3, #4]
 800720e:	e7eb      	b.n	80071e8 <_malloc_r+0xa8>
 8007210:	4623      	mov	r3, r4
 8007212:	6864      	ldr	r4, [r4, #4]
 8007214:	e7ae      	b.n	8007174 <_malloc_r+0x34>
 8007216:	463c      	mov	r4, r7
 8007218:	687f      	ldr	r7, [r7, #4]
 800721a:	e7b6      	b.n	800718a <_malloc_r+0x4a>
 800721c:	461a      	mov	r2, r3
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	42a3      	cmp	r3, r4
 8007222:	d1fb      	bne.n	800721c <_malloc_r+0xdc>
 8007224:	2300      	movs	r3, #0
 8007226:	6053      	str	r3, [r2, #4]
 8007228:	e7de      	b.n	80071e8 <_malloc_r+0xa8>
 800722a:	230c      	movs	r3, #12
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	4630      	mov	r0, r6
 8007230:	f000 f80c 	bl	800724c <__malloc_unlock>
 8007234:	e794      	b.n	8007160 <_malloc_r+0x20>
 8007236:	6005      	str	r5, [r0, #0]
 8007238:	e7d6      	b.n	80071e8 <_malloc_r+0xa8>
 800723a:	bf00      	nop
 800723c:	200004d0 	.word	0x200004d0

08007240 <__malloc_lock>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__malloc_lock+0x8>)
 8007242:	f7ff b8b2 	b.w	80063aa <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	200004c8 	.word	0x200004c8

0800724c <__malloc_unlock>:
 800724c:	4801      	ldr	r0, [pc, #4]	@ (8007254 <__malloc_unlock+0x8>)
 800724e:	f7ff b8ad 	b.w	80063ac <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	200004c8 	.word	0x200004c8

08007258 <_Balloc>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	69c6      	ldr	r6, [r0, #28]
 800725c:	4604      	mov	r4, r0
 800725e:	460d      	mov	r5, r1
 8007260:	b976      	cbnz	r6, 8007280 <_Balloc+0x28>
 8007262:	2010      	movs	r0, #16
 8007264:	f7ff ff42 	bl	80070ec <malloc>
 8007268:	4602      	mov	r2, r0
 800726a:	61e0      	str	r0, [r4, #28]
 800726c:	b920      	cbnz	r0, 8007278 <_Balloc+0x20>
 800726e:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <_Balloc+0x78>)
 8007270:	4818      	ldr	r0, [pc, #96]	@ (80072d4 <_Balloc+0x7c>)
 8007272:	216b      	movs	r1, #107	@ 0x6b
 8007274:	f001 fd7c 	bl	8008d70 <__assert_func>
 8007278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800727c:	6006      	str	r6, [r0, #0]
 800727e:	60c6      	str	r6, [r0, #12]
 8007280:	69e6      	ldr	r6, [r4, #28]
 8007282:	68f3      	ldr	r3, [r6, #12]
 8007284:	b183      	cbz	r3, 80072a8 <_Balloc+0x50>
 8007286:	69e3      	ldr	r3, [r4, #28]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800728e:	b9b8      	cbnz	r0, 80072c0 <_Balloc+0x68>
 8007290:	2101      	movs	r1, #1
 8007292:	fa01 f605 	lsl.w	r6, r1, r5
 8007296:	1d72      	adds	r2, r6, #5
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	4620      	mov	r0, r4
 800729c:	f001 fd86 	bl	8008dac <_calloc_r>
 80072a0:	b160      	cbz	r0, 80072bc <_Balloc+0x64>
 80072a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072a6:	e00e      	b.n	80072c6 <_Balloc+0x6e>
 80072a8:	2221      	movs	r2, #33	@ 0x21
 80072aa:	2104      	movs	r1, #4
 80072ac:	4620      	mov	r0, r4
 80072ae:	f001 fd7d 	bl	8008dac <_calloc_r>
 80072b2:	69e3      	ldr	r3, [r4, #28]
 80072b4:	60f0      	str	r0, [r6, #12]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e4      	bne.n	8007286 <_Balloc+0x2e>
 80072bc:	2000      	movs	r0, #0
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	6802      	ldr	r2, [r0, #0]
 80072c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072c6:	2300      	movs	r3, #0
 80072c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072cc:	e7f7      	b.n	80072be <_Balloc+0x66>
 80072ce:	bf00      	nop
 80072d0:	08009af6 	.word	0x08009af6
 80072d4:	08009b76 	.word	0x08009b76

080072d8 <_Bfree>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	69c6      	ldr	r6, [r0, #28]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b976      	cbnz	r6, 8007300 <_Bfree+0x28>
 80072e2:	2010      	movs	r0, #16
 80072e4:	f7ff ff02 	bl	80070ec <malloc>
 80072e8:	4602      	mov	r2, r0
 80072ea:	61e8      	str	r0, [r5, #28]
 80072ec:	b920      	cbnz	r0, 80072f8 <_Bfree+0x20>
 80072ee:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <_Bfree+0x3c>)
 80072f0:	4809      	ldr	r0, [pc, #36]	@ (8007318 <_Bfree+0x40>)
 80072f2:	218f      	movs	r1, #143	@ 0x8f
 80072f4:	f001 fd3c 	bl	8008d70 <__assert_func>
 80072f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072fc:	6006      	str	r6, [r0, #0]
 80072fe:	60c6      	str	r6, [r0, #12]
 8007300:	b13c      	cbz	r4, 8007312 <_Bfree+0x3a>
 8007302:	69eb      	ldr	r3, [r5, #28]
 8007304:	6862      	ldr	r2, [r4, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800730c:	6021      	str	r1, [r4, #0]
 800730e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	08009af6 	.word	0x08009af6
 8007318:	08009b76 	.word	0x08009b76

0800731c <__multadd>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	690d      	ldr	r5, [r1, #16]
 8007322:	4607      	mov	r7, r0
 8007324:	460c      	mov	r4, r1
 8007326:	461e      	mov	r6, r3
 8007328:	f101 0c14 	add.w	ip, r1, #20
 800732c:	2000      	movs	r0, #0
 800732e:	f8dc 3000 	ldr.w	r3, [ip]
 8007332:	b299      	uxth	r1, r3
 8007334:	fb02 6101 	mla	r1, r2, r1, r6
 8007338:	0c1e      	lsrs	r6, r3, #16
 800733a:	0c0b      	lsrs	r3, r1, #16
 800733c:	fb02 3306 	mla	r3, r2, r6, r3
 8007340:	b289      	uxth	r1, r1
 8007342:	3001      	adds	r0, #1
 8007344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007348:	4285      	cmp	r5, r0
 800734a:	f84c 1b04 	str.w	r1, [ip], #4
 800734e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007352:	dcec      	bgt.n	800732e <__multadd+0x12>
 8007354:	b30e      	cbz	r6, 800739a <__multadd+0x7e>
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	42ab      	cmp	r3, r5
 800735a:	dc19      	bgt.n	8007390 <__multadd+0x74>
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4638      	mov	r0, r7
 8007360:	3101      	adds	r1, #1
 8007362:	f7ff ff79 	bl	8007258 <_Balloc>
 8007366:	4680      	mov	r8, r0
 8007368:	b928      	cbnz	r0, 8007376 <__multadd+0x5a>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <__multadd+0x84>)
 800736e:	480d      	ldr	r0, [pc, #52]	@ (80073a4 <__multadd+0x88>)
 8007370:	21ba      	movs	r1, #186	@ 0xba
 8007372:	f001 fcfd 	bl	8008d70 <__assert_func>
 8007376:	6922      	ldr	r2, [r4, #16]
 8007378:	3202      	adds	r2, #2
 800737a:	f104 010c 	add.w	r1, r4, #12
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	300c      	adds	r0, #12
 8007382:	f001 fcdf 	bl	8008d44 <memcpy>
 8007386:	4621      	mov	r1, r4
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ffa5 	bl	80072d8 <_Bfree>
 800738e:	4644      	mov	r4, r8
 8007390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007394:	3501      	adds	r5, #1
 8007396:	615e      	str	r6, [r3, #20]
 8007398:	6125      	str	r5, [r4, #16]
 800739a:	4620      	mov	r0, r4
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	08009b65 	.word	0x08009b65
 80073a4:	08009b76 	.word	0x08009b76

080073a8 <__s2b>:
 80073a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	4615      	mov	r5, r2
 80073b0:	461f      	mov	r7, r3
 80073b2:	2209      	movs	r2, #9
 80073b4:	3308      	adds	r3, #8
 80073b6:	4606      	mov	r6, r0
 80073b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073bc:	2100      	movs	r1, #0
 80073be:	2201      	movs	r2, #1
 80073c0:	429a      	cmp	r2, r3
 80073c2:	db09      	blt.n	80073d8 <__s2b+0x30>
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff ff47 	bl	8007258 <_Balloc>
 80073ca:	b940      	cbnz	r0, 80073de <__s2b+0x36>
 80073cc:	4602      	mov	r2, r0
 80073ce:	4b19      	ldr	r3, [pc, #100]	@ (8007434 <__s2b+0x8c>)
 80073d0:	4819      	ldr	r0, [pc, #100]	@ (8007438 <__s2b+0x90>)
 80073d2:	21d3      	movs	r1, #211	@ 0xd3
 80073d4:	f001 fccc 	bl	8008d70 <__assert_func>
 80073d8:	0052      	lsls	r2, r2, #1
 80073da:	3101      	adds	r1, #1
 80073dc:	e7f0      	b.n	80073c0 <__s2b+0x18>
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	6143      	str	r3, [r0, #20]
 80073e2:	2d09      	cmp	r5, #9
 80073e4:	f04f 0301 	mov.w	r3, #1
 80073e8:	6103      	str	r3, [r0, #16]
 80073ea:	dd16      	ble.n	800741a <__s2b+0x72>
 80073ec:	f104 0909 	add.w	r9, r4, #9
 80073f0:	46c8      	mov	r8, r9
 80073f2:	442c      	add	r4, r5
 80073f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073f8:	4601      	mov	r1, r0
 80073fa:	3b30      	subs	r3, #48	@ 0x30
 80073fc:	220a      	movs	r2, #10
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ff8c 	bl	800731c <__multadd>
 8007404:	45a0      	cmp	r8, r4
 8007406:	d1f5      	bne.n	80073f4 <__s2b+0x4c>
 8007408:	f1a5 0408 	sub.w	r4, r5, #8
 800740c:	444c      	add	r4, r9
 800740e:	1b2d      	subs	r5, r5, r4
 8007410:	1963      	adds	r3, r4, r5
 8007412:	42bb      	cmp	r3, r7
 8007414:	db04      	blt.n	8007420 <__s2b+0x78>
 8007416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741a:	340a      	adds	r4, #10
 800741c:	2509      	movs	r5, #9
 800741e:	e7f6      	b.n	800740e <__s2b+0x66>
 8007420:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007424:	4601      	mov	r1, r0
 8007426:	3b30      	subs	r3, #48	@ 0x30
 8007428:	220a      	movs	r2, #10
 800742a:	4630      	mov	r0, r6
 800742c:	f7ff ff76 	bl	800731c <__multadd>
 8007430:	e7ee      	b.n	8007410 <__s2b+0x68>
 8007432:	bf00      	nop
 8007434:	08009b65 	.word	0x08009b65
 8007438:	08009b76 	.word	0x08009b76

0800743c <__hi0bits>:
 800743c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007440:	4603      	mov	r3, r0
 8007442:	bf36      	itet	cc
 8007444:	0403      	lslcc	r3, r0, #16
 8007446:	2000      	movcs	r0, #0
 8007448:	2010      	movcc	r0, #16
 800744a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800744e:	bf3c      	itt	cc
 8007450:	021b      	lslcc	r3, r3, #8
 8007452:	3008      	addcc	r0, #8
 8007454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007458:	bf3c      	itt	cc
 800745a:	011b      	lslcc	r3, r3, #4
 800745c:	3004      	addcc	r0, #4
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007462:	bf3c      	itt	cc
 8007464:	009b      	lslcc	r3, r3, #2
 8007466:	3002      	addcc	r0, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	db05      	blt.n	8007478 <__hi0bits+0x3c>
 800746c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007470:	f100 0001 	add.w	r0, r0, #1
 8007474:	bf08      	it	eq
 8007476:	2020      	moveq	r0, #32
 8007478:	4770      	bx	lr

0800747a <__lo0bits>:
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	4602      	mov	r2, r0
 800747e:	f013 0007 	ands.w	r0, r3, #7
 8007482:	d00b      	beq.n	800749c <__lo0bits+0x22>
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d421      	bmi.n	80074cc <__lo0bits+0x52>
 8007488:	0798      	lsls	r0, r3, #30
 800748a:	bf49      	itett	mi
 800748c:	085b      	lsrmi	r3, r3, #1
 800748e:	089b      	lsrpl	r3, r3, #2
 8007490:	2001      	movmi	r0, #1
 8007492:	6013      	strmi	r3, [r2, #0]
 8007494:	bf5c      	itt	pl
 8007496:	6013      	strpl	r3, [r2, #0]
 8007498:	2002      	movpl	r0, #2
 800749a:	4770      	bx	lr
 800749c:	b299      	uxth	r1, r3
 800749e:	b909      	cbnz	r1, 80074a4 <__lo0bits+0x2a>
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	2010      	movs	r0, #16
 80074a4:	b2d9      	uxtb	r1, r3
 80074a6:	b909      	cbnz	r1, 80074ac <__lo0bits+0x32>
 80074a8:	3008      	adds	r0, #8
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	0719      	lsls	r1, r3, #28
 80074ae:	bf04      	itt	eq
 80074b0:	091b      	lsreq	r3, r3, #4
 80074b2:	3004      	addeq	r0, #4
 80074b4:	0799      	lsls	r1, r3, #30
 80074b6:	bf04      	itt	eq
 80074b8:	089b      	lsreq	r3, r3, #2
 80074ba:	3002      	addeq	r0, #2
 80074bc:	07d9      	lsls	r1, r3, #31
 80074be:	d403      	bmi.n	80074c8 <__lo0bits+0x4e>
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	f100 0001 	add.w	r0, r0, #1
 80074c6:	d003      	beq.n	80074d0 <__lo0bits+0x56>
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4770      	bx	lr
 80074cc:	2000      	movs	r0, #0
 80074ce:	4770      	bx	lr
 80074d0:	2020      	movs	r0, #32
 80074d2:	4770      	bx	lr

080074d4 <__i2b>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	460c      	mov	r4, r1
 80074d8:	2101      	movs	r1, #1
 80074da:	f7ff febd 	bl	8007258 <_Balloc>
 80074de:	4602      	mov	r2, r0
 80074e0:	b928      	cbnz	r0, 80074ee <__i2b+0x1a>
 80074e2:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <__i2b+0x24>)
 80074e4:	4805      	ldr	r0, [pc, #20]	@ (80074fc <__i2b+0x28>)
 80074e6:	f240 1145 	movw	r1, #325	@ 0x145
 80074ea:	f001 fc41 	bl	8008d70 <__assert_func>
 80074ee:	2301      	movs	r3, #1
 80074f0:	6144      	str	r4, [r0, #20]
 80074f2:	6103      	str	r3, [r0, #16]
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	bf00      	nop
 80074f8:	08009b65 	.word	0x08009b65
 80074fc:	08009b76 	.word	0x08009b76

08007500 <__multiply>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	4614      	mov	r4, r2
 8007506:	690a      	ldr	r2, [r1, #16]
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	bfa8      	it	ge
 800750e:	4623      	movge	r3, r4
 8007510:	460f      	mov	r7, r1
 8007512:	bfa4      	itt	ge
 8007514:	460c      	movge	r4, r1
 8007516:	461f      	movge	r7, r3
 8007518:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800751c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007520:	68a3      	ldr	r3, [r4, #8]
 8007522:	6861      	ldr	r1, [r4, #4]
 8007524:	eb0a 0609 	add.w	r6, sl, r9
 8007528:	42b3      	cmp	r3, r6
 800752a:	b085      	sub	sp, #20
 800752c:	bfb8      	it	lt
 800752e:	3101      	addlt	r1, #1
 8007530:	f7ff fe92 	bl	8007258 <_Balloc>
 8007534:	b930      	cbnz	r0, 8007544 <__multiply+0x44>
 8007536:	4602      	mov	r2, r0
 8007538:	4b44      	ldr	r3, [pc, #272]	@ (800764c <__multiply+0x14c>)
 800753a:	4845      	ldr	r0, [pc, #276]	@ (8007650 <__multiply+0x150>)
 800753c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007540:	f001 fc16 	bl	8008d70 <__assert_func>
 8007544:	f100 0514 	add.w	r5, r0, #20
 8007548:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800754c:	462b      	mov	r3, r5
 800754e:	2200      	movs	r2, #0
 8007550:	4543      	cmp	r3, r8
 8007552:	d321      	bcc.n	8007598 <__multiply+0x98>
 8007554:	f107 0114 	add.w	r1, r7, #20
 8007558:	f104 0214 	add.w	r2, r4, #20
 800755c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007560:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007564:	9302      	str	r3, [sp, #8]
 8007566:	1b13      	subs	r3, r2, r4
 8007568:	3b15      	subs	r3, #21
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	3304      	adds	r3, #4
 8007570:	f104 0715 	add.w	r7, r4, #21
 8007574:	42ba      	cmp	r2, r7
 8007576:	bf38      	it	cc
 8007578:	2304      	movcc	r3, #4
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	9103      	str	r1, [sp, #12]
 8007580:	428b      	cmp	r3, r1
 8007582:	d80c      	bhi.n	800759e <__multiply+0x9e>
 8007584:	2e00      	cmp	r6, #0
 8007586:	dd03      	ble.n	8007590 <__multiply+0x90>
 8007588:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800758c:	2b00      	cmp	r3, #0
 800758e:	d05b      	beq.n	8007648 <__multiply+0x148>
 8007590:	6106      	str	r6, [r0, #16]
 8007592:	b005      	add	sp, #20
 8007594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007598:	f843 2b04 	str.w	r2, [r3], #4
 800759c:	e7d8      	b.n	8007550 <__multiply+0x50>
 800759e:	f8b1 a000 	ldrh.w	sl, [r1]
 80075a2:	f1ba 0f00 	cmp.w	sl, #0
 80075a6:	d024      	beq.n	80075f2 <__multiply+0xf2>
 80075a8:	f104 0e14 	add.w	lr, r4, #20
 80075ac:	46a9      	mov	r9, r5
 80075ae:	f04f 0c00 	mov.w	ip, #0
 80075b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075b6:	f8d9 3000 	ldr.w	r3, [r9]
 80075ba:	fa1f fb87 	uxth.w	fp, r7
 80075be:	b29b      	uxth	r3, r3
 80075c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80075c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80075c8:	f8d9 7000 	ldr.w	r7, [r9]
 80075cc:	4463      	add	r3, ip
 80075ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80075d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075e0:	4572      	cmp	r2, lr
 80075e2:	f849 3b04 	str.w	r3, [r9], #4
 80075e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075ea:	d8e2      	bhi.n	80075b2 <__multiply+0xb2>
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	f845 c003 	str.w	ip, [r5, r3]
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075f8:	3104      	adds	r1, #4
 80075fa:	f1b9 0f00 	cmp.w	r9, #0
 80075fe:	d021      	beq.n	8007644 <__multiply+0x144>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	f104 0c14 	add.w	ip, r4, #20
 8007606:	46ae      	mov	lr, r5
 8007608:	f04f 0a00 	mov.w	sl, #0
 800760c:	f8bc b000 	ldrh.w	fp, [ip]
 8007610:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007614:	fb09 770b 	mla	r7, r9, fp, r7
 8007618:	4457      	add	r7, sl
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007620:	f84e 3b04 	str.w	r3, [lr], #4
 8007624:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800762c:	f8be 3000 	ldrh.w	r3, [lr]
 8007630:	fb09 330a 	mla	r3, r9, sl, r3
 8007634:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007638:	4562      	cmp	r2, ip
 800763a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800763e:	d8e5      	bhi.n	800760c <__multiply+0x10c>
 8007640:	9f01      	ldr	r7, [sp, #4]
 8007642:	51eb      	str	r3, [r5, r7]
 8007644:	3504      	adds	r5, #4
 8007646:	e799      	b.n	800757c <__multiply+0x7c>
 8007648:	3e01      	subs	r6, #1
 800764a:	e79b      	b.n	8007584 <__multiply+0x84>
 800764c:	08009b65 	.word	0x08009b65
 8007650:	08009b76 	.word	0x08009b76

08007654 <__pow5mult>:
 8007654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007658:	4615      	mov	r5, r2
 800765a:	f012 0203 	ands.w	r2, r2, #3
 800765e:	4607      	mov	r7, r0
 8007660:	460e      	mov	r6, r1
 8007662:	d007      	beq.n	8007674 <__pow5mult+0x20>
 8007664:	4c25      	ldr	r4, [pc, #148]	@ (80076fc <__pow5mult+0xa8>)
 8007666:	3a01      	subs	r2, #1
 8007668:	2300      	movs	r3, #0
 800766a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800766e:	f7ff fe55 	bl	800731c <__multadd>
 8007672:	4606      	mov	r6, r0
 8007674:	10ad      	asrs	r5, r5, #2
 8007676:	d03d      	beq.n	80076f4 <__pow5mult+0xa0>
 8007678:	69fc      	ldr	r4, [r7, #28]
 800767a:	b97c      	cbnz	r4, 800769c <__pow5mult+0x48>
 800767c:	2010      	movs	r0, #16
 800767e:	f7ff fd35 	bl	80070ec <malloc>
 8007682:	4602      	mov	r2, r0
 8007684:	61f8      	str	r0, [r7, #28]
 8007686:	b928      	cbnz	r0, 8007694 <__pow5mult+0x40>
 8007688:	4b1d      	ldr	r3, [pc, #116]	@ (8007700 <__pow5mult+0xac>)
 800768a:	481e      	ldr	r0, [pc, #120]	@ (8007704 <__pow5mult+0xb0>)
 800768c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007690:	f001 fb6e 	bl	8008d70 <__assert_func>
 8007694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007698:	6004      	str	r4, [r0, #0]
 800769a:	60c4      	str	r4, [r0, #12]
 800769c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076a4:	b94c      	cbnz	r4, 80076ba <__pow5mult+0x66>
 80076a6:	f240 2171 	movw	r1, #625	@ 0x271
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7ff ff12 	bl	80074d4 <__i2b>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80076b6:	4604      	mov	r4, r0
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	f04f 0900 	mov.w	r9, #0
 80076be:	07eb      	lsls	r3, r5, #31
 80076c0:	d50a      	bpl.n	80076d8 <__pow5mult+0x84>
 80076c2:	4631      	mov	r1, r6
 80076c4:	4622      	mov	r2, r4
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ff1a 	bl	8007500 <__multiply>
 80076cc:	4631      	mov	r1, r6
 80076ce:	4680      	mov	r8, r0
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff fe01 	bl	80072d8 <_Bfree>
 80076d6:	4646      	mov	r6, r8
 80076d8:	106d      	asrs	r5, r5, #1
 80076da:	d00b      	beq.n	80076f4 <__pow5mult+0xa0>
 80076dc:	6820      	ldr	r0, [r4, #0]
 80076de:	b938      	cbnz	r0, 80076f0 <__pow5mult+0x9c>
 80076e0:	4622      	mov	r2, r4
 80076e2:	4621      	mov	r1, r4
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff ff0b 	bl	8007500 <__multiply>
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	f8c0 9000 	str.w	r9, [r0]
 80076f0:	4604      	mov	r4, r0
 80076f2:	e7e4      	b.n	80076be <__pow5mult+0x6a>
 80076f4:	4630      	mov	r0, r6
 80076f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fa:	bf00      	nop
 80076fc:	08009bd0 	.word	0x08009bd0
 8007700:	08009af6 	.word	0x08009af6
 8007704:	08009b76 	.word	0x08009b76

08007708 <__lshift>:
 8007708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	6849      	ldr	r1, [r1, #4]
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007716:	68a3      	ldr	r3, [r4, #8]
 8007718:	4607      	mov	r7, r0
 800771a:	4691      	mov	r9, r2
 800771c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007720:	f108 0601 	add.w	r6, r8, #1
 8007724:	42b3      	cmp	r3, r6
 8007726:	db0b      	blt.n	8007740 <__lshift+0x38>
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff fd95 	bl	8007258 <_Balloc>
 800772e:	4605      	mov	r5, r0
 8007730:	b948      	cbnz	r0, 8007746 <__lshift+0x3e>
 8007732:	4602      	mov	r2, r0
 8007734:	4b28      	ldr	r3, [pc, #160]	@ (80077d8 <__lshift+0xd0>)
 8007736:	4829      	ldr	r0, [pc, #164]	@ (80077dc <__lshift+0xd4>)
 8007738:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800773c:	f001 fb18 	bl	8008d70 <__assert_func>
 8007740:	3101      	adds	r1, #1
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	e7ee      	b.n	8007724 <__lshift+0x1c>
 8007746:	2300      	movs	r3, #0
 8007748:	f100 0114 	add.w	r1, r0, #20
 800774c:	f100 0210 	add.w	r2, r0, #16
 8007750:	4618      	mov	r0, r3
 8007752:	4553      	cmp	r3, sl
 8007754:	db33      	blt.n	80077be <__lshift+0xb6>
 8007756:	6920      	ldr	r0, [r4, #16]
 8007758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800775c:	f104 0314 	add.w	r3, r4, #20
 8007760:	f019 091f 	ands.w	r9, r9, #31
 8007764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800776c:	d02b      	beq.n	80077c6 <__lshift+0xbe>
 800776e:	f1c9 0e20 	rsb	lr, r9, #32
 8007772:	468a      	mov	sl, r1
 8007774:	2200      	movs	r2, #0
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	fa00 f009 	lsl.w	r0, r0, r9
 800777c:	4310      	orrs	r0, r2
 800777e:	f84a 0b04 	str.w	r0, [sl], #4
 8007782:	f853 2b04 	ldr.w	r2, [r3], #4
 8007786:	459c      	cmp	ip, r3
 8007788:	fa22 f20e 	lsr.w	r2, r2, lr
 800778c:	d8f3      	bhi.n	8007776 <__lshift+0x6e>
 800778e:	ebac 0304 	sub.w	r3, ip, r4
 8007792:	3b15      	subs	r3, #21
 8007794:	f023 0303 	bic.w	r3, r3, #3
 8007798:	3304      	adds	r3, #4
 800779a:	f104 0015 	add.w	r0, r4, #21
 800779e:	4584      	cmp	ip, r0
 80077a0:	bf38      	it	cc
 80077a2:	2304      	movcc	r3, #4
 80077a4:	50ca      	str	r2, [r1, r3]
 80077a6:	b10a      	cbz	r2, 80077ac <__lshift+0xa4>
 80077a8:	f108 0602 	add.w	r6, r8, #2
 80077ac:	3e01      	subs	r6, #1
 80077ae:	4638      	mov	r0, r7
 80077b0:	612e      	str	r6, [r5, #16]
 80077b2:	4621      	mov	r1, r4
 80077b4:	f7ff fd90 	bl	80072d8 <_Bfree>
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077be:	f842 0f04 	str.w	r0, [r2, #4]!
 80077c2:	3301      	adds	r3, #1
 80077c4:	e7c5      	b.n	8007752 <__lshift+0x4a>
 80077c6:	3904      	subs	r1, #4
 80077c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80077d0:	459c      	cmp	ip, r3
 80077d2:	d8f9      	bhi.n	80077c8 <__lshift+0xc0>
 80077d4:	e7ea      	b.n	80077ac <__lshift+0xa4>
 80077d6:	bf00      	nop
 80077d8:	08009b65 	.word	0x08009b65
 80077dc:	08009b76 	.word	0x08009b76

080077e0 <__mcmp>:
 80077e0:	690a      	ldr	r2, [r1, #16]
 80077e2:	4603      	mov	r3, r0
 80077e4:	6900      	ldr	r0, [r0, #16]
 80077e6:	1a80      	subs	r0, r0, r2
 80077e8:	b530      	push	{r4, r5, lr}
 80077ea:	d10e      	bne.n	800780a <__mcmp+0x2a>
 80077ec:	3314      	adds	r3, #20
 80077ee:	3114      	adds	r1, #20
 80077f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007800:	4295      	cmp	r5, r2
 8007802:	d003      	beq.n	800780c <__mcmp+0x2c>
 8007804:	d205      	bcs.n	8007812 <__mcmp+0x32>
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	bd30      	pop	{r4, r5, pc}
 800780c:	42a3      	cmp	r3, r4
 800780e:	d3f3      	bcc.n	80077f8 <__mcmp+0x18>
 8007810:	e7fb      	b.n	800780a <__mcmp+0x2a>
 8007812:	2001      	movs	r0, #1
 8007814:	e7f9      	b.n	800780a <__mcmp+0x2a>
	...

08007818 <__mdiff>:
 8007818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	4689      	mov	r9, r1
 800781e:	4606      	mov	r6, r0
 8007820:	4611      	mov	r1, r2
 8007822:	4648      	mov	r0, r9
 8007824:	4614      	mov	r4, r2
 8007826:	f7ff ffdb 	bl	80077e0 <__mcmp>
 800782a:	1e05      	subs	r5, r0, #0
 800782c:	d112      	bne.n	8007854 <__mdiff+0x3c>
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff fd11 	bl	8007258 <_Balloc>
 8007836:	4602      	mov	r2, r0
 8007838:	b928      	cbnz	r0, 8007846 <__mdiff+0x2e>
 800783a:	4b3f      	ldr	r3, [pc, #252]	@ (8007938 <__mdiff+0x120>)
 800783c:	f240 2137 	movw	r1, #567	@ 0x237
 8007840:	483e      	ldr	r0, [pc, #248]	@ (800793c <__mdiff+0x124>)
 8007842:	f001 fa95 	bl	8008d70 <__assert_func>
 8007846:	2301      	movs	r3, #1
 8007848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800784c:	4610      	mov	r0, r2
 800784e:	b003      	add	sp, #12
 8007850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007854:	bfbc      	itt	lt
 8007856:	464b      	movlt	r3, r9
 8007858:	46a1      	movlt	r9, r4
 800785a:	4630      	mov	r0, r6
 800785c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007860:	bfba      	itte	lt
 8007862:	461c      	movlt	r4, r3
 8007864:	2501      	movlt	r5, #1
 8007866:	2500      	movge	r5, #0
 8007868:	f7ff fcf6 	bl	8007258 <_Balloc>
 800786c:	4602      	mov	r2, r0
 800786e:	b918      	cbnz	r0, 8007878 <__mdiff+0x60>
 8007870:	4b31      	ldr	r3, [pc, #196]	@ (8007938 <__mdiff+0x120>)
 8007872:	f240 2145 	movw	r1, #581	@ 0x245
 8007876:	e7e3      	b.n	8007840 <__mdiff+0x28>
 8007878:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800787c:	6926      	ldr	r6, [r4, #16]
 800787e:	60c5      	str	r5, [r0, #12]
 8007880:	f109 0310 	add.w	r3, r9, #16
 8007884:	f109 0514 	add.w	r5, r9, #20
 8007888:	f104 0e14 	add.w	lr, r4, #20
 800788c:	f100 0b14 	add.w	fp, r0, #20
 8007890:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007894:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	46d9      	mov	r9, fp
 800789c:	f04f 0c00 	mov.w	ip, #0
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	fa1f f38a 	uxth.w	r3, sl
 80078b0:	4619      	mov	r1, r3
 80078b2:	b283      	uxth	r3, r0
 80078b4:	1acb      	subs	r3, r1, r3
 80078b6:	0c00      	lsrs	r0, r0, #16
 80078b8:	4463      	add	r3, ip
 80078ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078c8:	4576      	cmp	r6, lr
 80078ca:	f849 3b04 	str.w	r3, [r9], #4
 80078ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078d2:	d8e5      	bhi.n	80078a0 <__mdiff+0x88>
 80078d4:	1b33      	subs	r3, r6, r4
 80078d6:	3b15      	subs	r3, #21
 80078d8:	f023 0303 	bic.w	r3, r3, #3
 80078dc:	3415      	adds	r4, #21
 80078de:	3304      	adds	r3, #4
 80078e0:	42a6      	cmp	r6, r4
 80078e2:	bf38      	it	cc
 80078e4:	2304      	movcc	r3, #4
 80078e6:	441d      	add	r5, r3
 80078e8:	445b      	add	r3, fp
 80078ea:	461e      	mov	r6, r3
 80078ec:	462c      	mov	r4, r5
 80078ee:	4544      	cmp	r4, r8
 80078f0:	d30e      	bcc.n	8007910 <__mdiff+0xf8>
 80078f2:	f108 0103 	add.w	r1, r8, #3
 80078f6:	1b49      	subs	r1, r1, r5
 80078f8:	f021 0103 	bic.w	r1, r1, #3
 80078fc:	3d03      	subs	r5, #3
 80078fe:	45a8      	cmp	r8, r5
 8007900:	bf38      	it	cc
 8007902:	2100      	movcc	r1, #0
 8007904:	440b      	add	r3, r1
 8007906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800790a:	b191      	cbz	r1, 8007932 <__mdiff+0x11a>
 800790c:	6117      	str	r7, [r2, #16]
 800790e:	e79d      	b.n	800784c <__mdiff+0x34>
 8007910:	f854 1b04 	ldr.w	r1, [r4], #4
 8007914:	46e6      	mov	lr, ip
 8007916:	0c08      	lsrs	r0, r1, #16
 8007918:	fa1c fc81 	uxtah	ip, ip, r1
 800791c:	4471      	add	r1, lr
 800791e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007922:	b289      	uxth	r1, r1
 8007924:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007928:	f846 1b04 	str.w	r1, [r6], #4
 800792c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007930:	e7dd      	b.n	80078ee <__mdiff+0xd6>
 8007932:	3f01      	subs	r7, #1
 8007934:	e7e7      	b.n	8007906 <__mdiff+0xee>
 8007936:	bf00      	nop
 8007938:	08009b65 	.word	0x08009b65
 800793c:	08009b76 	.word	0x08009b76

08007940 <__ulp>:
 8007940:	b082      	sub	sp, #8
 8007942:	ed8d 0b00 	vstr	d0, [sp]
 8007946:	9a01      	ldr	r2, [sp, #4]
 8007948:	4b0f      	ldr	r3, [pc, #60]	@ (8007988 <__ulp+0x48>)
 800794a:	4013      	ands	r3, r2
 800794c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007950:	2b00      	cmp	r3, #0
 8007952:	dc08      	bgt.n	8007966 <__ulp+0x26>
 8007954:	425b      	negs	r3, r3
 8007956:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800795a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800795e:	da04      	bge.n	800796a <__ulp+0x2a>
 8007960:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007964:	4113      	asrs	r3, r2
 8007966:	2200      	movs	r2, #0
 8007968:	e008      	b.n	800797c <__ulp+0x3c>
 800796a:	f1a2 0314 	sub.w	r3, r2, #20
 800796e:	2b1e      	cmp	r3, #30
 8007970:	bfda      	itte	le
 8007972:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007976:	40da      	lsrle	r2, r3
 8007978:	2201      	movgt	r2, #1
 800797a:	2300      	movs	r3, #0
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	ec41 0b10 	vmov	d0, r0, r1
 8007984:	b002      	add	sp, #8
 8007986:	4770      	bx	lr
 8007988:	7ff00000 	.word	0x7ff00000

0800798c <__b2d>:
 800798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007990:	6906      	ldr	r6, [r0, #16]
 8007992:	f100 0814 	add.w	r8, r0, #20
 8007996:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800799a:	1f37      	subs	r7, r6, #4
 800799c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079a0:	4610      	mov	r0, r2
 80079a2:	f7ff fd4b 	bl	800743c <__hi0bits>
 80079a6:	f1c0 0320 	rsb	r3, r0, #32
 80079aa:	280a      	cmp	r0, #10
 80079ac:	600b      	str	r3, [r1, #0]
 80079ae:	491b      	ldr	r1, [pc, #108]	@ (8007a1c <__b2d+0x90>)
 80079b0:	dc15      	bgt.n	80079de <__b2d+0x52>
 80079b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80079b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80079ba:	45b8      	cmp	r8, r7
 80079bc:	ea43 0501 	orr.w	r5, r3, r1
 80079c0:	bf34      	ite	cc
 80079c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80079c6:	2300      	movcs	r3, #0
 80079c8:	3015      	adds	r0, #21
 80079ca:	fa02 f000 	lsl.w	r0, r2, r0
 80079ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80079d2:	4303      	orrs	r3, r0
 80079d4:	461c      	mov	r4, r3
 80079d6:	ec45 4b10 	vmov	d0, r4, r5
 80079da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079de:	45b8      	cmp	r8, r7
 80079e0:	bf3a      	itte	cc
 80079e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80079e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80079ea:	2300      	movcs	r3, #0
 80079ec:	380b      	subs	r0, #11
 80079ee:	d012      	beq.n	8007a16 <__b2d+0x8a>
 80079f0:	f1c0 0120 	rsb	r1, r0, #32
 80079f4:	fa23 f401 	lsr.w	r4, r3, r1
 80079f8:	4082      	lsls	r2, r0
 80079fa:	4322      	orrs	r2, r4
 80079fc:	4547      	cmp	r7, r8
 80079fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007a02:	bf8c      	ite	hi
 8007a04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007a08:	2200      	movls	r2, #0
 8007a0a:	4083      	lsls	r3, r0
 8007a0c:	40ca      	lsrs	r2, r1
 8007a0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a12:	4313      	orrs	r3, r2
 8007a14:	e7de      	b.n	80079d4 <__b2d+0x48>
 8007a16:	ea42 0501 	orr.w	r5, r2, r1
 8007a1a:	e7db      	b.n	80079d4 <__b2d+0x48>
 8007a1c:	3ff00000 	.word	0x3ff00000

08007a20 <__d2b>:
 8007a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	460f      	mov	r7, r1
 8007a26:	2101      	movs	r1, #1
 8007a28:	ec59 8b10 	vmov	r8, r9, d0
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	f7ff fc13 	bl	8007258 <_Balloc>
 8007a32:	4604      	mov	r4, r0
 8007a34:	b930      	cbnz	r0, 8007a44 <__d2b+0x24>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b23      	ldr	r3, [pc, #140]	@ (8007ac8 <__d2b+0xa8>)
 8007a3a:	4824      	ldr	r0, [pc, #144]	@ (8007acc <__d2b+0xac>)
 8007a3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a40:	f001 f996 	bl	8008d70 <__assert_func>
 8007a44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a4c:	b10d      	cbz	r5, 8007a52 <__d2b+0x32>
 8007a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	f1b8 0300 	subs.w	r3, r8, #0
 8007a58:	d023      	beq.n	8007aa2 <__d2b+0x82>
 8007a5a:	4668      	mov	r0, sp
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	f7ff fd0c 	bl	800747a <__lo0bits>
 8007a62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a66:	b1d0      	cbz	r0, 8007a9e <__d2b+0x7e>
 8007a68:	f1c0 0320 	rsb	r3, r0, #32
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	430b      	orrs	r3, r1
 8007a72:	40c2      	lsrs	r2, r0
 8007a74:	6163      	str	r3, [r4, #20]
 8007a76:	9201      	str	r2, [sp, #4]
 8007a78:	9b01      	ldr	r3, [sp, #4]
 8007a7a:	61a3      	str	r3, [r4, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf0c      	ite	eq
 8007a80:	2201      	moveq	r2, #1
 8007a82:	2202      	movne	r2, #2
 8007a84:	6122      	str	r2, [r4, #16]
 8007a86:	b1a5      	cbz	r5, 8007ab2 <__d2b+0x92>
 8007a88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a8c:	4405      	add	r5, r0
 8007a8e:	603d      	str	r5, [r7, #0]
 8007a90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	4620      	mov	r0, r4
 8007a98:	b003      	add	sp, #12
 8007a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a9e:	6161      	str	r1, [r4, #20]
 8007aa0:	e7ea      	b.n	8007a78 <__d2b+0x58>
 8007aa2:	a801      	add	r0, sp, #4
 8007aa4:	f7ff fce9 	bl	800747a <__lo0bits>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	6163      	str	r3, [r4, #20]
 8007aac:	3020      	adds	r0, #32
 8007aae:	2201      	movs	r2, #1
 8007ab0:	e7e8      	b.n	8007a84 <__d2b+0x64>
 8007ab2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ab6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007aba:	6038      	str	r0, [r7, #0]
 8007abc:	6918      	ldr	r0, [r3, #16]
 8007abe:	f7ff fcbd 	bl	800743c <__hi0bits>
 8007ac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ac6:	e7e5      	b.n	8007a94 <__d2b+0x74>
 8007ac8:	08009b65 	.word	0x08009b65
 8007acc:	08009b76 	.word	0x08009b76

08007ad0 <__ratio>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	e9cd 1000 	strd	r1, r0, [sp]
 8007ada:	a902      	add	r1, sp, #8
 8007adc:	f7ff ff56 	bl	800798c <__b2d>
 8007ae0:	9800      	ldr	r0, [sp, #0]
 8007ae2:	a903      	add	r1, sp, #12
 8007ae4:	ec55 4b10 	vmov	r4, r5, d0
 8007ae8:	f7ff ff50 	bl	800798c <__b2d>
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	6919      	ldr	r1, [r3, #16]
 8007af0:	9b00      	ldr	r3, [sp, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	1ac9      	subs	r1, r1, r3
 8007af6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	ec5b ab10 	vmov	sl, fp, d0
 8007b00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bfce      	itee	gt
 8007b08:	462a      	movgt	r2, r5
 8007b0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b0e:	465a      	movle	r2, fp
 8007b10:	462f      	mov	r7, r5
 8007b12:	46d9      	mov	r9, fp
 8007b14:	bfcc      	ite	gt
 8007b16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007b1e:	464b      	mov	r3, r9
 8007b20:	4652      	mov	r2, sl
 8007b22:	4620      	mov	r0, r4
 8007b24:	4639      	mov	r1, r7
 8007b26:	f7f8 fe99 	bl	800085c <__aeabi_ddiv>
 8007b2a:	ec41 0b10 	vmov	d0, r0, r1
 8007b2e:	b005      	add	sp, #20
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b34 <__copybits>:
 8007b34:	3901      	subs	r1, #1
 8007b36:	b570      	push	{r4, r5, r6, lr}
 8007b38:	1149      	asrs	r1, r1, #5
 8007b3a:	6914      	ldr	r4, [r2, #16]
 8007b3c:	3101      	adds	r1, #1
 8007b3e:	f102 0314 	add.w	r3, r2, #20
 8007b42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b4a:	1f05      	subs	r5, r0, #4
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d30c      	bcc.n	8007b6a <__copybits+0x36>
 8007b50:	1aa3      	subs	r3, r4, r2
 8007b52:	3b11      	subs	r3, #17
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	3211      	adds	r2, #17
 8007b5a:	42a2      	cmp	r2, r4
 8007b5c:	bf88      	it	hi
 8007b5e:	2300      	movhi	r3, #0
 8007b60:	4418      	add	r0, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	4288      	cmp	r0, r1
 8007b66:	d305      	bcc.n	8007b74 <__copybits+0x40>
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b72:	e7eb      	b.n	8007b4c <__copybits+0x18>
 8007b74:	f840 3b04 	str.w	r3, [r0], #4
 8007b78:	e7f4      	b.n	8007b64 <__copybits+0x30>

08007b7a <__any_on>:
 8007b7a:	f100 0214 	add.w	r2, r0, #20
 8007b7e:	6900      	ldr	r0, [r0, #16]
 8007b80:	114b      	asrs	r3, r1, #5
 8007b82:	4298      	cmp	r0, r3
 8007b84:	b510      	push	{r4, lr}
 8007b86:	db11      	blt.n	8007bac <__any_on+0x32>
 8007b88:	dd0a      	ble.n	8007ba0 <__any_on+0x26>
 8007b8a:	f011 011f 	ands.w	r1, r1, #31
 8007b8e:	d007      	beq.n	8007ba0 <__any_on+0x26>
 8007b90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b94:	fa24 f001 	lsr.w	r0, r4, r1
 8007b98:	fa00 f101 	lsl.w	r1, r0, r1
 8007b9c:	428c      	cmp	r4, r1
 8007b9e:	d10b      	bne.n	8007bb8 <__any_on+0x3e>
 8007ba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d803      	bhi.n	8007bb0 <__any_on+0x36>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	bd10      	pop	{r4, pc}
 8007bac:	4603      	mov	r3, r0
 8007bae:	e7f7      	b.n	8007ba0 <__any_on+0x26>
 8007bb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d0f5      	beq.n	8007ba4 <__any_on+0x2a>
 8007bb8:	2001      	movs	r0, #1
 8007bba:	e7f6      	b.n	8007baa <__any_on+0x30>

08007bbc <sulp>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	ec45 4b10 	vmov	d0, r4, r5
 8007bc6:	4616      	mov	r6, r2
 8007bc8:	f7ff feba 	bl	8007940 <__ulp>
 8007bcc:	ec51 0b10 	vmov	r0, r1, d0
 8007bd0:	b17e      	cbz	r6, 8007bf2 <sulp+0x36>
 8007bd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007bd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dd09      	ble.n	8007bf2 <sulp+0x36>
 8007bde:	051b      	lsls	r3, r3, #20
 8007be0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007be4:	2400      	movs	r4, #0
 8007be6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	f7f8 fd0b 	bl	8000608 <__aeabi_dmul>
 8007bf2:	ec41 0b10 	vmov	d0, r0, r1
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}

08007bf8 <_strtod_l>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	b09f      	sub	sp, #124	@ 0x7c
 8007bfe:	460c      	mov	r4, r1
 8007c00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007c02:	2200      	movs	r2, #0
 8007c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8007c06:	9005      	str	r0, [sp, #20]
 8007c08:	f04f 0a00 	mov.w	sl, #0
 8007c0c:	f04f 0b00 	mov.w	fp, #0
 8007c10:	460a      	mov	r2, r1
 8007c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c14:	7811      	ldrb	r1, [r2, #0]
 8007c16:	292b      	cmp	r1, #43	@ 0x2b
 8007c18:	d04a      	beq.n	8007cb0 <_strtod_l+0xb8>
 8007c1a:	d838      	bhi.n	8007c8e <_strtod_l+0x96>
 8007c1c:	290d      	cmp	r1, #13
 8007c1e:	d832      	bhi.n	8007c86 <_strtod_l+0x8e>
 8007c20:	2908      	cmp	r1, #8
 8007c22:	d832      	bhi.n	8007c8a <_strtod_l+0x92>
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d03b      	beq.n	8007ca0 <_strtod_l+0xa8>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c2e:	782a      	ldrb	r2, [r5, #0]
 8007c30:	2a30      	cmp	r2, #48	@ 0x30
 8007c32:	f040 80b3 	bne.w	8007d9c <_strtod_l+0x1a4>
 8007c36:	786a      	ldrb	r2, [r5, #1]
 8007c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c3c:	2a58      	cmp	r2, #88	@ 0x58
 8007c3e:	d16e      	bne.n	8007d1e <_strtod_l+0x126>
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4a8e      	ldr	r2, [pc, #568]	@ (8007e84 <_strtod_l+0x28c>)
 8007c4c:	9805      	ldr	r0, [sp, #20]
 8007c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c50:	a919      	add	r1, sp, #100	@ 0x64
 8007c52:	f001 f927 	bl	8008ea4 <__gethex>
 8007c56:	f010 060f 	ands.w	r6, r0, #15
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	d005      	beq.n	8007c6a <_strtod_l+0x72>
 8007c5e:	2e06      	cmp	r6, #6
 8007c60:	d128      	bne.n	8007cb4 <_strtod_l+0xbc>
 8007c62:	3501      	adds	r5, #1
 8007c64:	2300      	movs	r3, #0
 8007c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 858e 	bne.w	800878e <_strtod_l+0xb96>
 8007c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c74:	b1cb      	cbz	r3, 8007caa <_strtod_l+0xb2>
 8007c76:	4652      	mov	r2, sl
 8007c78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c7c:	ec43 2b10 	vmov	d0, r2, r3
 8007c80:	b01f      	add	sp, #124	@ 0x7c
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	2920      	cmp	r1, #32
 8007c88:	d1ce      	bne.n	8007c28 <_strtod_l+0x30>
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	e7c1      	b.n	8007c12 <_strtod_l+0x1a>
 8007c8e:	292d      	cmp	r1, #45	@ 0x2d
 8007c90:	d1ca      	bne.n	8007c28 <_strtod_l+0x30>
 8007c92:	2101      	movs	r1, #1
 8007c94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c96:	1c51      	adds	r1, r2, #1
 8007c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c9a:	7852      	ldrb	r2, [r2, #1]
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	d1c5      	bne.n	8007c2c <_strtod_l+0x34>
 8007ca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f040 8570 	bne.w	800878a <_strtod_l+0xb92>
 8007caa:	4652      	mov	r2, sl
 8007cac:	465b      	mov	r3, fp
 8007cae:	e7e5      	b.n	8007c7c <_strtod_l+0x84>
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	e7ef      	b.n	8007c94 <_strtod_l+0x9c>
 8007cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007cb6:	b13a      	cbz	r2, 8007cc8 <_strtod_l+0xd0>
 8007cb8:	2135      	movs	r1, #53	@ 0x35
 8007cba:	a81c      	add	r0, sp, #112	@ 0x70
 8007cbc:	f7ff ff3a 	bl	8007b34 <__copybits>
 8007cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cc2:	9805      	ldr	r0, [sp, #20]
 8007cc4:	f7ff fb08 	bl	80072d8 <_Bfree>
 8007cc8:	3e01      	subs	r6, #1
 8007cca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007ccc:	2e04      	cmp	r6, #4
 8007cce:	d806      	bhi.n	8007cde <_strtod_l+0xe6>
 8007cd0:	e8df f006 	tbb	[pc, r6]
 8007cd4:	201d0314 	.word	0x201d0314
 8007cd8:	14          	.byte	0x14
 8007cd9:	00          	.byte	0x00
 8007cda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007cde:	05e1      	lsls	r1, r4, #23
 8007ce0:	bf48      	it	mi
 8007ce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cea:	0d1b      	lsrs	r3, r3, #20
 8007cec:	051b      	lsls	r3, r3, #20
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1bb      	bne.n	8007c6a <_strtod_l+0x72>
 8007cf2:	f7fe fb2f 	bl	8006354 <__errno>
 8007cf6:	2322      	movs	r3, #34	@ 0x22
 8007cf8:	6003      	str	r3, [r0, #0]
 8007cfa:	e7b6      	b.n	8007c6a <_strtod_l+0x72>
 8007cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007d00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007d04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007d08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d0c:	e7e7      	b.n	8007cde <_strtod_l+0xe6>
 8007d0e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007e8c <_strtod_l+0x294>
 8007d12:	e7e4      	b.n	8007cde <_strtod_l+0xe6>
 8007d14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007d18:	f04f 3aff 	mov.w	sl, #4294967295
 8007d1c:	e7df      	b.n	8007cde <_strtod_l+0xe6>
 8007d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b30      	cmp	r3, #48	@ 0x30
 8007d28:	d0f9      	beq.n	8007d1e <_strtod_l+0x126>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d09d      	beq.n	8007c6a <_strtod_l+0x72>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d34:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d36:	2300      	movs	r3, #0
 8007d38:	9308      	str	r3, [sp, #32]
 8007d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d3c:	461f      	mov	r7, r3
 8007d3e:	220a      	movs	r2, #10
 8007d40:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d42:	7805      	ldrb	r5, [r0, #0]
 8007d44:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d48:	b2d9      	uxtb	r1, r3
 8007d4a:	2909      	cmp	r1, #9
 8007d4c:	d928      	bls.n	8007da0 <_strtod_l+0x1a8>
 8007d4e:	494e      	ldr	r1, [pc, #312]	@ (8007e88 <_strtod_l+0x290>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	f000 ffd5 	bl	8008d00 <strncmp>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d032      	beq.n	8007dc0 <_strtod_l+0x1c8>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4681      	mov	r9, r0
 8007d60:	463d      	mov	r5, r7
 8007d62:	4603      	mov	r3, r0
 8007d64:	2a65      	cmp	r2, #101	@ 0x65
 8007d66:	d001      	beq.n	8007d6c <_strtod_l+0x174>
 8007d68:	2a45      	cmp	r2, #69	@ 0x45
 8007d6a:	d114      	bne.n	8007d96 <_strtod_l+0x19e>
 8007d6c:	b91d      	cbnz	r5, 8007d76 <_strtod_l+0x17e>
 8007d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d70:	4302      	orrs	r2, r0
 8007d72:	d095      	beq.n	8007ca0 <_strtod_l+0xa8>
 8007d74:	2500      	movs	r5, #0
 8007d76:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d78:	1c62      	adds	r2, r4, #1
 8007d7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d7c:	7862      	ldrb	r2, [r4, #1]
 8007d7e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d80:	d077      	beq.n	8007e72 <_strtod_l+0x27a>
 8007d82:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d84:	d07b      	beq.n	8007e7e <_strtod_l+0x286>
 8007d86:	f04f 0c00 	mov.w	ip, #0
 8007d8a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d8e:	2909      	cmp	r1, #9
 8007d90:	f240 8082 	bls.w	8007e98 <_strtod_l+0x2a0>
 8007d94:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d96:	f04f 0800 	mov.w	r8, #0
 8007d9a:	e0a2      	b.n	8007ee2 <_strtod_l+0x2ea>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e7c7      	b.n	8007d30 <_strtod_l+0x138>
 8007da0:	2f08      	cmp	r7, #8
 8007da2:	bfd5      	itete	le
 8007da4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007da6:	9908      	ldrgt	r1, [sp, #32]
 8007da8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007dac:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007db0:	f100 0001 	add.w	r0, r0, #1
 8007db4:	bfd4      	ite	le
 8007db6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007db8:	9308      	strgt	r3, [sp, #32]
 8007dba:	3701      	adds	r7, #1
 8007dbc:	9019      	str	r0, [sp, #100]	@ 0x64
 8007dbe:	e7bf      	b.n	8007d40 <_strtod_l+0x148>
 8007dc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dc6:	785a      	ldrb	r2, [r3, #1]
 8007dc8:	b37f      	cbz	r7, 8007e2a <_strtod_l+0x232>
 8007dca:	4681      	mov	r9, r0
 8007dcc:	463d      	mov	r5, r7
 8007dce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007dd2:	2b09      	cmp	r3, #9
 8007dd4:	d912      	bls.n	8007dfc <_strtod_l+0x204>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e7c4      	b.n	8007d64 <_strtod_l+0x16c>
 8007dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	9219      	str	r2, [sp, #100]	@ 0x64
 8007de0:	785a      	ldrb	r2, [r3, #1]
 8007de2:	3001      	adds	r0, #1
 8007de4:	2a30      	cmp	r2, #48	@ 0x30
 8007de6:	d0f8      	beq.n	8007dda <_strtod_l+0x1e2>
 8007de8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	f200 84d3 	bhi.w	8008798 <_strtod_l+0xba0>
 8007df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007df4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007df6:	4681      	mov	r9, r0
 8007df8:	2000      	movs	r0, #0
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	3a30      	subs	r2, #48	@ 0x30
 8007dfe:	f100 0301 	add.w	r3, r0, #1
 8007e02:	d02a      	beq.n	8007e5a <_strtod_l+0x262>
 8007e04:	4499      	add	r9, r3
 8007e06:	eb00 0c05 	add.w	ip, r0, r5
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	210a      	movs	r1, #10
 8007e0e:	4563      	cmp	r3, ip
 8007e10:	d10d      	bne.n	8007e2e <_strtod_l+0x236>
 8007e12:	1c69      	adds	r1, r5, #1
 8007e14:	4401      	add	r1, r0
 8007e16:	4428      	add	r0, r5
 8007e18:	2808      	cmp	r0, #8
 8007e1a:	dc16      	bgt.n	8007e4a <_strtod_l+0x252>
 8007e1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e1e:	230a      	movs	r3, #10
 8007e20:	fb03 2300 	mla	r3, r3, r0, r2
 8007e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e26:	2300      	movs	r3, #0
 8007e28:	e018      	b.n	8007e5c <_strtod_l+0x264>
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	e7da      	b.n	8007de4 <_strtod_l+0x1ec>
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	f103 0301 	add.w	r3, r3, #1
 8007e34:	dc03      	bgt.n	8007e3e <_strtod_l+0x246>
 8007e36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e38:	434e      	muls	r6, r1
 8007e3a:	960a      	str	r6, [sp, #40]	@ 0x28
 8007e3c:	e7e7      	b.n	8007e0e <_strtod_l+0x216>
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	bfde      	ittt	le
 8007e42:	9e08      	ldrle	r6, [sp, #32]
 8007e44:	434e      	mulle	r6, r1
 8007e46:	9608      	strle	r6, [sp, #32]
 8007e48:	e7e1      	b.n	8007e0e <_strtod_l+0x216>
 8007e4a:	280f      	cmp	r0, #15
 8007e4c:	dceb      	bgt.n	8007e26 <_strtod_l+0x22e>
 8007e4e:	9808      	ldr	r0, [sp, #32]
 8007e50:	230a      	movs	r3, #10
 8007e52:	fb03 2300 	mla	r3, r3, r0, r2
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	e7e5      	b.n	8007e26 <_strtod_l+0x22e>
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e5e:	1c50      	adds	r0, r2, #1
 8007e60:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e62:	7852      	ldrb	r2, [r2, #1]
 8007e64:	4618      	mov	r0, r3
 8007e66:	460d      	mov	r5, r1
 8007e68:	e7b1      	b.n	8007dce <_strtod_l+0x1d6>
 8007e6a:	f04f 0900 	mov.w	r9, #0
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e77d      	b.n	8007d6e <_strtod_l+0x176>
 8007e72:	f04f 0c00 	mov.w	ip, #0
 8007e76:	1ca2      	adds	r2, r4, #2
 8007e78:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e7a:	78a2      	ldrb	r2, [r4, #2]
 8007e7c:	e785      	b.n	8007d8a <_strtod_l+0x192>
 8007e7e:	f04f 0c01 	mov.w	ip, #1
 8007e82:	e7f8      	b.n	8007e76 <_strtod_l+0x27e>
 8007e84:	08009ce8 	.word	0x08009ce8
 8007e88:	08009cd0 	.word	0x08009cd0
 8007e8c:	7ff00000 	.word	0x7ff00000
 8007e90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e92:	1c51      	adds	r1, r2, #1
 8007e94:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e96:	7852      	ldrb	r2, [r2, #1]
 8007e98:	2a30      	cmp	r2, #48	@ 0x30
 8007e9a:	d0f9      	beq.n	8007e90 <_strtod_l+0x298>
 8007e9c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007ea0:	2908      	cmp	r1, #8
 8007ea2:	f63f af78 	bhi.w	8007d96 <_strtod_l+0x19e>
 8007ea6:	3a30      	subs	r2, #48	@ 0x30
 8007ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007eac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007eae:	f04f 080a 	mov.w	r8, #10
 8007eb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007eb4:	1c56      	adds	r6, r2, #1
 8007eb6:	9619      	str	r6, [sp, #100]	@ 0x64
 8007eb8:	7852      	ldrb	r2, [r2, #1]
 8007eba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ebe:	f1be 0f09 	cmp.w	lr, #9
 8007ec2:	d939      	bls.n	8007f38 <_strtod_l+0x340>
 8007ec4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ec6:	1a76      	subs	r6, r6, r1
 8007ec8:	2e08      	cmp	r6, #8
 8007eca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007ece:	dc03      	bgt.n	8007ed8 <_strtod_l+0x2e0>
 8007ed0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ed2:	4588      	cmp	r8, r1
 8007ed4:	bfa8      	it	ge
 8007ed6:	4688      	movge	r8, r1
 8007ed8:	f1bc 0f00 	cmp.w	ip, #0
 8007edc:	d001      	beq.n	8007ee2 <_strtod_l+0x2ea>
 8007ede:	f1c8 0800 	rsb	r8, r8, #0
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	d14e      	bne.n	8007f84 <_strtod_l+0x38c>
 8007ee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ee8:	4308      	orrs	r0, r1
 8007eea:	f47f aebe 	bne.w	8007c6a <_strtod_l+0x72>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f47f aed6 	bne.w	8007ca0 <_strtod_l+0xa8>
 8007ef4:	2a69      	cmp	r2, #105	@ 0x69
 8007ef6:	d028      	beq.n	8007f4a <_strtod_l+0x352>
 8007ef8:	dc25      	bgt.n	8007f46 <_strtod_l+0x34e>
 8007efa:	2a49      	cmp	r2, #73	@ 0x49
 8007efc:	d025      	beq.n	8007f4a <_strtod_l+0x352>
 8007efe:	2a4e      	cmp	r2, #78	@ 0x4e
 8007f00:	f47f aece 	bne.w	8007ca0 <_strtod_l+0xa8>
 8007f04:	499b      	ldr	r1, [pc, #620]	@ (8008174 <_strtod_l+0x57c>)
 8007f06:	a819      	add	r0, sp, #100	@ 0x64
 8007f08:	f001 f9ee 	bl	80092e8 <__match>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f43f aec7 	beq.w	8007ca0 <_strtod_l+0xa8>
 8007f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b28      	cmp	r3, #40	@ 0x28
 8007f18:	d12e      	bne.n	8007f78 <_strtod_l+0x380>
 8007f1a:	4997      	ldr	r1, [pc, #604]	@ (8008178 <_strtod_l+0x580>)
 8007f1c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f1e:	a819      	add	r0, sp, #100	@ 0x64
 8007f20:	f001 f9f6 	bl	8009310 <__hexnan>
 8007f24:	2805      	cmp	r0, #5
 8007f26:	d127      	bne.n	8007f78 <_strtod_l+0x380>
 8007f28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f2a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f2e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f32:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f36:	e698      	b.n	8007c6a <_strtod_l+0x72>
 8007f38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f3a:	fb08 2101 	mla	r1, r8, r1, r2
 8007f3e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f42:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f44:	e7b5      	b.n	8007eb2 <_strtod_l+0x2ba>
 8007f46:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f48:	e7da      	b.n	8007f00 <_strtod_l+0x308>
 8007f4a:	498c      	ldr	r1, [pc, #560]	@ (800817c <_strtod_l+0x584>)
 8007f4c:	a819      	add	r0, sp, #100	@ 0x64
 8007f4e:	f001 f9cb 	bl	80092e8 <__match>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f aea4 	beq.w	8007ca0 <_strtod_l+0xa8>
 8007f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f5a:	4989      	ldr	r1, [pc, #548]	@ (8008180 <_strtod_l+0x588>)
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	a819      	add	r0, sp, #100	@ 0x64
 8007f60:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f62:	f001 f9c1 	bl	80092e8 <__match>
 8007f66:	b910      	cbnz	r0, 8007f6e <_strtod_l+0x376>
 8007f68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f6e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008190 <_strtod_l+0x598>
 8007f72:	f04f 0a00 	mov.w	sl, #0
 8007f76:	e678      	b.n	8007c6a <_strtod_l+0x72>
 8007f78:	4882      	ldr	r0, [pc, #520]	@ (8008184 <_strtod_l+0x58c>)
 8007f7a:	f000 fef1 	bl	8008d60 <nan>
 8007f7e:	ec5b ab10 	vmov	sl, fp, d0
 8007f82:	e672      	b.n	8007c6a <_strtod_l+0x72>
 8007f84:	eba8 0309 	sub.w	r3, r8, r9
 8007f88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8c:	2f00      	cmp	r7, #0
 8007f8e:	bf08      	it	eq
 8007f90:	462f      	moveq	r7, r5
 8007f92:	2d10      	cmp	r5, #16
 8007f94:	462c      	mov	r4, r5
 8007f96:	bfa8      	it	ge
 8007f98:	2410      	movge	r4, #16
 8007f9a:	f7f8 fabb 	bl	8000514 <__aeabi_ui2d>
 8007f9e:	2d09      	cmp	r5, #9
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	468b      	mov	fp, r1
 8007fa4:	dc13      	bgt.n	8007fce <_strtod_l+0x3d6>
 8007fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f43f ae5e 	beq.w	8007c6a <_strtod_l+0x72>
 8007fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb0:	dd78      	ble.n	80080a4 <_strtod_l+0x4ac>
 8007fb2:	2b16      	cmp	r3, #22
 8007fb4:	dc5f      	bgt.n	8008076 <_strtod_l+0x47e>
 8007fb6:	4974      	ldr	r1, [pc, #464]	@ (8008188 <_strtod_l+0x590>)
 8007fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	f7f8 fb20 	bl	8000608 <__aeabi_dmul>
 8007fc8:	4682      	mov	sl, r0
 8007fca:	468b      	mov	fp, r1
 8007fcc:	e64d      	b.n	8007c6a <_strtod_l+0x72>
 8007fce:	4b6e      	ldr	r3, [pc, #440]	@ (8008188 <_strtod_l+0x590>)
 8007fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fd8:	f7f8 fb16 	bl	8000608 <__aeabi_dmul>
 8007fdc:	4682      	mov	sl, r0
 8007fde:	9808      	ldr	r0, [sp, #32]
 8007fe0:	468b      	mov	fp, r1
 8007fe2:	f7f8 fa97 	bl	8000514 <__aeabi_ui2d>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4650      	mov	r0, sl
 8007fec:	4659      	mov	r1, fp
 8007fee:	f7f8 f955 	bl	800029c <__adddf3>
 8007ff2:	2d0f      	cmp	r5, #15
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	468b      	mov	fp, r1
 8007ff8:	ddd5      	ble.n	8007fa6 <_strtod_l+0x3ae>
 8007ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffc:	1b2c      	subs	r4, r5, r4
 8007ffe:	441c      	add	r4, r3
 8008000:	2c00      	cmp	r4, #0
 8008002:	f340 8096 	ble.w	8008132 <_strtod_l+0x53a>
 8008006:	f014 030f 	ands.w	r3, r4, #15
 800800a:	d00a      	beq.n	8008022 <_strtod_l+0x42a>
 800800c:	495e      	ldr	r1, [pc, #376]	@ (8008188 <_strtod_l+0x590>)
 800800e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008012:	4652      	mov	r2, sl
 8008014:	465b      	mov	r3, fp
 8008016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800801a:	f7f8 faf5 	bl	8000608 <__aeabi_dmul>
 800801e:	4682      	mov	sl, r0
 8008020:	468b      	mov	fp, r1
 8008022:	f034 040f 	bics.w	r4, r4, #15
 8008026:	d073      	beq.n	8008110 <_strtod_l+0x518>
 8008028:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800802c:	dd48      	ble.n	80080c0 <_strtod_l+0x4c8>
 800802e:	2400      	movs	r4, #0
 8008030:	46a0      	mov	r8, r4
 8008032:	940a      	str	r4, [sp, #40]	@ 0x28
 8008034:	46a1      	mov	r9, r4
 8008036:	9a05      	ldr	r2, [sp, #20]
 8008038:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008190 <_strtod_l+0x598>
 800803c:	2322      	movs	r3, #34	@ 0x22
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	f04f 0a00 	mov.w	sl, #0
 8008044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	f43f ae0f 	beq.w	8007c6a <_strtod_l+0x72>
 800804c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800804e:	9805      	ldr	r0, [sp, #20]
 8008050:	f7ff f942 	bl	80072d8 <_Bfree>
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	4649      	mov	r1, r9
 8008058:	f7ff f93e 	bl	80072d8 <_Bfree>
 800805c:	9805      	ldr	r0, [sp, #20]
 800805e:	4641      	mov	r1, r8
 8008060:	f7ff f93a 	bl	80072d8 <_Bfree>
 8008064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008066:	9805      	ldr	r0, [sp, #20]
 8008068:	f7ff f936 	bl	80072d8 <_Bfree>
 800806c:	9805      	ldr	r0, [sp, #20]
 800806e:	4621      	mov	r1, r4
 8008070:	f7ff f932 	bl	80072d8 <_Bfree>
 8008074:	e5f9      	b.n	8007c6a <_strtod_l+0x72>
 8008076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008078:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800807c:	4293      	cmp	r3, r2
 800807e:	dbbc      	blt.n	8007ffa <_strtod_l+0x402>
 8008080:	4c41      	ldr	r4, [pc, #260]	@ (8008188 <_strtod_l+0x590>)
 8008082:	f1c5 050f 	rsb	r5, r5, #15
 8008086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800808a:	4652      	mov	r2, sl
 800808c:	465b      	mov	r3, fp
 800808e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008092:	f7f8 fab9 	bl	8000608 <__aeabi_dmul>
 8008096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008098:	1b5d      	subs	r5, r3, r5
 800809a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800809e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080a2:	e78f      	b.n	8007fc4 <_strtod_l+0x3cc>
 80080a4:	3316      	adds	r3, #22
 80080a6:	dba8      	blt.n	8007ffa <_strtod_l+0x402>
 80080a8:	4b37      	ldr	r3, [pc, #220]	@ (8008188 <_strtod_l+0x590>)
 80080aa:	eba9 0808 	sub.w	r8, r9, r8
 80080ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80080b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80080b6:	4650      	mov	r0, sl
 80080b8:	4659      	mov	r1, fp
 80080ba:	f7f8 fbcf 	bl	800085c <__aeabi_ddiv>
 80080be:	e783      	b.n	8007fc8 <_strtod_l+0x3d0>
 80080c0:	4b32      	ldr	r3, [pc, #200]	@ (800818c <_strtod_l+0x594>)
 80080c2:	9308      	str	r3, [sp, #32]
 80080c4:	2300      	movs	r3, #0
 80080c6:	1124      	asrs	r4, r4, #4
 80080c8:	4650      	mov	r0, sl
 80080ca:	4659      	mov	r1, fp
 80080cc:	461e      	mov	r6, r3
 80080ce:	2c01      	cmp	r4, #1
 80080d0:	dc21      	bgt.n	8008116 <_strtod_l+0x51e>
 80080d2:	b10b      	cbz	r3, 80080d8 <_strtod_l+0x4e0>
 80080d4:	4682      	mov	sl, r0
 80080d6:	468b      	mov	fp, r1
 80080d8:	492c      	ldr	r1, [pc, #176]	@ (800818c <_strtod_l+0x594>)
 80080da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080e2:	4652      	mov	r2, sl
 80080e4:	465b      	mov	r3, fp
 80080e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ea:	f7f8 fa8d 	bl	8000608 <__aeabi_dmul>
 80080ee:	4b28      	ldr	r3, [pc, #160]	@ (8008190 <_strtod_l+0x598>)
 80080f0:	460a      	mov	r2, r1
 80080f2:	400b      	ands	r3, r1
 80080f4:	4927      	ldr	r1, [pc, #156]	@ (8008194 <_strtod_l+0x59c>)
 80080f6:	428b      	cmp	r3, r1
 80080f8:	4682      	mov	sl, r0
 80080fa:	d898      	bhi.n	800802e <_strtod_l+0x436>
 80080fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008100:	428b      	cmp	r3, r1
 8008102:	bf86      	itte	hi
 8008104:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008198 <_strtod_l+0x5a0>
 8008108:	f04f 3aff 	movhi.w	sl, #4294967295
 800810c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008110:	2300      	movs	r3, #0
 8008112:	9308      	str	r3, [sp, #32]
 8008114:	e07a      	b.n	800820c <_strtod_l+0x614>
 8008116:	07e2      	lsls	r2, r4, #31
 8008118:	d505      	bpl.n	8008126 <_strtod_l+0x52e>
 800811a:	9b08      	ldr	r3, [sp, #32]
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	2301      	movs	r3, #1
 8008126:	9a08      	ldr	r2, [sp, #32]
 8008128:	3208      	adds	r2, #8
 800812a:	3601      	adds	r6, #1
 800812c:	1064      	asrs	r4, r4, #1
 800812e:	9208      	str	r2, [sp, #32]
 8008130:	e7cd      	b.n	80080ce <_strtod_l+0x4d6>
 8008132:	d0ed      	beq.n	8008110 <_strtod_l+0x518>
 8008134:	4264      	negs	r4, r4
 8008136:	f014 020f 	ands.w	r2, r4, #15
 800813a:	d00a      	beq.n	8008152 <_strtod_l+0x55a>
 800813c:	4b12      	ldr	r3, [pc, #72]	@ (8008188 <_strtod_l+0x590>)
 800813e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008142:	4650      	mov	r0, sl
 8008144:	4659      	mov	r1, fp
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 fb87 	bl	800085c <__aeabi_ddiv>
 800814e:	4682      	mov	sl, r0
 8008150:	468b      	mov	fp, r1
 8008152:	1124      	asrs	r4, r4, #4
 8008154:	d0dc      	beq.n	8008110 <_strtod_l+0x518>
 8008156:	2c1f      	cmp	r4, #31
 8008158:	dd20      	ble.n	800819c <_strtod_l+0x5a4>
 800815a:	2400      	movs	r4, #0
 800815c:	46a0      	mov	r8, r4
 800815e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008160:	46a1      	mov	r9, r4
 8008162:	9a05      	ldr	r2, [sp, #20]
 8008164:	2322      	movs	r3, #34	@ 0x22
 8008166:	f04f 0a00 	mov.w	sl, #0
 800816a:	f04f 0b00 	mov.w	fp, #0
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	e768      	b.n	8008044 <_strtod_l+0x44c>
 8008172:	bf00      	nop
 8008174:	08009abd 	.word	0x08009abd
 8008178:	08009cd4 	.word	0x08009cd4
 800817c:	08009ab5 	.word	0x08009ab5
 8008180:	08009aec 	.word	0x08009aec
 8008184:	08009e7d 	.word	0x08009e7d
 8008188:	08009c08 	.word	0x08009c08
 800818c:	08009be0 	.word	0x08009be0
 8008190:	7ff00000 	.word	0x7ff00000
 8008194:	7ca00000 	.word	0x7ca00000
 8008198:	7fefffff 	.word	0x7fefffff
 800819c:	f014 0310 	ands.w	r3, r4, #16
 80081a0:	bf18      	it	ne
 80081a2:	236a      	movne	r3, #106	@ 0x6a
 80081a4:	4ea9      	ldr	r6, [pc, #676]	@ (800844c <_strtod_l+0x854>)
 80081a6:	9308      	str	r3, [sp, #32]
 80081a8:	4650      	mov	r0, sl
 80081aa:	4659      	mov	r1, fp
 80081ac:	2300      	movs	r3, #0
 80081ae:	07e2      	lsls	r2, r4, #31
 80081b0:	d504      	bpl.n	80081bc <_strtod_l+0x5c4>
 80081b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081b6:	f7f8 fa27 	bl	8000608 <__aeabi_dmul>
 80081ba:	2301      	movs	r3, #1
 80081bc:	1064      	asrs	r4, r4, #1
 80081be:	f106 0608 	add.w	r6, r6, #8
 80081c2:	d1f4      	bne.n	80081ae <_strtod_l+0x5b6>
 80081c4:	b10b      	cbz	r3, 80081ca <_strtod_l+0x5d2>
 80081c6:	4682      	mov	sl, r0
 80081c8:	468b      	mov	fp, r1
 80081ca:	9b08      	ldr	r3, [sp, #32]
 80081cc:	b1b3      	cbz	r3, 80081fc <_strtod_l+0x604>
 80081ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	4659      	mov	r1, fp
 80081da:	dd0f      	ble.n	80081fc <_strtod_l+0x604>
 80081dc:	2b1f      	cmp	r3, #31
 80081de:	dd55      	ble.n	800828c <_strtod_l+0x694>
 80081e0:	2b34      	cmp	r3, #52	@ 0x34
 80081e2:	bfde      	ittt	le
 80081e4:	f04f 33ff 	movle.w	r3, #4294967295
 80081e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081ec:	4093      	lslle	r3, r2
 80081ee:	f04f 0a00 	mov.w	sl, #0
 80081f2:	bfcc      	ite	gt
 80081f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081f8:	ea03 0b01 	andle.w	fp, r3, r1
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	4650      	mov	r0, sl
 8008202:	4659      	mov	r1, fp
 8008204:	f7f8 fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008208:	2800      	cmp	r0, #0
 800820a:	d1a6      	bne.n	800815a <_strtod_l+0x562>
 800820c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008212:	9805      	ldr	r0, [sp, #20]
 8008214:	462b      	mov	r3, r5
 8008216:	463a      	mov	r2, r7
 8008218:	f7ff f8c6 	bl	80073a8 <__s2b>
 800821c:	900a      	str	r0, [sp, #40]	@ 0x28
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f af05 	beq.w	800802e <_strtod_l+0x436>
 8008224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008226:	2a00      	cmp	r2, #0
 8008228:	eba9 0308 	sub.w	r3, r9, r8
 800822c:	bfa8      	it	ge
 800822e:	2300      	movge	r3, #0
 8008230:	9312      	str	r3, [sp, #72]	@ 0x48
 8008232:	2400      	movs	r4, #0
 8008234:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008238:	9316      	str	r3, [sp, #88]	@ 0x58
 800823a:	46a0      	mov	r8, r4
 800823c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	6859      	ldr	r1, [r3, #4]
 8008242:	f7ff f809 	bl	8007258 <_Balloc>
 8008246:	4681      	mov	r9, r0
 8008248:	2800      	cmp	r0, #0
 800824a:	f43f aef4 	beq.w	8008036 <_strtod_l+0x43e>
 800824e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	3202      	adds	r2, #2
 8008254:	f103 010c 	add.w	r1, r3, #12
 8008258:	0092      	lsls	r2, r2, #2
 800825a:	300c      	adds	r0, #12
 800825c:	f000 fd72 	bl	8008d44 <memcpy>
 8008260:	ec4b ab10 	vmov	d0, sl, fp
 8008264:	9805      	ldr	r0, [sp, #20]
 8008266:	aa1c      	add	r2, sp, #112	@ 0x70
 8008268:	a91b      	add	r1, sp, #108	@ 0x6c
 800826a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800826e:	f7ff fbd7 	bl	8007a20 <__d2b>
 8008272:	901a      	str	r0, [sp, #104]	@ 0x68
 8008274:	2800      	cmp	r0, #0
 8008276:	f43f aede 	beq.w	8008036 <_strtod_l+0x43e>
 800827a:	9805      	ldr	r0, [sp, #20]
 800827c:	2101      	movs	r1, #1
 800827e:	f7ff f929 	bl	80074d4 <__i2b>
 8008282:	4680      	mov	r8, r0
 8008284:	b948      	cbnz	r0, 800829a <_strtod_l+0x6a2>
 8008286:	f04f 0800 	mov.w	r8, #0
 800828a:	e6d4      	b.n	8008036 <_strtod_l+0x43e>
 800828c:	f04f 32ff 	mov.w	r2, #4294967295
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	ea03 0a0a 	and.w	sl, r3, sl
 8008298:	e7b0      	b.n	80081fc <_strtod_l+0x604>
 800829a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800829c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800829e:	2d00      	cmp	r5, #0
 80082a0:	bfab      	itete	ge
 80082a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80082a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80082a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80082a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80082aa:	bfac      	ite	ge
 80082ac:	18ef      	addge	r7, r5, r3
 80082ae:	1b5e      	sublt	r6, r3, r5
 80082b0:	9b08      	ldr	r3, [sp, #32]
 80082b2:	1aed      	subs	r5, r5, r3
 80082b4:	4415      	add	r5, r2
 80082b6:	4b66      	ldr	r3, [pc, #408]	@ (8008450 <_strtod_l+0x858>)
 80082b8:	3d01      	subs	r5, #1
 80082ba:	429d      	cmp	r5, r3
 80082bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082c0:	da50      	bge.n	8008364 <_strtod_l+0x76c>
 80082c2:	1b5b      	subs	r3, r3, r5
 80082c4:	2b1f      	cmp	r3, #31
 80082c6:	eba2 0203 	sub.w	r2, r2, r3
 80082ca:	f04f 0101 	mov.w	r1, #1
 80082ce:	dc3d      	bgt.n	800834c <_strtod_l+0x754>
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082d6:	2300      	movs	r3, #0
 80082d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80082da:	18bd      	adds	r5, r7, r2
 80082dc:	9b08      	ldr	r3, [sp, #32]
 80082de:	42af      	cmp	r7, r5
 80082e0:	4416      	add	r6, r2
 80082e2:	441e      	add	r6, r3
 80082e4:	463b      	mov	r3, r7
 80082e6:	bfa8      	it	ge
 80082e8:	462b      	movge	r3, r5
 80082ea:	42b3      	cmp	r3, r6
 80082ec:	bfa8      	it	ge
 80082ee:	4633      	movge	r3, r6
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfc2      	ittt	gt
 80082f4:	1aed      	subgt	r5, r5, r3
 80082f6:	1af6      	subgt	r6, r6, r3
 80082f8:	1aff      	subgt	r7, r7, r3
 80082fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dd16      	ble.n	800832e <_strtod_l+0x736>
 8008300:	4641      	mov	r1, r8
 8008302:	9805      	ldr	r0, [sp, #20]
 8008304:	461a      	mov	r2, r3
 8008306:	f7ff f9a5 	bl	8007654 <__pow5mult>
 800830a:	4680      	mov	r8, r0
 800830c:	2800      	cmp	r0, #0
 800830e:	d0ba      	beq.n	8008286 <_strtod_l+0x68e>
 8008310:	4601      	mov	r1, r0
 8008312:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	f7ff f8f3 	bl	8007500 <__multiply>
 800831a:	900e      	str	r0, [sp, #56]	@ 0x38
 800831c:	2800      	cmp	r0, #0
 800831e:	f43f ae8a 	beq.w	8008036 <_strtod_l+0x43e>
 8008322:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008324:	9805      	ldr	r0, [sp, #20]
 8008326:	f7fe ffd7 	bl	80072d8 <_Bfree>
 800832a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800832c:	931a      	str	r3, [sp, #104]	@ 0x68
 800832e:	2d00      	cmp	r5, #0
 8008330:	dc1d      	bgt.n	800836e <_strtod_l+0x776>
 8008332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	dd23      	ble.n	8008380 <_strtod_l+0x788>
 8008338:	4649      	mov	r1, r9
 800833a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800833c:	9805      	ldr	r0, [sp, #20]
 800833e:	f7ff f989 	bl	8007654 <__pow5mult>
 8008342:	4681      	mov	r9, r0
 8008344:	b9e0      	cbnz	r0, 8008380 <_strtod_l+0x788>
 8008346:	f04f 0900 	mov.w	r9, #0
 800834a:	e674      	b.n	8008036 <_strtod_l+0x43e>
 800834c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008350:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008354:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008358:	35e2      	adds	r5, #226	@ 0xe2
 800835a:	fa01 f305 	lsl.w	r3, r1, r5
 800835e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008360:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008362:	e7ba      	b.n	80082da <_strtod_l+0x6e2>
 8008364:	2300      	movs	r3, #0
 8008366:	9310      	str	r3, [sp, #64]	@ 0x40
 8008368:	2301      	movs	r3, #1
 800836a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800836c:	e7b5      	b.n	80082da <_strtod_l+0x6e2>
 800836e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008370:	9805      	ldr	r0, [sp, #20]
 8008372:	462a      	mov	r2, r5
 8008374:	f7ff f9c8 	bl	8007708 <__lshift>
 8008378:	901a      	str	r0, [sp, #104]	@ 0x68
 800837a:	2800      	cmp	r0, #0
 800837c:	d1d9      	bne.n	8008332 <_strtod_l+0x73a>
 800837e:	e65a      	b.n	8008036 <_strtod_l+0x43e>
 8008380:	2e00      	cmp	r6, #0
 8008382:	dd07      	ble.n	8008394 <_strtod_l+0x79c>
 8008384:	4649      	mov	r1, r9
 8008386:	9805      	ldr	r0, [sp, #20]
 8008388:	4632      	mov	r2, r6
 800838a:	f7ff f9bd 	bl	8007708 <__lshift>
 800838e:	4681      	mov	r9, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	d0d8      	beq.n	8008346 <_strtod_l+0x74e>
 8008394:	2f00      	cmp	r7, #0
 8008396:	dd08      	ble.n	80083aa <_strtod_l+0x7b2>
 8008398:	4641      	mov	r1, r8
 800839a:	9805      	ldr	r0, [sp, #20]
 800839c:	463a      	mov	r2, r7
 800839e:	f7ff f9b3 	bl	8007708 <__lshift>
 80083a2:	4680      	mov	r8, r0
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f43f ae46 	beq.w	8008036 <_strtod_l+0x43e>
 80083aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ac:	9805      	ldr	r0, [sp, #20]
 80083ae:	464a      	mov	r2, r9
 80083b0:	f7ff fa32 	bl	8007818 <__mdiff>
 80083b4:	4604      	mov	r4, r0
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f43f ae3d 	beq.w	8008036 <_strtod_l+0x43e>
 80083bc:	68c3      	ldr	r3, [r0, #12]
 80083be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083c0:	2300      	movs	r3, #0
 80083c2:	60c3      	str	r3, [r0, #12]
 80083c4:	4641      	mov	r1, r8
 80083c6:	f7ff fa0b 	bl	80077e0 <__mcmp>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	da46      	bge.n	800845c <_strtod_l+0x864>
 80083ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d0:	ea53 030a 	orrs.w	r3, r3, sl
 80083d4:	d16c      	bne.n	80084b0 <_strtod_l+0x8b8>
 80083d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d168      	bne.n	80084b0 <_strtod_l+0x8b8>
 80083de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083e2:	0d1b      	lsrs	r3, r3, #20
 80083e4:	051b      	lsls	r3, r3, #20
 80083e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083ea:	d961      	bls.n	80084b0 <_strtod_l+0x8b8>
 80083ec:	6963      	ldr	r3, [r4, #20]
 80083ee:	b913      	cbnz	r3, 80083f6 <_strtod_l+0x7fe>
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	dd5c      	ble.n	80084b0 <_strtod_l+0x8b8>
 80083f6:	4621      	mov	r1, r4
 80083f8:	2201      	movs	r2, #1
 80083fa:	9805      	ldr	r0, [sp, #20]
 80083fc:	f7ff f984 	bl	8007708 <__lshift>
 8008400:	4641      	mov	r1, r8
 8008402:	4604      	mov	r4, r0
 8008404:	f7ff f9ec 	bl	80077e0 <__mcmp>
 8008408:	2800      	cmp	r0, #0
 800840a:	dd51      	ble.n	80084b0 <_strtod_l+0x8b8>
 800840c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008410:	9a08      	ldr	r2, [sp, #32]
 8008412:	0d1b      	lsrs	r3, r3, #20
 8008414:	051b      	lsls	r3, r3, #20
 8008416:	2a00      	cmp	r2, #0
 8008418:	d06b      	beq.n	80084f2 <_strtod_l+0x8fa>
 800841a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800841e:	d868      	bhi.n	80084f2 <_strtod_l+0x8fa>
 8008420:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008424:	f67f ae9d 	bls.w	8008162 <_strtod_l+0x56a>
 8008428:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <_strtod_l+0x85c>)
 800842a:	4650      	mov	r0, sl
 800842c:	4659      	mov	r1, fp
 800842e:	2200      	movs	r2, #0
 8008430:	f7f8 f8ea 	bl	8000608 <__aeabi_dmul>
 8008434:	4b08      	ldr	r3, [pc, #32]	@ (8008458 <_strtod_l+0x860>)
 8008436:	400b      	ands	r3, r1
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	2b00      	cmp	r3, #0
 800843e:	f47f ae05 	bne.w	800804c <_strtod_l+0x454>
 8008442:	9a05      	ldr	r2, [sp, #20]
 8008444:	2322      	movs	r3, #34	@ 0x22
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	e600      	b.n	800804c <_strtod_l+0x454>
 800844a:	bf00      	nop
 800844c:	08009d00 	.word	0x08009d00
 8008450:	fffffc02 	.word	0xfffffc02
 8008454:	39500000 	.word	0x39500000
 8008458:	7ff00000 	.word	0x7ff00000
 800845c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008460:	d165      	bne.n	800852e <_strtod_l+0x936>
 8008462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008468:	b35a      	cbz	r2, 80084c2 <_strtod_l+0x8ca>
 800846a:	4a9f      	ldr	r2, [pc, #636]	@ (80086e8 <_strtod_l+0xaf0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d12b      	bne.n	80084c8 <_strtod_l+0x8d0>
 8008470:	9b08      	ldr	r3, [sp, #32]
 8008472:	4651      	mov	r1, sl
 8008474:	b303      	cbz	r3, 80084b8 <_strtod_l+0x8c0>
 8008476:	4b9d      	ldr	r3, [pc, #628]	@ (80086ec <_strtod_l+0xaf4>)
 8008478:	465a      	mov	r2, fp
 800847a:	4013      	ands	r3, r2
 800847c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	d81b      	bhi.n	80084be <_strtod_l+0x8c6>
 8008486:	0d1b      	lsrs	r3, r3, #20
 8008488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	4299      	cmp	r1, r3
 8008492:	d119      	bne.n	80084c8 <_strtod_l+0x8d0>
 8008494:	4b96      	ldr	r3, [pc, #600]	@ (80086f0 <_strtod_l+0xaf8>)
 8008496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008498:	429a      	cmp	r2, r3
 800849a:	d102      	bne.n	80084a2 <_strtod_l+0x8aa>
 800849c:	3101      	adds	r1, #1
 800849e:	f43f adca 	beq.w	8008036 <_strtod_l+0x43e>
 80084a2:	4b92      	ldr	r3, [pc, #584]	@ (80086ec <_strtod_l+0xaf4>)
 80084a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084a6:	401a      	ands	r2, r3
 80084a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80084ac:	f04f 0a00 	mov.w	sl, #0
 80084b0:	9b08      	ldr	r3, [sp, #32]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1b8      	bne.n	8008428 <_strtod_l+0x830>
 80084b6:	e5c9      	b.n	800804c <_strtod_l+0x454>
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295
 80084bc:	e7e8      	b.n	8008490 <_strtod_l+0x898>
 80084be:	4613      	mov	r3, r2
 80084c0:	e7e6      	b.n	8008490 <_strtod_l+0x898>
 80084c2:	ea53 030a 	orrs.w	r3, r3, sl
 80084c6:	d0a1      	beq.n	800840c <_strtod_l+0x814>
 80084c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084ca:	b1db      	cbz	r3, 8008504 <_strtod_l+0x90c>
 80084cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ce:	4213      	tst	r3, r2
 80084d0:	d0ee      	beq.n	80084b0 <_strtod_l+0x8b8>
 80084d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084d4:	9a08      	ldr	r2, [sp, #32]
 80084d6:	4650      	mov	r0, sl
 80084d8:	4659      	mov	r1, fp
 80084da:	b1bb      	cbz	r3, 800850c <_strtod_l+0x914>
 80084dc:	f7ff fb6e 	bl	8007bbc <sulp>
 80084e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084e4:	ec53 2b10 	vmov	r2, r3, d0
 80084e8:	f7f7 fed8 	bl	800029c <__adddf3>
 80084ec:	4682      	mov	sl, r0
 80084ee:	468b      	mov	fp, r1
 80084f0:	e7de      	b.n	80084b0 <_strtod_l+0x8b8>
 80084f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084fe:	f04f 3aff 	mov.w	sl, #4294967295
 8008502:	e7d5      	b.n	80084b0 <_strtod_l+0x8b8>
 8008504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008506:	ea13 0f0a 	tst.w	r3, sl
 800850a:	e7e1      	b.n	80084d0 <_strtod_l+0x8d8>
 800850c:	f7ff fb56 	bl	8007bbc <sulp>
 8008510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008514:	ec53 2b10 	vmov	r2, r3, d0
 8008518:	f7f7 febe 	bl	8000298 <__aeabi_dsub>
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	4682      	mov	sl, r0
 8008522:	468b      	mov	fp, r1
 8008524:	f7f8 fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008528:	2800      	cmp	r0, #0
 800852a:	d0c1      	beq.n	80084b0 <_strtod_l+0x8b8>
 800852c:	e619      	b.n	8008162 <_strtod_l+0x56a>
 800852e:	4641      	mov	r1, r8
 8008530:	4620      	mov	r0, r4
 8008532:	f7ff facd 	bl	8007ad0 <__ratio>
 8008536:	ec57 6b10 	vmov	r6, r7, d0
 800853a:	2200      	movs	r2, #0
 800853c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	f7f8 fadc 	bl	8000b00 <__aeabi_dcmple>
 8008548:	2800      	cmp	r0, #0
 800854a:	d06f      	beq.n	800862c <_strtod_l+0xa34>
 800854c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800854e:	2b00      	cmp	r3, #0
 8008550:	d17a      	bne.n	8008648 <_strtod_l+0xa50>
 8008552:	f1ba 0f00 	cmp.w	sl, #0
 8008556:	d158      	bne.n	800860a <_strtod_l+0xa12>
 8008558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800855a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800855e:	2b00      	cmp	r3, #0
 8008560:	d15a      	bne.n	8008618 <_strtod_l+0xa20>
 8008562:	4b64      	ldr	r3, [pc, #400]	@ (80086f4 <_strtod_l+0xafc>)
 8008564:	2200      	movs	r2, #0
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	f7f8 fabf 	bl	8000aec <__aeabi_dcmplt>
 800856e:	2800      	cmp	r0, #0
 8008570:	d159      	bne.n	8008626 <_strtod_l+0xa2e>
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	4b60      	ldr	r3, [pc, #384]	@ (80086f8 <_strtod_l+0xb00>)
 8008578:	2200      	movs	r2, #0
 800857a:	f7f8 f845 	bl	8000608 <__aeabi_dmul>
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008586:	9606      	str	r6, [sp, #24]
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800858e:	4d57      	ldr	r5, [pc, #348]	@ (80086ec <_strtod_l+0xaf4>)
 8008590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008596:	401d      	ands	r5, r3
 8008598:	4b58      	ldr	r3, [pc, #352]	@ (80086fc <_strtod_l+0xb04>)
 800859a:	429d      	cmp	r5, r3
 800859c:	f040 80b2 	bne.w	8008704 <_strtod_l+0xb0c>
 80085a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80085a6:	ec4b ab10 	vmov	d0, sl, fp
 80085aa:	f7ff f9c9 	bl	8007940 <__ulp>
 80085ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085b2:	ec51 0b10 	vmov	r0, r1, d0
 80085b6:	f7f8 f827 	bl	8000608 <__aeabi_dmul>
 80085ba:	4652      	mov	r2, sl
 80085bc:	465b      	mov	r3, fp
 80085be:	f7f7 fe6d 	bl	800029c <__adddf3>
 80085c2:	460b      	mov	r3, r1
 80085c4:	4949      	ldr	r1, [pc, #292]	@ (80086ec <_strtod_l+0xaf4>)
 80085c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008700 <_strtod_l+0xb08>)
 80085c8:	4019      	ands	r1, r3
 80085ca:	4291      	cmp	r1, r2
 80085cc:	4682      	mov	sl, r0
 80085ce:	d942      	bls.n	8008656 <_strtod_l+0xa5e>
 80085d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085d2:	4b47      	ldr	r3, [pc, #284]	@ (80086f0 <_strtod_l+0xaf8>)
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d103      	bne.n	80085e0 <_strtod_l+0x9e8>
 80085d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085da:	3301      	adds	r3, #1
 80085dc:	f43f ad2b 	beq.w	8008036 <_strtod_l+0x43e>
 80085e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80086f0 <_strtod_l+0xaf8>
 80085e4:	f04f 3aff 	mov.w	sl, #4294967295
 80085e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085ea:	9805      	ldr	r0, [sp, #20]
 80085ec:	f7fe fe74 	bl	80072d8 <_Bfree>
 80085f0:	9805      	ldr	r0, [sp, #20]
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7fe fe70 	bl	80072d8 <_Bfree>
 80085f8:	9805      	ldr	r0, [sp, #20]
 80085fa:	4641      	mov	r1, r8
 80085fc:	f7fe fe6c 	bl	80072d8 <_Bfree>
 8008600:	9805      	ldr	r0, [sp, #20]
 8008602:	4621      	mov	r1, r4
 8008604:	f7fe fe68 	bl	80072d8 <_Bfree>
 8008608:	e618      	b.n	800823c <_strtod_l+0x644>
 800860a:	f1ba 0f01 	cmp.w	sl, #1
 800860e:	d103      	bne.n	8008618 <_strtod_l+0xa20>
 8008610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008612:	2b00      	cmp	r3, #0
 8008614:	f43f ada5 	beq.w	8008162 <_strtod_l+0x56a>
 8008618:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80086c8 <_strtod_l+0xad0>
 800861c:	4f35      	ldr	r7, [pc, #212]	@ (80086f4 <_strtod_l+0xafc>)
 800861e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008622:	2600      	movs	r6, #0
 8008624:	e7b1      	b.n	800858a <_strtod_l+0x992>
 8008626:	4f34      	ldr	r7, [pc, #208]	@ (80086f8 <_strtod_l+0xb00>)
 8008628:	2600      	movs	r6, #0
 800862a:	e7aa      	b.n	8008582 <_strtod_l+0x98a>
 800862c:	4b32      	ldr	r3, [pc, #200]	@ (80086f8 <_strtod_l+0xb00>)
 800862e:	4630      	mov	r0, r6
 8008630:	4639      	mov	r1, r7
 8008632:	2200      	movs	r2, #0
 8008634:	f7f7 ffe8 	bl	8000608 <__aeabi_dmul>
 8008638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d09f      	beq.n	8008582 <_strtod_l+0x98a>
 8008642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008646:	e7a0      	b.n	800858a <_strtod_l+0x992>
 8008648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80086d0 <_strtod_l+0xad8>
 800864c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008650:	ec57 6b17 	vmov	r6, r7, d7
 8008654:	e799      	b.n	800858a <_strtod_l+0x992>
 8008656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1c1      	bne.n	80085e8 <_strtod_l+0x9f0>
 8008664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008668:	0d1b      	lsrs	r3, r3, #20
 800866a:	051b      	lsls	r3, r3, #20
 800866c:	429d      	cmp	r5, r3
 800866e:	d1bb      	bne.n	80085e8 <_strtod_l+0x9f0>
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 fb10 	bl	8000c98 <__aeabi_d2lz>
 8008678:	f7f7 ff98 	bl	80005ac <__aeabi_l2d>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f7 fe08 	bl	8000298 <__aeabi_dsub>
 8008688:	460b      	mov	r3, r1
 800868a:	4602      	mov	r2, r0
 800868c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008690:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008696:	ea46 060a 	orr.w	r6, r6, sl
 800869a:	431e      	orrs	r6, r3
 800869c:	d06f      	beq.n	800877e <_strtod_l+0xb86>
 800869e:	a30e      	add	r3, pc, #56	@ (adr r3, 80086d8 <_strtod_l+0xae0>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f8 fa22 	bl	8000aec <__aeabi_dcmplt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f47f accf 	bne.w	800804c <_strtod_l+0x454>
 80086ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80086e0 <_strtod_l+0xae8>)
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086b8:	f7f8 fa36 	bl	8000b28 <__aeabi_dcmpgt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d093      	beq.n	80085e8 <_strtod_l+0x9f0>
 80086c0:	e4c4      	b.n	800804c <_strtod_l+0x454>
 80086c2:	bf00      	nop
 80086c4:	f3af 8000 	nop.w
 80086c8:	00000000 	.word	0x00000000
 80086cc:	bff00000 	.word	0xbff00000
 80086d0:	00000000 	.word	0x00000000
 80086d4:	3ff00000 	.word	0x3ff00000
 80086d8:	94a03595 	.word	0x94a03595
 80086dc:	3fdfffff 	.word	0x3fdfffff
 80086e0:	35afe535 	.word	0x35afe535
 80086e4:	3fe00000 	.word	0x3fe00000
 80086e8:	000fffff 	.word	0x000fffff
 80086ec:	7ff00000 	.word	0x7ff00000
 80086f0:	7fefffff 	.word	0x7fefffff
 80086f4:	3ff00000 	.word	0x3ff00000
 80086f8:	3fe00000 	.word	0x3fe00000
 80086fc:	7fe00000 	.word	0x7fe00000
 8008700:	7c9fffff 	.word	0x7c9fffff
 8008704:	9b08      	ldr	r3, [sp, #32]
 8008706:	b323      	cbz	r3, 8008752 <_strtod_l+0xb5a>
 8008708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800870c:	d821      	bhi.n	8008752 <_strtod_l+0xb5a>
 800870e:	a328      	add	r3, pc, #160	@ (adr r3, 80087b0 <_strtod_l+0xbb8>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f9f2 	bl	8000b00 <__aeabi_dcmple>
 800871c:	b1a0      	cbz	r0, 8008748 <_strtod_l+0xb50>
 800871e:	4639      	mov	r1, r7
 8008720:	4630      	mov	r0, r6
 8008722:	f7f8 fa49 	bl	8000bb8 <__aeabi_d2uiz>
 8008726:	2801      	cmp	r0, #1
 8008728:	bf38      	it	cc
 800872a:	2001      	movcc	r0, #1
 800872c:	f7f7 fef2 	bl	8000514 <__aeabi_ui2d>
 8008730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	b9fb      	cbnz	r3, 8008778 <_strtod_l+0xb80>
 8008738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800873c:	9014      	str	r0, [sp, #80]	@ 0x50
 800873e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800874a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800874e:	1b5b      	subs	r3, r3, r5
 8008750:	9311      	str	r3, [sp, #68]	@ 0x44
 8008752:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008756:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800875a:	f7ff f8f1 	bl	8007940 <__ulp>
 800875e:	4650      	mov	r0, sl
 8008760:	ec53 2b10 	vmov	r2, r3, d0
 8008764:	4659      	mov	r1, fp
 8008766:	f7f7 ff4f 	bl	8000608 <__aeabi_dmul>
 800876a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800876e:	f7f7 fd95 	bl	800029c <__adddf3>
 8008772:	4682      	mov	sl, r0
 8008774:	468b      	mov	fp, r1
 8008776:	e770      	b.n	800865a <_strtod_l+0xa62>
 8008778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800877c:	e7e0      	b.n	8008740 <_strtod_l+0xb48>
 800877e:	a30e      	add	r3, pc, #56	@ (adr r3, 80087b8 <_strtod_l+0xbc0>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f8 f9b2 	bl	8000aec <__aeabi_dcmplt>
 8008788:	e798      	b.n	80086bc <_strtod_l+0xac4>
 800878a:	2300      	movs	r3, #0
 800878c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800878e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	f7ff ba6d 	b.w	8007c72 <_strtod_l+0x7a>
 8008798:	2a65      	cmp	r2, #101	@ 0x65
 800879a:	f43f ab66 	beq.w	8007e6a <_strtod_l+0x272>
 800879e:	2a45      	cmp	r2, #69	@ 0x45
 80087a0:	f43f ab63 	beq.w	8007e6a <_strtod_l+0x272>
 80087a4:	2301      	movs	r3, #1
 80087a6:	f7ff bb9e 	b.w	8007ee6 <_strtod_l+0x2ee>
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w
 80087b0:	ffc00000 	.word	0xffc00000
 80087b4:	41dfffff 	.word	0x41dfffff
 80087b8:	94a03595 	.word	0x94a03595
 80087bc:	3fcfffff 	.word	0x3fcfffff

080087c0 <_strtod_r>:
 80087c0:	4b01      	ldr	r3, [pc, #4]	@ (80087c8 <_strtod_r+0x8>)
 80087c2:	f7ff ba19 	b.w	8007bf8 <_strtod_l>
 80087c6:	bf00      	nop
 80087c8:	20000088 	.word	0x20000088

080087cc <_strtol_l.constprop.0>:
 80087cc:	2b24      	cmp	r3, #36	@ 0x24
 80087ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d2:	4686      	mov	lr, r0
 80087d4:	4690      	mov	r8, r2
 80087d6:	d801      	bhi.n	80087dc <_strtol_l.constprop.0+0x10>
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d106      	bne.n	80087ea <_strtol_l.constprop.0+0x1e>
 80087dc:	f7fd fdba 	bl	8006354 <__errno>
 80087e0:	2316      	movs	r3, #22
 80087e2:	6003      	str	r3, [r0, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	4834      	ldr	r0, [pc, #208]	@ (80088bc <_strtol_l.constprop.0+0xf0>)
 80087ec:	460d      	mov	r5, r1
 80087ee:	462a      	mov	r2, r5
 80087f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087f4:	5d06      	ldrb	r6, [r0, r4]
 80087f6:	f016 0608 	ands.w	r6, r6, #8
 80087fa:	d1f8      	bne.n	80087ee <_strtol_l.constprop.0+0x22>
 80087fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80087fe:	d12d      	bne.n	800885c <_strtol_l.constprop.0+0x90>
 8008800:	782c      	ldrb	r4, [r5, #0]
 8008802:	2601      	movs	r6, #1
 8008804:	1c95      	adds	r5, r2, #2
 8008806:	f033 0210 	bics.w	r2, r3, #16
 800880a:	d109      	bne.n	8008820 <_strtol_l.constprop.0+0x54>
 800880c:	2c30      	cmp	r4, #48	@ 0x30
 800880e:	d12a      	bne.n	8008866 <_strtol_l.constprop.0+0x9a>
 8008810:	782a      	ldrb	r2, [r5, #0]
 8008812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008816:	2a58      	cmp	r2, #88	@ 0x58
 8008818:	d125      	bne.n	8008866 <_strtol_l.constprop.0+0x9a>
 800881a:	786c      	ldrb	r4, [r5, #1]
 800881c:	2310      	movs	r3, #16
 800881e:	3502      	adds	r5, #2
 8008820:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008824:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008828:	2200      	movs	r2, #0
 800882a:	fbbc f9f3 	udiv	r9, ip, r3
 800882e:	4610      	mov	r0, r2
 8008830:	fb03 ca19 	mls	sl, r3, r9, ip
 8008834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008838:	2f09      	cmp	r7, #9
 800883a:	d81b      	bhi.n	8008874 <_strtol_l.constprop.0+0xa8>
 800883c:	463c      	mov	r4, r7
 800883e:	42a3      	cmp	r3, r4
 8008840:	dd27      	ble.n	8008892 <_strtol_l.constprop.0+0xc6>
 8008842:	1c57      	adds	r7, r2, #1
 8008844:	d007      	beq.n	8008856 <_strtol_l.constprop.0+0x8a>
 8008846:	4581      	cmp	r9, r0
 8008848:	d320      	bcc.n	800888c <_strtol_l.constprop.0+0xc0>
 800884a:	d101      	bne.n	8008850 <_strtol_l.constprop.0+0x84>
 800884c:	45a2      	cmp	sl, r4
 800884e:	db1d      	blt.n	800888c <_strtol_l.constprop.0+0xc0>
 8008850:	fb00 4003 	mla	r0, r0, r3, r4
 8008854:	2201      	movs	r2, #1
 8008856:	f815 4b01 	ldrb.w	r4, [r5], #1
 800885a:	e7eb      	b.n	8008834 <_strtol_l.constprop.0+0x68>
 800885c:	2c2b      	cmp	r4, #43	@ 0x2b
 800885e:	bf04      	itt	eq
 8008860:	782c      	ldrbeq	r4, [r5, #0]
 8008862:	1c95      	addeq	r5, r2, #2
 8008864:	e7cf      	b.n	8008806 <_strtol_l.constprop.0+0x3a>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1da      	bne.n	8008820 <_strtol_l.constprop.0+0x54>
 800886a:	2c30      	cmp	r4, #48	@ 0x30
 800886c:	bf0c      	ite	eq
 800886e:	2308      	moveq	r3, #8
 8008870:	230a      	movne	r3, #10
 8008872:	e7d5      	b.n	8008820 <_strtol_l.constprop.0+0x54>
 8008874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008878:	2f19      	cmp	r7, #25
 800887a:	d801      	bhi.n	8008880 <_strtol_l.constprop.0+0xb4>
 800887c:	3c37      	subs	r4, #55	@ 0x37
 800887e:	e7de      	b.n	800883e <_strtol_l.constprop.0+0x72>
 8008880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008884:	2f19      	cmp	r7, #25
 8008886:	d804      	bhi.n	8008892 <_strtol_l.constprop.0+0xc6>
 8008888:	3c57      	subs	r4, #87	@ 0x57
 800888a:	e7d8      	b.n	800883e <_strtol_l.constprop.0+0x72>
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	e7e1      	b.n	8008856 <_strtol_l.constprop.0+0x8a>
 8008892:	1c53      	adds	r3, r2, #1
 8008894:	d108      	bne.n	80088a8 <_strtol_l.constprop.0+0xdc>
 8008896:	2322      	movs	r3, #34	@ 0x22
 8008898:	f8ce 3000 	str.w	r3, [lr]
 800889c:	4660      	mov	r0, ip
 800889e:	f1b8 0f00 	cmp.w	r8, #0
 80088a2:	d0a0      	beq.n	80087e6 <_strtol_l.constprop.0+0x1a>
 80088a4:	1e69      	subs	r1, r5, #1
 80088a6:	e006      	b.n	80088b6 <_strtol_l.constprop.0+0xea>
 80088a8:	b106      	cbz	r6, 80088ac <_strtol_l.constprop.0+0xe0>
 80088aa:	4240      	negs	r0, r0
 80088ac:	f1b8 0f00 	cmp.w	r8, #0
 80088b0:	d099      	beq.n	80087e6 <_strtol_l.constprop.0+0x1a>
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	d1f6      	bne.n	80088a4 <_strtol_l.constprop.0+0xd8>
 80088b6:	f8c8 1000 	str.w	r1, [r8]
 80088ba:	e794      	b.n	80087e6 <_strtol_l.constprop.0+0x1a>
 80088bc:	08009d29 	.word	0x08009d29

080088c0 <_strtol_r>:
 80088c0:	f7ff bf84 	b.w	80087cc <_strtol_l.constprop.0>

080088c4 <__ssputs_r>:
 80088c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	688e      	ldr	r6, [r1, #8]
 80088ca:	461f      	mov	r7, r3
 80088cc:	42be      	cmp	r6, r7
 80088ce:	680b      	ldr	r3, [r1, #0]
 80088d0:	4682      	mov	sl, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	4690      	mov	r8, r2
 80088d6:	d82d      	bhi.n	8008934 <__ssputs_r+0x70>
 80088d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088e0:	d026      	beq.n	8008930 <__ssputs_r+0x6c>
 80088e2:	6965      	ldr	r5, [r4, #20]
 80088e4:	6909      	ldr	r1, [r1, #16]
 80088e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088ea:	eba3 0901 	sub.w	r9, r3, r1
 80088ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088f2:	1c7b      	adds	r3, r7, #1
 80088f4:	444b      	add	r3, r9
 80088f6:	106d      	asrs	r5, r5, #1
 80088f8:	429d      	cmp	r5, r3
 80088fa:	bf38      	it	cc
 80088fc:	461d      	movcc	r5, r3
 80088fe:	0553      	lsls	r3, r2, #21
 8008900:	d527      	bpl.n	8008952 <__ssputs_r+0x8e>
 8008902:	4629      	mov	r1, r5
 8008904:	f7fe fc1c 	bl	8007140 <_malloc_r>
 8008908:	4606      	mov	r6, r0
 800890a:	b360      	cbz	r0, 8008966 <__ssputs_r+0xa2>
 800890c:	6921      	ldr	r1, [r4, #16]
 800890e:	464a      	mov	r2, r9
 8008910:	f000 fa18 	bl	8008d44 <memcpy>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800891a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	6126      	str	r6, [r4, #16]
 8008922:	6165      	str	r5, [r4, #20]
 8008924:	444e      	add	r6, r9
 8008926:	eba5 0509 	sub.w	r5, r5, r9
 800892a:	6026      	str	r6, [r4, #0]
 800892c:	60a5      	str	r5, [r4, #8]
 800892e:	463e      	mov	r6, r7
 8008930:	42be      	cmp	r6, r7
 8008932:	d900      	bls.n	8008936 <__ssputs_r+0x72>
 8008934:	463e      	mov	r6, r7
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	4632      	mov	r2, r6
 800893a:	4641      	mov	r1, r8
 800893c:	f000 f9c6 	bl	8008ccc <memmove>
 8008940:	68a3      	ldr	r3, [r4, #8]
 8008942:	1b9b      	subs	r3, r3, r6
 8008944:	60a3      	str	r3, [r4, #8]
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	4433      	add	r3, r6
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	2000      	movs	r0, #0
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	462a      	mov	r2, r5
 8008954:	f000 fd89 	bl	800946a <_realloc_r>
 8008958:	4606      	mov	r6, r0
 800895a:	2800      	cmp	r0, #0
 800895c:	d1e0      	bne.n	8008920 <__ssputs_r+0x5c>
 800895e:	6921      	ldr	r1, [r4, #16]
 8008960:	4650      	mov	r0, sl
 8008962:	f7fe fb79 	bl	8007058 <_free_r>
 8008966:	230c      	movs	r3, #12
 8008968:	f8ca 3000 	str.w	r3, [sl]
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	e7e9      	b.n	800894e <__ssputs_r+0x8a>
	...

0800897c <_svfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	4698      	mov	r8, r3
 8008982:	898b      	ldrh	r3, [r1, #12]
 8008984:	061b      	lsls	r3, r3, #24
 8008986:	b09d      	sub	sp, #116	@ 0x74
 8008988:	4607      	mov	r7, r0
 800898a:	460d      	mov	r5, r1
 800898c:	4614      	mov	r4, r2
 800898e:	d510      	bpl.n	80089b2 <_svfiprintf_r+0x36>
 8008990:	690b      	ldr	r3, [r1, #16]
 8008992:	b973      	cbnz	r3, 80089b2 <_svfiprintf_r+0x36>
 8008994:	2140      	movs	r1, #64	@ 0x40
 8008996:	f7fe fbd3 	bl	8007140 <_malloc_r>
 800899a:	6028      	str	r0, [r5, #0]
 800899c:	6128      	str	r0, [r5, #16]
 800899e:	b930      	cbnz	r0, 80089ae <_svfiprintf_r+0x32>
 80089a0:	230c      	movs	r3, #12
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	b01d      	add	sp, #116	@ 0x74
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	2340      	movs	r3, #64	@ 0x40
 80089b0:	616b      	str	r3, [r5, #20]
 80089b2:	2300      	movs	r3, #0
 80089b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b6:	2320      	movs	r3, #32
 80089b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089c0:	2330      	movs	r3, #48	@ 0x30
 80089c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b60 <_svfiprintf_r+0x1e4>
 80089c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089ca:	f04f 0901 	mov.w	r9, #1
 80089ce:	4623      	mov	r3, r4
 80089d0:	469a      	mov	sl, r3
 80089d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d6:	b10a      	cbz	r2, 80089dc <_svfiprintf_r+0x60>
 80089d8:	2a25      	cmp	r2, #37	@ 0x25
 80089da:	d1f9      	bne.n	80089d0 <_svfiprintf_r+0x54>
 80089dc:	ebba 0b04 	subs.w	fp, sl, r4
 80089e0:	d00b      	beq.n	80089fa <_svfiprintf_r+0x7e>
 80089e2:	465b      	mov	r3, fp
 80089e4:	4622      	mov	r2, r4
 80089e6:	4629      	mov	r1, r5
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff ff6b 	bl	80088c4 <__ssputs_r>
 80089ee:	3001      	adds	r0, #1
 80089f0:	f000 80a7 	beq.w	8008b42 <_svfiprintf_r+0x1c6>
 80089f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089f6:	445a      	add	r2, fp
 80089f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80089fa:	f89a 3000 	ldrb.w	r3, [sl]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 809f 	beq.w	8008b42 <_svfiprintf_r+0x1c6>
 8008a04:	2300      	movs	r3, #0
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a0e:	f10a 0a01 	add.w	sl, sl, #1
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	9307      	str	r3, [sp, #28]
 8008a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a1c:	4654      	mov	r4, sl
 8008a1e:	2205      	movs	r2, #5
 8008a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a24:	484e      	ldr	r0, [pc, #312]	@ (8008b60 <_svfiprintf_r+0x1e4>)
 8008a26:	f7f7 fbdb 	bl	80001e0 <memchr>
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	b9d8      	cbnz	r0, 8008a66 <_svfiprintf_r+0xea>
 8008a2e:	06d0      	lsls	r0, r2, #27
 8008a30:	bf44      	itt	mi
 8008a32:	2320      	movmi	r3, #32
 8008a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a38:	0711      	lsls	r1, r2, #28
 8008a3a:	bf44      	itt	mi
 8008a3c:	232b      	movmi	r3, #43	@ 0x2b
 8008a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a42:	f89a 3000 	ldrb.w	r3, [sl]
 8008a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a48:	d015      	beq.n	8008a76 <_svfiprintf_r+0xfa>
 8008a4a:	9a07      	ldr	r2, [sp, #28]
 8008a4c:	4654      	mov	r4, sl
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f04f 0c0a 	mov.w	ip, #10
 8008a54:	4621      	mov	r1, r4
 8008a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a5a:	3b30      	subs	r3, #48	@ 0x30
 8008a5c:	2b09      	cmp	r3, #9
 8008a5e:	d94b      	bls.n	8008af8 <_svfiprintf_r+0x17c>
 8008a60:	b1b0      	cbz	r0, 8008a90 <_svfiprintf_r+0x114>
 8008a62:	9207      	str	r2, [sp, #28]
 8008a64:	e014      	b.n	8008a90 <_svfiprintf_r+0x114>
 8008a66:	eba0 0308 	sub.w	r3, r0, r8
 8008a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	46a2      	mov	sl, r4
 8008a74:	e7d2      	b.n	8008a1c <_svfiprintf_r+0xa0>
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	1d19      	adds	r1, r3, #4
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	9103      	str	r1, [sp, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfbb      	ittet	lt
 8008a82:	425b      	neglt	r3, r3
 8008a84:	f042 0202 	orrlt.w	r2, r2, #2
 8008a88:	9307      	strge	r3, [sp, #28]
 8008a8a:	9307      	strlt	r3, [sp, #28]
 8008a8c:	bfb8      	it	lt
 8008a8e:	9204      	strlt	r2, [sp, #16]
 8008a90:	7823      	ldrb	r3, [r4, #0]
 8008a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a94:	d10a      	bne.n	8008aac <_svfiprintf_r+0x130>
 8008a96:	7863      	ldrb	r3, [r4, #1]
 8008a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a9a:	d132      	bne.n	8008b02 <_svfiprintf_r+0x186>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	9203      	str	r2, [sp, #12]
 8008aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aa8:	3402      	adds	r4, #2
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b70 <_svfiprintf_r+0x1f4>
 8008ab0:	7821      	ldrb	r1, [r4, #0]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	f7f7 fb93 	bl	80001e0 <memchr>
 8008aba:	b138      	cbz	r0, 8008acc <_svfiprintf_r+0x150>
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	eba0 000a 	sub.w	r0, r0, sl
 8008ac2:	2240      	movs	r2, #64	@ 0x40
 8008ac4:	4082      	lsls	r2, r0
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	3401      	adds	r4, #1
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad0:	4824      	ldr	r0, [pc, #144]	@ (8008b64 <_svfiprintf_r+0x1e8>)
 8008ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ad6:	2206      	movs	r2, #6
 8008ad8:	f7f7 fb82 	bl	80001e0 <memchr>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d036      	beq.n	8008b4e <_svfiprintf_r+0x1d2>
 8008ae0:	4b21      	ldr	r3, [pc, #132]	@ (8008b68 <_svfiprintf_r+0x1ec>)
 8008ae2:	bb1b      	cbnz	r3, 8008b2c <_svfiprintf_r+0x1b0>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	3307      	adds	r3, #7
 8008ae8:	f023 0307 	bic.w	r3, r3, #7
 8008aec:	3308      	adds	r3, #8
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af2:	4433      	add	r3, r6
 8008af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af6:	e76a      	b.n	80089ce <_svfiprintf_r+0x52>
 8008af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008afc:	460c      	mov	r4, r1
 8008afe:	2001      	movs	r0, #1
 8008b00:	e7a8      	b.n	8008a54 <_svfiprintf_r+0xd8>
 8008b02:	2300      	movs	r3, #0
 8008b04:	3401      	adds	r4, #1
 8008b06:	9305      	str	r3, [sp, #20]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b14:	3a30      	subs	r2, #48	@ 0x30
 8008b16:	2a09      	cmp	r2, #9
 8008b18:	d903      	bls.n	8008b22 <_svfiprintf_r+0x1a6>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0c6      	beq.n	8008aac <_svfiprintf_r+0x130>
 8008b1e:	9105      	str	r1, [sp, #20]
 8008b20:	e7c4      	b.n	8008aac <_svfiprintf_r+0x130>
 8008b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b26:	4604      	mov	r4, r0
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e7f0      	b.n	8008b0e <_svfiprintf_r+0x192>
 8008b2c:	ab03      	add	r3, sp, #12
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	462a      	mov	r2, r5
 8008b32:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <_svfiprintf_r+0x1f0>)
 8008b34:	a904      	add	r1, sp, #16
 8008b36:	4638      	mov	r0, r7
 8008b38:	f7fc fcc8 	bl	80054cc <_printf_float>
 8008b3c:	1c42      	adds	r2, r0, #1
 8008b3e:	4606      	mov	r6, r0
 8008b40:	d1d6      	bne.n	8008af0 <_svfiprintf_r+0x174>
 8008b42:	89ab      	ldrh	r3, [r5, #12]
 8008b44:	065b      	lsls	r3, r3, #25
 8008b46:	f53f af2d 	bmi.w	80089a4 <_svfiprintf_r+0x28>
 8008b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b4c:	e72c      	b.n	80089a8 <_svfiprintf_r+0x2c>
 8008b4e:	ab03      	add	r3, sp, #12
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	462a      	mov	r2, r5
 8008b54:	4b05      	ldr	r3, [pc, #20]	@ (8008b6c <_svfiprintf_r+0x1f0>)
 8008b56:	a904      	add	r1, sp, #16
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7fc ff4f 	bl	80059fc <_printf_i>
 8008b5e:	e7ed      	b.n	8008b3c <_svfiprintf_r+0x1c0>
 8008b60:	08009e29 	.word	0x08009e29
 8008b64:	08009e33 	.word	0x08009e33
 8008b68:	080054cd 	.word	0x080054cd
 8008b6c:	080088c5 	.word	0x080088c5
 8008b70:	08009e2f 	.word	0x08009e2f

08008b74 <__sflush_r>:
 8008b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7c:	0716      	lsls	r6, r2, #28
 8008b7e:	4605      	mov	r5, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	d454      	bmi.n	8008c2e <__sflush_r+0xba>
 8008b84:	684b      	ldr	r3, [r1, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dc02      	bgt.n	8008b90 <__sflush_r+0x1c>
 8008b8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dd48      	ble.n	8008c22 <__sflush_r+0xae>
 8008b90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	d045      	beq.n	8008c22 <__sflush_r+0xae>
 8008b96:	2300      	movs	r3, #0
 8008b98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b9c:	682f      	ldr	r7, [r5, #0]
 8008b9e:	6a21      	ldr	r1, [r4, #32]
 8008ba0:	602b      	str	r3, [r5, #0]
 8008ba2:	d030      	beq.n	8008c06 <__sflush_r+0x92>
 8008ba4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	0759      	lsls	r1, r3, #29
 8008baa:	d505      	bpl.n	8008bb8 <__sflush_r+0x44>
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bb2:	b10b      	cbz	r3, 8008bb8 <__sflush_r+0x44>
 8008bb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bb6:	1ad2      	subs	r2, r2, r3
 8008bb8:	2300      	movs	r3, #0
 8008bba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b0      	blx	r6
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	d106      	bne.n	8008bd6 <__sflush_r+0x62>
 8008bc8:	6829      	ldr	r1, [r5, #0]
 8008bca:	291d      	cmp	r1, #29
 8008bcc:	d82b      	bhi.n	8008c26 <__sflush_r+0xb2>
 8008bce:	4a2a      	ldr	r2, [pc, #168]	@ (8008c78 <__sflush_r+0x104>)
 8008bd0:	410a      	asrs	r2, r1
 8008bd2:	07d6      	lsls	r6, r2, #31
 8008bd4:	d427      	bmi.n	8008c26 <__sflush_r+0xb2>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	6062      	str	r2, [r4, #4]
 8008bda:	04d9      	lsls	r1, r3, #19
 8008bdc:	6922      	ldr	r2, [r4, #16]
 8008bde:	6022      	str	r2, [r4, #0]
 8008be0:	d504      	bpl.n	8008bec <__sflush_r+0x78>
 8008be2:	1c42      	adds	r2, r0, #1
 8008be4:	d101      	bne.n	8008bea <__sflush_r+0x76>
 8008be6:	682b      	ldr	r3, [r5, #0]
 8008be8:	b903      	cbnz	r3, 8008bec <__sflush_r+0x78>
 8008bea:	6560      	str	r0, [r4, #84]	@ 0x54
 8008bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bee:	602f      	str	r7, [r5, #0]
 8008bf0:	b1b9      	cbz	r1, 8008c22 <__sflush_r+0xae>
 8008bf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	d002      	beq.n	8008c00 <__sflush_r+0x8c>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f7fe fa2c 	bl	8007058 <_free_r>
 8008c00:	2300      	movs	r3, #0
 8008c02:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c04:	e00d      	b.n	8008c22 <__sflush_r+0xae>
 8008c06:	2301      	movs	r3, #1
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b0      	blx	r6
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	1c50      	adds	r0, r2, #1
 8008c10:	d1c9      	bne.n	8008ba6 <__sflush_r+0x32>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0c6      	beq.n	8008ba6 <__sflush_r+0x32>
 8008c18:	2b1d      	cmp	r3, #29
 8008c1a:	d001      	beq.n	8008c20 <__sflush_r+0xac>
 8008c1c:	2b16      	cmp	r3, #22
 8008c1e:	d11e      	bne.n	8008c5e <__sflush_r+0xea>
 8008c20:	602f      	str	r7, [r5, #0]
 8008c22:	2000      	movs	r0, #0
 8008c24:	e022      	b.n	8008c6c <__sflush_r+0xf8>
 8008c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c2a:	b21b      	sxth	r3, r3
 8008c2c:	e01b      	b.n	8008c66 <__sflush_r+0xf2>
 8008c2e:	690f      	ldr	r7, [r1, #16]
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	d0f6      	beq.n	8008c22 <__sflush_r+0xae>
 8008c34:	0793      	lsls	r3, r2, #30
 8008c36:	680e      	ldr	r6, [r1, #0]
 8008c38:	bf08      	it	eq
 8008c3a:	694b      	ldreq	r3, [r1, #20]
 8008c3c:	600f      	str	r7, [r1, #0]
 8008c3e:	bf18      	it	ne
 8008c40:	2300      	movne	r3, #0
 8008c42:	eba6 0807 	sub.w	r8, r6, r7
 8008c46:	608b      	str	r3, [r1, #8]
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	dde9      	ble.n	8008c22 <__sflush_r+0xae>
 8008c4e:	6a21      	ldr	r1, [r4, #32]
 8008c50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c52:	4643      	mov	r3, r8
 8008c54:	463a      	mov	r2, r7
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b0      	blx	r6
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	dc08      	bgt.n	8008c70 <__sflush_r+0xfc>
 8008c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c70:	4407      	add	r7, r0
 8008c72:	eba8 0800 	sub.w	r8, r8, r0
 8008c76:	e7e7      	b.n	8008c48 <__sflush_r+0xd4>
 8008c78:	dfbffffe 	.word	0xdfbffffe

08008c7c <_fflush_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	690b      	ldr	r3, [r1, #16]
 8008c80:	4605      	mov	r5, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	b913      	cbnz	r3, 8008c8c <_fflush_r+0x10>
 8008c86:	2500      	movs	r5, #0
 8008c88:	4628      	mov	r0, r5
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	b118      	cbz	r0, 8008c96 <_fflush_r+0x1a>
 8008c8e:	6a03      	ldr	r3, [r0, #32]
 8008c90:	b90b      	cbnz	r3, 8008c96 <_fflush_r+0x1a>
 8008c92:	f7fd fa73 	bl	800617c <__sinit>
 8008c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f3      	beq.n	8008c86 <_fflush_r+0xa>
 8008c9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ca0:	07d0      	lsls	r0, r2, #31
 8008ca2:	d404      	bmi.n	8008cae <_fflush_r+0x32>
 8008ca4:	0599      	lsls	r1, r3, #22
 8008ca6:	d402      	bmi.n	8008cae <_fflush_r+0x32>
 8008ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008caa:	f7fd fb7e 	bl	80063aa <__retarget_lock_acquire_recursive>
 8008cae:	4628      	mov	r0, r5
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	f7ff ff5f 	bl	8008b74 <__sflush_r>
 8008cb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cb8:	07da      	lsls	r2, r3, #31
 8008cba:	4605      	mov	r5, r0
 8008cbc:	d4e4      	bmi.n	8008c88 <_fflush_r+0xc>
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	059b      	lsls	r3, r3, #22
 8008cc2:	d4e1      	bmi.n	8008c88 <_fflush_r+0xc>
 8008cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cc6:	f7fd fb71 	bl	80063ac <__retarget_lock_release_recursive>
 8008cca:	e7dd      	b.n	8008c88 <_fflush_r+0xc>

08008ccc <memmove>:
 8008ccc:	4288      	cmp	r0, r1
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	eb01 0402 	add.w	r4, r1, r2
 8008cd4:	d902      	bls.n	8008cdc <memmove+0x10>
 8008cd6:	4284      	cmp	r4, r0
 8008cd8:	4623      	mov	r3, r4
 8008cda:	d807      	bhi.n	8008cec <memmove+0x20>
 8008cdc:	1e43      	subs	r3, r0, #1
 8008cde:	42a1      	cmp	r1, r4
 8008ce0:	d008      	beq.n	8008cf4 <memmove+0x28>
 8008ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cea:	e7f8      	b.n	8008cde <memmove+0x12>
 8008cec:	4402      	add	r2, r0
 8008cee:	4601      	mov	r1, r0
 8008cf0:	428a      	cmp	r2, r1
 8008cf2:	d100      	bne.n	8008cf6 <memmove+0x2a>
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cfe:	e7f7      	b.n	8008cf0 <memmove+0x24>

08008d00 <strncmp>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b16a      	cbz	r2, 8008d20 <strncmp+0x20>
 8008d04:	3901      	subs	r1, #1
 8008d06:	1884      	adds	r4, r0, r2
 8008d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d103      	bne.n	8008d1c <strncmp+0x1c>
 8008d14:	42a0      	cmp	r0, r4
 8008d16:	d001      	beq.n	8008d1c <strncmp+0x1c>
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d1f5      	bne.n	8008d08 <strncmp+0x8>
 8008d1c:	1ad0      	subs	r0, r2, r3
 8008d1e:	bd10      	pop	{r4, pc}
 8008d20:	4610      	mov	r0, r2
 8008d22:	e7fc      	b.n	8008d1e <strncmp+0x1e>

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	@ (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f8 fcc6 	bl	80016c0 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	200004c4 	.word	0x200004c4

08008d44 <memcpy>:
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d4c:	d100      	bne.n	8008d50 <memcpy+0xc>
 8008d4e:	4770      	bx	lr
 8008d50:	b510      	push	{r4, lr}
 8008d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	d1f9      	bne.n	8008d52 <memcpy+0xe>
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <nan>:
 8008d60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d68 <nan+0x8>
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	7ff80000 	.word	0x7ff80000

08008d70 <__assert_func>:
 8008d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d72:	4614      	mov	r4, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <__assert_func+0x2c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	68d8      	ldr	r0, [r3, #12]
 8008d7e:	b954      	cbnz	r4, 8008d96 <__assert_func+0x26>
 8008d80:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <__assert_func+0x30>)
 8008d82:	461c      	mov	r4, r3
 8008d84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d88:	9100      	str	r1, [sp, #0]
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	4905      	ldr	r1, [pc, #20]	@ (8008da4 <__assert_func+0x34>)
 8008d8e:	f000 fba7 	bl	80094e0 <fiprintf>
 8008d92:	f000 fbb7 	bl	8009504 <abort>
 8008d96:	4b04      	ldr	r3, [pc, #16]	@ (8008da8 <__assert_func+0x38>)
 8008d98:	e7f4      	b.n	8008d84 <__assert_func+0x14>
 8008d9a:	bf00      	nop
 8008d9c:	20000038 	.word	0x20000038
 8008da0:	08009e7d 	.word	0x08009e7d
 8008da4:	08009e4f 	.word	0x08009e4f
 8008da8:	08009e42 	.word	0x08009e42

08008dac <_calloc_r>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	fba1 5402 	umull	r5, r4, r1, r2
 8008db2:	b93c      	cbnz	r4, 8008dc4 <_calloc_r+0x18>
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7fe f9c3 	bl	8007140 <_malloc_r>
 8008dba:	4606      	mov	r6, r0
 8008dbc:	b928      	cbnz	r0, 8008dca <_calloc_r+0x1e>
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	220c      	movs	r2, #12
 8008dc6:	6002      	str	r2, [r0, #0]
 8008dc8:	e7f9      	b.n	8008dbe <_calloc_r+0x12>
 8008dca:	462a      	mov	r2, r5
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f7fd fa6e 	bl	80062ae <memset>
 8008dd2:	e7f5      	b.n	8008dc0 <_calloc_r+0x14>

08008dd4 <rshift>:
 8008dd4:	6903      	ldr	r3, [r0, #16]
 8008dd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008de2:	f100 0414 	add.w	r4, r0, #20
 8008de6:	dd45      	ble.n	8008e74 <rshift+0xa0>
 8008de8:	f011 011f 	ands.w	r1, r1, #31
 8008dec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008df0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008df4:	d10c      	bne.n	8008e10 <rshift+0x3c>
 8008df6:	f100 0710 	add.w	r7, r0, #16
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	42b1      	cmp	r1, r6
 8008dfe:	d334      	bcc.n	8008e6a <rshift+0x96>
 8008e00:	1a9b      	subs	r3, r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	1eea      	subs	r2, r5, #3
 8008e06:	4296      	cmp	r6, r2
 8008e08:	bf38      	it	cc
 8008e0a:	2300      	movcc	r3, #0
 8008e0c:	4423      	add	r3, r4
 8008e0e:	e015      	b.n	8008e3c <rshift+0x68>
 8008e10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e14:	f1c1 0820 	rsb	r8, r1, #32
 8008e18:	40cf      	lsrs	r7, r1
 8008e1a:	f105 0e04 	add.w	lr, r5, #4
 8008e1e:	46a1      	mov	r9, r4
 8008e20:	4576      	cmp	r6, lr
 8008e22:	46f4      	mov	ip, lr
 8008e24:	d815      	bhi.n	8008e52 <rshift+0x7e>
 8008e26:	1a9a      	subs	r2, r3, r2
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	3a04      	subs	r2, #4
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	42ae      	cmp	r6, r5
 8008e30:	bf38      	it	cc
 8008e32:	2200      	movcc	r2, #0
 8008e34:	18a3      	adds	r3, r4, r2
 8008e36:	50a7      	str	r7, [r4, r2]
 8008e38:	b107      	cbz	r7, 8008e3c <rshift+0x68>
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	1b1a      	subs	r2, r3, r4
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e44:	bf08      	it	eq
 8008e46:	2300      	moveq	r3, #0
 8008e48:	6102      	str	r2, [r0, #16]
 8008e4a:	bf08      	it	eq
 8008e4c:	6143      	streq	r3, [r0, #20]
 8008e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e52:	f8dc c000 	ldr.w	ip, [ip]
 8008e56:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e5a:	ea4c 0707 	orr.w	r7, ip, r7
 8008e5e:	f849 7b04 	str.w	r7, [r9], #4
 8008e62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e66:	40cf      	lsrs	r7, r1
 8008e68:	e7da      	b.n	8008e20 <rshift+0x4c>
 8008e6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e72:	e7c3      	b.n	8008dfc <rshift+0x28>
 8008e74:	4623      	mov	r3, r4
 8008e76:	e7e1      	b.n	8008e3c <rshift+0x68>

08008e78 <__hexdig_fun>:
 8008e78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e7c:	2b09      	cmp	r3, #9
 8008e7e:	d802      	bhi.n	8008e86 <__hexdig_fun+0xe>
 8008e80:	3820      	subs	r0, #32
 8008e82:	b2c0      	uxtb	r0, r0
 8008e84:	4770      	bx	lr
 8008e86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	d801      	bhi.n	8008e92 <__hexdig_fun+0x1a>
 8008e8e:	3847      	subs	r0, #71	@ 0x47
 8008e90:	e7f7      	b.n	8008e82 <__hexdig_fun+0xa>
 8008e92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	d801      	bhi.n	8008e9e <__hexdig_fun+0x26>
 8008e9a:	3827      	subs	r0, #39	@ 0x27
 8008e9c:	e7f1      	b.n	8008e82 <__hexdig_fun+0xa>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	4770      	bx	lr
	...

08008ea4 <__gethex>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	468a      	mov	sl, r1
 8008eac:	9302      	str	r3, [sp, #8]
 8008eae:	680b      	ldr	r3, [r1, #0]
 8008eb0:	9001      	str	r0, [sp, #4]
 8008eb2:	4690      	mov	r8, r2
 8008eb4:	1c9c      	adds	r4, r3, #2
 8008eb6:	46a1      	mov	r9, r4
 8008eb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ebc:	2830      	cmp	r0, #48	@ 0x30
 8008ebe:	d0fa      	beq.n	8008eb6 <__gethex+0x12>
 8008ec0:	eba9 0303 	sub.w	r3, r9, r3
 8008ec4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ec8:	f7ff ffd6 	bl	8008e78 <__hexdig_fun>
 8008ecc:	4605      	mov	r5, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d168      	bne.n	8008fa4 <__gethex+0x100>
 8008ed2:	49a0      	ldr	r1, [pc, #640]	@ (8009154 <__gethex+0x2b0>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	4648      	mov	r0, r9
 8008ed8:	f7ff ff12 	bl	8008d00 <strncmp>
 8008edc:	4607      	mov	r7, r0
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d167      	bne.n	8008fb2 <__gethex+0x10e>
 8008ee2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ee6:	4626      	mov	r6, r4
 8008ee8:	f7ff ffc6 	bl	8008e78 <__hexdig_fun>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d062      	beq.n	8008fb6 <__gethex+0x112>
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	7818      	ldrb	r0, [r3, #0]
 8008ef4:	2830      	cmp	r0, #48	@ 0x30
 8008ef6:	4699      	mov	r9, r3
 8008ef8:	f103 0301 	add.w	r3, r3, #1
 8008efc:	d0f9      	beq.n	8008ef2 <__gethex+0x4e>
 8008efe:	f7ff ffbb 	bl	8008e78 <__hexdig_fun>
 8008f02:	fab0 f580 	clz	r5, r0
 8008f06:	096d      	lsrs	r5, r5, #5
 8008f08:	f04f 0b01 	mov.w	fp, #1
 8008f0c:	464a      	mov	r2, r9
 8008f0e:	4616      	mov	r6, r2
 8008f10:	3201      	adds	r2, #1
 8008f12:	7830      	ldrb	r0, [r6, #0]
 8008f14:	f7ff ffb0 	bl	8008e78 <__hexdig_fun>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1f8      	bne.n	8008f0e <__gethex+0x6a>
 8008f1c:	498d      	ldr	r1, [pc, #564]	@ (8009154 <__gethex+0x2b0>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff feed 	bl	8008d00 <strncmp>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d13f      	bne.n	8008faa <__gethex+0x106>
 8008f2a:	b944      	cbnz	r4, 8008f3e <__gethex+0x9a>
 8008f2c:	1c74      	adds	r4, r6, #1
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4616      	mov	r6, r2
 8008f32:	3201      	adds	r2, #1
 8008f34:	7830      	ldrb	r0, [r6, #0]
 8008f36:	f7ff ff9f 	bl	8008e78 <__hexdig_fun>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d1f8      	bne.n	8008f30 <__gethex+0x8c>
 8008f3e:	1ba4      	subs	r4, r4, r6
 8008f40:	00a7      	lsls	r7, r4, #2
 8008f42:	7833      	ldrb	r3, [r6, #0]
 8008f44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f48:	2b50      	cmp	r3, #80	@ 0x50
 8008f4a:	d13e      	bne.n	8008fca <__gethex+0x126>
 8008f4c:	7873      	ldrb	r3, [r6, #1]
 8008f4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f50:	d033      	beq.n	8008fba <__gethex+0x116>
 8008f52:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f54:	d034      	beq.n	8008fc0 <__gethex+0x11c>
 8008f56:	1c71      	adds	r1, r6, #1
 8008f58:	2400      	movs	r4, #0
 8008f5a:	7808      	ldrb	r0, [r1, #0]
 8008f5c:	f7ff ff8c 	bl	8008e78 <__hexdig_fun>
 8008f60:	1e43      	subs	r3, r0, #1
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b18      	cmp	r3, #24
 8008f66:	d830      	bhi.n	8008fca <__gethex+0x126>
 8008f68:	f1a0 0210 	sub.w	r2, r0, #16
 8008f6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f70:	f7ff ff82 	bl	8008e78 <__hexdig_fun>
 8008f74:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f78:	fa5f fc8c 	uxtb.w	ip, ip
 8008f7c:	f1bc 0f18 	cmp.w	ip, #24
 8008f80:	f04f 030a 	mov.w	r3, #10
 8008f84:	d91e      	bls.n	8008fc4 <__gethex+0x120>
 8008f86:	b104      	cbz	r4, 8008f8a <__gethex+0xe6>
 8008f88:	4252      	negs	r2, r2
 8008f8a:	4417      	add	r7, r2
 8008f8c:	f8ca 1000 	str.w	r1, [sl]
 8008f90:	b1ed      	cbz	r5, 8008fce <__gethex+0x12a>
 8008f92:	f1bb 0f00 	cmp.w	fp, #0
 8008f96:	bf0c      	ite	eq
 8008f98:	2506      	moveq	r5, #6
 8008f9a:	2500      	movne	r5, #0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	b005      	add	sp, #20
 8008fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa4:	2500      	movs	r5, #0
 8008fa6:	462c      	mov	r4, r5
 8008fa8:	e7b0      	b.n	8008f0c <__gethex+0x68>
 8008faa:	2c00      	cmp	r4, #0
 8008fac:	d1c7      	bne.n	8008f3e <__gethex+0x9a>
 8008fae:	4627      	mov	r7, r4
 8008fb0:	e7c7      	b.n	8008f42 <__gethex+0x9e>
 8008fb2:	464e      	mov	r6, r9
 8008fb4:	462f      	mov	r7, r5
 8008fb6:	2501      	movs	r5, #1
 8008fb8:	e7c3      	b.n	8008f42 <__gethex+0x9e>
 8008fba:	2400      	movs	r4, #0
 8008fbc:	1cb1      	adds	r1, r6, #2
 8008fbe:	e7cc      	b.n	8008f5a <__gethex+0xb6>
 8008fc0:	2401      	movs	r4, #1
 8008fc2:	e7fb      	b.n	8008fbc <__gethex+0x118>
 8008fc4:	fb03 0002 	mla	r0, r3, r2, r0
 8008fc8:	e7ce      	b.n	8008f68 <__gethex+0xc4>
 8008fca:	4631      	mov	r1, r6
 8008fcc:	e7de      	b.n	8008f8c <__gethex+0xe8>
 8008fce:	eba6 0309 	sub.w	r3, r6, r9
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	2b07      	cmp	r3, #7
 8008fd8:	dc0a      	bgt.n	8008ff0 <__gethex+0x14c>
 8008fda:	9801      	ldr	r0, [sp, #4]
 8008fdc:	f7fe f93c 	bl	8007258 <_Balloc>
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	b940      	cbnz	r0, 8008ff6 <__gethex+0x152>
 8008fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8009158 <__gethex+0x2b4>)
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	21e4      	movs	r1, #228	@ 0xe4
 8008fea:	485c      	ldr	r0, [pc, #368]	@ (800915c <__gethex+0x2b8>)
 8008fec:	f7ff fec0 	bl	8008d70 <__assert_func>
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	105b      	asrs	r3, r3, #1
 8008ff4:	e7ef      	b.n	8008fd6 <__gethex+0x132>
 8008ff6:	f100 0a14 	add.w	sl, r0, #20
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4655      	mov	r5, sl
 8008ffe:	469b      	mov	fp, r3
 8009000:	45b1      	cmp	r9, r6
 8009002:	d337      	bcc.n	8009074 <__gethex+0x1d0>
 8009004:	f845 bb04 	str.w	fp, [r5], #4
 8009008:	eba5 050a 	sub.w	r5, r5, sl
 800900c:	10ad      	asrs	r5, r5, #2
 800900e:	6125      	str	r5, [r4, #16]
 8009010:	4658      	mov	r0, fp
 8009012:	f7fe fa13 	bl	800743c <__hi0bits>
 8009016:	016d      	lsls	r5, r5, #5
 8009018:	f8d8 6000 	ldr.w	r6, [r8]
 800901c:	1a2d      	subs	r5, r5, r0
 800901e:	42b5      	cmp	r5, r6
 8009020:	dd54      	ble.n	80090cc <__gethex+0x228>
 8009022:	1bad      	subs	r5, r5, r6
 8009024:	4629      	mov	r1, r5
 8009026:	4620      	mov	r0, r4
 8009028:	f7fe fda7 	bl	8007b7a <__any_on>
 800902c:	4681      	mov	r9, r0
 800902e:	b178      	cbz	r0, 8009050 <__gethex+0x1ac>
 8009030:	1e6b      	subs	r3, r5, #1
 8009032:	1159      	asrs	r1, r3, #5
 8009034:	f003 021f 	and.w	r2, r3, #31
 8009038:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800903c:	f04f 0901 	mov.w	r9, #1
 8009040:	fa09 f202 	lsl.w	r2, r9, r2
 8009044:	420a      	tst	r2, r1
 8009046:	d003      	beq.n	8009050 <__gethex+0x1ac>
 8009048:	454b      	cmp	r3, r9
 800904a:	dc36      	bgt.n	80090ba <__gethex+0x216>
 800904c:	f04f 0902 	mov.w	r9, #2
 8009050:	4629      	mov	r1, r5
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff febe 	bl	8008dd4 <rshift>
 8009058:	442f      	add	r7, r5
 800905a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800905e:	42bb      	cmp	r3, r7
 8009060:	da42      	bge.n	80090e8 <__gethex+0x244>
 8009062:	9801      	ldr	r0, [sp, #4]
 8009064:	4621      	mov	r1, r4
 8009066:	f7fe f937 	bl	80072d8 <_Bfree>
 800906a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800906c:	2300      	movs	r3, #0
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	25a3      	movs	r5, #163	@ 0xa3
 8009072:	e793      	b.n	8008f9c <__gethex+0xf8>
 8009074:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009078:	2a2e      	cmp	r2, #46	@ 0x2e
 800907a:	d012      	beq.n	80090a2 <__gethex+0x1fe>
 800907c:	2b20      	cmp	r3, #32
 800907e:	d104      	bne.n	800908a <__gethex+0x1e6>
 8009080:	f845 bb04 	str.w	fp, [r5], #4
 8009084:	f04f 0b00 	mov.w	fp, #0
 8009088:	465b      	mov	r3, fp
 800908a:	7830      	ldrb	r0, [r6, #0]
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	f7ff fef3 	bl	8008e78 <__hexdig_fun>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	f000 000f 	and.w	r0, r0, #15
 8009098:	4098      	lsls	r0, r3
 800909a:	ea4b 0b00 	orr.w	fp, fp, r0
 800909e:	3304      	adds	r3, #4
 80090a0:	e7ae      	b.n	8009000 <__gethex+0x15c>
 80090a2:	45b1      	cmp	r9, r6
 80090a4:	d8ea      	bhi.n	800907c <__gethex+0x1d8>
 80090a6:	492b      	ldr	r1, [pc, #172]	@ (8009154 <__gethex+0x2b0>)
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff fe27 	bl	8008d00 <strncmp>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1e1      	bne.n	800907c <__gethex+0x1d8>
 80090b8:	e7a2      	b.n	8009000 <__gethex+0x15c>
 80090ba:	1ea9      	subs	r1, r5, #2
 80090bc:	4620      	mov	r0, r4
 80090be:	f7fe fd5c 	bl	8007b7a <__any_on>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d0c2      	beq.n	800904c <__gethex+0x1a8>
 80090c6:	f04f 0903 	mov.w	r9, #3
 80090ca:	e7c1      	b.n	8009050 <__gethex+0x1ac>
 80090cc:	da09      	bge.n	80090e2 <__gethex+0x23e>
 80090ce:	1b75      	subs	r5, r6, r5
 80090d0:	4621      	mov	r1, r4
 80090d2:	9801      	ldr	r0, [sp, #4]
 80090d4:	462a      	mov	r2, r5
 80090d6:	f7fe fb17 	bl	8007708 <__lshift>
 80090da:	1b7f      	subs	r7, r7, r5
 80090dc:	4604      	mov	r4, r0
 80090de:	f100 0a14 	add.w	sl, r0, #20
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	e7b8      	b.n	800905a <__gethex+0x1b6>
 80090e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090ec:	42bd      	cmp	r5, r7
 80090ee:	dd6f      	ble.n	80091d0 <__gethex+0x32c>
 80090f0:	1bed      	subs	r5, r5, r7
 80090f2:	42ae      	cmp	r6, r5
 80090f4:	dc34      	bgt.n	8009160 <__gethex+0x2bc>
 80090f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d022      	beq.n	8009144 <__gethex+0x2a0>
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d024      	beq.n	800914c <__gethex+0x2a8>
 8009102:	2b01      	cmp	r3, #1
 8009104:	d115      	bne.n	8009132 <__gethex+0x28e>
 8009106:	42ae      	cmp	r6, r5
 8009108:	d113      	bne.n	8009132 <__gethex+0x28e>
 800910a:	2e01      	cmp	r6, #1
 800910c:	d10b      	bne.n	8009126 <__gethex+0x282>
 800910e:	9a02      	ldr	r2, [sp, #8]
 8009110:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	2301      	movs	r3, #1
 8009118:	6123      	str	r3, [r4, #16]
 800911a:	f8ca 3000 	str.w	r3, [sl]
 800911e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009120:	2562      	movs	r5, #98	@ 0x62
 8009122:	601c      	str	r4, [r3, #0]
 8009124:	e73a      	b.n	8008f9c <__gethex+0xf8>
 8009126:	1e71      	subs	r1, r6, #1
 8009128:	4620      	mov	r0, r4
 800912a:	f7fe fd26 	bl	8007b7a <__any_on>
 800912e:	2800      	cmp	r0, #0
 8009130:	d1ed      	bne.n	800910e <__gethex+0x26a>
 8009132:	9801      	ldr	r0, [sp, #4]
 8009134:	4621      	mov	r1, r4
 8009136:	f7fe f8cf 	bl	80072d8 <_Bfree>
 800913a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800913c:	2300      	movs	r3, #0
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	2550      	movs	r5, #80	@ 0x50
 8009142:	e72b      	b.n	8008f9c <__gethex+0xf8>
 8009144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f3      	bne.n	8009132 <__gethex+0x28e>
 800914a:	e7e0      	b.n	800910e <__gethex+0x26a>
 800914c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1dd      	bne.n	800910e <__gethex+0x26a>
 8009152:	e7ee      	b.n	8009132 <__gethex+0x28e>
 8009154:	08009cd0 	.word	0x08009cd0
 8009158:	08009b65 	.word	0x08009b65
 800915c:	08009e7e 	.word	0x08009e7e
 8009160:	1e6f      	subs	r7, r5, #1
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	d130      	bne.n	80091ca <__gethex+0x326>
 8009168:	b127      	cbz	r7, 8009174 <__gethex+0x2d0>
 800916a:	4639      	mov	r1, r7
 800916c:	4620      	mov	r0, r4
 800916e:	f7fe fd04 	bl	8007b7a <__any_on>
 8009172:	4681      	mov	r9, r0
 8009174:	117a      	asrs	r2, r7, #5
 8009176:	2301      	movs	r3, #1
 8009178:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800917c:	f007 071f 	and.w	r7, r7, #31
 8009180:	40bb      	lsls	r3, r7
 8009182:	4213      	tst	r3, r2
 8009184:	4629      	mov	r1, r5
 8009186:	4620      	mov	r0, r4
 8009188:	bf18      	it	ne
 800918a:	f049 0902 	orrne.w	r9, r9, #2
 800918e:	f7ff fe21 	bl	8008dd4 <rshift>
 8009192:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009196:	1b76      	subs	r6, r6, r5
 8009198:	2502      	movs	r5, #2
 800919a:	f1b9 0f00 	cmp.w	r9, #0
 800919e:	d047      	beq.n	8009230 <__gethex+0x38c>
 80091a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d015      	beq.n	80091d4 <__gethex+0x330>
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d017      	beq.n	80091dc <__gethex+0x338>
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d109      	bne.n	80091c4 <__gethex+0x320>
 80091b0:	f019 0f02 	tst.w	r9, #2
 80091b4:	d006      	beq.n	80091c4 <__gethex+0x320>
 80091b6:	f8da 3000 	ldr.w	r3, [sl]
 80091ba:	ea49 0903 	orr.w	r9, r9, r3
 80091be:	f019 0f01 	tst.w	r9, #1
 80091c2:	d10e      	bne.n	80091e2 <__gethex+0x33e>
 80091c4:	f045 0510 	orr.w	r5, r5, #16
 80091c8:	e032      	b.n	8009230 <__gethex+0x38c>
 80091ca:	f04f 0901 	mov.w	r9, #1
 80091ce:	e7d1      	b.n	8009174 <__gethex+0x2d0>
 80091d0:	2501      	movs	r5, #1
 80091d2:	e7e2      	b.n	800919a <__gethex+0x2f6>
 80091d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091d6:	f1c3 0301 	rsb	r3, r3, #1
 80091da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f0      	beq.n	80091c4 <__gethex+0x320>
 80091e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091e6:	f104 0314 	add.w	r3, r4, #20
 80091ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091f2:	f04f 0c00 	mov.w	ip, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009200:	d01b      	beq.n	800923a <__gethex+0x396>
 8009202:	3201      	adds	r2, #1
 8009204:	6002      	str	r2, [r0, #0]
 8009206:	2d02      	cmp	r5, #2
 8009208:	f104 0314 	add.w	r3, r4, #20
 800920c:	d13c      	bne.n	8009288 <__gethex+0x3e4>
 800920e:	f8d8 2000 	ldr.w	r2, [r8]
 8009212:	3a01      	subs	r2, #1
 8009214:	42b2      	cmp	r2, r6
 8009216:	d109      	bne.n	800922c <__gethex+0x388>
 8009218:	1171      	asrs	r1, r6, #5
 800921a:	2201      	movs	r2, #1
 800921c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009220:	f006 061f 	and.w	r6, r6, #31
 8009224:	fa02 f606 	lsl.w	r6, r2, r6
 8009228:	421e      	tst	r6, r3
 800922a:	d13a      	bne.n	80092a2 <__gethex+0x3fe>
 800922c:	f045 0520 	orr.w	r5, r5, #32
 8009230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009232:	601c      	str	r4, [r3, #0]
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	601f      	str	r7, [r3, #0]
 8009238:	e6b0      	b.n	8008f9c <__gethex+0xf8>
 800923a:	4299      	cmp	r1, r3
 800923c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009240:	d8d9      	bhi.n	80091f6 <__gethex+0x352>
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	459b      	cmp	fp, r3
 8009246:	db17      	blt.n	8009278 <__gethex+0x3d4>
 8009248:	6861      	ldr	r1, [r4, #4]
 800924a:	9801      	ldr	r0, [sp, #4]
 800924c:	3101      	adds	r1, #1
 800924e:	f7fe f803 	bl	8007258 <_Balloc>
 8009252:	4681      	mov	r9, r0
 8009254:	b918      	cbnz	r0, 800925e <__gethex+0x3ba>
 8009256:	4b1a      	ldr	r3, [pc, #104]	@ (80092c0 <__gethex+0x41c>)
 8009258:	4602      	mov	r2, r0
 800925a:	2184      	movs	r1, #132	@ 0x84
 800925c:	e6c5      	b.n	8008fea <__gethex+0x146>
 800925e:	6922      	ldr	r2, [r4, #16]
 8009260:	3202      	adds	r2, #2
 8009262:	f104 010c 	add.w	r1, r4, #12
 8009266:	0092      	lsls	r2, r2, #2
 8009268:	300c      	adds	r0, #12
 800926a:	f7ff fd6b 	bl	8008d44 <memcpy>
 800926e:	4621      	mov	r1, r4
 8009270:	9801      	ldr	r0, [sp, #4]
 8009272:	f7fe f831 	bl	80072d8 <_Bfree>
 8009276:	464c      	mov	r4, r9
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009280:	6122      	str	r2, [r4, #16]
 8009282:	2201      	movs	r2, #1
 8009284:	615a      	str	r2, [r3, #20]
 8009286:	e7be      	b.n	8009206 <__gethex+0x362>
 8009288:	6922      	ldr	r2, [r4, #16]
 800928a:	455a      	cmp	r2, fp
 800928c:	dd0b      	ble.n	80092a6 <__gethex+0x402>
 800928e:	2101      	movs	r1, #1
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff fd9f 	bl	8008dd4 <rshift>
 8009296:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800929a:	3701      	adds	r7, #1
 800929c:	42bb      	cmp	r3, r7
 800929e:	f6ff aee0 	blt.w	8009062 <__gethex+0x1be>
 80092a2:	2501      	movs	r5, #1
 80092a4:	e7c2      	b.n	800922c <__gethex+0x388>
 80092a6:	f016 061f 	ands.w	r6, r6, #31
 80092aa:	d0fa      	beq.n	80092a2 <__gethex+0x3fe>
 80092ac:	4453      	add	r3, sl
 80092ae:	f1c6 0620 	rsb	r6, r6, #32
 80092b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092b6:	f7fe f8c1 	bl	800743c <__hi0bits>
 80092ba:	42b0      	cmp	r0, r6
 80092bc:	dbe7      	blt.n	800928e <__gethex+0x3ea>
 80092be:	e7f0      	b.n	80092a2 <__gethex+0x3fe>
 80092c0:	08009b65 	.word	0x08009b65

080092c4 <L_shift>:
 80092c4:	f1c2 0208 	rsb	r2, r2, #8
 80092c8:	0092      	lsls	r2, r2, #2
 80092ca:	b570      	push	{r4, r5, r6, lr}
 80092cc:	f1c2 0620 	rsb	r6, r2, #32
 80092d0:	6843      	ldr	r3, [r0, #4]
 80092d2:	6804      	ldr	r4, [r0, #0]
 80092d4:	fa03 f506 	lsl.w	r5, r3, r6
 80092d8:	432c      	orrs	r4, r5
 80092da:	40d3      	lsrs	r3, r2
 80092dc:	6004      	str	r4, [r0, #0]
 80092de:	f840 3f04 	str.w	r3, [r0, #4]!
 80092e2:	4288      	cmp	r0, r1
 80092e4:	d3f4      	bcc.n	80092d0 <L_shift+0xc>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}

080092e8 <__match>:
 80092e8:	b530      	push	{r4, r5, lr}
 80092ea:	6803      	ldr	r3, [r0, #0]
 80092ec:	3301      	adds	r3, #1
 80092ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f2:	b914      	cbnz	r4, 80092fa <__match+0x12>
 80092f4:	6003      	str	r3, [r0, #0]
 80092f6:	2001      	movs	r0, #1
 80092f8:	bd30      	pop	{r4, r5, pc}
 80092fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009302:	2d19      	cmp	r5, #25
 8009304:	bf98      	it	ls
 8009306:	3220      	addls	r2, #32
 8009308:	42a2      	cmp	r2, r4
 800930a:	d0f0      	beq.n	80092ee <__match+0x6>
 800930c:	2000      	movs	r0, #0
 800930e:	e7f3      	b.n	80092f8 <__match+0x10>

08009310 <__hexnan>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	680b      	ldr	r3, [r1, #0]
 8009316:	6801      	ldr	r1, [r0, #0]
 8009318:	115e      	asrs	r6, r3, #5
 800931a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800931e:	f013 031f 	ands.w	r3, r3, #31
 8009322:	b087      	sub	sp, #28
 8009324:	bf18      	it	ne
 8009326:	3604      	addne	r6, #4
 8009328:	2500      	movs	r5, #0
 800932a:	1f37      	subs	r7, r6, #4
 800932c:	4682      	mov	sl, r0
 800932e:	4690      	mov	r8, r2
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	f846 5c04 	str.w	r5, [r6, #-4]
 8009336:	46b9      	mov	r9, r7
 8009338:	463c      	mov	r4, r7
 800933a:	9502      	str	r5, [sp, #8]
 800933c:	46ab      	mov	fp, r5
 800933e:	784a      	ldrb	r2, [r1, #1]
 8009340:	1c4b      	adds	r3, r1, #1
 8009342:	9303      	str	r3, [sp, #12]
 8009344:	b342      	cbz	r2, 8009398 <__hexnan+0x88>
 8009346:	4610      	mov	r0, r2
 8009348:	9105      	str	r1, [sp, #20]
 800934a:	9204      	str	r2, [sp, #16]
 800934c:	f7ff fd94 	bl	8008e78 <__hexdig_fun>
 8009350:	2800      	cmp	r0, #0
 8009352:	d151      	bne.n	80093f8 <__hexnan+0xe8>
 8009354:	9a04      	ldr	r2, [sp, #16]
 8009356:	9905      	ldr	r1, [sp, #20]
 8009358:	2a20      	cmp	r2, #32
 800935a:	d818      	bhi.n	800938e <__hexnan+0x7e>
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	459b      	cmp	fp, r3
 8009360:	dd13      	ble.n	800938a <__hexnan+0x7a>
 8009362:	454c      	cmp	r4, r9
 8009364:	d206      	bcs.n	8009374 <__hexnan+0x64>
 8009366:	2d07      	cmp	r5, #7
 8009368:	dc04      	bgt.n	8009374 <__hexnan+0x64>
 800936a:	462a      	mov	r2, r5
 800936c:	4649      	mov	r1, r9
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff ffa8 	bl	80092c4 <L_shift>
 8009374:	4544      	cmp	r4, r8
 8009376:	d952      	bls.n	800941e <__hexnan+0x10e>
 8009378:	2300      	movs	r3, #0
 800937a:	f1a4 0904 	sub.w	r9, r4, #4
 800937e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009382:	f8cd b008 	str.w	fp, [sp, #8]
 8009386:	464c      	mov	r4, r9
 8009388:	461d      	mov	r5, r3
 800938a:	9903      	ldr	r1, [sp, #12]
 800938c:	e7d7      	b.n	800933e <__hexnan+0x2e>
 800938e:	2a29      	cmp	r2, #41	@ 0x29
 8009390:	d157      	bne.n	8009442 <__hexnan+0x132>
 8009392:	3102      	adds	r1, #2
 8009394:	f8ca 1000 	str.w	r1, [sl]
 8009398:	f1bb 0f00 	cmp.w	fp, #0
 800939c:	d051      	beq.n	8009442 <__hexnan+0x132>
 800939e:	454c      	cmp	r4, r9
 80093a0:	d206      	bcs.n	80093b0 <__hexnan+0xa0>
 80093a2:	2d07      	cmp	r5, #7
 80093a4:	dc04      	bgt.n	80093b0 <__hexnan+0xa0>
 80093a6:	462a      	mov	r2, r5
 80093a8:	4649      	mov	r1, r9
 80093aa:	4620      	mov	r0, r4
 80093ac:	f7ff ff8a 	bl	80092c4 <L_shift>
 80093b0:	4544      	cmp	r4, r8
 80093b2:	d936      	bls.n	8009422 <__hexnan+0x112>
 80093b4:	f1a8 0204 	sub.w	r2, r8, #4
 80093b8:	4623      	mov	r3, r4
 80093ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80093be:	f842 1f04 	str.w	r1, [r2, #4]!
 80093c2:	429f      	cmp	r7, r3
 80093c4:	d2f9      	bcs.n	80093ba <__hexnan+0xaa>
 80093c6:	1b3b      	subs	r3, r7, r4
 80093c8:	f023 0303 	bic.w	r3, r3, #3
 80093cc:	3304      	adds	r3, #4
 80093ce:	3401      	adds	r4, #1
 80093d0:	3e03      	subs	r6, #3
 80093d2:	42b4      	cmp	r4, r6
 80093d4:	bf88      	it	hi
 80093d6:	2304      	movhi	r3, #4
 80093d8:	4443      	add	r3, r8
 80093da:	2200      	movs	r2, #0
 80093dc:	f843 2b04 	str.w	r2, [r3], #4
 80093e0:	429f      	cmp	r7, r3
 80093e2:	d2fb      	bcs.n	80093dc <__hexnan+0xcc>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	b91b      	cbnz	r3, 80093f0 <__hexnan+0xe0>
 80093e8:	4547      	cmp	r7, r8
 80093ea:	d128      	bne.n	800943e <__hexnan+0x12e>
 80093ec:	2301      	movs	r3, #1
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	2005      	movs	r0, #5
 80093f2:	b007      	add	sp, #28
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	3501      	adds	r5, #1
 80093fa:	2d08      	cmp	r5, #8
 80093fc:	f10b 0b01 	add.w	fp, fp, #1
 8009400:	dd06      	ble.n	8009410 <__hexnan+0x100>
 8009402:	4544      	cmp	r4, r8
 8009404:	d9c1      	bls.n	800938a <__hexnan+0x7a>
 8009406:	2300      	movs	r3, #0
 8009408:	f844 3c04 	str.w	r3, [r4, #-4]
 800940c:	2501      	movs	r5, #1
 800940e:	3c04      	subs	r4, #4
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	f000 000f 	and.w	r0, r0, #15
 8009416:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	e7b5      	b.n	800938a <__hexnan+0x7a>
 800941e:	2508      	movs	r5, #8
 8009420:	e7b3      	b.n	800938a <__hexnan+0x7a>
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0dd      	beq.n	80093e4 <__hexnan+0xd4>
 8009428:	f1c3 0320 	rsb	r3, r3, #32
 800942c:	f04f 32ff 	mov.w	r2, #4294967295
 8009430:	40da      	lsrs	r2, r3
 8009432:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009436:	4013      	ands	r3, r2
 8009438:	f846 3c04 	str.w	r3, [r6, #-4]
 800943c:	e7d2      	b.n	80093e4 <__hexnan+0xd4>
 800943e:	3f04      	subs	r7, #4
 8009440:	e7d0      	b.n	80093e4 <__hexnan+0xd4>
 8009442:	2004      	movs	r0, #4
 8009444:	e7d5      	b.n	80093f2 <__hexnan+0xe2>

08009446 <__ascii_mbtowc>:
 8009446:	b082      	sub	sp, #8
 8009448:	b901      	cbnz	r1, 800944c <__ascii_mbtowc+0x6>
 800944a:	a901      	add	r1, sp, #4
 800944c:	b142      	cbz	r2, 8009460 <__ascii_mbtowc+0x1a>
 800944e:	b14b      	cbz	r3, 8009464 <__ascii_mbtowc+0x1e>
 8009450:	7813      	ldrb	r3, [r2, #0]
 8009452:	600b      	str	r3, [r1, #0]
 8009454:	7812      	ldrb	r2, [r2, #0]
 8009456:	1e10      	subs	r0, r2, #0
 8009458:	bf18      	it	ne
 800945a:	2001      	movne	r0, #1
 800945c:	b002      	add	sp, #8
 800945e:	4770      	bx	lr
 8009460:	4610      	mov	r0, r2
 8009462:	e7fb      	b.n	800945c <__ascii_mbtowc+0x16>
 8009464:	f06f 0001 	mvn.w	r0, #1
 8009468:	e7f8      	b.n	800945c <__ascii_mbtowc+0x16>

0800946a <_realloc_r>:
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	4680      	mov	r8, r0
 8009470:	4615      	mov	r5, r2
 8009472:	460c      	mov	r4, r1
 8009474:	b921      	cbnz	r1, 8009480 <_realloc_r+0x16>
 8009476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	4611      	mov	r1, r2
 800947c:	f7fd be60 	b.w	8007140 <_malloc_r>
 8009480:	b92a      	cbnz	r2, 800948e <_realloc_r+0x24>
 8009482:	f7fd fde9 	bl	8007058 <_free_r>
 8009486:	2400      	movs	r4, #0
 8009488:	4620      	mov	r0, r4
 800948a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948e:	f000 f840 	bl	8009512 <_malloc_usable_size_r>
 8009492:	4285      	cmp	r5, r0
 8009494:	4606      	mov	r6, r0
 8009496:	d802      	bhi.n	800949e <_realloc_r+0x34>
 8009498:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800949c:	d8f4      	bhi.n	8009488 <_realloc_r+0x1e>
 800949e:	4629      	mov	r1, r5
 80094a0:	4640      	mov	r0, r8
 80094a2:	f7fd fe4d 	bl	8007140 <_malloc_r>
 80094a6:	4607      	mov	r7, r0
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0ec      	beq.n	8009486 <_realloc_r+0x1c>
 80094ac:	42b5      	cmp	r5, r6
 80094ae:	462a      	mov	r2, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	bf28      	it	cs
 80094b4:	4632      	movcs	r2, r6
 80094b6:	f7ff fc45 	bl	8008d44 <memcpy>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4640      	mov	r0, r8
 80094be:	f7fd fdcb 	bl	8007058 <_free_r>
 80094c2:	463c      	mov	r4, r7
 80094c4:	e7e0      	b.n	8009488 <_realloc_r+0x1e>

080094c6 <__ascii_wctomb>:
 80094c6:	4603      	mov	r3, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	b141      	cbz	r1, 80094de <__ascii_wctomb+0x18>
 80094cc:	2aff      	cmp	r2, #255	@ 0xff
 80094ce:	d904      	bls.n	80094da <__ascii_wctomb+0x14>
 80094d0:	228a      	movs	r2, #138	@ 0x8a
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	4770      	bx	lr
 80094da:	700a      	strb	r2, [r1, #0]
 80094dc:	2001      	movs	r0, #1
 80094de:	4770      	bx	lr

080094e0 <fiprintf>:
 80094e0:	b40e      	push	{r1, r2, r3}
 80094e2:	b503      	push	{r0, r1, lr}
 80094e4:	4601      	mov	r1, r0
 80094e6:	ab03      	add	r3, sp, #12
 80094e8:	4805      	ldr	r0, [pc, #20]	@ (8009500 <fiprintf+0x20>)
 80094ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ee:	6800      	ldr	r0, [r0, #0]
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	f000 f83f 	bl	8009574 <_vfiprintf_r>
 80094f6:	b002      	add	sp, #8
 80094f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094fc:	b003      	add	sp, #12
 80094fe:	4770      	bx	lr
 8009500:	20000038 	.word	0x20000038

08009504 <abort>:
 8009504:	b508      	push	{r3, lr}
 8009506:	2006      	movs	r0, #6
 8009508:	f000 fa08 	bl	800991c <raise>
 800950c:	2001      	movs	r0, #1
 800950e:	f7f8 f85e 	bl	80015ce <_exit>

08009512 <_malloc_usable_size_r>:
 8009512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009516:	1f18      	subs	r0, r3, #4
 8009518:	2b00      	cmp	r3, #0
 800951a:	bfbc      	itt	lt
 800951c:	580b      	ldrlt	r3, [r1, r0]
 800951e:	18c0      	addlt	r0, r0, r3
 8009520:	4770      	bx	lr

08009522 <__sfputc_r>:
 8009522:	6893      	ldr	r3, [r2, #8]
 8009524:	3b01      	subs	r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	b410      	push	{r4}
 800952a:	6093      	str	r3, [r2, #8]
 800952c:	da08      	bge.n	8009540 <__sfputc_r+0x1e>
 800952e:	6994      	ldr	r4, [r2, #24]
 8009530:	42a3      	cmp	r3, r4
 8009532:	db01      	blt.n	8009538 <__sfputc_r+0x16>
 8009534:	290a      	cmp	r1, #10
 8009536:	d103      	bne.n	8009540 <__sfputc_r+0x1e>
 8009538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953c:	f000 b932 	b.w	80097a4 <__swbuf_r>
 8009540:	6813      	ldr	r3, [r2, #0]
 8009542:	1c58      	adds	r0, r3, #1
 8009544:	6010      	str	r0, [r2, #0]
 8009546:	7019      	strb	r1, [r3, #0]
 8009548:	4608      	mov	r0, r1
 800954a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954e:	4770      	bx	lr

08009550 <__sfputs_r>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	4606      	mov	r6, r0
 8009554:	460f      	mov	r7, r1
 8009556:	4614      	mov	r4, r2
 8009558:	18d5      	adds	r5, r2, r3
 800955a:	42ac      	cmp	r4, r5
 800955c:	d101      	bne.n	8009562 <__sfputs_r+0x12>
 800955e:	2000      	movs	r0, #0
 8009560:	e007      	b.n	8009572 <__sfputs_r+0x22>
 8009562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009566:	463a      	mov	r2, r7
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ffda 	bl	8009522 <__sfputc_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d1f3      	bne.n	800955a <__sfputs_r+0xa>
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009574 <_vfiprintf_r>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	460d      	mov	r5, r1
 800957a:	b09d      	sub	sp, #116	@ 0x74
 800957c:	4614      	mov	r4, r2
 800957e:	4698      	mov	r8, r3
 8009580:	4606      	mov	r6, r0
 8009582:	b118      	cbz	r0, 800958c <_vfiprintf_r+0x18>
 8009584:	6a03      	ldr	r3, [r0, #32]
 8009586:	b90b      	cbnz	r3, 800958c <_vfiprintf_r+0x18>
 8009588:	f7fc fdf8 	bl	800617c <__sinit>
 800958c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800958e:	07d9      	lsls	r1, r3, #31
 8009590:	d405      	bmi.n	800959e <_vfiprintf_r+0x2a>
 8009592:	89ab      	ldrh	r3, [r5, #12]
 8009594:	059a      	lsls	r2, r3, #22
 8009596:	d402      	bmi.n	800959e <_vfiprintf_r+0x2a>
 8009598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800959a:	f7fc ff06 	bl	80063aa <__retarget_lock_acquire_recursive>
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	071b      	lsls	r3, r3, #28
 80095a2:	d501      	bpl.n	80095a8 <_vfiprintf_r+0x34>
 80095a4:	692b      	ldr	r3, [r5, #16]
 80095a6:	b99b      	cbnz	r3, 80095d0 <_vfiprintf_r+0x5c>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4630      	mov	r0, r6
 80095ac:	f000 f938 	bl	8009820 <__swsetup_r>
 80095b0:	b170      	cbz	r0, 80095d0 <_vfiprintf_r+0x5c>
 80095b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095b4:	07dc      	lsls	r4, r3, #31
 80095b6:	d504      	bpl.n	80095c2 <_vfiprintf_r+0x4e>
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295
 80095bc:	b01d      	add	sp, #116	@ 0x74
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	0598      	lsls	r0, r3, #22
 80095c6:	d4f7      	bmi.n	80095b8 <_vfiprintf_r+0x44>
 80095c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ca:	f7fc feef 	bl	80063ac <__retarget_lock_release_recursive>
 80095ce:	e7f3      	b.n	80095b8 <_vfiprintf_r+0x44>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d4:	2320      	movs	r3, #32
 80095d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095da:	f8cd 800c 	str.w	r8, [sp, #12]
 80095de:	2330      	movs	r3, #48	@ 0x30
 80095e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009790 <_vfiprintf_r+0x21c>
 80095e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095e8:	f04f 0901 	mov.w	r9, #1
 80095ec:	4623      	mov	r3, r4
 80095ee:	469a      	mov	sl, r3
 80095f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f4:	b10a      	cbz	r2, 80095fa <_vfiprintf_r+0x86>
 80095f6:	2a25      	cmp	r2, #37	@ 0x25
 80095f8:	d1f9      	bne.n	80095ee <_vfiprintf_r+0x7a>
 80095fa:	ebba 0b04 	subs.w	fp, sl, r4
 80095fe:	d00b      	beq.n	8009618 <_vfiprintf_r+0xa4>
 8009600:	465b      	mov	r3, fp
 8009602:	4622      	mov	r2, r4
 8009604:	4629      	mov	r1, r5
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ffa2 	bl	8009550 <__sfputs_r>
 800960c:	3001      	adds	r0, #1
 800960e:	f000 80a7 	beq.w	8009760 <_vfiprintf_r+0x1ec>
 8009612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009614:	445a      	add	r2, fp
 8009616:	9209      	str	r2, [sp, #36]	@ 0x24
 8009618:	f89a 3000 	ldrb.w	r3, [sl]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 809f 	beq.w	8009760 <_vfiprintf_r+0x1ec>
 8009622:	2300      	movs	r3, #0
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962c:	f10a 0a01 	add.w	sl, sl, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009638:	931a      	str	r3, [sp, #104]	@ 0x68
 800963a:	4654      	mov	r4, sl
 800963c:	2205      	movs	r2, #5
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	4853      	ldr	r0, [pc, #332]	@ (8009790 <_vfiprintf_r+0x21c>)
 8009644:	f7f6 fdcc 	bl	80001e0 <memchr>
 8009648:	9a04      	ldr	r2, [sp, #16]
 800964a:	b9d8      	cbnz	r0, 8009684 <_vfiprintf_r+0x110>
 800964c:	06d1      	lsls	r1, r2, #27
 800964e:	bf44      	itt	mi
 8009650:	2320      	movmi	r3, #32
 8009652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009656:	0713      	lsls	r3, r2, #28
 8009658:	bf44      	itt	mi
 800965a:	232b      	movmi	r3, #43	@ 0x2b
 800965c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009660:	f89a 3000 	ldrb.w	r3, [sl]
 8009664:	2b2a      	cmp	r3, #42	@ 0x2a
 8009666:	d015      	beq.n	8009694 <_vfiprintf_r+0x120>
 8009668:	9a07      	ldr	r2, [sp, #28]
 800966a:	4654      	mov	r4, sl
 800966c:	2000      	movs	r0, #0
 800966e:	f04f 0c0a 	mov.w	ip, #10
 8009672:	4621      	mov	r1, r4
 8009674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009678:	3b30      	subs	r3, #48	@ 0x30
 800967a:	2b09      	cmp	r3, #9
 800967c:	d94b      	bls.n	8009716 <_vfiprintf_r+0x1a2>
 800967e:	b1b0      	cbz	r0, 80096ae <_vfiprintf_r+0x13a>
 8009680:	9207      	str	r2, [sp, #28]
 8009682:	e014      	b.n	80096ae <_vfiprintf_r+0x13a>
 8009684:	eba0 0308 	sub.w	r3, r0, r8
 8009688:	fa09 f303 	lsl.w	r3, r9, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	46a2      	mov	sl, r4
 8009692:	e7d2      	b.n	800963a <_vfiprintf_r+0xc6>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	1d19      	adds	r1, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	9103      	str	r1, [sp, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfbb      	ittet	lt
 80096a0:	425b      	neglt	r3, r3
 80096a2:	f042 0202 	orrlt.w	r2, r2, #2
 80096a6:	9307      	strge	r3, [sp, #28]
 80096a8:	9307      	strlt	r3, [sp, #28]
 80096aa:	bfb8      	it	lt
 80096ac:	9204      	strlt	r2, [sp, #16]
 80096ae:	7823      	ldrb	r3, [r4, #0]
 80096b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096b2:	d10a      	bne.n	80096ca <_vfiprintf_r+0x156>
 80096b4:	7863      	ldrb	r3, [r4, #1]
 80096b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b8:	d132      	bne.n	8009720 <_vfiprintf_r+0x1ac>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	9203      	str	r2, [sp, #12]
 80096c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096c6:	3402      	adds	r4, #2
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097a0 <_vfiprintf_r+0x22c>
 80096ce:	7821      	ldrb	r1, [r4, #0]
 80096d0:	2203      	movs	r2, #3
 80096d2:	4650      	mov	r0, sl
 80096d4:	f7f6 fd84 	bl	80001e0 <memchr>
 80096d8:	b138      	cbz	r0, 80096ea <_vfiprintf_r+0x176>
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	eba0 000a 	sub.w	r0, r0, sl
 80096e0:	2240      	movs	r2, #64	@ 0x40
 80096e2:	4082      	lsls	r2, r0
 80096e4:	4313      	orrs	r3, r2
 80096e6:	3401      	adds	r4, #1
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ee:	4829      	ldr	r0, [pc, #164]	@ (8009794 <_vfiprintf_r+0x220>)
 80096f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f4:	2206      	movs	r2, #6
 80096f6:	f7f6 fd73 	bl	80001e0 <memchr>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d03f      	beq.n	800977e <_vfiprintf_r+0x20a>
 80096fe:	4b26      	ldr	r3, [pc, #152]	@ (8009798 <_vfiprintf_r+0x224>)
 8009700:	bb1b      	cbnz	r3, 800974a <_vfiprintf_r+0x1d6>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	3307      	adds	r3, #7
 8009706:	f023 0307 	bic.w	r3, r3, #7
 800970a:	3308      	adds	r3, #8
 800970c:	9303      	str	r3, [sp, #12]
 800970e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009710:	443b      	add	r3, r7
 8009712:	9309      	str	r3, [sp, #36]	@ 0x24
 8009714:	e76a      	b.n	80095ec <_vfiprintf_r+0x78>
 8009716:	fb0c 3202 	mla	r2, ip, r2, r3
 800971a:	460c      	mov	r4, r1
 800971c:	2001      	movs	r0, #1
 800971e:	e7a8      	b.n	8009672 <_vfiprintf_r+0xfe>
 8009720:	2300      	movs	r3, #0
 8009722:	3401      	adds	r4, #1
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	4619      	mov	r1, r3
 8009728:	f04f 0c0a 	mov.w	ip, #10
 800972c:	4620      	mov	r0, r4
 800972e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009732:	3a30      	subs	r2, #48	@ 0x30
 8009734:	2a09      	cmp	r2, #9
 8009736:	d903      	bls.n	8009740 <_vfiprintf_r+0x1cc>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0c6      	beq.n	80096ca <_vfiprintf_r+0x156>
 800973c:	9105      	str	r1, [sp, #20]
 800973e:	e7c4      	b.n	80096ca <_vfiprintf_r+0x156>
 8009740:	fb0c 2101 	mla	r1, ip, r1, r2
 8009744:	4604      	mov	r4, r0
 8009746:	2301      	movs	r3, #1
 8009748:	e7f0      	b.n	800972c <_vfiprintf_r+0x1b8>
 800974a:	ab03      	add	r3, sp, #12
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	462a      	mov	r2, r5
 8009750:	4b12      	ldr	r3, [pc, #72]	@ (800979c <_vfiprintf_r+0x228>)
 8009752:	a904      	add	r1, sp, #16
 8009754:	4630      	mov	r0, r6
 8009756:	f7fb feb9 	bl	80054cc <_printf_float>
 800975a:	4607      	mov	r7, r0
 800975c:	1c78      	adds	r0, r7, #1
 800975e:	d1d6      	bne.n	800970e <_vfiprintf_r+0x19a>
 8009760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009762:	07d9      	lsls	r1, r3, #31
 8009764:	d405      	bmi.n	8009772 <_vfiprintf_r+0x1fe>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	059a      	lsls	r2, r3, #22
 800976a:	d402      	bmi.n	8009772 <_vfiprintf_r+0x1fe>
 800976c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800976e:	f7fc fe1d 	bl	80063ac <__retarget_lock_release_recursive>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	065b      	lsls	r3, r3, #25
 8009776:	f53f af1f 	bmi.w	80095b8 <_vfiprintf_r+0x44>
 800977a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800977c:	e71e      	b.n	80095bc <_vfiprintf_r+0x48>
 800977e:	ab03      	add	r3, sp, #12
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	462a      	mov	r2, r5
 8009784:	4b05      	ldr	r3, [pc, #20]	@ (800979c <_vfiprintf_r+0x228>)
 8009786:	a904      	add	r1, sp, #16
 8009788:	4630      	mov	r0, r6
 800978a:	f7fc f937 	bl	80059fc <_printf_i>
 800978e:	e7e4      	b.n	800975a <_vfiprintf_r+0x1e6>
 8009790:	08009e29 	.word	0x08009e29
 8009794:	08009e33 	.word	0x08009e33
 8009798:	080054cd 	.word	0x080054cd
 800979c:	08009551 	.word	0x08009551
 80097a0:	08009e2f 	.word	0x08009e2f

080097a4 <__swbuf_r>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	460e      	mov	r6, r1
 80097a8:	4614      	mov	r4, r2
 80097aa:	4605      	mov	r5, r0
 80097ac:	b118      	cbz	r0, 80097b6 <__swbuf_r+0x12>
 80097ae:	6a03      	ldr	r3, [r0, #32]
 80097b0:	b90b      	cbnz	r3, 80097b6 <__swbuf_r+0x12>
 80097b2:	f7fc fce3 	bl	800617c <__sinit>
 80097b6:	69a3      	ldr	r3, [r4, #24]
 80097b8:	60a3      	str	r3, [r4, #8]
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	071a      	lsls	r2, r3, #28
 80097be:	d501      	bpl.n	80097c4 <__swbuf_r+0x20>
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	b943      	cbnz	r3, 80097d6 <__swbuf_r+0x32>
 80097c4:	4621      	mov	r1, r4
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 f82a 	bl	8009820 <__swsetup_r>
 80097cc:	b118      	cbz	r0, 80097d6 <__swbuf_r+0x32>
 80097ce:	f04f 37ff 	mov.w	r7, #4294967295
 80097d2:	4638      	mov	r0, r7
 80097d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	1a98      	subs	r0, r3, r2
 80097dc:	6963      	ldr	r3, [r4, #20]
 80097de:	b2f6      	uxtb	r6, r6
 80097e0:	4283      	cmp	r3, r0
 80097e2:	4637      	mov	r7, r6
 80097e4:	dc05      	bgt.n	80097f2 <__swbuf_r+0x4e>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	f7ff fa47 	bl	8008c7c <_fflush_r>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d1ed      	bne.n	80097ce <__swbuf_r+0x2a>
 80097f2:	68a3      	ldr	r3, [r4, #8]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	60a3      	str	r3, [r4, #8]
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	6022      	str	r2, [r4, #0]
 80097fe:	701e      	strb	r6, [r3, #0]
 8009800:	6962      	ldr	r2, [r4, #20]
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	429a      	cmp	r2, r3
 8009806:	d004      	beq.n	8009812 <__swbuf_r+0x6e>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	07db      	lsls	r3, r3, #31
 800980c:	d5e1      	bpl.n	80097d2 <__swbuf_r+0x2e>
 800980e:	2e0a      	cmp	r6, #10
 8009810:	d1df      	bne.n	80097d2 <__swbuf_r+0x2e>
 8009812:	4621      	mov	r1, r4
 8009814:	4628      	mov	r0, r5
 8009816:	f7ff fa31 	bl	8008c7c <_fflush_r>
 800981a:	2800      	cmp	r0, #0
 800981c:	d0d9      	beq.n	80097d2 <__swbuf_r+0x2e>
 800981e:	e7d6      	b.n	80097ce <__swbuf_r+0x2a>

08009820 <__swsetup_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4b29      	ldr	r3, [pc, #164]	@ (80098c8 <__swsetup_r+0xa8>)
 8009824:	4605      	mov	r5, r0
 8009826:	6818      	ldr	r0, [r3, #0]
 8009828:	460c      	mov	r4, r1
 800982a:	b118      	cbz	r0, 8009834 <__swsetup_r+0x14>
 800982c:	6a03      	ldr	r3, [r0, #32]
 800982e:	b90b      	cbnz	r3, 8009834 <__swsetup_r+0x14>
 8009830:	f7fc fca4 	bl	800617c <__sinit>
 8009834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009838:	0719      	lsls	r1, r3, #28
 800983a:	d422      	bmi.n	8009882 <__swsetup_r+0x62>
 800983c:	06da      	lsls	r2, r3, #27
 800983e:	d407      	bmi.n	8009850 <__swsetup_r+0x30>
 8009840:	2209      	movs	r2, #9
 8009842:	602a      	str	r2, [r5, #0]
 8009844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	e033      	b.n	80098b8 <__swsetup_r+0x98>
 8009850:	0758      	lsls	r0, r3, #29
 8009852:	d512      	bpl.n	800987a <__swsetup_r+0x5a>
 8009854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009856:	b141      	cbz	r1, 800986a <__swsetup_r+0x4a>
 8009858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800985c:	4299      	cmp	r1, r3
 800985e:	d002      	beq.n	8009866 <__swsetup_r+0x46>
 8009860:	4628      	mov	r0, r5
 8009862:	f7fd fbf9 	bl	8007058 <_free_r>
 8009866:	2300      	movs	r3, #0
 8009868:	6363      	str	r3, [r4, #52]	@ 0x34
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	2300      	movs	r3, #0
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	f043 0308 	orr.w	r3, r3, #8
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	b94b      	cbnz	r3, 800989a <__swsetup_r+0x7a>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800988c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009890:	d003      	beq.n	800989a <__swsetup_r+0x7a>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f000 f883 	bl	80099a0 <__smakebuf_r>
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	f013 0201 	ands.w	r2, r3, #1
 80098a2:	d00a      	beq.n	80098ba <__swsetup_r+0x9a>
 80098a4:	2200      	movs	r2, #0
 80098a6:	60a2      	str	r2, [r4, #8]
 80098a8:	6962      	ldr	r2, [r4, #20]
 80098aa:	4252      	negs	r2, r2
 80098ac:	61a2      	str	r2, [r4, #24]
 80098ae:	6922      	ldr	r2, [r4, #16]
 80098b0:	b942      	cbnz	r2, 80098c4 <__swsetup_r+0xa4>
 80098b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098b6:	d1c5      	bne.n	8009844 <__swsetup_r+0x24>
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	0799      	lsls	r1, r3, #30
 80098bc:	bf58      	it	pl
 80098be:	6962      	ldrpl	r2, [r4, #20]
 80098c0:	60a2      	str	r2, [r4, #8]
 80098c2:	e7f4      	b.n	80098ae <__swsetup_r+0x8e>
 80098c4:	2000      	movs	r0, #0
 80098c6:	e7f7      	b.n	80098b8 <__swsetup_r+0x98>
 80098c8:	20000038 	.word	0x20000038

080098cc <_raise_r>:
 80098cc:	291f      	cmp	r1, #31
 80098ce:	b538      	push	{r3, r4, r5, lr}
 80098d0:	4605      	mov	r5, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	d904      	bls.n	80098e0 <_raise_r+0x14>
 80098d6:	2316      	movs	r3, #22
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098e2:	b112      	cbz	r2, 80098ea <_raise_r+0x1e>
 80098e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e8:	b94b      	cbnz	r3, 80098fe <_raise_r+0x32>
 80098ea:	4628      	mov	r0, r5
 80098ec:	f000 f830 	bl	8009950 <_getpid_r>
 80098f0:	4622      	mov	r2, r4
 80098f2:	4601      	mov	r1, r0
 80098f4:	4628      	mov	r0, r5
 80098f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098fa:	f000 b817 	b.w	800992c <_kill_r>
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d00a      	beq.n	8009918 <_raise_r+0x4c>
 8009902:	1c59      	adds	r1, r3, #1
 8009904:	d103      	bne.n	800990e <_raise_r+0x42>
 8009906:	2316      	movs	r3, #22
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	2001      	movs	r0, #1
 800990c:	e7e7      	b.n	80098de <_raise_r+0x12>
 800990e:	2100      	movs	r1, #0
 8009910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009914:	4620      	mov	r0, r4
 8009916:	4798      	blx	r3
 8009918:	2000      	movs	r0, #0
 800991a:	e7e0      	b.n	80098de <_raise_r+0x12>

0800991c <raise>:
 800991c:	4b02      	ldr	r3, [pc, #8]	@ (8009928 <raise+0xc>)
 800991e:	4601      	mov	r1, r0
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	f7ff bfd3 	b.w	80098cc <_raise_r>
 8009926:	bf00      	nop
 8009928:	20000038 	.word	0x20000038

0800992c <_kill_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d07      	ldr	r5, [pc, #28]	@ (800994c <_kill_r+0x20>)
 8009930:	2300      	movs	r3, #0
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	4611      	mov	r1, r2
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	f7f7 fe38 	bl	80015ae <_kill>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	d102      	bne.n	8009948 <_kill_r+0x1c>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	b103      	cbz	r3, 8009948 <_kill_r+0x1c>
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	bf00      	nop
 800994c:	200004c4 	.word	0x200004c4

08009950 <_getpid_r>:
 8009950:	f7f7 be25 	b.w	800159e <_getpid>

08009954 <__swhatbuf_r>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	460c      	mov	r4, r1
 8009958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995c:	2900      	cmp	r1, #0
 800995e:	b096      	sub	sp, #88	@ 0x58
 8009960:	4615      	mov	r5, r2
 8009962:	461e      	mov	r6, r3
 8009964:	da0d      	bge.n	8009982 <__swhatbuf_r+0x2e>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800996c:	f04f 0100 	mov.w	r1, #0
 8009970:	bf14      	ite	ne
 8009972:	2340      	movne	r3, #64	@ 0x40
 8009974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009978:	2000      	movs	r0, #0
 800997a:	6031      	str	r1, [r6, #0]
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	b016      	add	sp, #88	@ 0x58
 8009980:	bd70      	pop	{r4, r5, r6, pc}
 8009982:	466a      	mov	r2, sp
 8009984:	f000 f848 	bl	8009a18 <_fstat_r>
 8009988:	2800      	cmp	r0, #0
 800998a:	dbec      	blt.n	8009966 <__swhatbuf_r+0x12>
 800998c:	9901      	ldr	r1, [sp, #4]
 800998e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009996:	4259      	negs	r1, r3
 8009998:	4159      	adcs	r1, r3
 800999a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800999e:	e7eb      	b.n	8009978 <__swhatbuf_r+0x24>

080099a0 <__smakebuf_r>:
 80099a0:	898b      	ldrh	r3, [r1, #12]
 80099a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099a4:	079d      	lsls	r5, r3, #30
 80099a6:	4606      	mov	r6, r0
 80099a8:	460c      	mov	r4, r1
 80099aa:	d507      	bpl.n	80099bc <__smakebuf_r+0x1c>
 80099ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	2301      	movs	r3, #1
 80099b6:	6163      	str	r3, [r4, #20]
 80099b8:	b003      	add	sp, #12
 80099ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099bc:	ab01      	add	r3, sp, #4
 80099be:	466a      	mov	r2, sp
 80099c0:	f7ff ffc8 	bl	8009954 <__swhatbuf_r>
 80099c4:	9f00      	ldr	r7, [sp, #0]
 80099c6:	4605      	mov	r5, r0
 80099c8:	4639      	mov	r1, r7
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7fd fbb8 	bl	8007140 <_malloc_r>
 80099d0:	b948      	cbnz	r0, 80099e6 <__smakebuf_r+0x46>
 80099d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d6:	059a      	lsls	r2, r3, #22
 80099d8:	d4ee      	bmi.n	80099b8 <__smakebuf_r+0x18>
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	f043 0302 	orr.w	r3, r3, #2
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	e7e2      	b.n	80099ac <__smakebuf_r+0xc>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	6020      	str	r0, [r4, #0]
 80099ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ee:	81a3      	strh	r3, [r4, #12]
 80099f0:	9b01      	ldr	r3, [sp, #4]
 80099f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099f6:	b15b      	cbz	r3, 8009a10 <__smakebuf_r+0x70>
 80099f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099fc:	4630      	mov	r0, r6
 80099fe:	f000 f81d 	bl	8009a3c <_isatty_r>
 8009a02:	b128      	cbz	r0, 8009a10 <__smakebuf_r+0x70>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f023 0303 	bic.w	r3, r3, #3
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	431d      	orrs	r5, r3
 8009a14:	81a5      	strh	r5, [r4, #12]
 8009a16:	e7cf      	b.n	80099b8 <__smakebuf_r+0x18>

08009a18 <_fstat_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d07      	ldr	r5, [pc, #28]	@ (8009a38 <_fstat_r+0x20>)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	f7f7 fe22 	bl	800166e <_fstat>
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	d102      	bne.n	8009a34 <_fstat_r+0x1c>
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	b103      	cbz	r3, 8009a34 <_fstat_r+0x1c>
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	bd38      	pop	{r3, r4, r5, pc}
 8009a36:	bf00      	nop
 8009a38:	200004c4 	.word	0x200004c4

08009a3c <_isatty_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	@ (8009a58 <_isatty_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f7 fe21 	bl	800168e <_isatty>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_isatty_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_isatty_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	200004c4 	.word	0x200004c4

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
