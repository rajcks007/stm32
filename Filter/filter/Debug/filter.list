
filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009978  08009978  0000a978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009de0  08009de0  0000ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de8  08009de8  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dec  08009dec  0000adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009df0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e4  2**0
                  CONTENTS
 10 .bss          000002d0  200001e4  200001e4  0000b1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  0000b1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6d4  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e8  00000000  00000000  000198e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0001b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095c  00000000  00000000  0001c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224cb  00000000  00000000  0001cf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e91  00000000  00000000  0003f41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfa75  00000000  00000000  000502b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011fd25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004700  00000000  00000000  0011fd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00124468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800995c 	.word	0x0800995c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800995c 	.word	0x0800995c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f000 fccb 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f841 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f000 f9a1 	bl	8001058 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d16:	f000 f96f 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d1a:	f000 f899 	bl	8000e50 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d1e:	f000 f907 	bl	8000f30 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000d22:	f000 f92f 	bl	8000f84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000d26:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <main+0x84>)
 8000d28:	f000 ff1c 	bl	8001b64 <HAL_ADC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4817      	ldr	r0, [pc, #92]	@ (8000d8c <main+0x88>)
 8000d30:	f001 ff10 	bl	8002b54 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <main+0x84>)
 8000d3a:	f001 f829 	bl	8001d90 <HAL_ADC_PollForConversion>
	  // Get ADC value
	  uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <main+0x84>)
 8000d40:	f001 f928 	bl	8001f94 <HAL_ADC_GetValue>
 8000d44:	4603      	mov	r3, r0
 8000d46:	81fb      	strh	r3, [r7, #14]


	  // Scale it to a floating point value (adjust the scaling if needed)
	  float x0 = (float)adc_value;  // Example scaling for 12-bit ADC
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d52:	edc7 7a02 	vstr	s15, [r7, #8]

	  // Apply high-pass filter to the low-pass output
	  float high_pass_output = high_pass_filter(x0) + 550;
 8000d56:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d5a:	f000 f9cf 	bl	80010fc <high_pass_filter>
 8000d5e:	eef0 7a40 	vmov.f32	s15, s0
 8000d62:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000d90 <main+0x8c>
 8000d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d6a:	edc7 7a01 	vstr	s15, [r7, #4]
//	  float band_stop = (low_pass_output - high_pass_output);



	  // Write ADC value to DAC
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, high_pass_output);
 8000d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <main+0x88>)
 8000d80:	f001 fec3 	bl	8002b0a <HAL_DAC_SetValue>
  {
 8000d84:	bf00      	nop
 8000d86:	e7d5      	b.n	8000d34 <main+0x30>
 8000d88:	20000210 	.word	0x20000210
 8000d8c:	20000260 	.word	0x20000260
 8000d90:	44098000 	.word	0x44098000

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0a6      	sub	sp, #152	@ 0x98
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d9e:	2228      	movs	r2, #40	@ 0x28
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fa03 	bl	80061ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2258      	movs	r2, #88	@ 0x58
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 f9f5 	bl	80061ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000de4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 f8d0 	bl	8002f98 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 f9f7 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e12:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f90e 	bl	8004040 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e2a:	f000 f9e1 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fb21 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e44:	f000 f9d4 	bl	80011f0 <Error_Handler>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	3798      	adds	r7, #152	@ 0x98
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ece:	4817      	ldr	r0, [pc, #92]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000ed0:	f000 fc4e 	bl	8001770 <HAL_ADC_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eda:	f000 f989 	bl	80011f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4810      	ldr	r0, [pc, #64]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000eea:	f001 fb4b 	bl	8002584 <HAL_ADCEx_MultiModeConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ef4:	f000 f97c 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_ADC1_Init+0xdc>)
 8000f16:	f001 f84b 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000f20:	f000 f966 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	@ 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000210 	.word	0x20000210

08000f30 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_DAC1_Init+0x4c>)
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <MX_DAC1_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <MX_DAC1_Init+0x4c>)
 8000f48:	f001 fdbd 	bl	8002ac6 <HAL_DAC_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000f52:	f000 f94d 	bl	80011f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_DAC1_Init+0x4c>)
 8000f66:	f001 fe40 	bl	8002bea <HAL_DAC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000f70:	f000 f93e 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000260 	.word	0x20000260
 8000f80:	40007400 	.word	0x40007400

08000f84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff4 <MX_SPI1_Init+0x70>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000f9c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000fa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fca:	2207      	movs	r2, #7
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_SPI1_Init+0x6c>)
 8000fdc:	f003 fc6e 	bl	80048bc <HAL_SPI_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000fe6:	f000 f903 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000274 	.word	0x20000274
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <MX_USART2_UART_Init+0x5c>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001004:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800103c:	f003 fce9 	bl	8004a12 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001046:	f000 f8d3 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200002d8 	.word	0x200002d8
 8001054:	40004400 	.word	0x40004400

08001058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a20      	ldr	r2, [pc, #128]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 8001074:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a1a      	ldr	r2, [pc, #104]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001090:	6153      	str	r3, [r2, #20]
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_GPIO_Init+0x9c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_GPIO_Init+0xa0>)
 80010e6:	f001 fdcd 	bl	8002c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	@ 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000800 	.word	0x48000800

080010fc <high_pass_filter>:

    return y_lp[0];  // Return filtered output
}

// High-pass filter function
float high_pass_filter(float x0) {
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
    // Shift old samples in the buffer
    for (int i = FILTER_ORDER; i > 0; i--) {
 8001106:	2301      	movs	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e018      	b.n	800113e <high_pass_filter+0x42>
        x_hp[i] = x_hp[i - 1];
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3b01      	subs	r3, #1
 8001110:	4a33      	ldr	r2, [pc, #204]	@ (80011e0 <high_pass_filter+0xe4>)
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4931      	ldr	r1, [pc, #196]	@ (80011e0 <high_pass_filter+0xe4>)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	601a      	str	r2, [r3, #0]
        y_hp[i] = y_hp[i - 1];
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <high_pass_filter+0xe8>)
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	492d      	ldr	r1, [pc, #180]	@ (80011e4 <high_pass_filter+0xe8>)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	601a      	str	r2, [r3, #0]
    for (int i = FILTER_ORDER; i > 0; i--) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3b01      	subs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	dce3      	bgt.n	800110c <high_pass_filter+0x10>
    }

    // Add new input sample to the buffer
    x_hp[0] = x0;
 8001144:	4a26      	ldr	r2, [pc, #152]	@ (80011e0 <high_pass_filter+0xe4>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]

    // Apply the difference equation (numerator and denominator)
    y_hp[0] = b_hp[0] * x_hp[0];
 800114a:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <high_pass_filter+0xec>)
 800114c:	ed93 7a00 	vldr	s14, [r3]
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <high_pass_filter+0xe4>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <high_pass_filter+0xe8>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < FILTER_ORDER + 1; i++) {
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e02e      	b.n	80011c4 <high_pass_filter+0xc8>
        y_hp[0] += b_hp[i] * x_hp[i];
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <high_pass_filter+0xe8>)
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <high_pass_filter+0xec>)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <high_pass_filter+0xe4>)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <high_pass_filter+0xe8>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
        y_hp[0] -= a_hp[i] * y_hp[i];
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <high_pass_filter+0xe8>)
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <high_pass_filter+0xf0>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	edd3 6a00 	vldr	s13, [r3]
 80011a4:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <high_pass_filter+0xe8>)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <high_pass_filter+0xe8>)
 80011ba:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 1; i < FILTER_ORDER + 1; i++) {
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	3301      	adds	r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	ddcd      	ble.n	8001166 <high_pass_filter+0x6a>
    }

    return y_hp[0];  // Return filtered output
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <high_pass_filter+0xe8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	ee07 3a90 	vmov	s15, r3
}
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000200 	.word	0x20000200
 80011e4:	20000208 	.word	0x20000208
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <Error_Handler+0x8>

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <HAL_MspInit+0x44>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <HAL_MspInit+0x44>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001232:	2007      	movs	r0, #7
 8001234:	f001 fc14 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001264:	d124      	bne.n	80012b0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001296:	2301      	movs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ac:	f001 fcea 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <HAL_DAC_MspInit+0x74>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d124      	bne.n	8001328 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_DAC_MspInit+0x78>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <HAL_DAC_MspInit+0x78>)
 80012e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_DAC_MspInit+0x78>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_DAC_MspInit+0x78>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <HAL_DAC_MspInit+0x78>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_DAC_MspInit+0x78>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001324:	f001 fcae 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40007400 	.word	0x40007400
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_SPI_MspInit+0x7c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d128      	bne.n	80013ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HAL_SPI_MspInit+0x80>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a16      	ldr	r2, [pc, #88]	@ (80013b8 <HAL_SPI_MspInit+0x80>)
 8001360:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001364:	6193      	str	r3, [r2, #24]
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_SPI_MspInit+0x80>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <HAL_SPI_MspInit+0x80>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <HAL_SPI_MspInit+0x80>)
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	6153      	str	r3, [r2, #20]
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_SPI_MspInit+0x80>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800138a:	2360      	movs	r3, #96	@ 0x60
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139a:	2305      	movs	r3, #5
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a8:	f001 fc6c 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40013000 	.word	0x40013000
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_UART_MspInit+0x7c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d128      	bne.n	8001430 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_UART_MspInit+0x80>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a16      	ldr	r2, [pc, #88]	@ (800143c <HAL_UART_MspInit+0x80>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_UART_MspInit+0x80>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x80>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_UART_MspInit+0x80>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_UART_MspInit+0x80>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f001 fc2a 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f94b 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}

0800149e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_kill>:

int _kill(int pid, int sig)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b8:	f004 fecc 	bl	8006254 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	2216      	movs	r2, #22
 80014c0:	601a      	str	r2, [r3, #0]
  return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_exit>:

void _exit (int status)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d6:	f04f 31ff 	mov.w	r1, #4294967295
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffe7 	bl	80014ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <_exit+0x12>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
  }

  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e009      	b.n	8001544 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf1      	blt.n	8001530 <_write+0x12>
  }
  return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_close>:

int _close(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157e:	605a      	str	r2, [r3, #4]
  return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f004 fe30 	bl	8006254 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20010000 	.word	0x20010000
 8001620:	00000400 	.word	0x00000400
 8001624:	20000360 	.word	0x20000360
 8001628:	200004b8 	.word	0x200004b8

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f004 fdef 	bl	8006260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7ff fb3f 	bl	8000d04 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001688:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001694:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 8001698:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800169c:	200004b4 	.word	0x200004b4

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_Init+0x28>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_Init+0x28>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f001 f9d3 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fd9c 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 f9dd 	bl	8002aae <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f001 f9b3 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	@ (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000010 	.word	0x20000010
 8001728:	20000018 	.word	0x20000018
 800172c:	20000014 	.word	0x20000014

08001730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000018 	.word	0x20000018
 8001754:	20000364 	.word	0x20000364

08001758 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;  
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000364 	.word	0x20000364

08001770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	@ 0x68
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e1e3      	b.n	8001b58 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d176      	bne.n	8001890 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d152      	bne.n	8001850 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fd3d 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d13b      	bne.n	8001850 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f001 f829 	bl	8002830 <ADC_Disable>
 80017de:	4603      	mov	r3, r0
 80017e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d12f      	bne.n	8001850 <HAL_ADC_Init+0xe0>
 80017f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d12b      	bne.n	8001850 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001800:	f023 0302 	bic.w	r3, r3, #2
 8001804:	f043 0202 	orr.w	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800181a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800182a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800182c:	4b92      	ldr	r3, [pc, #584]	@ (8001a78 <HAL_ADC_Init+0x308>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a92      	ldr	r2, [pc, #584]	@ (8001a7c <HAL_ADC_Init+0x30c>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9a      	lsrs	r2, r3, #18
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001842:	e002      	b.n	800184a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3b01      	subs	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800186c:	d110      	bne.n	8001890 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f023 0312 	bic.w	r3, r3, #18
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 8150 	bne.w	8001b3e <HAL_ADC_Init+0x3ce>
 800189e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 814b 	bne.w	8001b3e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 8143 	bne.w	8001b3e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018c0:	f043 0202 	orr.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d0:	d004      	beq.n	80018dc <HAL_ADC_Init+0x16c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001a80 <HAL_ADC_Init+0x310>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_Init+0x170>
 80018dc:	4b69      	ldr	r3, [pc, #420]	@ (8001a84 <HAL_ADC_Init+0x314>)
 80018de:	e000      	b.n	80018e2 <HAL_ADC_Init+0x172>
 80018e0:	4b69      	ldr	r3, [pc, #420]	@ (8001a88 <HAL_ADC_Init+0x318>)
 80018e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ec:	d102      	bne.n	80018f4 <HAL_ADC_Init+0x184>
 80018ee:	4b64      	ldr	r3, [pc, #400]	@ (8001a80 <HAL_ADC_Init+0x310>)
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e01a      	b.n	800192a <HAL_ADC_Init+0x1ba>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a61      	ldr	r2, [pc, #388]	@ (8001a80 <HAL_ADC_Init+0x310>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d103      	bne.n	8001906 <HAL_ADC_Init+0x196>
 80018fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e011      	b.n	800192a <HAL_ADC_Init+0x1ba>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a60      	ldr	r2, [pc, #384]	@ (8001a8c <HAL_ADC_Init+0x31c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d102      	bne.n	8001916 <HAL_ADC_Init+0x1a6>
 8001910:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <HAL_ADC_Init+0x320>)
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e009      	b.n	800192a <HAL_ADC_Init+0x1ba>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5d      	ldr	r2, [pc, #372]	@ (8001a90 <HAL_ADC_Init+0x320>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d102      	bne.n	8001926 <HAL_ADC_Init+0x1b6>
 8001920:	4b5a      	ldr	r3, [pc, #360]	@ (8001a8c <HAL_ADC_Init+0x31c>)
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e001      	b.n	800192a <HAL_ADC_Init+0x1ba>
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d108      	bne.n	800194a <HAL_ADC_Init+0x1da>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x1da>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_ADC_Init+0x1dc>
 800194a:	2300      	movs	r3, #0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11c      	bne.n	800198a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001950:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d010      	beq.n	8001978 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_ADC_Init+0x202>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x202>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_ADC_Init+0x204>
 8001972:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001974:	2b00      	cmp	r3, #0
 8001976:	d108      	bne.n	800198a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	431a      	orrs	r2, r3
 8001986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001988:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7e5b      	ldrb	r3, [r3, #25]
 800198e:	035b      	lsls	r3, r3, #13
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001994:	2a01      	cmp	r2, #1
 8001996:	d002      	beq.n	800199e <HAL_ADC_Init+0x22e>
 8001998:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800199c:	e000      	b.n	80019a0 <HAL_ADC_Init+0x230>
 800199e:	2200      	movs	r2, #0
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019b0:	4313      	orrs	r3, r2
 80019b2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d11b      	bne.n	80019f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7e5b      	ldrb	r3, [r3, #25]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	045a      	lsls	r2, r3, #17
 80019ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80019d8:	e00d      	b.n	80019f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80019e2:	f043 0220 	orr.w	r2, r3, #32
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d054      	beq.n	8001aa8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a22      	ldr	r2, [pc, #136]	@ (8001a8c <HAL_ADC_Init+0x31c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d004      	beq.n	8001a12 <HAL_ADC_Init+0x2a2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	@ (8001a90 <HAL_ADC_Init+0x320>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d140      	bne.n	8001a94 <HAL_ADC_Init+0x324>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001a1a:	d02a      	beq.n	8001a72 <HAL_ADC_Init+0x302>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a24:	d022      	beq.n	8001a6c <HAL_ADC_Init+0x2fc>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001a2e:	d01a      	beq.n	8001a66 <HAL_ADC_Init+0x2f6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001a38:	d012      	beq.n	8001a60 <HAL_ADC_Init+0x2f0>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001a42:	d00a      	beq.n	8001a5a <HAL_ADC_Init+0x2ea>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_Init+0x2e4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a52:	e023      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a58:	e020      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a5e:	e01d      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a64:	e01a      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a6a:	e017      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a6c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001a70:	e014      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a72:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a76:	e011      	b.n	8001a9c <HAL_ADC_Init+0x32c>
 8001a78:	20000010 	.word	0x20000010
 8001a7c:	431bde83 	.word	0x431bde83
 8001a80:	50000100 	.word	0x50000100
 8001a84:	50000300 	.word	0x50000300
 8001a88:	50000700 	.word	0x50000700
 8001a8c:	50000400 	.word	0x50000400
 8001a90:	50000500 	.word	0x50000500
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d114      	bne.n	8001ae0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ac4:	f023 0302 	bic.w	r3, r3, #2
 8001ac8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e1b      	ldrb	r3, [r3, #24]
 8001ace:	039a      	lsls	r2, r3, #14
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001adc:	4313      	orrs	r3, r2
 8001ade:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_ADC_Init+0x3f0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001af0:	430b      	orrs	r3, r1
 8001af2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d10c      	bne.n	8001b16 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f023 010f 	bic.w	r1, r3, #15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b14:	e007      	b.n	8001b26 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 020f 	bic.w	r2, r2, #15
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f023 0303 	bic.w	r3, r3, #3
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b3c:	e00a      	b.n	8001b54 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f023 0312 	bic.w	r3, r3, #18
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3768      	adds	r7, #104	@ 0x68
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	fff0c007 	.word	0xfff0c007

08001b64 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80f9 	bne.w	8001d72 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Start+0x2a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e0f4      	b.n	8001d78 <HAL_ADC_Start+0x214>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fde6 	bl	8002768 <ADC_Enable>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80e0 	bne.w	8001d68 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bc4:	d004      	beq.n	8001bd0 <HAL_ADC_Start+0x6c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6d      	ldr	r2, [pc, #436]	@ (8001d80 <HAL_ADC_Start+0x21c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d106      	bne.n	8001bde <HAL_ADC_Start+0x7a>
 8001bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d84 <HAL_ADC_Start+0x220>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_ADC_Start+0x9a>
 8001bdc:	e005      	b.n	8001bea <HAL_ADC_Start+0x86>
 8001bde:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_ADC_Start+0x224>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_ADC_Start+0x9a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_Start+0x9a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a64      	ldr	r2, [pc, #400]	@ (8001d8c <HAL_ADC_Start+0x228>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d115      	bne.n	8001c2a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d036      	beq.n	8001c86 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c28:	e02d      	b.n	8001c86 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3e:	d004      	beq.n	8001c4a <HAL_ADC_Start+0xe6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	@ (8001d80 <HAL_ADC_Start+0x21c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10a      	bne.n	8001c60 <HAL_ADC_Start+0xfc>
 8001c4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf14      	ite	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	2300      	moveq	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	e008      	b.n	8001c72 <HAL_ADC_Start+0x10e>
 8001c60:	4b4a      	ldr	r3, [pc, #296]	@ (8001d8c <HAL_ADC_Start+0x228>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c92:	d106      	bne.n	8001ca2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	f023 0206 	bic.w	r2, r3, #6
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	221c      	movs	r2, #28
 8001cb6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cc0:	d004      	beq.n	8001ccc <HAL_ADC_Start+0x168>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <HAL_ADC_Start+0x21c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d106      	bne.n	8001cda <HAL_ADC_Start+0x176>
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_ADC_Start+0x220>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03e      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001cd8:	e005      	b.n	8001ce6 <HAL_ADC_Start+0x182>
 8001cda:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <HAL_ADC_Start+0x224>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d037      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Start+0x196>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a22      	ldr	r2, [pc, #136]	@ (8001d80 <HAL_ADC_Start+0x21c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d106      	bne.n	8001d08 <HAL_ADC_Start+0x1a4>
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_ADC_Start+0x220>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d027      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001d06:	e005      	b.n	8001d14 <HAL_ADC_Start+0x1b0>
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <HAL_ADC_Start+0x224>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d020      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_Start+0x1c4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_ADC_Start+0x21c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d106      	bne.n	8001d36 <HAL_ADC_Start+0x1d2>
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_ADC_Start+0x220>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d010      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001d34:	e005      	b.n	8001d42 <HAL_ADC_Start+0x1de>
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_ADC_Start+0x224>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	d009      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d4a:	d004      	beq.n	8001d56 <HAL_ADC_Start+0x1f2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_ADC_Start+0x228>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10f      	bne.n	8001d76 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0204 	orr.w	r2, r2, #4
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	e006      	b.n	8001d76 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d70:	e001      	b.n	8001d76 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	50000100 	.word	0x50000100
 8001d84:	50000300 	.word	0x50000300
 8001d88:	50000700 	.word	0x50000700
 8001d8c:	50000400 	.word	0x50000400

08001d90 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d102      	bne.n	8001dac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001da6:	2308      	movs	r3, #8
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e03a      	b.n	8001e22 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db4:	d004      	beq.n	8001dc0 <HAL_ADC_PollForConversion+0x30>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a72      	ldr	r2, [pc, #456]	@ (8001f84 <HAL_ADC_PollForConversion+0x1f4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_PollForConversion+0x34>
 8001dc0:	4b71      	ldr	r3, [pc, #452]	@ (8001f88 <HAL_ADC_PollForConversion+0x1f8>)
 8001dc2:	e000      	b.n	8001dc6 <HAL_ADC_PollForConversion+0x36>
 8001dc4:	4b71      	ldr	r3, [pc, #452]	@ (8001f8c <HAL_ADC_PollForConversion+0x1fc>)
 8001dc6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d112      	bne.n	8001dfa <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d11d      	bne.n	8001e1e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0bf      	b.n	8001f7a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0ad      	b.n	8001f7a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e1e:	230c      	movs	r3, #12
 8001e20:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e2a:	d004      	beq.n	8001e36 <HAL_ADC_PollForConversion+0xa6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a54      	ldr	r2, [pc, #336]	@ (8001f84 <HAL_ADC_PollForConversion+0x1f4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_PollForConversion+0xb4>
 8001e36:	4b54      	ldr	r3, [pc, #336]	@ (8001f88 <HAL_ADC_PollForConversion+0x1f8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d010      	beq.n	8001e64 <HAL_ADC_PollForConversion+0xd4>
 8001e42:	e005      	b.n	8001e50 <HAL_ADC_PollForConversion+0xc0>
 8001e44:	4b51      	ldr	r3, [pc, #324]	@ (8001f8c <HAL_ADC_PollForConversion+0x1fc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <HAL_ADC_PollForConversion+0xd4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e58:	d004      	beq.n	8001e64 <HAL_ADC_PollForConversion+0xd4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_ADC_PollForConversion+0x200>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d104      	bne.n	8001e6e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00f      	b.n	8001e8e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e76:	d004      	beq.n	8001e82 <HAL_ADC_PollForConversion+0xf2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a41      	ldr	r2, [pc, #260]	@ (8001f84 <HAL_ADC_PollForConversion+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d102      	bne.n	8001e88 <HAL_ADC_PollForConversion+0xf8>
 8001e82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e86:	e000      	b.n	8001e8a <HAL_ADC_PollForConversion+0xfa>
 8001e88:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <HAL_ADC_PollForConversion+0x200>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001e8e:	f7ff fc63 	bl	8001758 <HAL_GetTick>
 8001e92:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e94:	e021      	b.n	8001eda <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d01d      	beq.n	8001eda <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x124>
 8001ea4:	f7ff fc58 	bl	8001758 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d212      	bcs.n	8001eda <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e04f      	b.n	8001f7a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0d6      	beq.n	8001e96 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d131      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d12c      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d125      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d112      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f4c:	e00b      	b.n	8001f66 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f043 0220 	orr.w	r2, r3, #32
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	50000100 	.word	0x50000100
 8001f88:	50000300 	.word	0x50000300
 8001f8c:	50000700 	.word	0x50000700
 8001f90:	50000400 	.word	0x50000400

08001f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b09b      	sub	sp, #108	@ 0x6c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x22>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e2c8      	b.n	8002564 <HAL_ADC_ConfigChannel+0x5b4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 82ac 	bne.w	8002542 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d81c      	bhi.n	800202c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	461a      	mov	r2, r3
 8002006:	231f      	movs	r3, #31
 8002008:	4093      	lsls	r3, r2
 800200a:	43db      	mvns	r3, r3
 800200c:	4019      	ands	r1, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa00 f203 	lsl.w	r2, r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
 800202a:	e063      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d81e      	bhi.n	8002072 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	3b1e      	subs	r3, #30
 8002048:	221f      	movs	r2, #31
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	4019      	ands	r1, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	3b1e      	subs	r3, #30
 8002064:	fa00 f203 	lsl.w	r2, r0, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002070:	e040      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b0e      	cmp	r3, #14
 8002078:	d81e      	bhi.n	80020b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	3b3c      	subs	r3, #60	@ 0x3c
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	4019      	ands	r1, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3b3c      	subs	r3, #60	@ 0x3c
 80020aa:	fa00 f203 	lsl.w	r2, r0, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80020b6:	e01d      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	3b5a      	subs	r3, #90	@ 0x5a
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4019      	ands	r1, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	3b5a      	subs	r3, #90	@ 0x5a
 80020e8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80e5 	bne.w	80022ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b09      	cmp	r3, #9
 800210a:	d91c      	bls.n	8002146 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6999      	ldr	r1, [r3, #24]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	3b1e      	subs	r3, #30
 800211e:	2207      	movs	r2, #7
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	4019      	ands	r1, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6898      	ldr	r0, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	3b1e      	subs	r3, #30
 8002138:	fa00 f203 	lsl.w	r2, r0, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	619a      	str	r2, [r3, #24]
 8002144:	e019      	b.n	800217a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6959      	ldr	r1, [r3, #20]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	2207      	movs	r2, #7
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	4019      	ands	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6898      	ldr	r0, [r3, #8]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	3b01      	subs	r3, #1
 8002198:	2b03      	cmp	r3, #3
 800219a:	d84f      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x28c>
 800219c:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a2:	bf00      	nop
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021d7 	.word	0x080021d7
 80021ac:	080021f9 	.word	0x080021f9
 80021b0:	0800221b 	.word	0x0800221b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021ba:	4b99      	ldr	r3, [pc, #612]	@ (8002420 <HAL_ADC_ConfigChannel+0x470>)
 80021bc:	4013      	ands	r3, r2
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	0691      	lsls	r1, r2, #26
 80021c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021c6:	430a      	orrs	r2, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80021d2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021d4:	e07b      	b.n	80022ce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021dc:	4b90      	ldr	r3, [pc, #576]	@ (8002420 <HAL_ADC_ConfigChannel+0x470>)
 80021de:	4013      	ands	r3, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	0691      	lsls	r1, r2, #26
 80021e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021e8:	430a      	orrs	r2, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80021f4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021f6:	e06a      	b.n	80022ce <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021fe:	4b88      	ldr	r3, [pc, #544]	@ (8002420 <HAL_ADC_ConfigChannel+0x470>)
 8002200:	4013      	ands	r3, r2
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	0691      	lsls	r1, r2, #26
 8002208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800220a:	430a      	orrs	r2, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002216:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002218:	e059      	b.n	80022ce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002220:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_ADC_ConfigChannel+0x470>)
 8002222:	4013      	ands	r3, r2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	0691      	lsls	r1, r2, #26
 800222a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800222c:	430a      	orrs	r2, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002238:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800223a:	e048      	b.n	80022ce <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002242:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	069b      	lsls	r3, r3, #26
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800225e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002266:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	069b      	lsls	r3, r3, #26
 8002270:	429a      	cmp	r2, r3
 8002272:	d107      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002282:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800228a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	069b      	lsls	r3, r3, #26
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022a6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	069b      	lsls	r3, r3, #26
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d107      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80022cc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d108      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x33e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x33e>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x340>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 8131 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00f      	beq.n	800231e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43da      	mvns	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	400a      	ands	r2, r1
 8002318:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800231c:	e049      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b09      	cmp	r3, #9
 800233e:	d91c      	bls.n	800237a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6999      	ldr	r1, [r3, #24]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	3b1b      	subs	r3, #27
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	4019      	ands	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6898      	ldr	r0, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	3b1b      	subs	r3, #27
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	619a      	str	r2, [r3, #24]
 8002378:	e01b      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6959      	ldr	r1, [r3, #20]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	2207      	movs	r2, #7
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	4019      	ands	r1, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6898      	ldr	r0, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	fa00 f203 	lsl.w	r2, r0, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ba:	d004      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x416>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a18      	ldr	r2, [pc, #96]	@ (8002424 <HAL_ADC_ConfigChannel+0x474>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x41a>
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_ADC_ConfigChannel+0x478>)
 80023c8:	e000      	b.n	80023cc <HAL_ADC_ConfigChannel+0x41c>
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_ADC_ConfigChannel+0x47c>)
 80023cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d105      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023e6:	2b11      	cmp	r3, #17
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	f040 80ac 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 80a5 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002416:	d10b      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x480>
 8002418:	4b02      	ldr	r3, [pc, #8]	@ (8002424 <HAL_ADC_ConfigChannel+0x474>)
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e023      	b.n	8002466 <HAL_ADC_ConfigChannel+0x4b6>
 800241e:	bf00      	nop
 8002420:	83fff000 	.word	0x83fff000
 8002424:	50000100 	.word	0x50000100
 8002428:	50000300 	.word	0x50000300
 800242c:	50000700 	.word	0x50000700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	@ (8002570 <HAL_ADC_ConfigChannel+0x5c0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d103      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x492>
 800243a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e011      	b.n	8002466 <HAL_ADC_ConfigChannel+0x4b6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4b      	ldr	r2, [pc, #300]	@ (8002574 <HAL_ADC_ConfigChannel+0x5c4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x4a2>
 800244c:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_ADC_ConfigChannel+0x5c8>)
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e009      	b.n	8002466 <HAL_ADC_ConfigChannel+0x4b6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a48      	ldr	r2, [pc, #288]	@ (8002578 <HAL_ADC_ConfigChannel+0x5c8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x4b2>
 800245c:	4b45      	ldr	r3, [pc, #276]	@ (8002574 <HAL_ADC_ConfigChannel+0x5c4>)
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e001      	b.n	8002466 <HAL_ADC_ConfigChannel+0x4b6>
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x4d6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x4d6>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_ADC_ConfigChannel+0x4d8>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d150      	bne.n	800252e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800248c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x4fe>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x4fe>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x500>
 80024ae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d13c      	bne.n	800252e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d11d      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x548>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024c4:	d118      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80024c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_ADC_ConfigChannel+0x5cc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <HAL_ADC_ConfigChannel+0x5d0>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024f6:	e02e      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b11      	cmp	r3, #17
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x568>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002508:	d106      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800250a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002514:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002516:	e01e      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b12      	cmp	r3, #18
 800251e:	d11a      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800252a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800252c:	e013      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002540:	e00a      	b.n	8002558 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002554:	e000      	b.n	8002558 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002556:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002564:	4618      	mov	r0, r3
 8002566:	376c      	adds	r7, #108	@ 0x6c
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	50000100 	.word	0x50000100
 8002574:	50000400 	.word	0x50000400
 8002578:	50000500 	.word	0x50000500
 800257c:	20000010 	.word	0x20000010
 8002580:	431bde83 	.word	0x431bde83

08002584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002584:	b480      	push	{r7}
 8002586:	b099      	sub	sp, #100	@ 0x64
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800259c:	d102      	bne.n	80025a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800259e:	4b6d      	ldr	r3, [pc, #436]	@ (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	e01a      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d103      	bne.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80025ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	e011      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a67      	ldr	r2, [pc, #412]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d102      	bne.n	80025c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	e009      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a64      	ldr	r2, [pc, #400]	@ (800275c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025d0:	4b61      	ldr	r3, [pc, #388]	@ (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	e001      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b0      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0a9      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 808d 	bne.w	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8086 	bne.w	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800262c:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800262e:	e000      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002630:	4b4c      	ldr	r3, [pc, #304]	@ (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002632:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d040      	beq.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800263c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800264e:	035b      	lsls	r3, r3, #13
 8002650:	430b      	orrs	r3, r1
 8002652:	431a      	orrs	r2, r3
 8002654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002656:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d15c      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800269a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800269c:	2b00      	cmp	r3, #0
 800269e:	d14b      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026bc:	e03c      	b.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d123      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800270c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	d112      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002720:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002722:	e009      	b.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002736:	e000      	b.n	800273a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002738:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002742:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002746:	4618      	mov	r0, r3
 8002748:	3764      	adds	r7, #100	@ 0x64
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	50000100 	.word	0x50000100
 8002758:	50000400 	.word	0x50000400
 800275c:	50000500 	.word	0x50000500
 8002760:	50000300 	.word	0x50000300
 8002764:	50000700 	.word	0x50000700

08002768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d108      	bne.n	8002794 <ADC_Enable+0x2c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <ADC_Enable+0x2c>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <ADC_Enable+0x2e>
 8002794:	2300      	movs	r3, #0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d143      	bne.n	8002822 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <ADC_Enable+0xc4>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f043 0210 	orr.w	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e02f      	b.n	8002824 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027d4:	f7fe ffc0 	bl	8001758 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027da:	e01b      	b.n	8002814 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027dc:	f7fe ffbc 	bl	8001758 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d914      	bls.n	8002814 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d00d      	beq.n	8002814 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e007      	b.n	8002824 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d1dc      	bne.n	80027dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	8000003f 	.word	0x8000003f

08002830 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <ADC_Disable+0x2c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <ADC_Disable+0x2c>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <ADC_Disable+0x2e>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d047      	beq.n	80028f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030d 	and.w	r3, r3, #13
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10f      	bne.n	8002890 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0202 	orr.w	r2, r2, #2
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2203      	movs	r2, #3
 8002886:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002888:	f7fe ff66 	bl	8001758 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800288e:	e029      	b.n	80028e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f043 0210 	orr.w	r2, r3, #16
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e023      	b.n	80028f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ac:	f7fe ff54 	bl	8001758 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d914      	bls.n	80028e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d10d      	bne.n	80028e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d0dc      	beq.n	80028ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	@ (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	@ (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	@ 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	@ 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff8e 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff47 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff5c 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff8e 	bl	80029b4 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5d 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffb0 	bl	8002a1c <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e014      	b.n	8002b02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fe fbe7 	bl	80012bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3308      	adds	r3, #8
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e004      	b.n	8002b3e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	795b      	ldrb	r3, [r3, #5]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_DAC_Start+0x16>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e039      	b.n	8002bde <HAL_DAC_Start+0x8a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	409a      	lsls	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002b9a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002b9c:	d118      	bne.n	8002bd0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e00f      	b.n	8002bd0 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002bba:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002bbe:	d107      	bne.n	8002bd0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0202 	orr.w	r2, r2, #2
 8002bce:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b087      	sub	sp, #28
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	795b      	ldrb	r3, [r3, #5]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_DAC_ConfigChannel+0x20>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e036      	b.n	8002c78 <HAL_DAC_ConfigChannel+0x8e>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2202      	movs	r2, #2
 8002c14:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002c1e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	22c0      	movs	r2, #192	@ 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	400a      	ands	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c92:	e160      	b.n	8002f56 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8152 	beq.w	8002f50 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d005      	beq.n	8002cc4 <HAL_GPIO_Init+0x40>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d130      	bne.n	8002d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0201 	and.w	r2, r3, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d017      	beq.n	8002d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d123      	bne.n	8002db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	08da      	lsrs	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3208      	adds	r2, #8
 8002d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	6939      	ldr	r1, [r7, #16]
 8002db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80ac 	beq.w	8002f50 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f74 <HAL_GPIO_Init+0x2f0>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f74 <HAL_GPIO_Init+0x2f0>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b5b      	ldr	r3, [pc, #364]	@ (8002f74 <HAL_GPIO_Init+0x2f0>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e10:	4a59      	ldr	r2, [pc, #356]	@ (8002f78 <HAL_GPIO_Init+0x2f4>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e3a:	d025      	beq.n	8002e88 <HAL_GPIO_Init+0x204>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a4f      	ldr	r2, [pc, #316]	@ (8002f7c <HAL_GPIO_Init+0x2f8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01f      	beq.n	8002e84 <HAL_GPIO_Init+0x200>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a4e      	ldr	r2, [pc, #312]	@ (8002f80 <HAL_GPIO_Init+0x2fc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d019      	beq.n	8002e80 <HAL_GPIO_Init+0x1fc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f84 <HAL_GPIO_Init+0x300>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_GPIO_Init+0x1f8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a4c      	ldr	r2, [pc, #304]	@ (8002f88 <HAL_GPIO_Init+0x304>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00d      	beq.n	8002e78 <HAL_GPIO_Init+0x1f4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8002f8c <HAL_GPIO_Init+0x308>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <HAL_GPIO_Init+0x1f0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a4a      	ldr	r2, [pc, #296]	@ (8002f90 <HAL_GPIO_Init+0x30c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_GPIO_Init+0x1ec>
 8002e6c:	2306      	movs	r3, #6
 8002e6e:	e00c      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e70:	2307      	movs	r3, #7
 8002e72:	e00a      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e74:	2305      	movs	r3, #5
 8002e76:	e008      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e006      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e004      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e002      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	f002 0203 	and.w	r2, r2, #3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4093      	lsls	r3, r2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9a:	4937      	ldr	r1, [pc, #220]	@ (8002f78 <HAL_GPIO_Init+0x2f4>)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ecc:	4a31      	ldr	r2, [pc, #196]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed2:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ef6:	4a27      	ldr	r2, [pc, #156]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002efc:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f20:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f26:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f4a:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f ae97 	bne.w	8002c94 <HAL_GPIO_Init+0x10>
  }
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	48000800 	.word	0x48000800
 8002f84:	48000c00 	.word	0x48000c00
 8002f88:	48001000 	.word	0x48001000
 8002f8c:	48001400 	.word	0x48001400
 8002f90:	48001800 	.word	0x48001800
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fa8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f001 b83a 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 816f 	beq.w	80032b2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fd4:	4bb5      	ldr	r3, [pc, #724]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d00c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fe0:	4bb2      	ldr	r3, [pc, #712]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d15c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x10e>
 8002fec:	4baf      	ldr	r3, [pc, #700]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff8:	d155      	bne.n	80030a6 <HAL_RCC_OscConfig+0x10e>
 8002ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ffe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800300e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0x94>
 8003026:	4ba1      	ldr	r3, [pc, #644]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	e015      	b.n	8003058 <HAL_RCC_OscConfig+0xc0>
 800302c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003030:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003040:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003044:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003048:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003054:	4b95      	ldr	r3, [pc, #596]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800305c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003060:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003064:	fa92 f2a2 	rbit	r2, r2
 8003068:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800306c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f042 0220 	orr.w	r2, r2, #32
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f002 021f 	and.w	r2, r2, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8111 	beq.w	80032b0 <HAL_RCC_OscConfig+0x318>
 800308e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 8108 	bne.w	80032b0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f000 bfc6 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12e>
 80030b8:	4b7c      	ldr	r3, [pc, #496]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a7b      	ldr	r2, [pc, #492]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e036      	b.n	8003134 <HAL_RCC_OscConfig+0x19c>
 80030c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x158>
 80030d6:	4b75      	ldr	r3, [pc, #468]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a74      	ldr	r2, [pc, #464]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b72      	ldr	r3, [pc, #456]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a71      	ldr	r2, [pc, #452]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80030e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e021      	b.n	8003134 <HAL_RCC_OscConfig+0x19c>
 80030f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x184>
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a69      	ldr	r2, [pc, #420]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b67      	ldr	r3, [pc, #412]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a66      	ldr	r2, [pc, #408]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x19c>
 800311c:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a62      	ldr	r2, [pc, #392]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b60      	ldr	r3, [pc, #384]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5f      	ldr	r2, [pc, #380]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003132:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d059      	beq.n	80031f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fb08 	bl	8001758 <HAL_GetTick>
 8003148:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314e:	f7fe fb03 	bl	8001758 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d902      	bls.n	8003164 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	f000 bf67 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
 8003164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003168:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003178:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d102      	bne.n	8003196 <HAL_RCC_OscConfig+0x1fe>
 8003190:	4b46      	ldr	r3, [pc, #280]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x22a>
 8003196:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800319a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80031aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031ae:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80031b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031c6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80031ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80031ce:	fa92 f2a2 	rbit	r2, r2
 80031d2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80031d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80031da:	fab2 f282 	clz	r2, r2
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f042 0220 	orr.w	r2, r2, #32
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	f002 021f 	and.w	r2, r2, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f202 	lsl.w	r2, r1, r2
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ab      	beq.n	800314e <HAL_RCC_OscConfig+0x1b6>
 80031f6:	e05c      	b.n	80032b2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe faae 	bl	8001758 <HAL_GetTick>
 80031fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003202:	f7fe faa9 	bl	8001758 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d902      	bls.n	8003218 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	f000 bf0d 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
 8003218:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800321c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800322c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_RCC_OscConfig+0x2b2>
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x2de>
 800324a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800324e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800325e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003262:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003266:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCC_OscConfig+0x314>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800327a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800327e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003282:	fa92 f2a2 	rbit	r2, r2
 8003286:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800328a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800328e:	fab2 f282 	clz	r2, r2
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f042 0220 	orr.w	r2, r2, #32
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f002 021f 	and.w	r2, r2, #31
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ab      	bne.n	8003202 <HAL_RCC_OscConfig+0x26a>
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_OscConfig+0x31a>
 80032ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 817f 	beq.w	80035c6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032c8:	4ba7      	ldr	r3, [pc, #668]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032d4:	4ba4      	ldr	r3, [pc, #656]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d173      	bne.n	80033c8 <HAL_RCC_OscConfig+0x430>
 80032e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ec:	d16c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x430>
 80032ee:	2302      	movs	r3, #2
 80032f0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003300:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x386>
 8003318:	4b93      	ldr	r3, [pc, #588]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e013      	b.n	8003346 <HAL_RCC_OscConfig+0x3ae>
 800331e:	2302      	movs	r3, #2
 8003320:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003330:	2302      	movs	r3, #2
 8003332:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003336:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003342:	4b89      	ldr	r3, [pc, #548]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	2202      	movs	r2, #2
 8003348:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800334c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003358:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCC_OscConfig+0x3f6>
 8003378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d002      	beq.n	800338e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f000 be52 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	21f8      	movs	r1, #248	@ 0xf8
 80033a4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80033ac:	fa91 f1a1 	rbit	r1, r1
 80033b0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80033b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80033b8:	fab1 f181 	clz	r1, r1
 80033bc:	b2c9      	uxtb	r1, r1
 80033be:	408b      	lsls	r3, r1
 80033c0:	4969      	ldr	r1, [pc, #420]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	e0fe      	b.n	80035c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8088 	beq.w	80034ea <HAL_RCC_OscConfig+0x552>
 80033da:	2301      	movs	r3, #1
 80033dc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80033ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	461a      	mov	r2, r3
 8003402:	2301      	movs	r3, #1
 8003404:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe f9a7 	bl	8001758 <HAL_GetTick>
 800340a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003410:	f7fe f9a2 	bl	8001758 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d902      	bls.n	8003426 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	f000 be06 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003438:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x4be>
 8003450:	4b45      	ldr	r3, [pc, #276]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	e013      	b.n	800347e <HAL_RCC_OscConfig+0x4e6>
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003468:	2302      	movs	r3, #2
 800346a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800346e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800347a:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	2202      	movs	r2, #2
 8003480:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003484:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003490:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0af      	beq.n	8003410 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	21f8      	movs	r1, #248	@ 0xf8
 80034c6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80034ce:	fa91 f1a1 	rbit	r1, r1
 80034d2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80034d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80034da:	fab1 f181 	clz	r1, r1
 80034de:	b2c9      	uxtb	r1, r1
 80034e0:	408b      	lsls	r3, r1
 80034e2:	4921      	ldr	r1, [pc, #132]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	e06d      	b.n	80035c6 <HAL_RCC_OscConfig+0x62e>
 80034ea:	2301      	movs	r3, #1
 80034ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80034fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800350a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	461a      	mov	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe f91f 	bl	8001758 <HAL_GetTick>
 800351a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe f91a 	bl	8001758 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d902      	bls.n	8003536 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	f000 bd7e 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
 8003536:	2302      	movs	r3, #2
 8003538:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003548:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x5d4>
 8003560:	4b01      	ldr	r3, [pc, #4]	@ (8003568 <HAL_RCC_OscConfig+0x5d0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e016      	b.n	8003594 <HAL_RCC_OscConfig+0x5fc>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	2302      	movs	r3, #2
 800356e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800357e:	2302      	movs	r3, #2
 8003580:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003584:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003590:	4bbf      	ldr	r3, [pc, #764]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	2202      	movs	r2, #2
 8003596:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800359a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800359e:	fa92 f2a2 	rbit	r2, r2
 80035a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80035a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80035aa:	fab2 f282 	clz	r2, r2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f042 0220 	orr.w	r2, r2, #32
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f002 021f 	and.w	r2, r2, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f202 	lsl.w	r2, r1, r2
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1ac      	bne.n	8003520 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8113 	beq.w	8003802 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d07c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x74e>
 80035ec:	2301      	movs	r3, #1
 80035ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80035fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	4ba2      	ldr	r3, [pc, #648]	@ (8003894 <HAL_RCC_OscConfig+0x8fc>)
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	461a      	mov	r2, r3
 8003612:	2301      	movs	r3, #1
 8003614:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fe f89f 	bl	8001758 <HAL_GetTick>
 800361a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe f89a 	bl	8001758 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d902      	bls.n	8003636 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	f000 bcfe 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
 8003636:	2302      	movs	r3, #2
 8003638:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003648:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003676:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800367a:	2202      	movs	r2, #2
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003682:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003690:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003694:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	4b7e      	ldr	r3, [pc, #504]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 8003698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800369a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036a2:	2102      	movs	r1, #2
 80036a4:	6019      	str	r1, [r3, #0]
 80036a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	fa93 f1a3 	rbit	r1, r3
 80036b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036bc:	6019      	str	r1, [r3, #0]
  return result;
 80036be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d09d      	beq.n	8003620 <HAL_RCC_OscConfig+0x688>
 80036e4:	e08d      	b.n	8003802 <HAL_RCC_OscConfig+0x86a>
 80036e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003704:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003708:	601a      	str	r2, [r3, #0]
  return result;
 800370a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800370e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003712:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	4b5d      	ldr	r3, [pc, #372]	@ (8003894 <HAL_RCC_OscConfig+0x8fc>)
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	461a      	mov	r2, r3
 8003724:	2300      	movs	r3, #0
 8003726:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7fe f816 	bl	8001758 <HAL_GetTick>
 800372c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003732:	f7fe f811 	bl	8001758 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	f000 bc75 	b.w	8004032 <HAL_RCC_OscConfig+0x109a>
 8003748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800374c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003750:	2202      	movs	r2, #2
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003758:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003766:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003770:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003774:	2202      	movs	r2, #2
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	fa93 f2a3 	rbit	r2, r3
 8003786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800378a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003794:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003798:	2202      	movs	r2, #2
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	4b36      	ldr	r3, [pc, #216]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 80037b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037c0:	2102      	movs	r1, #2
 80037c2:	6019      	str	r1, [r3, #0]
 80037c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f1a3 	rbit	r1, r3
 80037d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037da:	6019      	str	r1, [r3, #0]
  return result;
 80037dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d197      	bne.n	8003732 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003806:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 81a5 	beq.w	8003b62 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381e:	4b1c      	ldr	r3, [pc, #112]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]
 8003836:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <HAL_RCC_OscConfig+0x8f8>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800383e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003842:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_RCC_OscConfig+0x900>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d121      	bne.n	80038a8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <HAL_RCC_OscConfig+0x900>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <HAL_RCC_OscConfig+0x900>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003870:	f7fd ff72 	bl	8001758 <HAL_GetTick>
 8003874:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	e010      	b.n	800389c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fd ff6d 	bl	8001758 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d908      	bls.n	800389c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e3d1      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	10908120 	.word	0x10908120
 8003898:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad4 <HAL_RCC_OscConfig+0xb3c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0e8      	beq.n	800387a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x92e>
 80038b8:	4b87      	ldr	r3, [pc, #540]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a86      	ldr	r2, [pc, #536]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	e035      	b.n	8003932 <HAL_RCC_OscConfig+0x99a>
 80038c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x958>
 80038d6:	4b80      	ldr	r3, [pc, #512]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6213      	str	r3, [r2, #32]
 80038ee:	e020      	b.n	8003932 <HAL_RCC_OscConfig+0x99a>
 80038f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d10c      	bne.n	800391a <HAL_RCC_OscConfig+0x982>
 8003900:	4b75      	ldr	r3, [pc, #468]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4a74      	ldr	r2, [pc, #464]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	6213      	str	r3, [r2, #32]
 800390c:	4b72      	ldr	r3, [pc, #456]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	4a71      	ldr	r2, [pc, #452]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6213      	str	r3, [r2, #32]
 8003918:	e00b      	b.n	8003932 <HAL_RCC_OscConfig+0x99a>
 800391a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a6b      	ldr	r2, [pc, #428]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003936:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8081 	beq.w	8003a46 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003944:	f7fd ff08 	bl	8001758 <HAL_GetTick>
 8003948:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00b      	b.n	8003966 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd ff03 	bl	8001758 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e365      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
 8003966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800396a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800396e:	2202      	movs	r2, #2
 8003970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003976:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003984:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003992:	2202      	movs	r2, #2
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fa93 f2a3 	rbit	r2, r3
 80039a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039ac:	601a      	str	r2, [r3, #0]
  return result;
 80039ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_OscConfig+0xa3a>
 80039cc:	4b42      	ldr	r3, [pc, #264]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	e013      	b.n	80039fa <HAL_RCC_OscConfig+0xa62>
 80039d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80039da:	2202      	movs	r2, #2
 80039dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f2a3 	rbit	r2, r3
 80039ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a02:	2102      	movs	r1, #2
 8003a04:	6011      	str	r1, [r2, #0]
 8003a06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a0a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	fa92 f1a2 	rbit	r1, r2
 8003a14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a18:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003a1c:	6011      	str	r1, [r2, #0]
  return result;
 8003a1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a22:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	fab2 f282 	clz	r2, r2
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	f002 021f 	and.w	r2, r2, #31
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d084      	beq.n	800394e <HAL_RCC_OscConfig+0x9b6>
 8003a44:	e083      	b.n	8003b4e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fe87 	bl	8001758 <HAL_GetTick>
 8003a4a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a50:	f7fd fe82 	bl	8001758 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e2e4      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
 8003a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a70:	2202      	movs	r2, #2
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a78:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a86:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a90:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a94:	2202      	movs	r2, #2
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fa93 f2a3 	rbit	r2, r3
 8003aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aaa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003aae:	601a      	str	r2, [r3, #0]
  return result;
 8003ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ab8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0xb44>
 8003ace:	4b02      	ldr	r3, [pc, #8]	@ (8003ad8 <HAL_RCC_OscConfig+0xb40>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	e017      	b.n	8003b04 <HAL_RCC_OscConfig+0xb6c>
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f2a3 	rbit	r2, r3
 8003af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003afa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	4bb3      	ldr	r3, [pc, #716]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b08:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	6011      	str	r1, [r2, #0]
 8003b10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b14:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	fa92 f1a2 	rbit	r1, r2
 8003b1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b22:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003b26:	6011      	str	r1, [r2, #0]
  return result;
 8003b28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b2c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	fab2 f282 	clz	r2, r2
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	f002 021f 	and.w	r2, r2, #31
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d180      	bne.n	8003a50 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b4e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b9e      	ldr	r3, [pc, #632]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a9d      	ldr	r2, [pc, #628]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 825e 	beq.w	8004030 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b74:	4b96      	ldr	r3, [pc, #600]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	f000 821f 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	f040 8170 	bne.w	8003e74 <HAL_RCC_OscConfig+0xedc>
 8003b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b98:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003b9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003bb8:	601a      	str	r2, [r3, #0]
  return result;
 8003bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bbe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003bc2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fdbd 	bl	8001758 <HAL_GetTick>
 8003bde:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be2:	e009      	b.n	8003bf8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fd fdb8 	bl	8001758 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e21c      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
 8003bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bfc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c0a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c18:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c1c:	601a      	str	r2, [r3, #0]
  return result;
 8003c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_OscConfig+0xcaa>
 8003c3c:	4b64      	ldr	r3, [pc, #400]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	e027      	b.n	8003c92 <HAL_RCC_OscConfig+0xcfa>
 8003c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c46:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c54:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c62:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c6c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c88:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	4b50      	ldr	r3, [pc, #320]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003c96:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003c9a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c9e:	6011      	str	r1, [r2, #0]
 8003ca0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ca4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	fa92 f1a2 	rbit	r1, r2
 8003cae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cb2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003cb6:	6011      	str	r1, [r2, #0]
  return result;
 8003cb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cbc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d182      	bne.n	8003be4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cde:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	f023 020f 	bic.w	r2, r3, #15
 8003ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	4937      	ldr	r1, [pc, #220]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003cf8:	4b35      	ldr	r3, [pc, #212]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a19      	ldr	r1, [r3, #32]
 8003d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	492d      	ldr	r1, [pc, #180]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d24:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d32:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	fa93 f2a3 	rbit	r2, r3
 8003d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d40:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d44:	601a      	str	r2, [r3, #0]
  return result;
 8003d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d4a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d4e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	461a      	mov	r2, r3
 8003d62:	2301      	movs	r3, #1
 8003d64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fd fcf7 	bl	8001758 <HAL_GetTick>
 8003d6a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd fcf2 	bl	8001758 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e156      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
 8003d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d88:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003d8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d96:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f2a3 	rbit	r2, r3
 8003da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003da4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003da8:	601a      	str	r2, [r3, #0]
  return result;
 8003daa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dae:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003db2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xe3c>
 8003dc8:	4b01      	ldr	r3, [pc, #4]	@ (8003dd0 <HAL_RCC_OscConfig+0xe38>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	e02a      	b.n	8003e24 <HAL_RCC_OscConfig+0xe8c>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003de6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	fa93 f2a3 	rbit	r2, r3
 8003df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dfe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e0c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e1a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b86      	ldr	r3, [pc, #536]	@ (800403c <HAL_RCC_OscConfig+0x10a4>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e36:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	fa92 f1a2 	rbit	r1, r2
 8003e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e44:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003e48:	6011      	str	r1, [r2, #0]
  return result;
 8003e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e4e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f43f af7f 	beq.w	8003d70 <HAL_RCC_OscConfig+0xdd8>
 8003e72:	e0dd      	b.n	8004030 <HAL_RCC_OscConfig+0x1098>
 8003e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e78:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e86:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	fa93 f2a3 	rbit	r2, r3
 8003e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e94:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003e98:	601a      	str	r2, [r3, #0]
  return result;
 8003e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e9e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ea2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003eae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fd fc4d 	bl	8001758 <HAL_GetTick>
 8003ebe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fd fc48 	bl	8001758 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0ac      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
 8003ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003edc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ee0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	fa93 f2a3 	rbit	r2, r3
 8003ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003efc:	601a      	str	r2, [r3, #0]
  return result;
 8003efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f02:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <HAL_RCC_OscConfig+0xf8a>
 8003f1c:	4b47      	ldr	r3, [pc, #284]	@ (800403c <HAL_RCC_OscConfig+0x10a4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	e027      	b.n	8003f72 <HAL_RCC_OscConfig+0xfda>
 8003f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f26:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f34:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f42:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f5a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f68:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4b33      	ldr	r3, [pc, #204]	@ (800403c <HAL_RCC_OscConfig+0x10a4>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f76:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f7a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f7e:	6011      	str	r1, [r2, #0]
 8003f80:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f84:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	fa92 f1a2 	rbit	r1, r2
 8003f8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f92:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003f96:	6011      	str	r1, [r2, #0]
  return result;
 8003f98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f9c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	fab2 f282 	clz	r2, r2
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f042 0220 	orr.w	r2, r2, #32
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f002 021f 	and.w	r2, r2, #31
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d182      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xf2c>
 8003fbe:	e037      	b.n	8004030 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e02e      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fd4:	4b19      	ldr	r3, [pc, #100]	@ (800403c <HAL_RCC_OscConfig+0x10a4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	@ (800403c <HAL_RCC_OscConfig+0x10a4>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003fe8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ff0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d117      	bne.n	800402c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ffc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004000:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004008:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004010:	429a      	cmp	r2, r3
 8004012:	d10b      	bne.n	800402c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004020:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b09e      	sub	sp, #120	@ 0x78
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e162      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b90      	ldr	r3, [pc, #576]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d910      	bls.n	8004088 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b8d      	ldr	r3, [pc, #564]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 0207 	bic.w	r2, r3, #7
 800406e:	498b      	ldr	r1, [pc, #556]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b89      	ldr	r3, [pc, #548]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e14a      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b82      	ldr	r3, [pc, #520]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	497f      	ldr	r1, [pc, #508]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80dc 	beq.w	800426c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d13c      	bne.n	8004136 <HAL_RCC_ClockConfig+0xf6>
 80040bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d102      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xa6>
 80040e0:	4b6f      	ldr	r3, [pc, #444]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e00f      	b.n	8004106 <HAL_RCC_ClockConfig+0xc6>
 80040e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80040f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004102:	4b67      	ldr	r3, [pc, #412]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800410a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800410c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800410e:	fa92 f2a2 	rbit	r2, r2
 8004112:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d17b      	bne.n	800422a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0f3      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d13c      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x178>
 800413e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004142:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800414c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d102      	bne.n	8004168 <HAL_RCC_ClockConfig+0x128>
 8004162:	4b4f      	ldr	r3, [pc, #316]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	e00f      	b.n	8004188 <HAL_RCC_ClockConfig+0x148>
 8004168:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800416c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	647b      	str	r3, [r7, #68]	@ 0x44
 8004176:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800417a:	643b      	str	r3, [r7, #64]	@ 0x40
 800417c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004184:	4b46      	ldr	r3, [pc, #280]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800418c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800418e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004196:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	f042 0220 	orr.w	r2, r2, #32
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	f002 021f 	and.w	r2, r2, #31
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f202 	lsl.w	r2, r1, r2
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d13a      	bne.n	800422a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0b2      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
 80041b8:	2302      	movs	r3, #2
 80041ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x1a0>
 80041da:	4b31      	ldr	r3, [pc, #196]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e00d      	b.n	80041fc <HAL_RCC_ClockConfig+0x1bc>
 80041e0:	2302      	movs	r3, #2
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ec:	2302      	movs	r3, #2
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	2202      	movs	r2, #2
 80041fe:	61ba      	str	r2, [r7, #24]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	fa92 f2a2 	rbit	r2, r2
 8004206:	617a      	str	r2, [r7, #20]
  return result;
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f042 0220 	orr.w	r2, r2, #32
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f002 021f 	and.w	r2, r2, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e079      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422a:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	491a      	ldr	r1, [pc, #104]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800423c:	f7fd fa8c 	bl	8001758 <HAL_GetTick>
 8004240:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	e00a      	b.n	800425a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004244:	f7fd fa88 	bl	8001758 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e061      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_RCC_ClockConfig+0x260>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 020c 	and.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	429a      	cmp	r2, r3
 800426a:	d1eb      	bne.n	8004244 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d214      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b08      	ldr	r3, [pc, #32]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0207 	bic.w	r2, r3, #7
 8004282:	4906      	ldr	r1, [pc, #24]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b04      	ldr	r3, [pc, #16]	@ (800429c <HAL_RCC_ClockConfig+0x25c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e040      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
 800429c:	40022000 	.word	0x40022000
 80042a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	491a      	ldr	r1, [pc, #104]	@ (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ce:	4b16      	ldr	r3, [pc, #88]	@ (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4912      	ldr	r1, [pc, #72]	@ (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042e2:	f000 f829 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042e6:	4601      	mov	r1, r0
 80042e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f0:	22f0      	movs	r2, #240	@ 0xf0
 80042f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	fa92 f2a2 	rbit	r2, r2
 80042fa:	60fa      	str	r2, [r7, #12]
  return result;
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	40d3      	lsrs	r3, r2
 8004306:	4a09      	ldr	r2, [pc, #36]	@ (800432c <HAL_RCC_ClockConfig+0x2ec>)
 8004308:	5cd3      	ldrb	r3, [r2, r3]
 800430a:	fa21 f303 	lsr.w	r3, r1, r3
 800430e:	4a08      	ldr	r2, [pc, #32]	@ (8004330 <HAL_RCC_ClockConfig+0x2f0>)
 8004310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004312:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_RCC_ClockConfig+0x2f4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd f9da 	bl	80016d0 <HAL_InitTick>
  
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3778      	adds	r7, #120	@ 0x78
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	08009978 	.word	0x08009978
 8004330:	20000010 	.word	0x20000010
 8004334:	20000014 	.word	0x20000014

08004338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004352:	4b1f      	ldr	r3, [pc, #124]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d002      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x30>
 8004362:	2b08      	cmp	r3, #8
 8004364:	d003      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x36>
 8004366:	e029      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004368:	4b1a      	ldr	r3, [pc, #104]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800436a:	613b      	str	r3, [r7, #16]
      break;
 800436c:	e029      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	0c9b      	lsrs	r3, r3, #18
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800437c:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004386:	5cd3      	ldrb	r3, [r2, r3]
 8004388:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004394:	4a0f      	ldr	r2, [pc, #60]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	fbb2 f2f3 	udiv	r2, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e007      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043a6:	4a0b      	ldr	r2, [pc, #44]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	613b      	str	r3, [r7, #16]
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043be:	613b      	str	r3, [r7, #16]
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	693b      	ldr	r3, [r7, #16]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40021000 	.word	0x40021000
 80043d4:	007a1200 	.word	0x007a1200
 80043d8:	08009990 	.word	0x08009990
 80043dc:	080099a0 	.word	0x080099a0

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000010 	.word	0x20000010

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043fe:	f7ff ffef 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004402:	4601      	mov	r1, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800440c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004410:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	fa92 f2a2 	rbit	r2, r2
 8004418:	603a      	str	r2, [r7, #0]
  return result;
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	fab2 f282 	clz	r2, r2
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	40d3      	lsrs	r3, r2
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	08009988 	.word	0x08009988

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004442:	f7ff ffcd 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004446:	4601      	mov	r1, r0
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004450:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004454:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	fa92 f2a2 	rbit	r2, r2
 800445c:	603a      	str	r2, [r7, #0]
  return result;
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	fab2 f282 	clz	r2, r2
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	40d3      	lsrs	r3, r2
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <HAL_RCC_GetPCLK2Freq+0x40>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	08009988 	.word	0x08009988

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b092      	sub	sp, #72	@ 0x48
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80d4 	beq.w	800464c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a4:	4b4e      	ldr	r3, [pc, #312]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10e      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b4b      	ldr	r3, [pc, #300]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a4a      	ldr	r2, [pc, #296]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
 80044bc:	4b48      	ldr	r3, [pc, #288]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b45      	ldr	r3, [pc, #276]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d118      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044da:	4b42      	ldr	r3, [pc, #264]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a41      	ldr	r2, [pc, #260]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fd f937 	bl	8001758 <HAL_GetTick>
 80044ea:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	e008      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ee:	f7fd f933 	bl	8001758 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b64      	cmp	r3, #100	@ 0x64
 80044fa:	d901      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1d6      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	4b38      	ldr	r3, [pc, #224]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450c:	4b34      	ldr	r3, [pc, #208]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004514:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8084 	beq.w	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004526:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004528:	429a      	cmp	r2, r3
 800452a:	d07c      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452c:	4b2c      	ldr	r3, [pc, #176]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800453a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4b26      	ldr	r3, [pc, #152]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	461a      	mov	r2, r3
 8004556:	2301      	movs	r3, #1
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	4b1d      	ldr	r3, [pc, #116]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	461a      	mov	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800457e:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004582:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04b      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458e:	f7fd f8e3 	bl	8001758 <HAL_GetTick>
 8004592:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fd f8df 	bl	8001758 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e180      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80045ac:	2302      	movs	r3, #2
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b8:	2302      	movs	r3, #2
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	61fb      	str	r3, [r7, #28]
  return result;
 80045c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d108      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045da:	4b01      	ldr	r3, [pc, #4]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	e00d      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40007000 	.word	0x40007000
 80045e8:	10908100 	.word	0x10908100
 80045ec:	2302      	movs	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	2202      	movs	r2, #2
 80045fe:	613a      	str	r2, [r7, #16]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	fa92 f2a2 	rbit	r2, r2
 8004606:	60fa      	str	r2, [r7, #12]
  return result;
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	fab2 f282 	clz	r2, r2
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f002 021f 	and.w	r2, r2, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0b7      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004626:	4b8f      	ldr	r3, [pc, #572]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	498c      	ldr	r1, [pc, #560]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004638:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004640:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	4a87      	ldr	r2, [pc, #540]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800464a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004658:	4b82      	ldr	r3, [pc, #520]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	f023 0203 	bic.w	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	497f      	ldr	r1, [pc, #508]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004676:	4b7b      	ldr	r3, [pc, #492]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4978      	ldr	r1, [pc, #480]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004694:	4b73      	ldr	r3, [pc, #460]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	4970      	ldr	r1, [pc, #448]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f023 0210 	bic.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	4969      	ldr	r1, [pc, #420]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046d0:	4b64      	ldr	r3, [pc, #400]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	4961      	ldr	r1, [pc, #388]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f023 0220 	bic.w	r2, r3, #32
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	495a      	ldr	r1, [pc, #360]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470c:	4b55      	ldr	r3, [pc, #340]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	4952      	ldr	r1, [pc, #328]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800472a:	4b4e      	ldr	r3, [pc, #312]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	494b      	ldr	r1, [pc, #300]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004748:	4b46      	ldr	r3, [pc, #280]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4943      	ldr	r1, [pc, #268]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004756:	4313      	orrs	r3, r2
 8004758:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004766:	4b3f      	ldr	r3, [pc, #252]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	493c      	ldr	r1, [pc, #240]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004784:	4b37      	ldr	r3, [pc, #220]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	4934      	ldr	r1, [pc, #208]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047a2:	4b30      	ldr	r3, [pc, #192]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	492d      	ldr	r1, [pc, #180]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	4925      	ldr	r1, [pc, #148]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047de:	4b21      	ldr	r3, [pc, #132]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	491e      	ldr	r1, [pc, #120]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80047fc:	4b19      	ldr	r3, [pc, #100]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	4916      	ldr	r1, [pc, #88]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800481a:	4b12      	ldr	r3, [pc, #72]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	490f      	ldr	r1, [pc, #60]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004844:	4907      	ldr	r1, [pc, #28]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004856:	4b03      	ldr	r3, [pc, #12]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	e002      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800486a:	4913      	ldr	r1, [pc, #76]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800486c:	4313      	orrs	r3, r2
 800486e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800487c:	4b0e      	ldr	r3, [pc, #56]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004880:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004888:	490b      	ldr	r1, [pc, #44]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488a:	4313      	orrs	r3, r2
 800488c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800489a:	4b07      	ldr	r3, [pc, #28]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	4904      	ldr	r1, [pc, #16]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3748      	adds	r7, #72	@ 0x48
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e09d      	b.n	8004a0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048de:	d009      	beq.n	80048f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	61da      	str	r2, [r3, #28]
 80048e6:	e005      	b.n	80048f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc fd12 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004934:	d902      	bls.n	800493c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e002      	b.n	8004942 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800493c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004940:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800494a:	d007      	beq.n	800495c <HAL_SPI_Init+0xa0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004954:	d002      	beq.n	800495c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499e:	ea42 0103 	orr.w	r1, r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f003 0204 	and.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80049d8:	ea42 0103 	orr.w	r1, r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e040      	b.n	8004aa6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fc fcc1 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2224      	movs	r2, #36	@ 0x24
 8004a3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9fd 	bl	8004e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f826 	bl	8004ab0 <UART_SetConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e01b      	b.n	8004aa6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa7c 	bl	8004f9c <UART_CheckIdleState>
 8004aa4:	4603      	mov	r3, r0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b92      	ldr	r3, [pc, #584]	@ (8004d24 <UART_SetConfig+0x274>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	6979      	ldr	r1, [r7, #20]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a80      	ldr	r2, [pc, #512]	@ (8004d28 <UART_SetConfig+0x278>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d120      	bne.n	8004b6e <UART_SetConfig+0xbe>
 8004b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d2c <UART_SetConfig+0x27c>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d817      	bhi.n	8004b68 <UART_SetConfig+0xb8>
 8004b38:	a201      	add	r2, pc, #4	@ (adr r2, 8004b40 <UART_SetConfig+0x90>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b51 	.word	0x08004b51
 8004b44:	08004b5d 	.word	0x08004b5d
 8004b48:	08004b63 	.word	0x08004b63
 8004b4c:	08004b57 	.word	0x08004b57
 8004b50:	2301      	movs	r3, #1
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e0b5      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004b56:	2302      	movs	r3, #2
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e0b2      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e0af      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004b62:	2308      	movs	r3, #8
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e0ac      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e0a9      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6f      	ldr	r2, [pc, #444]	@ (8004d30 <UART_SetConfig+0x280>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d124      	bne.n	8004bc2 <UART_SetConfig+0x112>
 8004b78:	4b6c      	ldr	r3, [pc, #432]	@ (8004d2c <UART_SetConfig+0x27c>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b84:	d011      	beq.n	8004baa <UART_SetConfig+0xfa>
 8004b86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b8a:	d817      	bhi.n	8004bbc <UART_SetConfig+0x10c>
 8004b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b90:	d011      	beq.n	8004bb6 <UART_SetConfig+0x106>
 8004b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b96:	d811      	bhi.n	8004bbc <UART_SetConfig+0x10c>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <UART_SetConfig+0xf4>
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba0:	d006      	beq.n	8004bb0 <UART_SetConfig+0x100>
 8004ba2:	e00b      	b.n	8004bbc <UART_SetConfig+0x10c>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e08b      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e088      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e085      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e082      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e07f      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d34 <UART_SetConfig+0x284>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d124      	bne.n	8004c16 <UART_SetConfig+0x166>
 8004bcc:	4b57      	ldr	r3, [pc, #348]	@ (8004d2c <UART_SetConfig+0x27c>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004bd4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bd8:	d011      	beq.n	8004bfe <UART_SetConfig+0x14e>
 8004bda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bde:	d817      	bhi.n	8004c10 <UART_SetConfig+0x160>
 8004be0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004be4:	d011      	beq.n	8004c0a <UART_SetConfig+0x15a>
 8004be6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bea:	d811      	bhi.n	8004c10 <UART_SetConfig+0x160>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <UART_SetConfig+0x148>
 8004bf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bf4:	d006      	beq.n	8004c04 <UART_SetConfig+0x154>
 8004bf6:	e00b      	b.n	8004c10 <UART_SetConfig+0x160>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e061      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e05e      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c04:	2304      	movs	r3, #4
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e05b      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e058      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c10:	2310      	movs	r3, #16
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e055      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a47      	ldr	r2, [pc, #284]	@ (8004d38 <UART_SetConfig+0x288>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d124      	bne.n	8004c6a <UART_SetConfig+0x1ba>
 8004c20:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <UART_SetConfig+0x27c>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c2c:	d011      	beq.n	8004c52 <UART_SetConfig+0x1a2>
 8004c2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c32:	d817      	bhi.n	8004c64 <UART_SetConfig+0x1b4>
 8004c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c38:	d011      	beq.n	8004c5e <UART_SetConfig+0x1ae>
 8004c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3e:	d811      	bhi.n	8004c64 <UART_SetConfig+0x1b4>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <UART_SetConfig+0x19c>
 8004c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c48:	d006      	beq.n	8004c58 <UART_SetConfig+0x1a8>
 8004c4a:	e00b      	b.n	8004c64 <UART_SetConfig+0x1b4>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e037      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e034      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e031      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c5e:	2308      	movs	r3, #8
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e02e      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c64:	2310      	movs	r3, #16
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e02b      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a33      	ldr	r2, [pc, #204]	@ (8004d3c <UART_SetConfig+0x28c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d124      	bne.n	8004cbe <UART_SetConfig+0x20e>
 8004c74:	4b2d      	ldr	r3, [pc, #180]	@ (8004d2c <UART_SetConfig+0x27c>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c78:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004c7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c80:	d011      	beq.n	8004ca6 <UART_SetConfig+0x1f6>
 8004c82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c86:	d817      	bhi.n	8004cb8 <UART_SetConfig+0x208>
 8004c88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c8c:	d011      	beq.n	8004cb2 <UART_SetConfig+0x202>
 8004c8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c92:	d811      	bhi.n	8004cb8 <UART_SetConfig+0x208>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <UART_SetConfig+0x1f0>
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c9c:	d006      	beq.n	8004cac <UART_SetConfig+0x1fc>
 8004c9e:	e00b      	b.n	8004cb8 <UART_SetConfig+0x208>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e00d      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e00a      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e007      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e004      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e001      	b.n	8004cc2 <UART_SetConfig+0x212>
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cca:	d16b      	bne.n	8004da4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004ccc:	7ffb      	ldrb	r3, [r7, #31]
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d838      	bhi.n	8004d44 <UART_SetConfig+0x294>
 8004cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd8 <UART_SetConfig+0x228>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	08004d45 	.word	0x08004d45
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004d45 	.word	0x08004d45
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004d45 	.word	0x08004d45
 8004cf8:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7ff fb7c 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8004d00:	61b8      	str	r0, [r7, #24]
        break;
 8004d02:	e024      	b.n	8004d4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7ff fb9a 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8004d08:	61b8      	str	r0, [r7, #24]
        break;
 8004d0a:	e020      	b.n	8004d4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <UART_SetConfig+0x290>)
 8004d0e:	61bb      	str	r3, [r7, #24]
        break;
 8004d10:	e01d      	b.n	8004d4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7ff fb11 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8004d16:	61b8      	str	r0, [r7, #24]
        break;
 8004d18:	e019      	b.n	8004d4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d1e:	61bb      	str	r3, [r7, #24]
        break;
 8004d20:	e015      	b.n	8004d4e <UART_SetConfig+0x29e>
 8004d22:	bf00      	nop
 8004d24:	efff69f3 	.word	0xefff69f3
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40004400 	.word	0x40004400
 8004d34:	40004800 	.word	0x40004800
 8004d38:	40004c00 	.word	0x40004c00
 8004d3c:	40005000 	.word	0x40005000
 8004d40:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	77bb      	strb	r3, [r7, #30]
        break;
 8004d4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d073      	beq.n	8004e3c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	005a      	lsls	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	441a      	add	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b0f      	cmp	r3, #15
 8004d6e:	d916      	bls.n	8004d9e <UART_SetConfig+0x2ee>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d76:	d212      	bcs.n	8004d9e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f023 030f 	bic.w	r3, r3, #15
 8004d80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	89fb      	ldrh	r3, [r7, #14]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	89fa      	ldrh	r2, [r7, #14]
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	e04e      	b.n	8004e3c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	77bb      	strb	r3, [r7, #30]
 8004da2:	e04b      	b.n	8004e3c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da4:	7ffb      	ldrb	r3, [r7, #31]
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d827      	bhi.n	8004dfa <UART_SetConfig+0x34a>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <UART_SetConfig+0x300>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	08004dfb 	.word	0x08004dfb
 8004dc0:	08004deb 	.word	0x08004deb
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004dfb 	.word	0x08004dfb
 8004dcc:	08004dfb 	.word	0x08004dfb
 8004dd0:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7ff fb10 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	61b8      	str	r0, [r7, #24]
        break;
 8004dda:	e013      	b.n	8004e04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7ff fb2e 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8004de0:	61b8      	str	r0, [r7, #24]
        break;
 8004de2:	e00f      	b.n	8004e04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <UART_SetConfig+0x3a4>)
 8004de6:	61bb      	str	r3, [r7, #24]
        break;
 8004de8:	e00c      	b.n	8004e04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dea:	f7ff faa5 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8004dee:	61b8      	str	r0, [r7, #24]
        break;
 8004df0:	e008      	b.n	8004e04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004df6:	61bb      	str	r3, [r7, #24]
        break;
 8004df8:	e004      	b.n	8004e04 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	77bb      	strb	r3, [r7, #30]
        break;
 8004e02:	bf00      	nop
    }

    if (pclk != 0U)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d018      	beq.n	8004e3c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	085a      	lsrs	r2, r3, #1
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d909      	bls.n	8004e38 <UART_SetConfig+0x388>
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2a:	d205      	bcs.n	8004e38 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e001      	b.n	8004e3c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	007a1200 	.word	0x007a1200

08004e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f56:	d10a      	bne.n	8004f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b098      	sub	sp, #96	@ 0x60
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fac:	f7fc fbd4 	bl	8001758 <HAL_GetTick>
 8004fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d12e      	bne.n	800501e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f88c 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d021      	beq.n	800501e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e062      	b.n	80050e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d149      	bne.n	80050c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f856 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03c      	beq.n	80050c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30
 8005066:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60fb      	str	r3, [r7, #12]
   return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005098:	61fa      	str	r2, [r7, #28]
 800509a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	617b      	str	r3, [r7, #20]
   return(result);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e011      	b.n	80050e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3758      	adds	r7, #88	@ 0x58
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fc:	e04f      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d04b      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fc fb27 	bl	8001758 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <UART_WaitOnFlagUntilTimeout+0x30>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e04e      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d037      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b80      	cmp	r3, #128	@ 0x80
 8005132:	d034      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d031      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b08      	cmp	r3, #8
 8005146:	d110      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2208      	movs	r2, #8
 800514e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f838 	bl	80051c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2208      	movs	r2, #8
 800515a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e029      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005178:	d111      	bne.n	800519e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f81e 	bl	80051c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e00f      	b.n	80051be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0a0      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b095      	sub	sp, #84	@ 0x54
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e6      	bne.n	80051ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005238:	2b01      	cmp	r3, #1
 800523a:	d118      	bne.n	800526e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60bb      	str	r3, [r7, #8]
   return(result);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	647b      	str	r3, [r7, #68]	@ 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6979      	ldr	r1, [r7, #20]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005282:	bf00      	nop
 8005284:	3754      	adds	r7, #84	@ 0x54
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <__cvt>:
 800528e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005292:	ec57 6b10 	vmov	r6, r7, d0
 8005296:	2f00      	cmp	r7, #0
 8005298:	460c      	mov	r4, r1
 800529a:	4619      	mov	r1, r3
 800529c:	463b      	mov	r3, r7
 800529e:	bfbb      	ittet	lt
 80052a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052a4:	461f      	movlt	r7, r3
 80052a6:	2300      	movge	r3, #0
 80052a8:	232d      	movlt	r3, #45	@ 0x2d
 80052aa:	700b      	strb	r3, [r1, #0]
 80052ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052b2:	4691      	mov	r9, r2
 80052b4:	f023 0820 	bic.w	r8, r3, #32
 80052b8:	bfbc      	itt	lt
 80052ba:	4632      	movlt	r2, r6
 80052bc:	4616      	movlt	r6, r2
 80052be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052c2:	d005      	beq.n	80052d0 <__cvt+0x42>
 80052c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052c8:	d100      	bne.n	80052cc <__cvt+0x3e>
 80052ca:	3401      	adds	r4, #1
 80052cc:	2102      	movs	r1, #2
 80052ce:	e000      	b.n	80052d2 <__cvt+0x44>
 80052d0:	2103      	movs	r1, #3
 80052d2:	ab03      	add	r3, sp, #12
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	ab02      	add	r3, sp, #8
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	ec47 6b10 	vmov	d0, r6, r7
 80052de:	4653      	mov	r3, sl
 80052e0:	4622      	mov	r2, r4
 80052e2:	f001 f875 	bl	80063d0 <_dtoa_r>
 80052e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052ea:	4605      	mov	r5, r0
 80052ec:	d119      	bne.n	8005322 <__cvt+0x94>
 80052ee:	f019 0f01 	tst.w	r9, #1
 80052f2:	d00e      	beq.n	8005312 <__cvt+0x84>
 80052f4:	eb00 0904 	add.w	r9, r0, r4
 80052f8:	2200      	movs	r2, #0
 80052fa:	2300      	movs	r3, #0
 80052fc:	4630      	mov	r0, r6
 80052fe:	4639      	mov	r1, r7
 8005300:	f7fb fbea 	bl	8000ad8 <__aeabi_dcmpeq>
 8005304:	b108      	cbz	r0, 800530a <__cvt+0x7c>
 8005306:	f8cd 900c 	str.w	r9, [sp, #12]
 800530a:	2230      	movs	r2, #48	@ 0x30
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	454b      	cmp	r3, r9
 8005310:	d31e      	bcc.n	8005350 <__cvt+0xc2>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005316:	1b5b      	subs	r3, r3, r5
 8005318:	4628      	mov	r0, r5
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	b004      	add	sp, #16
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005322:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005326:	eb00 0904 	add.w	r9, r0, r4
 800532a:	d1e5      	bne.n	80052f8 <__cvt+0x6a>
 800532c:	7803      	ldrb	r3, [r0, #0]
 800532e:	2b30      	cmp	r3, #48	@ 0x30
 8005330:	d10a      	bne.n	8005348 <__cvt+0xba>
 8005332:	2200      	movs	r2, #0
 8005334:	2300      	movs	r3, #0
 8005336:	4630      	mov	r0, r6
 8005338:	4639      	mov	r1, r7
 800533a:	f7fb fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800533e:	b918      	cbnz	r0, 8005348 <__cvt+0xba>
 8005340:	f1c4 0401 	rsb	r4, r4, #1
 8005344:	f8ca 4000 	str.w	r4, [sl]
 8005348:	f8da 3000 	ldr.w	r3, [sl]
 800534c:	4499      	add	r9, r3
 800534e:	e7d3      	b.n	80052f8 <__cvt+0x6a>
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	9103      	str	r1, [sp, #12]
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e7d9      	b.n	800530c <__cvt+0x7e>

08005358 <__exponent>:
 8005358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535a:	2900      	cmp	r1, #0
 800535c:	bfba      	itte	lt
 800535e:	4249      	neglt	r1, r1
 8005360:	232d      	movlt	r3, #45	@ 0x2d
 8005362:	232b      	movge	r3, #43	@ 0x2b
 8005364:	2909      	cmp	r1, #9
 8005366:	7002      	strb	r2, [r0, #0]
 8005368:	7043      	strb	r3, [r0, #1]
 800536a:	dd29      	ble.n	80053c0 <__exponent+0x68>
 800536c:	f10d 0307 	add.w	r3, sp, #7
 8005370:	461d      	mov	r5, r3
 8005372:	270a      	movs	r7, #10
 8005374:	461a      	mov	r2, r3
 8005376:	fbb1 f6f7 	udiv	r6, r1, r7
 800537a:	fb07 1416 	mls	r4, r7, r6, r1
 800537e:	3430      	adds	r4, #48	@ 0x30
 8005380:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005384:	460c      	mov	r4, r1
 8005386:	2c63      	cmp	r4, #99	@ 0x63
 8005388:	f103 33ff 	add.w	r3, r3, #4294967295
 800538c:	4631      	mov	r1, r6
 800538e:	dcf1      	bgt.n	8005374 <__exponent+0x1c>
 8005390:	3130      	adds	r1, #48	@ 0x30
 8005392:	1e94      	subs	r4, r2, #2
 8005394:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005398:	1c41      	adds	r1, r0, #1
 800539a:	4623      	mov	r3, r4
 800539c:	42ab      	cmp	r3, r5
 800539e:	d30a      	bcc.n	80053b6 <__exponent+0x5e>
 80053a0:	f10d 0309 	add.w	r3, sp, #9
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	42ac      	cmp	r4, r5
 80053a8:	bf88      	it	hi
 80053aa:	2300      	movhi	r3, #0
 80053ac:	3302      	adds	r3, #2
 80053ae:	4403      	add	r3, r0
 80053b0:	1a18      	subs	r0, r3, r0
 80053b2:	b003      	add	sp, #12
 80053b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053be:	e7ed      	b.n	800539c <__exponent+0x44>
 80053c0:	2330      	movs	r3, #48	@ 0x30
 80053c2:	3130      	adds	r1, #48	@ 0x30
 80053c4:	7083      	strb	r3, [r0, #2]
 80053c6:	70c1      	strb	r1, [r0, #3]
 80053c8:	1d03      	adds	r3, r0, #4
 80053ca:	e7f1      	b.n	80053b0 <__exponent+0x58>

080053cc <_printf_float>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	b08d      	sub	sp, #52	@ 0x34
 80053d2:	460c      	mov	r4, r1
 80053d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053d8:	4616      	mov	r6, r2
 80053da:	461f      	mov	r7, r3
 80053dc:	4605      	mov	r5, r0
 80053de:	f000 feef 	bl	80061c0 <_localeconv_r>
 80053e2:	6803      	ldr	r3, [r0, #0]
 80053e4:	9304      	str	r3, [sp, #16]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fa ff4a 	bl	8000280 <strlen>
 80053ec:	2300      	movs	r3, #0
 80053ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80053f0:	f8d8 3000 	ldr.w	r3, [r8]
 80053f4:	9005      	str	r0, [sp, #20]
 80053f6:	3307      	adds	r3, #7
 80053f8:	f023 0307 	bic.w	r3, r3, #7
 80053fc:	f103 0208 	add.w	r2, r3, #8
 8005400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005404:	f8d4 b000 	ldr.w	fp, [r4]
 8005408:	f8c8 2000 	str.w	r2, [r8]
 800540c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005410:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	f8cd 8018 	str.w	r8, [sp, #24]
 800541a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800541e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005422:	4b9c      	ldr	r3, [pc, #624]	@ (8005694 <_printf_float+0x2c8>)
 8005424:	f04f 32ff 	mov.w	r2, #4294967295
 8005428:	f7fb fb88 	bl	8000b3c <__aeabi_dcmpun>
 800542c:	bb70      	cbnz	r0, 800548c <_printf_float+0xc0>
 800542e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005432:	4b98      	ldr	r3, [pc, #608]	@ (8005694 <_printf_float+0x2c8>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	f7fb fb62 	bl	8000b00 <__aeabi_dcmple>
 800543c:	bb30      	cbnz	r0, 800548c <_printf_float+0xc0>
 800543e:	2200      	movs	r2, #0
 8005440:	2300      	movs	r3, #0
 8005442:	4640      	mov	r0, r8
 8005444:	4649      	mov	r1, r9
 8005446:	f7fb fb51 	bl	8000aec <__aeabi_dcmplt>
 800544a:	b110      	cbz	r0, 8005452 <_printf_float+0x86>
 800544c:	232d      	movs	r3, #45	@ 0x2d
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005452:	4a91      	ldr	r2, [pc, #580]	@ (8005698 <_printf_float+0x2cc>)
 8005454:	4b91      	ldr	r3, [pc, #580]	@ (800569c <_printf_float+0x2d0>)
 8005456:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800545a:	bf94      	ite	ls
 800545c:	4690      	movls	r8, r2
 800545e:	4698      	movhi	r8, r3
 8005460:	2303      	movs	r3, #3
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	f02b 0304 	bic.w	r3, fp, #4
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	f04f 0900 	mov.w	r9, #0
 800546e:	9700      	str	r7, [sp, #0]
 8005470:	4633      	mov	r3, r6
 8005472:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f000 f9d2 	bl	8005820 <_printf_common>
 800547c:	3001      	adds	r0, #1
 800547e:	f040 808d 	bne.w	800559c <_printf_float+0x1d0>
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	b00d      	add	sp, #52	@ 0x34
 8005488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	4640      	mov	r0, r8
 8005492:	4649      	mov	r1, r9
 8005494:	f7fb fb52 	bl	8000b3c <__aeabi_dcmpun>
 8005498:	b140      	cbz	r0, 80054ac <_printf_float+0xe0>
 800549a:	464b      	mov	r3, r9
 800549c:	2b00      	cmp	r3, #0
 800549e:	bfbc      	itt	lt
 80054a0:	232d      	movlt	r3, #45	@ 0x2d
 80054a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054a6:	4a7e      	ldr	r2, [pc, #504]	@ (80056a0 <_printf_float+0x2d4>)
 80054a8:	4b7e      	ldr	r3, [pc, #504]	@ (80056a4 <_printf_float+0x2d8>)
 80054aa:	e7d4      	b.n	8005456 <_printf_float+0x8a>
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054b2:	9206      	str	r2, [sp, #24]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	d13b      	bne.n	8005530 <_printf_float+0x164>
 80054b8:	2306      	movs	r3, #6
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054c0:	2300      	movs	r3, #0
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	9303      	str	r3, [sp, #12]
 80054c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80054c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054cc:	ab09      	add	r3, sp, #36	@ 0x24
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	ec49 8b10 	vmov	d0, r8, r9
 80054d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054da:	4628      	mov	r0, r5
 80054dc:	f7ff fed7 	bl	800528e <__cvt>
 80054e0:	9b06      	ldr	r3, [sp, #24]
 80054e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054e4:	2b47      	cmp	r3, #71	@ 0x47
 80054e6:	4680      	mov	r8, r0
 80054e8:	d129      	bne.n	800553e <_printf_float+0x172>
 80054ea:	1cc8      	adds	r0, r1, #3
 80054ec:	db02      	blt.n	80054f4 <_printf_float+0x128>
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	4299      	cmp	r1, r3
 80054f2:	dd41      	ble.n	8005578 <_printf_float+0x1ac>
 80054f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80054f8:	fa5f fa8a 	uxtb.w	sl, sl
 80054fc:	3901      	subs	r1, #1
 80054fe:	4652      	mov	r2, sl
 8005500:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005504:	9109      	str	r1, [sp, #36]	@ 0x24
 8005506:	f7ff ff27 	bl	8005358 <__exponent>
 800550a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800550c:	1813      	adds	r3, r2, r0
 800550e:	2a01      	cmp	r2, #1
 8005510:	4681      	mov	r9, r0
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	dc02      	bgt.n	800551c <_printf_float+0x150>
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	07d2      	lsls	r2, r2, #31
 800551a:	d501      	bpl.n	8005520 <_printf_float+0x154>
 800551c:	3301      	adds	r3, #1
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0a2      	beq.n	800546e <_printf_float+0xa2>
 8005528:	232d      	movs	r3, #45	@ 0x2d
 800552a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552e:	e79e      	b.n	800546e <_printf_float+0xa2>
 8005530:	9a06      	ldr	r2, [sp, #24]
 8005532:	2a47      	cmp	r2, #71	@ 0x47
 8005534:	d1c2      	bne.n	80054bc <_printf_float+0xf0>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1c0      	bne.n	80054bc <_printf_float+0xf0>
 800553a:	2301      	movs	r3, #1
 800553c:	e7bd      	b.n	80054ba <_printf_float+0xee>
 800553e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005542:	d9db      	bls.n	80054fc <_printf_float+0x130>
 8005544:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005548:	d118      	bne.n	800557c <_printf_float+0x1b0>
 800554a:	2900      	cmp	r1, #0
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	dd0b      	ble.n	8005568 <_printf_float+0x19c>
 8005550:	6121      	str	r1, [r4, #16]
 8005552:	b913      	cbnz	r3, 800555a <_printf_float+0x18e>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	07d0      	lsls	r0, r2, #31
 8005558:	d502      	bpl.n	8005560 <_printf_float+0x194>
 800555a:	3301      	adds	r3, #1
 800555c:	440b      	add	r3, r1
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005562:	f04f 0900 	mov.w	r9, #0
 8005566:	e7db      	b.n	8005520 <_printf_float+0x154>
 8005568:	b913      	cbnz	r3, 8005570 <_printf_float+0x1a4>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	07d2      	lsls	r2, r2, #31
 800556e:	d501      	bpl.n	8005574 <_printf_float+0x1a8>
 8005570:	3302      	adds	r3, #2
 8005572:	e7f4      	b.n	800555e <_printf_float+0x192>
 8005574:	2301      	movs	r3, #1
 8005576:	e7f2      	b.n	800555e <_printf_float+0x192>
 8005578:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800557c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800557e:	4299      	cmp	r1, r3
 8005580:	db05      	blt.n	800558e <_printf_float+0x1c2>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	6121      	str	r1, [r4, #16]
 8005586:	07d8      	lsls	r0, r3, #31
 8005588:	d5ea      	bpl.n	8005560 <_printf_float+0x194>
 800558a:	1c4b      	adds	r3, r1, #1
 800558c:	e7e7      	b.n	800555e <_printf_float+0x192>
 800558e:	2900      	cmp	r1, #0
 8005590:	bfd4      	ite	le
 8005592:	f1c1 0202 	rsble	r2, r1, #2
 8005596:	2201      	movgt	r2, #1
 8005598:	4413      	add	r3, r2
 800559a:	e7e0      	b.n	800555e <_printf_float+0x192>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	055a      	lsls	r2, r3, #21
 80055a0:	d407      	bmi.n	80055b2 <_printf_float+0x1e6>
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	4642      	mov	r2, r8
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	d12b      	bne.n	8005608 <_printf_float+0x23c>
 80055b0:	e767      	b.n	8005482 <_printf_float+0xb6>
 80055b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055b6:	f240 80dd 	bls.w	8005774 <_printf_float+0x3a8>
 80055ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055be:	2200      	movs	r2, #0
 80055c0:	2300      	movs	r3, #0
 80055c2:	f7fb fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d033      	beq.n	8005632 <_printf_float+0x266>
 80055ca:	4a37      	ldr	r2, [pc, #220]	@ (80056a8 <_printf_float+0x2dc>)
 80055cc:	2301      	movs	r3, #1
 80055ce:	4631      	mov	r1, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	f43f af54 	beq.w	8005482 <_printf_float+0xb6>
 80055da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055de:	4543      	cmp	r3, r8
 80055e0:	db02      	blt.n	80055e8 <_printf_float+0x21c>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	07d8      	lsls	r0, r3, #31
 80055e6:	d50f      	bpl.n	8005608 <_printf_float+0x23c>
 80055e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af45 	beq.w	8005482 <_printf_float+0xb6>
 80055f8:	f04f 0900 	mov.w	r9, #0
 80055fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005600:	f104 0a1a 	add.w	sl, r4, #26
 8005604:	45c8      	cmp	r8, r9
 8005606:	dc09      	bgt.n	800561c <_printf_float+0x250>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	079b      	lsls	r3, r3, #30
 800560c:	f100 8103 	bmi.w	8005816 <_printf_float+0x44a>
 8005610:	68e0      	ldr	r0, [r4, #12]
 8005612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005614:	4298      	cmp	r0, r3
 8005616:	bfb8      	it	lt
 8005618:	4618      	movlt	r0, r3
 800561a:	e734      	b.n	8005486 <_printf_float+0xba>
 800561c:	2301      	movs	r3, #1
 800561e:	4652      	mov	r2, sl
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af2b 	beq.w	8005482 <_printf_float+0xb6>
 800562c:	f109 0901 	add.w	r9, r9, #1
 8005630:	e7e8      	b.n	8005604 <_printf_float+0x238>
 8005632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc39      	bgt.n	80056ac <_printf_float+0x2e0>
 8005638:	4a1b      	ldr	r2, [pc, #108]	@ (80056a8 <_printf_float+0x2dc>)
 800563a:	2301      	movs	r3, #1
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af1d 	beq.w	8005482 <_printf_float+0xb6>
 8005648:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800564c:	ea59 0303 	orrs.w	r3, r9, r3
 8005650:	d102      	bne.n	8005658 <_printf_float+0x28c>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	07d9      	lsls	r1, r3, #31
 8005656:	d5d7      	bpl.n	8005608 <_printf_float+0x23c>
 8005658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af0d 	beq.w	8005482 <_printf_float+0xb6>
 8005668:	f04f 0a00 	mov.w	sl, #0
 800566c:	f104 0b1a 	add.w	fp, r4, #26
 8005670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005672:	425b      	negs	r3, r3
 8005674:	4553      	cmp	r3, sl
 8005676:	dc01      	bgt.n	800567c <_printf_float+0x2b0>
 8005678:	464b      	mov	r3, r9
 800567a:	e793      	b.n	80055a4 <_printf_float+0x1d8>
 800567c:	2301      	movs	r3, #1
 800567e:	465a      	mov	r2, fp
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f aefb 	beq.w	8005482 <_printf_float+0xb6>
 800568c:	f10a 0a01 	add.w	sl, sl, #1
 8005690:	e7ee      	b.n	8005670 <_printf_float+0x2a4>
 8005692:	bf00      	nop
 8005694:	7fefffff 	.word	0x7fefffff
 8005698:	080099b0 	.word	0x080099b0
 800569c:	080099b4 	.word	0x080099b4
 80056a0:	080099b8 	.word	0x080099b8
 80056a4:	080099bc 	.word	0x080099bc
 80056a8:	080099c0 	.word	0x080099c0
 80056ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056b2:	4553      	cmp	r3, sl
 80056b4:	bfa8      	it	ge
 80056b6:	4653      	movge	r3, sl
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	4699      	mov	r9, r3
 80056bc:	dc36      	bgt.n	800572c <_printf_float+0x360>
 80056be:	f04f 0b00 	mov.w	fp, #0
 80056c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c6:	f104 021a 	add.w	r2, r4, #26
 80056ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056cc:	9306      	str	r3, [sp, #24]
 80056ce:	eba3 0309 	sub.w	r3, r3, r9
 80056d2:	455b      	cmp	r3, fp
 80056d4:	dc31      	bgt.n	800573a <_printf_float+0x36e>
 80056d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d8:	459a      	cmp	sl, r3
 80056da:	dc3a      	bgt.n	8005752 <_printf_float+0x386>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	07da      	lsls	r2, r3, #31
 80056e0:	d437      	bmi.n	8005752 <_printf_float+0x386>
 80056e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e4:	ebaa 0903 	sub.w	r9, sl, r3
 80056e8:	9b06      	ldr	r3, [sp, #24]
 80056ea:	ebaa 0303 	sub.w	r3, sl, r3
 80056ee:	4599      	cmp	r9, r3
 80056f0:	bfa8      	it	ge
 80056f2:	4699      	movge	r9, r3
 80056f4:	f1b9 0f00 	cmp.w	r9, #0
 80056f8:	dc33      	bgt.n	8005762 <_printf_float+0x396>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005702:	f104 0b1a 	add.w	fp, r4, #26
 8005706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005708:	ebaa 0303 	sub.w	r3, sl, r3
 800570c:	eba3 0309 	sub.w	r3, r3, r9
 8005710:	4543      	cmp	r3, r8
 8005712:	f77f af79 	ble.w	8005608 <_printf_float+0x23c>
 8005716:	2301      	movs	r3, #1
 8005718:	465a      	mov	r2, fp
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f aeae 	beq.w	8005482 <_printf_float+0xb6>
 8005726:	f108 0801 	add.w	r8, r8, #1
 800572a:	e7ec      	b.n	8005706 <_printf_float+0x33a>
 800572c:	4642      	mov	r2, r8
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	d1c2      	bne.n	80056be <_printf_float+0x2f2>
 8005738:	e6a3      	b.n	8005482 <_printf_float+0xb6>
 800573a:	2301      	movs	r3, #1
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	9206      	str	r2, [sp, #24]
 8005742:	47b8      	blx	r7
 8005744:	3001      	adds	r0, #1
 8005746:	f43f ae9c 	beq.w	8005482 <_printf_float+0xb6>
 800574a:	9a06      	ldr	r2, [sp, #24]
 800574c:	f10b 0b01 	add.w	fp, fp, #1
 8005750:	e7bb      	b.n	80056ca <_printf_float+0x2fe>
 8005752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	d1c0      	bne.n	80056e2 <_printf_float+0x316>
 8005760:	e68f      	b.n	8005482 <_printf_float+0xb6>
 8005762:	9a06      	ldr	r2, [sp, #24]
 8005764:	464b      	mov	r3, r9
 8005766:	4442      	add	r2, r8
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	d1c3      	bne.n	80056fa <_printf_float+0x32e>
 8005772:	e686      	b.n	8005482 <_printf_float+0xb6>
 8005774:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005778:	f1ba 0f01 	cmp.w	sl, #1
 800577c:	dc01      	bgt.n	8005782 <_printf_float+0x3b6>
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d536      	bpl.n	80057f0 <_printf_float+0x424>
 8005782:	2301      	movs	r3, #1
 8005784:	4642      	mov	r2, r8
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f ae78 	beq.w	8005482 <_printf_float+0xb6>
 8005792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	f43f ae70 	beq.w	8005482 <_printf_float+0xb6>
 80057a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057a6:	2200      	movs	r2, #0
 80057a8:	2300      	movs	r3, #0
 80057aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ae:	f7fb f993 	bl	8000ad8 <__aeabi_dcmpeq>
 80057b2:	b9c0      	cbnz	r0, 80057e6 <_printf_float+0x41a>
 80057b4:	4653      	mov	r3, sl
 80057b6:	f108 0201 	add.w	r2, r8, #1
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	d10c      	bne.n	80057de <_printf_float+0x412>
 80057c4:	e65d      	b.n	8005482 <_printf_float+0xb6>
 80057c6:	2301      	movs	r3, #1
 80057c8:	465a      	mov	r2, fp
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae56 	beq.w	8005482 <_printf_float+0xb6>
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	45d0      	cmp	r8, sl
 80057dc:	dbf3      	blt.n	80057c6 <_printf_float+0x3fa>
 80057de:	464b      	mov	r3, r9
 80057e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057e4:	e6df      	b.n	80055a6 <_printf_float+0x1da>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	f104 0b1a 	add.w	fp, r4, #26
 80057ee:	e7f4      	b.n	80057da <_printf_float+0x40e>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4642      	mov	r2, r8
 80057f4:	e7e1      	b.n	80057ba <_printf_float+0x3ee>
 80057f6:	2301      	movs	r3, #1
 80057f8:	464a      	mov	r2, r9
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	f43f ae3e 	beq.w	8005482 <_printf_float+0xb6>
 8005806:	f108 0801 	add.w	r8, r8, #1
 800580a:	68e3      	ldr	r3, [r4, #12]
 800580c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800580e:	1a5b      	subs	r3, r3, r1
 8005810:	4543      	cmp	r3, r8
 8005812:	dcf0      	bgt.n	80057f6 <_printf_float+0x42a>
 8005814:	e6fc      	b.n	8005610 <_printf_float+0x244>
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	f104 0919 	add.w	r9, r4, #25
 800581e:	e7f4      	b.n	800580a <_printf_float+0x43e>

08005820 <_printf_common>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	4698      	mov	r8, r3
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	690b      	ldr	r3, [r1, #16]
 800582c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005830:	4293      	cmp	r3, r2
 8005832:	bfb8      	it	lt
 8005834:	4613      	movlt	r3, r2
 8005836:	6033      	str	r3, [r6, #0]
 8005838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800583c:	4607      	mov	r7, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b10a      	cbz	r2, 8005846 <_printf_common+0x26>
 8005842:	3301      	adds	r3, #1
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	0699      	lsls	r1, r3, #26
 800584a:	bf42      	ittt	mi
 800584c:	6833      	ldrmi	r3, [r6, #0]
 800584e:	3302      	addmi	r3, #2
 8005850:	6033      	strmi	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d106      	bne.n	8005868 <_printf_common+0x48>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	42ab      	cmp	r3, r5
 8005866:	dc26      	bgt.n	80058b6 <_printf_common+0x96>
 8005868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	3b00      	subs	r3, #0
 8005870:	bf18      	it	ne
 8005872:	2301      	movne	r3, #1
 8005874:	0692      	lsls	r2, r2, #26
 8005876:	d42b      	bmi.n	80058d0 <_printf_common+0xb0>
 8005878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800587c:	4641      	mov	r1, r8
 800587e:	4638      	mov	r0, r7
 8005880:	47c8      	blx	r9
 8005882:	3001      	adds	r0, #1
 8005884:	d01e      	beq.n	80058c4 <_printf_common+0xa4>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	f003 0306 	and.w	r3, r3, #6
 800588e:	2b04      	cmp	r3, #4
 8005890:	bf02      	ittt	eq
 8005892:	68e5      	ldreq	r5, [r4, #12]
 8005894:	6833      	ldreq	r3, [r6, #0]
 8005896:	1aed      	subeq	r5, r5, r3
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	bf0c      	ite	eq
 800589c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a0:	2500      	movne	r5, #0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfc4      	itt	gt
 80058a6:	1a9b      	subgt	r3, r3, r2
 80058a8:	18ed      	addgt	r5, r5, r3
 80058aa:	2600      	movs	r6, #0
 80058ac:	341a      	adds	r4, #26
 80058ae:	42b5      	cmp	r5, r6
 80058b0:	d11a      	bne.n	80058e8 <_printf_common+0xc8>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e008      	b.n	80058c8 <_printf_common+0xa8>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4641      	mov	r1, r8
 80058bc:	4638      	mov	r0, r7
 80058be:	47c8      	blx	r9
 80058c0:	3001      	adds	r0, #1
 80058c2:	d103      	bne.n	80058cc <_printf_common+0xac>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7c6      	b.n	800585e <_printf_common+0x3e>
 80058d0:	18e1      	adds	r1, r4, r3
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	2030      	movs	r0, #48	@ 0x30
 80058d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058da:	4422      	add	r2, r4
 80058dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058e4:	3302      	adds	r3, #2
 80058e6:	e7c7      	b.n	8005878 <_printf_common+0x58>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4622      	mov	r2, r4
 80058ec:	4641      	mov	r1, r8
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c8      	blx	r9
 80058f2:	3001      	adds	r0, #1
 80058f4:	d0e6      	beq.n	80058c4 <_printf_common+0xa4>
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7d9      	b.n	80058ae <_printf_common+0x8e>
	...

080058fc <_printf_i>:
 80058fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	7e0f      	ldrb	r7, [r1, #24]
 8005902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005904:	2f78      	cmp	r7, #120	@ 0x78
 8005906:	4691      	mov	r9, r2
 8005908:	4680      	mov	r8, r0
 800590a:	460c      	mov	r4, r1
 800590c:	469a      	mov	sl, r3
 800590e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005912:	d807      	bhi.n	8005924 <_printf_i+0x28>
 8005914:	2f62      	cmp	r7, #98	@ 0x62
 8005916:	d80a      	bhi.n	800592e <_printf_i+0x32>
 8005918:	2f00      	cmp	r7, #0
 800591a:	f000 80d2 	beq.w	8005ac2 <_printf_i+0x1c6>
 800591e:	2f58      	cmp	r7, #88	@ 0x58
 8005920:	f000 80b9 	beq.w	8005a96 <_printf_i+0x19a>
 8005924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800592c:	e03a      	b.n	80059a4 <_printf_i+0xa8>
 800592e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005932:	2b15      	cmp	r3, #21
 8005934:	d8f6      	bhi.n	8005924 <_printf_i+0x28>
 8005936:	a101      	add	r1, pc, #4	@ (adr r1, 800593c <_printf_i+0x40>)
 8005938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800593c:	08005995 	.word	0x08005995
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005925 	.word	0x08005925
 8005948:	08005925 	.word	0x08005925
 800594c:	08005925 	.word	0x08005925
 8005950:	08005925 	.word	0x08005925
 8005954:	080059a9 	.word	0x080059a9
 8005958:	08005925 	.word	0x08005925
 800595c:	08005925 	.word	0x08005925
 8005960:	08005925 	.word	0x08005925
 8005964:	08005925 	.word	0x08005925
 8005968:	08005aa9 	.word	0x08005aa9
 800596c:	080059d3 	.word	0x080059d3
 8005970:	08005a63 	.word	0x08005a63
 8005974:	08005925 	.word	0x08005925
 8005978:	08005925 	.word	0x08005925
 800597c:	08005acb 	.word	0x08005acb
 8005980:	08005925 	.word	0x08005925
 8005984:	080059d3 	.word	0x080059d3
 8005988:	08005925 	.word	0x08005925
 800598c:	08005925 	.word	0x08005925
 8005990:	08005a6b 	.word	0x08005a6b
 8005994:	6833      	ldr	r3, [r6, #0]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6032      	str	r2, [r6, #0]
 800599c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e09d      	b.n	8005ae4 <_printf_i+0x1e8>
 80059a8:	6833      	ldr	r3, [r6, #0]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	6031      	str	r1, [r6, #0]
 80059b0:	0606      	lsls	r6, r0, #24
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0xbc>
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	e003      	b.n	80059c0 <_printf_i+0xc4>
 80059b8:	0645      	lsls	r5, r0, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0xb8>
 80059bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	da03      	bge.n	80059cc <_printf_i+0xd0>
 80059c4:	232d      	movs	r3, #45	@ 0x2d
 80059c6:	426d      	negs	r5, r5
 80059c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059cc:	4859      	ldr	r0, [pc, #356]	@ (8005b34 <_printf_i+0x238>)
 80059ce:	230a      	movs	r3, #10
 80059d0:	e011      	b.n	80059f6 <_printf_i+0xfa>
 80059d2:	6821      	ldr	r1, [r4, #0]
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	0608      	lsls	r0, r1, #24
 80059d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059dc:	d402      	bmi.n	80059e4 <_printf_i+0xe8>
 80059de:	0649      	lsls	r1, r1, #25
 80059e0:	bf48      	it	mi
 80059e2:	b2ad      	uxthmi	r5, r5
 80059e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059e6:	4853      	ldr	r0, [pc, #332]	@ (8005b34 <_printf_i+0x238>)
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	bf14      	ite	ne
 80059ec:	230a      	movne	r3, #10
 80059ee:	2308      	moveq	r3, #8
 80059f0:	2100      	movs	r1, #0
 80059f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059f6:	6866      	ldr	r6, [r4, #4]
 80059f8:	60a6      	str	r6, [r4, #8]
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	bfa2      	ittt	ge
 80059fe:	6821      	ldrge	r1, [r4, #0]
 8005a00:	f021 0104 	bicge.w	r1, r1, #4
 8005a04:	6021      	strge	r1, [r4, #0]
 8005a06:	b90d      	cbnz	r5, 8005a0c <_printf_i+0x110>
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	d04b      	beq.n	8005aa4 <_printf_i+0x1a8>
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a12:	fb03 5711 	mls	r7, r3, r1, r5
 8005a16:	5dc7      	ldrb	r7, [r0, r7]
 8005a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a1c:	462f      	mov	r7, r5
 8005a1e:	42bb      	cmp	r3, r7
 8005a20:	460d      	mov	r5, r1
 8005a22:	d9f4      	bls.n	8005a0e <_printf_i+0x112>
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d10b      	bne.n	8005a40 <_printf_i+0x144>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	07df      	lsls	r7, r3, #31
 8005a2c:	d508      	bpl.n	8005a40 <_printf_i+0x144>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	4299      	cmp	r1, r3
 8005a34:	bfde      	ittt	le
 8005a36:	2330      	movle	r3, #48	@ 0x30
 8005a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a40:	1b92      	subs	r2, r2, r6
 8005a42:	6122      	str	r2, [r4, #16]
 8005a44:	f8cd a000 	str.w	sl, [sp]
 8005a48:	464b      	mov	r3, r9
 8005a4a:	aa03      	add	r2, sp, #12
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4640      	mov	r0, r8
 8005a50:	f7ff fee6 	bl	8005820 <_printf_common>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d14a      	bne.n	8005aee <_printf_i+0x1f2>
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5c:	b004      	add	sp, #16
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	f043 0320 	orr.w	r3, r3, #32
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	4833      	ldr	r0, [pc, #204]	@ (8005b38 <_printf_i+0x23c>)
 8005a6c:	2778      	movs	r7, #120	@ 0x78
 8005a6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	6831      	ldr	r1, [r6, #0]
 8005a76:	061f      	lsls	r7, r3, #24
 8005a78:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a7c:	d402      	bmi.n	8005a84 <_printf_i+0x188>
 8005a7e:	065f      	lsls	r7, r3, #25
 8005a80:	bf48      	it	mi
 8005a82:	b2ad      	uxthmi	r5, r5
 8005a84:	6031      	str	r1, [r6, #0]
 8005a86:	07d9      	lsls	r1, r3, #31
 8005a88:	bf44      	itt	mi
 8005a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a8e:	6023      	strmi	r3, [r4, #0]
 8005a90:	b11d      	cbz	r5, 8005a9a <_printf_i+0x19e>
 8005a92:	2310      	movs	r3, #16
 8005a94:	e7ac      	b.n	80059f0 <_printf_i+0xf4>
 8005a96:	4827      	ldr	r0, [pc, #156]	@ (8005b34 <_printf_i+0x238>)
 8005a98:	e7e9      	b.n	8005a6e <_printf_i+0x172>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f023 0320 	bic.w	r3, r3, #32
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	e7f6      	b.n	8005a92 <_printf_i+0x196>
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	e7bd      	b.n	8005a24 <_printf_i+0x128>
 8005aa8:	6833      	ldr	r3, [r6, #0]
 8005aaa:	6825      	ldr	r5, [r4, #0]
 8005aac:	6961      	ldr	r1, [r4, #20]
 8005aae:	1d18      	adds	r0, r3, #4
 8005ab0:	6030      	str	r0, [r6, #0]
 8005ab2:	062e      	lsls	r6, r5, #24
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0x1c0>
 8005ab8:	6019      	str	r1, [r3, #0]
 8005aba:	e002      	b.n	8005ac2 <_printf_i+0x1c6>
 8005abc:	0668      	lsls	r0, r5, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0x1bc>
 8005ac0:	8019      	strh	r1, [r3, #0]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	4616      	mov	r6, r2
 8005ac8:	e7bc      	b.n	8005a44 <_printf_i+0x148>
 8005aca:	6833      	ldr	r3, [r6, #0]
 8005acc:	1d1a      	adds	r2, r3, #4
 8005ace:	6032      	str	r2, [r6, #0]
 8005ad0:	681e      	ldr	r6, [r3, #0]
 8005ad2:	6862      	ldr	r2, [r4, #4]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7fa fb82 	bl	80001e0 <memchr>
 8005adc:	b108      	cbz	r0, 8005ae2 <_printf_i+0x1e6>
 8005ade:	1b80      	subs	r0, r0, r6
 8005ae0:	6060      	str	r0, [r4, #4]
 8005ae2:	6863      	ldr	r3, [r4, #4]
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aec:	e7aa      	b.n	8005a44 <_printf_i+0x148>
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d0ad      	beq.n	8005a58 <_printf_i+0x15c>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	079b      	lsls	r3, r3, #30
 8005b00:	d413      	bmi.n	8005b2a <_printf_i+0x22e>
 8005b02:	68e0      	ldr	r0, [r4, #12]
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	4298      	cmp	r0, r3
 8005b08:	bfb8      	it	lt
 8005b0a:	4618      	movlt	r0, r3
 8005b0c:	e7a6      	b.n	8005a5c <_printf_i+0x160>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4632      	mov	r2, r6
 8005b12:	4649      	mov	r1, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	47d0      	blx	sl
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d09d      	beq.n	8005a58 <_printf_i+0x15c>
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	68e3      	ldr	r3, [r4, #12]
 8005b20:	9903      	ldr	r1, [sp, #12]
 8005b22:	1a5b      	subs	r3, r3, r1
 8005b24:	42ab      	cmp	r3, r5
 8005b26:	dcf2      	bgt.n	8005b0e <_printf_i+0x212>
 8005b28:	e7eb      	b.n	8005b02 <_printf_i+0x206>
 8005b2a:	2500      	movs	r5, #0
 8005b2c:	f104 0619 	add.w	r6, r4, #25
 8005b30:	e7f5      	b.n	8005b1e <_printf_i+0x222>
 8005b32:	bf00      	nop
 8005b34:	080099c2 	.word	0x080099c2
 8005b38:	080099d3 	.word	0x080099d3

08005b3c <_scanf_float>:
 8005b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b40:	b087      	sub	sp, #28
 8005b42:	4617      	mov	r7, r2
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	688b      	ldr	r3, [r1, #8]
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b4e:	bf81      	itttt	hi
 8005b50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b54:	eb03 0b05 	addhi.w	fp, r3, r5
 8005b58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b5c:	608b      	strhi	r3, [r1, #8]
 8005b5e:	680b      	ldr	r3, [r1, #0]
 8005b60:	460a      	mov	r2, r1
 8005b62:	f04f 0500 	mov.w	r5, #0
 8005b66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005b6a:	f842 3b1c 	str.w	r3, [r2], #28
 8005b6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b72:	4680      	mov	r8, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	bf98      	it	ls
 8005b78:	f04f 0b00 	movls.w	fp, #0
 8005b7c:	9201      	str	r2, [sp, #4]
 8005b7e:	4616      	mov	r6, r2
 8005b80:	46aa      	mov	sl, r5
 8005b82:	46a9      	mov	r9, r5
 8005b84:	9502      	str	r5, [sp, #8]
 8005b86:	68a2      	ldr	r2, [r4, #8]
 8005b88:	b152      	cbz	r2, 8005ba0 <_scanf_float+0x64>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005b90:	d864      	bhi.n	8005c5c <_scanf_float+0x120>
 8005b92:	2b40      	cmp	r3, #64	@ 0x40
 8005b94:	d83c      	bhi.n	8005c10 <_scanf_float+0xd4>
 8005b96:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005b9a:	b2c8      	uxtb	r0, r1
 8005b9c:	280e      	cmp	r0, #14
 8005b9e:	d93a      	bls.n	8005c16 <_scanf_float+0xda>
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	d003      	beq.n	8005bae <_scanf_float+0x72>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bb2:	f1ba 0f01 	cmp.w	sl, #1
 8005bb6:	f200 8117 	bhi.w	8005de8 <_scanf_float+0x2ac>
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	429e      	cmp	r6, r3
 8005bbe:	f200 8108 	bhi.w	8005dd2 <_scanf_float+0x296>
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	b007      	add	sp, #28
 8005bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005bce:	2a0d      	cmp	r2, #13
 8005bd0:	d8e6      	bhi.n	8005ba0 <_scanf_float+0x64>
 8005bd2:	a101      	add	r1, pc, #4	@ (adr r1, 8005bd8 <_scanf_float+0x9c>)
 8005bd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bd8:	08005d1f 	.word	0x08005d1f
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005ba1 	.word	0x08005ba1
 8005be8:	08005d7f 	.word	0x08005d7f
 8005bec:	08005d57 	.word	0x08005d57
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d2d 	.word	0x08005d2d
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005ba1 	.word	0x08005ba1
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005ce5 	.word	0x08005ce5
 8005c10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c14:	e7db      	b.n	8005bce <_scanf_float+0x92>
 8005c16:	290e      	cmp	r1, #14
 8005c18:	d8c2      	bhi.n	8005ba0 <_scanf_float+0x64>
 8005c1a:	a001      	add	r0, pc, #4	@ (adr r0, 8005c20 <_scanf_float+0xe4>)
 8005c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c20:	08005cd5 	.word	0x08005cd5
 8005c24:	08005ba1 	.word	0x08005ba1
 8005c28:	08005cd5 	.word	0x08005cd5
 8005c2c:	08005d6b 	.word	0x08005d6b
 8005c30:	08005ba1 	.word	0x08005ba1
 8005c34:	08005c7d 	.word	0x08005c7d
 8005c38:	08005cbb 	.word	0x08005cbb
 8005c3c:	08005cbb 	.word	0x08005cbb
 8005c40:	08005cbb 	.word	0x08005cbb
 8005c44:	08005cbb 	.word	0x08005cbb
 8005c48:	08005cbb 	.word	0x08005cbb
 8005c4c:	08005cbb 	.word	0x08005cbb
 8005c50:	08005cbb 	.word	0x08005cbb
 8005c54:	08005cbb 	.word	0x08005cbb
 8005c58:	08005cbb 	.word	0x08005cbb
 8005c5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8005c5e:	d809      	bhi.n	8005c74 <_scanf_float+0x138>
 8005c60:	2b60      	cmp	r3, #96	@ 0x60
 8005c62:	d8b2      	bhi.n	8005bca <_scanf_float+0x8e>
 8005c64:	2b54      	cmp	r3, #84	@ 0x54
 8005c66:	d07b      	beq.n	8005d60 <_scanf_float+0x224>
 8005c68:	2b59      	cmp	r3, #89	@ 0x59
 8005c6a:	d199      	bne.n	8005ba0 <_scanf_float+0x64>
 8005c6c:	2d07      	cmp	r5, #7
 8005c6e:	d197      	bne.n	8005ba0 <_scanf_float+0x64>
 8005c70:	2508      	movs	r5, #8
 8005c72:	e02c      	b.n	8005cce <_scanf_float+0x192>
 8005c74:	2b74      	cmp	r3, #116	@ 0x74
 8005c76:	d073      	beq.n	8005d60 <_scanf_float+0x224>
 8005c78:	2b79      	cmp	r3, #121	@ 0x79
 8005c7a:	e7f6      	b.n	8005c6a <_scanf_float+0x12e>
 8005c7c:	6821      	ldr	r1, [r4, #0]
 8005c7e:	05c8      	lsls	r0, r1, #23
 8005c80:	d51b      	bpl.n	8005cba <_scanf_float+0x17e>
 8005c82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005c86:	6021      	str	r1, [r4, #0]
 8005c88:	f109 0901 	add.w	r9, r9, #1
 8005c8c:	f1bb 0f00 	cmp.w	fp, #0
 8005c90:	d003      	beq.n	8005c9a <_scanf_float+0x15e>
 8005c92:	3201      	adds	r2, #1
 8005c94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c98:	60a2      	str	r2, [r4, #8]
 8005c9a:	68a3      	ldr	r3, [r4, #8]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	60a3      	str	r3, [r4, #8]
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	f340 8087 	ble.w	8005dc0 <_scanf_float+0x284>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	e765      	b.n	8005b86 <_scanf_float+0x4a>
 8005cba:	eb1a 0105 	adds.w	r1, sl, r5
 8005cbe:	f47f af6f 	bne.w	8005ba0 <_scanf_float+0x64>
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	460d      	mov	r5, r1
 8005ccc:	468a      	mov	sl, r1
 8005cce:	f806 3b01 	strb.w	r3, [r6], #1
 8005cd2:	e7e2      	b.n	8005c9a <_scanf_float+0x15e>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	0610      	lsls	r0, r2, #24
 8005cd8:	f57f af62 	bpl.w	8005ba0 <_scanf_float+0x64>
 8005cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ce0:	6022      	str	r2, [r4, #0]
 8005ce2:	e7f4      	b.n	8005cce <_scanf_float+0x192>
 8005ce4:	f1ba 0f00 	cmp.w	sl, #0
 8005ce8:	d10e      	bne.n	8005d08 <_scanf_float+0x1cc>
 8005cea:	f1b9 0f00 	cmp.w	r9, #0
 8005cee:	d10e      	bne.n	8005d0e <_scanf_float+0x1d2>
 8005cf0:	6822      	ldr	r2, [r4, #0]
 8005cf2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005cf6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005cfa:	d108      	bne.n	8005d0e <_scanf_float+0x1d2>
 8005cfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d00:	6022      	str	r2, [r4, #0]
 8005d02:	f04f 0a01 	mov.w	sl, #1
 8005d06:	e7e2      	b.n	8005cce <_scanf_float+0x192>
 8005d08:	f1ba 0f02 	cmp.w	sl, #2
 8005d0c:	d055      	beq.n	8005dba <_scanf_float+0x27e>
 8005d0e:	2d01      	cmp	r5, #1
 8005d10:	d002      	beq.n	8005d18 <_scanf_float+0x1dc>
 8005d12:	2d04      	cmp	r5, #4
 8005d14:	f47f af44 	bne.w	8005ba0 <_scanf_float+0x64>
 8005d18:	3501      	adds	r5, #1
 8005d1a:	b2ed      	uxtb	r5, r5
 8005d1c:	e7d7      	b.n	8005cce <_scanf_float+0x192>
 8005d1e:	f1ba 0f01 	cmp.w	sl, #1
 8005d22:	f47f af3d 	bne.w	8005ba0 <_scanf_float+0x64>
 8005d26:	f04f 0a02 	mov.w	sl, #2
 8005d2a:	e7d0      	b.n	8005cce <_scanf_float+0x192>
 8005d2c:	b97d      	cbnz	r5, 8005d4e <_scanf_float+0x212>
 8005d2e:	f1b9 0f00 	cmp.w	r9, #0
 8005d32:	f47f af38 	bne.w	8005ba6 <_scanf_float+0x6a>
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d40:	f040 8108 	bne.w	8005f54 <_scanf_float+0x418>
 8005d44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d48:	6022      	str	r2, [r4, #0]
 8005d4a:	2501      	movs	r5, #1
 8005d4c:	e7bf      	b.n	8005cce <_scanf_float+0x192>
 8005d4e:	2d03      	cmp	r5, #3
 8005d50:	d0e2      	beq.n	8005d18 <_scanf_float+0x1dc>
 8005d52:	2d05      	cmp	r5, #5
 8005d54:	e7de      	b.n	8005d14 <_scanf_float+0x1d8>
 8005d56:	2d02      	cmp	r5, #2
 8005d58:	f47f af22 	bne.w	8005ba0 <_scanf_float+0x64>
 8005d5c:	2503      	movs	r5, #3
 8005d5e:	e7b6      	b.n	8005cce <_scanf_float+0x192>
 8005d60:	2d06      	cmp	r5, #6
 8005d62:	f47f af1d 	bne.w	8005ba0 <_scanf_float+0x64>
 8005d66:	2507      	movs	r5, #7
 8005d68:	e7b1      	b.n	8005cce <_scanf_float+0x192>
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	0591      	lsls	r1, r2, #22
 8005d6e:	f57f af17 	bpl.w	8005ba0 <_scanf_float+0x64>
 8005d72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005d76:	6022      	str	r2, [r4, #0]
 8005d78:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d7c:	e7a7      	b.n	8005cce <_scanf_float+0x192>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d88:	d006      	beq.n	8005d98 <_scanf_float+0x25c>
 8005d8a:	0550      	lsls	r0, r2, #21
 8005d8c:	f57f af08 	bpl.w	8005ba0 <_scanf_float+0x64>
 8005d90:	f1b9 0f00 	cmp.w	r9, #0
 8005d94:	f000 80de 	beq.w	8005f54 <_scanf_float+0x418>
 8005d98:	0591      	lsls	r1, r2, #22
 8005d9a:	bf58      	it	pl
 8005d9c:	9902      	ldrpl	r1, [sp, #8]
 8005d9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005da2:	bf58      	it	pl
 8005da4:	eba9 0101 	subpl.w	r1, r9, r1
 8005da8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005dac:	bf58      	it	pl
 8005dae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005db2:	6022      	str	r2, [r4, #0]
 8005db4:	f04f 0900 	mov.w	r9, #0
 8005db8:	e789      	b.n	8005cce <_scanf_float+0x192>
 8005dba:	f04f 0a03 	mov.w	sl, #3
 8005dbe:	e786      	b.n	8005cce <_scanf_float+0x192>
 8005dc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4798      	blx	r3
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f43f aedb 	beq.w	8005b86 <_scanf_float+0x4a>
 8005dd0:	e6e6      	b.n	8005ba0 <_scanf_float+0x64>
 8005dd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dda:	463a      	mov	r2, r7
 8005ddc:	4640      	mov	r0, r8
 8005dde:	4798      	blx	r3
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	e6e8      	b.n	8005bba <_scanf_float+0x7e>
 8005de8:	1e6b      	subs	r3, r5, #1
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d824      	bhi.n	8005e38 <_scanf_float+0x2fc>
 8005dee:	2d02      	cmp	r5, #2
 8005df0:	d836      	bhi.n	8005e60 <_scanf_float+0x324>
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	429e      	cmp	r6, r3
 8005df6:	f67f aee4 	bls.w	8005bc2 <_scanf_float+0x86>
 8005dfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e02:	463a      	mov	r2, r7
 8005e04:	4640      	mov	r0, r8
 8005e06:	4798      	blx	r3
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	e7f0      	b.n	8005df2 <_scanf_float+0x2b6>
 8005e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e18:	463a      	mov	r2, r7
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4798      	blx	r3
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e28:	fa5f fa8a 	uxtb.w	sl, sl
 8005e2c:	f1ba 0f02 	cmp.w	sl, #2
 8005e30:	d1ee      	bne.n	8005e10 <_scanf_float+0x2d4>
 8005e32:	3d03      	subs	r5, #3
 8005e34:	b2ed      	uxtb	r5, r5
 8005e36:	1b76      	subs	r6, r6, r5
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	05da      	lsls	r2, r3, #23
 8005e3c:	d530      	bpl.n	8005ea0 <_scanf_float+0x364>
 8005e3e:	055b      	lsls	r3, r3, #21
 8005e40:	d511      	bpl.n	8005e66 <_scanf_float+0x32a>
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	429e      	cmp	r6, r3
 8005e46:	f67f aebc 	bls.w	8005bc2 <_scanf_float+0x86>
 8005e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e52:	463a      	mov	r2, r7
 8005e54:	4640      	mov	r0, r8
 8005e56:	4798      	blx	r3
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	e7f0      	b.n	8005e42 <_scanf_float+0x306>
 8005e60:	46aa      	mov	sl, r5
 8005e62:	46b3      	mov	fp, r6
 8005e64:	e7de      	b.n	8005e24 <_scanf_float+0x2e8>
 8005e66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	2965      	cmp	r1, #101	@ 0x65
 8005e6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e72:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e76:	6123      	str	r3, [r4, #16]
 8005e78:	d00c      	beq.n	8005e94 <_scanf_float+0x358>
 8005e7a:	2945      	cmp	r1, #69	@ 0x45
 8005e7c:	d00a      	beq.n	8005e94 <_scanf_float+0x358>
 8005e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e82:	463a      	mov	r2, r7
 8005e84:	4640      	mov	r0, r8
 8005e86:	4798      	blx	r3
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	1eb5      	subs	r5, r6, #2
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e98:	463a      	mov	r2, r7
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	4798      	blx	r3
 8005e9e:	462e      	mov	r6, r5
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	f012 0210 	ands.w	r2, r2, #16
 8005ea6:	d001      	beq.n	8005eac <_scanf_float+0x370>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e68b      	b.n	8005bc4 <_scanf_float+0x88>
 8005eac:	7032      	strb	r2, [r6, #0]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb8:	d11c      	bne.n	8005ef4 <_scanf_float+0x3b8>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	454b      	cmp	r3, r9
 8005ebe:	eba3 0209 	sub.w	r2, r3, r9
 8005ec2:	d123      	bne.n	8005f0c <_scanf_float+0x3d0>
 8005ec4:	9901      	ldr	r1, [sp, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4640      	mov	r0, r8
 8005eca:	f002 fbf9 	bl	80086c0 <_strtod_r>
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	6821      	ldr	r1, [r4, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f011 0f02 	tst.w	r1, #2
 8005ed8:	ec57 6b10 	vmov	r6, r7, d0
 8005edc:	f103 0204 	add.w	r2, r3, #4
 8005ee0:	d01f      	beq.n	8005f22 <_scanf_float+0x3e6>
 8005ee2:	9903      	ldr	r1, [sp, #12]
 8005ee4:	600a      	str	r2, [r1, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	e9c3 6700 	strd	r6, r7, [r3]
 8005eec:	68e3      	ldr	r3, [r4, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60e3      	str	r3, [r4, #12]
 8005ef2:	e7d9      	b.n	8005ea8 <_scanf_float+0x36c>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0e4      	beq.n	8005ec4 <_scanf_float+0x388>
 8005efa:	9905      	ldr	r1, [sp, #20]
 8005efc:	230a      	movs	r3, #10
 8005efe:	3101      	adds	r1, #1
 8005f00:	4640      	mov	r0, r8
 8005f02:	f002 fc5d 	bl	80087c0 <_strtol_r>
 8005f06:	9b04      	ldr	r3, [sp, #16]
 8005f08:	9e05      	ldr	r6, [sp, #20]
 8005f0a:	1ac2      	subs	r2, r0, r3
 8005f0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005f10:	429e      	cmp	r6, r3
 8005f12:	bf28      	it	cs
 8005f14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005f18:	4910      	ldr	r1, [pc, #64]	@ (8005f5c <_scanf_float+0x420>)
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f000 f8e4 	bl	80060e8 <siprintf>
 8005f20:	e7d0      	b.n	8005ec4 <_scanf_float+0x388>
 8005f22:	f011 0f04 	tst.w	r1, #4
 8005f26:	9903      	ldr	r1, [sp, #12]
 8005f28:	600a      	str	r2, [r1, #0]
 8005f2a:	d1dc      	bne.n	8005ee6 <_scanf_float+0x3aa>
 8005f2c:	681d      	ldr	r5, [r3, #0]
 8005f2e:	4632      	mov	r2, r6
 8005f30:	463b      	mov	r3, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	4639      	mov	r1, r7
 8005f36:	f7fa fe01 	bl	8000b3c <__aeabi_dcmpun>
 8005f3a:	b128      	cbz	r0, 8005f48 <_scanf_float+0x40c>
 8005f3c:	4808      	ldr	r0, [pc, #32]	@ (8005f60 <_scanf_float+0x424>)
 8005f3e:	f000 f9b7 	bl	80062b0 <nanf>
 8005f42:	ed85 0a00 	vstr	s0, [r5]
 8005f46:	e7d1      	b.n	8005eec <_scanf_float+0x3b0>
 8005f48:	4630      	mov	r0, r6
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	f7fa fe54 	bl	8000bf8 <__aeabi_d2f>
 8005f50:	6028      	str	r0, [r5, #0]
 8005f52:	e7cb      	b.n	8005eec <_scanf_float+0x3b0>
 8005f54:	f04f 0900 	mov.w	r9, #0
 8005f58:	e629      	b.n	8005bae <_scanf_float+0x72>
 8005f5a:	bf00      	nop
 8005f5c:	080099e4 	.word	0x080099e4
 8005f60:	08009d7d 	.word	0x08009d7d

08005f64 <std>:
 8005f64:	2300      	movs	r3, #0
 8005f66:	b510      	push	{r4, lr}
 8005f68:	4604      	mov	r4, r0
 8005f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f72:	6083      	str	r3, [r0, #8]
 8005f74:	8181      	strh	r1, [r0, #12]
 8005f76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f78:	81c2      	strh	r2, [r0, #14]
 8005f7a:	6183      	str	r3, [r0, #24]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	2208      	movs	r2, #8
 8005f80:	305c      	adds	r0, #92	@ 0x5c
 8005f82:	f000 f914 	bl	80061ae <memset>
 8005f86:	4b0d      	ldr	r3, [pc, #52]	@ (8005fbc <std+0x58>)
 8005f88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <std+0x5c>)
 8005f8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <std+0x60>)
 8005f90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <std+0x64>)
 8005f94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <std+0x68>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d006      	beq.n	8005fac <std+0x48>
 8005f9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fa2:	4294      	cmp	r4, r2
 8005fa4:	d002      	beq.n	8005fac <std+0x48>
 8005fa6:	33d0      	adds	r3, #208	@ 0xd0
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d105      	bne.n	8005fb8 <std+0x54>
 8005fac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 b978 	b.w	80062a8 <__retarget_lock_init_recursive>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bf00      	nop
 8005fbc:	08006129 	.word	0x08006129
 8005fc0:	0800614b 	.word	0x0800614b
 8005fc4:	08006183 	.word	0x08006183
 8005fc8:	080061a7 	.word	0x080061a7
 8005fcc:	20000368 	.word	0x20000368

08005fd0 <stdio_exit_handler>:
 8005fd0:	4a02      	ldr	r2, [pc, #8]	@ (8005fdc <stdio_exit_handler+0xc>)
 8005fd2:	4903      	ldr	r1, [pc, #12]	@ (8005fe0 <stdio_exit_handler+0x10>)
 8005fd4:	4803      	ldr	r0, [pc, #12]	@ (8005fe4 <stdio_exit_handler+0x14>)
 8005fd6:	f000 b869 	b.w	80060ac <_fwalk_sglue>
 8005fda:	bf00      	nop
 8005fdc:	2000001c 	.word	0x2000001c
 8005fe0:	08008b7d 	.word	0x08008b7d
 8005fe4:	2000002c 	.word	0x2000002c

08005fe8 <cleanup_stdio>:
 8005fe8:	6841      	ldr	r1, [r0, #4]
 8005fea:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <cleanup_stdio+0x34>)
 8005fec:	4299      	cmp	r1, r3
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	d001      	beq.n	8005ff8 <cleanup_stdio+0x10>
 8005ff4:	f002 fdc2 	bl	8008b7c <_fflush_r>
 8005ff8:	68a1      	ldr	r1, [r4, #8]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <cleanup_stdio+0x38>)
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	d002      	beq.n	8006006 <cleanup_stdio+0x1e>
 8006000:	4620      	mov	r0, r4
 8006002:	f002 fdbb 	bl	8008b7c <_fflush_r>
 8006006:	68e1      	ldr	r1, [r4, #12]
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <cleanup_stdio+0x3c>)
 800600a:	4299      	cmp	r1, r3
 800600c:	d004      	beq.n	8006018 <cleanup_stdio+0x30>
 800600e:	4620      	mov	r0, r4
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f002 bdb2 	b.w	8008b7c <_fflush_r>
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	20000368 	.word	0x20000368
 8006020:	200003d0 	.word	0x200003d0
 8006024:	20000438 	.word	0x20000438

08006028 <global_stdio_init.part.0>:
 8006028:	b510      	push	{r4, lr}
 800602a:	4b0b      	ldr	r3, [pc, #44]	@ (8006058 <global_stdio_init.part.0+0x30>)
 800602c:	4c0b      	ldr	r4, [pc, #44]	@ (800605c <global_stdio_init.part.0+0x34>)
 800602e:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <global_stdio_init.part.0+0x38>)
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	4620      	mov	r0, r4
 8006034:	2200      	movs	r2, #0
 8006036:	2104      	movs	r1, #4
 8006038:	f7ff ff94 	bl	8005f64 <std>
 800603c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006040:	2201      	movs	r2, #1
 8006042:	2109      	movs	r1, #9
 8006044:	f7ff ff8e 	bl	8005f64 <std>
 8006048:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800604c:	2202      	movs	r2, #2
 800604e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006052:	2112      	movs	r1, #18
 8006054:	f7ff bf86 	b.w	8005f64 <std>
 8006058:	200004a0 	.word	0x200004a0
 800605c:	20000368 	.word	0x20000368
 8006060:	08005fd1 	.word	0x08005fd1

08006064 <__sfp_lock_acquire>:
 8006064:	4801      	ldr	r0, [pc, #4]	@ (800606c <__sfp_lock_acquire+0x8>)
 8006066:	f000 b920 	b.w	80062aa <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	200004a9 	.word	0x200004a9

08006070 <__sfp_lock_release>:
 8006070:	4801      	ldr	r0, [pc, #4]	@ (8006078 <__sfp_lock_release+0x8>)
 8006072:	f000 b91b 	b.w	80062ac <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	200004a9 	.word	0x200004a9

0800607c <__sinit>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	f7ff fff0 	bl	8006064 <__sfp_lock_acquire>
 8006084:	6a23      	ldr	r3, [r4, #32]
 8006086:	b11b      	cbz	r3, 8006090 <__sinit+0x14>
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f7ff bff0 	b.w	8006070 <__sfp_lock_release>
 8006090:	4b04      	ldr	r3, [pc, #16]	@ (80060a4 <__sinit+0x28>)
 8006092:	6223      	str	r3, [r4, #32]
 8006094:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <__sinit+0x2c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f5      	bne.n	8006088 <__sinit+0xc>
 800609c:	f7ff ffc4 	bl	8006028 <global_stdio_init.part.0>
 80060a0:	e7f2      	b.n	8006088 <__sinit+0xc>
 80060a2:	bf00      	nop
 80060a4:	08005fe9 	.word	0x08005fe9
 80060a8:	200004a0 	.word	0x200004a0

080060ac <_fwalk_sglue>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	4607      	mov	r7, r0
 80060b2:	4688      	mov	r8, r1
 80060b4:	4614      	mov	r4, r2
 80060b6:	2600      	movs	r6, #0
 80060b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060bc:	f1b9 0901 	subs.w	r9, r9, #1
 80060c0:	d505      	bpl.n	80060ce <_fwalk_sglue+0x22>
 80060c2:	6824      	ldr	r4, [r4, #0]
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	d1f7      	bne.n	80060b8 <_fwalk_sglue+0xc>
 80060c8:	4630      	mov	r0, r6
 80060ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d907      	bls.n	80060e4 <_fwalk_sglue+0x38>
 80060d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060d8:	3301      	adds	r3, #1
 80060da:	d003      	beq.n	80060e4 <_fwalk_sglue+0x38>
 80060dc:	4629      	mov	r1, r5
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	4306      	orrs	r6, r0
 80060e4:	3568      	adds	r5, #104	@ 0x68
 80060e6:	e7e9      	b.n	80060bc <_fwalk_sglue+0x10>

080060e8 <siprintf>:
 80060e8:	b40e      	push	{r1, r2, r3}
 80060ea:	b500      	push	{lr}
 80060ec:	b09c      	sub	sp, #112	@ 0x70
 80060ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80060f0:	9002      	str	r0, [sp, #8]
 80060f2:	9006      	str	r0, [sp, #24]
 80060f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060f8:	4809      	ldr	r0, [pc, #36]	@ (8006120 <siprintf+0x38>)
 80060fa:	9107      	str	r1, [sp, #28]
 80060fc:	9104      	str	r1, [sp, #16]
 80060fe:	4909      	ldr	r1, [pc, #36]	@ (8006124 <siprintf+0x3c>)
 8006100:	f853 2b04 	ldr.w	r2, [r3], #4
 8006104:	9105      	str	r1, [sp, #20]
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	a902      	add	r1, sp, #8
 800610c:	f002 fbb6 	bl	800887c <_svfiprintf_r>
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	b01c      	add	sp, #112	@ 0x70
 8006118:	f85d eb04 	ldr.w	lr, [sp], #4
 800611c:	b003      	add	sp, #12
 800611e:	4770      	bx	lr
 8006120:	20000028 	.word	0x20000028
 8006124:	ffff0208 	.word	0xffff0208

08006128 <__sread>:
 8006128:	b510      	push	{r4, lr}
 800612a:	460c      	mov	r4, r1
 800612c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006130:	f000 f86c 	bl	800620c <_read_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	bfab      	itete	ge
 8006138:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800613a:	89a3      	ldrhlt	r3, [r4, #12]
 800613c:	181b      	addge	r3, r3, r0
 800613e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006142:	bfac      	ite	ge
 8006144:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006146:	81a3      	strhlt	r3, [r4, #12]
 8006148:	bd10      	pop	{r4, pc}

0800614a <__swrite>:
 800614a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614e:	461f      	mov	r7, r3
 8006150:	898b      	ldrh	r3, [r1, #12]
 8006152:	05db      	lsls	r3, r3, #23
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	4616      	mov	r6, r2
 800615a:	d505      	bpl.n	8006168 <__swrite+0x1e>
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	2302      	movs	r3, #2
 8006162:	2200      	movs	r2, #0
 8006164:	f000 f840 	bl	80061e8 <_lseek_r>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800616e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	4628      	mov	r0, r5
 800617a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617e:	f000 b857 	b.w	8006230 <_write_r>

08006182 <__sseek>:
 8006182:	b510      	push	{r4, lr}
 8006184:	460c      	mov	r4, r1
 8006186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618a:	f000 f82d 	bl	80061e8 <_lseek_r>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	bf15      	itete	ne
 8006194:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006196:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800619a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800619e:	81a3      	strheq	r3, [r4, #12]
 80061a0:	bf18      	it	ne
 80061a2:	81a3      	strhne	r3, [r4, #12]
 80061a4:	bd10      	pop	{r4, pc}

080061a6 <__sclose>:
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 b80d 	b.w	80061c8 <_close_r>

080061ae <memset>:
 80061ae:	4402      	add	r2, r0
 80061b0:	4603      	mov	r3, r0
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d100      	bne.n	80061b8 <memset+0xa>
 80061b6:	4770      	bx	lr
 80061b8:	f803 1b01 	strb.w	r1, [r3], #1
 80061bc:	e7f9      	b.n	80061b2 <memset+0x4>
	...

080061c0 <_localeconv_r>:
 80061c0:	4800      	ldr	r0, [pc, #0]	@ (80061c4 <_localeconv_r+0x4>)
 80061c2:	4770      	bx	lr
 80061c4:	20000168 	.word	0x20000168

080061c8 <_close_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4d06      	ldr	r5, [pc, #24]	@ (80061e4 <_close_r+0x1c>)
 80061cc:	2300      	movs	r3, #0
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	602b      	str	r3, [r5, #0]
 80061d4:	f7fb f9bf 	bl	8001556 <_close>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_close_r+0x1a>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_close_r+0x1a>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	200004a4 	.word	0x200004a4

080061e8 <_lseek_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d07      	ldr	r5, [pc, #28]	@ (8006208 <_lseek_r+0x20>)
 80061ec:	4604      	mov	r4, r0
 80061ee:	4608      	mov	r0, r1
 80061f0:	4611      	mov	r1, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fb f9d4 	bl	80015a4 <_lseek>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_lseek_r+0x1e>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_lseek_r+0x1e>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	200004a4 	.word	0x200004a4

0800620c <_read_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d07      	ldr	r5, [pc, #28]	@ (800622c <_read_r+0x20>)
 8006210:	4604      	mov	r4, r0
 8006212:	4608      	mov	r0, r1
 8006214:	4611      	mov	r1, r2
 8006216:	2200      	movs	r2, #0
 8006218:	602a      	str	r2, [r5, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	f7fb f962 	bl	80014e4 <_read>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_read_r+0x1e>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_read_r+0x1e>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	200004a4 	.word	0x200004a4

08006230 <_write_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d07      	ldr	r5, [pc, #28]	@ (8006250 <_write_r+0x20>)
 8006234:	4604      	mov	r4, r0
 8006236:	4608      	mov	r0, r1
 8006238:	4611      	mov	r1, r2
 800623a:	2200      	movs	r2, #0
 800623c:	602a      	str	r2, [r5, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f7fb f96d 	bl	800151e <_write>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_write_r+0x1e>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_write_r+0x1e>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	200004a4 	.word	0x200004a4

08006254 <__errno>:
 8006254:	4b01      	ldr	r3, [pc, #4]	@ (800625c <__errno+0x8>)
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000028 	.word	0x20000028

08006260 <__libc_init_array>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4d0d      	ldr	r5, [pc, #52]	@ (8006298 <__libc_init_array+0x38>)
 8006264:	4c0d      	ldr	r4, [pc, #52]	@ (800629c <__libc_init_array+0x3c>)
 8006266:	1b64      	subs	r4, r4, r5
 8006268:	10a4      	asrs	r4, r4, #2
 800626a:	2600      	movs	r6, #0
 800626c:	42a6      	cmp	r6, r4
 800626e:	d109      	bne.n	8006284 <__libc_init_array+0x24>
 8006270:	4d0b      	ldr	r5, [pc, #44]	@ (80062a0 <__libc_init_array+0x40>)
 8006272:	4c0c      	ldr	r4, [pc, #48]	@ (80062a4 <__libc_init_array+0x44>)
 8006274:	f003 fb72 	bl	800995c <_init>
 8006278:	1b64      	subs	r4, r4, r5
 800627a:	10a4      	asrs	r4, r4, #2
 800627c:	2600      	movs	r6, #0
 800627e:	42a6      	cmp	r6, r4
 8006280:	d105      	bne.n	800628e <__libc_init_array+0x2e>
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	f855 3b04 	ldr.w	r3, [r5], #4
 8006288:	4798      	blx	r3
 800628a:	3601      	adds	r6, #1
 800628c:	e7ee      	b.n	800626c <__libc_init_array+0xc>
 800628e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006292:	4798      	blx	r3
 8006294:	3601      	adds	r6, #1
 8006296:	e7f2      	b.n	800627e <__libc_init_array+0x1e>
 8006298:	08009de8 	.word	0x08009de8
 800629c:	08009de8 	.word	0x08009de8
 80062a0:	08009de8 	.word	0x08009de8
 80062a4:	08009dec 	.word	0x08009dec

080062a8 <__retarget_lock_init_recursive>:
 80062a8:	4770      	bx	lr

080062aa <__retarget_lock_acquire_recursive>:
 80062aa:	4770      	bx	lr

080062ac <__retarget_lock_release_recursive>:
 80062ac:	4770      	bx	lr
	...

080062b0 <nanf>:
 80062b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80062b8 <nanf+0x8>
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	7fc00000 	.word	0x7fc00000

080062bc <quorem>:
 80062bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	6903      	ldr	r3, [r0, #16]
 80062c2:	690c      	ldr	r4, [r1, #16]
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	4607      	mov	r7, r0
 80062c8:	db7e      	blt.n	80063c8 <quorem+0x10c>
 80062ca:	3c01      	subs	r4, #1
 80062cc:	f101 0814 	add.w	r8, r1, #20
 80062d0:	00a3      	lsls	r3, r4, #2
 80062d2:	f100 0514 	add.w	r5, r0, #20
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062e6:	3301      	adds	r3, #1
 80062e8:	429a      	cmp	r2, r3
 80062ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80062f2:	d32e      	bcc.n	8006352 <quorem+0x96>
 80062f4:	f04f 0a00 	mov.w	sl, #0
 80062f8:	46c4      	mov	ip, r8
 80062fa:	46ae      	mov	lr, r5
 80062fc:	46d3      	mov	fp, sl
 80062fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006302:	b298      	uxth	r0, r3
 8006304:	fb06 a000 	mla	r0, r6, r0, sl
 8006308:	0c02      	lsrs	r2, r0, #16
 800630a:	0c1b      	lsrs	r3, r3, #16
 800630c:	fb06 2303 	mla	r3, r6, r3, r2
 8006310:	f8de 2000 	ldr.w	r2, [lr]
 8006314:	b280      	uxth	r0, r0
 8006316:	b292      	uxth	r2, r2
 8006318:	1a12      	subs	r2, r2, r0
 800631a:	445a      	add	r2, fp
 800631c:	f8de 0000 	ldr.w	r0, [lr]
 8006320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006324:	b29b      	uxth	r3, r3
 8006326:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800632a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800632e:	b292      	uxth	r2, r2
 8006330:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006334:	45e1      	cmp	r9, ip
 8006336:	f84e 2b04 	str.w	r2, [lr], #4
 800633a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800633e:	d2de      	bcs.n	80062fe <quorem+0x42>
 8006340:	9b00      	ldr	r3, [sp, #0]
 8006342:	58eb      	ldr	r3, [r5, r3]
 8006344:	b92b      	cbnz	r3, 8006352 <quorem+0x96>
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	3b04      	subs	r3, #4
 800634a:	429d      	cmp	r5, r3
 800634c:	461a      	mov	r2, r3
 800634e:	d32f      	bcc.n	80063b0 <quorem+0xf4>
 8006350:	613c      	str	r4, [r7, #16]
 8006352:	4638      	mov	r0, r7
 8006354:	f001 f9c4 	bl	80076e0 <__mcmp>
 8006358:	2800      	cmp	r0, #0
 800635a:	db25      	blt.n	80063a8 <quorem+0xec>
 800635c:	4629      	mov	r1, r5
 800635e:	2000      	movs	r0, #0
 8006360:	f858 2b04 	ldr.w	r2, [r8], #4
 8006364:	f8d1 c000 	ldr.w	ip, [r1]
 8006368:	fa1f fe82 	uxth.w	lr, r2
 800636c:	fa1f f38c 	uxth.w	r3, ip
 8006370:	eba3 030e 	sub.w	r3, r3, lr
 8006374:	4403      	add	r3, r0
 8006376:	0c12      	lsrs	r2, r2, #16
 8006378:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800637c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006380:	b29b      	uxth	r3, r3
 8006382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006386:	45c1      	cmp	r9, r8
 8006388:	f841 3b04 	str.w	r3, [r1], #4
 800638c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006390:	d2e6      	bcs.n	8006360 <quorem+0xa4>
 8006392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800639a:	b922      	cbnz	r2, 80063a6 <quorem+0xea>
 800639c:	3b04      	subs	r3, #4
 800639e:	429d      	cmp	r5, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	d30b      	bcc.n	80063bc <quorem+0x100>
 80063a4:	613c      	str	r4, [r7, #16]
 80063a6:	3601      	adds	r6, #1
 80063a8:	4630      	mov	r0, r6
 80063aa:	b003      	add	sp, #12
 80063ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	3b04      	subs	r3, #4
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d1cb      	bne.n	8006350 <quorem+0x94>
 80063b8:	3c01      	subs	r4, #1
 80063ba:	e7c6      	b.n	800634a <quorem+0x8e>
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	3b04      	subs	r3, #4
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	d1ef      	bne.n	80063a4 <quorem+0xe8>
 80063c4:	3c01      	subs	r4, #1
 80063c6:	e7ea      	b.n	800639e <quorem+0xe2>
 80063c8:	2000      	movs	r0, #0
 80063ca:	e7ee      	b.n	80063aa <quorem+0xee>
 80063cc:	0000      	movs	r0, r0
	...

080063d0 <_dtoa_r>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	69c7      	ldr	r7, [r0, #28]
 80063d6:	b099      	sub	sp, #100	@ 0x64
 80063d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063dc:	ec55 4b10 	vmov	r4, r5, d0
 80063e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80063e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80063e4:	4683      	mov	fp, r0
 80063e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80063e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063ea:	b97f      	cbnz	r7, 800640c <_dtoa_r+0x3c>
 80063ec:	2010      	movs	r0, #16
 80063ee:	f000 fdfd 	bl	8006fec <malloc>
 80063f2:	4602      	mov	r2, r0
 80063f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80063f8:	b920      	cbnz	r0, 8006404 <_dtoa_r+0x34>
 80063fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006698 <_dtoa_r+0x2c8>)
 80063fc:	21ef      	movs	r1, #239	@ 0xef
 80063fe:	48a7      	ldr	r0, [pc, #668]	@ (800669c <_dtoa_r+0x2cc>)
 8006400:	f002 fc36 	bl	8008c70 <__assert_func>
 8006404:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006408:	6007      	str	r7, [r0, #0]
 800640a:	60c7      	str	r7, [r0, #12]
 800640c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006410:	6819      	ldr	r1, [r3, #0]
 8006412:	b159      	cbz	r1, 800642c <_dtoa_r+0x5c>
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	604a      	str	r2, [r1, #4]
 8006418:	2301      	movs	r3, #1
 800641a:	4093      	lsls	r3, r2
 800641c:	608b      	str	r3, [r1, #8]
 800641e:	4658      	mov	r0, fp
 8006420:	f000 feda 	bl	80071d8 <_Bfree>
 8006424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	1e2b      	subs	r3, r5, #0
 800642e:	bfb9      	ittee	lt
 8006430:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006434:	9303      	strlt	r3, [sp, #12]
 8006436:	2300      	movge	r3, #0
 8006438:	6033      	strge	r3, [r6, #0]
 800643a:	9f03      	ldr	r7, [sp, #12]
 800643c:	4b98      	ldr	r3, [pc, #608]	@ (80066a0 <_dtoa_r+0x2d0>)
 800643e:	bfbc      	itt	lt
 8006440:	2201      	movlt	r2, #1
 8006442:	6032      	strlt	r2, [r6, #0]
 8006444:	43bb      	bics	r3, r7
 8006446:	d112      	bne.n	800646e <_dtoa_r+0x9e>
 8006448:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800644a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006454:	4323      	orrs	r3, r4
 8006456:	f000 854d 	beq.w	8006ef4 <_dtoa_r+0xb24>
 800645a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800645c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80066b4 <_dtoa_r+0x2e4>
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 854f 	beq.w	8006f04 <_dtoa_r+0xb34>
 8006466:	f10a 0303 	add.w	r3, sl, #3
 800646a:	f000 bd49 	b.w	8006f00 <_dtoa_r+0xb30>
 800646e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006472:	2200      	movs	r2, #0
 8006474:	ec51 0b17 	vmov	r0, r1, d7
 8006478:	2300      	movs	r3, #0
 800647a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800647e:	f7fa fb2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006482:	4680      	mov	r8, r0
 8006484:	b158      	cbz	r0, 800649e <_dtoa_r+0xce>
 8006486:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006488:	2301      	movs	r3, #1
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800648e:	b113      	cbz	r3, 8006496 <_dtoa_r+0xc6>
 8006490:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006492:	4b84      	ldr	r3, [pc, #528]	@ (80066a4 <_dtoa_r+0x2d4>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80066b8 <_dtoa_r+0x2e8>
 800649a:	f000 bd33 	b.w	8006f04 <_dtoa_r+0xb34>
 800649e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80064a2:	aa16      	add	r2, sp, #88	@ 0x58
 80064a4:	a917      	add	r1, sp, #92	@ 0x5c
 80064a6:	4658      	mov	r0, fp
 80064a8:	f001 fa3a 	bl	8007920 <__d2b>
 80064ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80064b0:	4681      	mov	r9, r0
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	d077      	beq.n	80065a6 <_dtoa_r+0x1d6>
 80064b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80064bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064d0:	4619      	mov	r1, r3
 80064d2:	2200      	movs	r2, #0
 80064d4:	4b74      	ldr	r3, [pc, #464]	@ (80066a8 <_dtoa_r+0x2d8>)
 80064d6:	f7f9 fedf 	bl	8000298 <__aeabi_dsub>
 80064da:	a369      	add	r3, pc, #420	@ (adr r3, 8006680 <_dtoa_r+0x2b0>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f7fa f892 	bl	8000608 <__aeabi_dmul>
 80064e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006688 <_dtoa_r+0x2b8>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7f9 fed7 	bl	800029c <__adddf3>
 80064ee:	4604      	mov	r4, r0
 80064f0:	4630      	mov	r0, r6
 80064f2:	460d      	mov	r5, r1
 80064f4:	f7fa f81e 	bl	8000534 <__aeabi_i2d>
 80064f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006690 <_dtoa_r+0x2c0>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7fa f883 	bl	8000608 <__aeabi_dmul>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	f7f9 fec7 	bl	800029c <__adddf3>
 800650e:	4604      	mov	r4, r0
 8006510:	460d      	mov	r5, r1
 8006512:	f7fa fb29 	bl	8000b68 <__aeabi_d2iz>
 8006516:	2200      	movs	r2, #0
 8006518:	4607      	mov	r7, r0
 800651a:	2300      	movs	r3, #0
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7fa fae4 	bl	8000aec <__aeabi_dcmplt>
 8006524:	b140      	cbz	r0, 8006538 <_dtoa_r+0x168>
 8006526:	4638      	mov	r0, r7
 8006528:	f7fa f804 	bl	8000534 <__aeabi_i2d>
 800652c:	4622      	mov	r2, r4
 800652e:	462b      	mov	r3, r5
 8006530:	f7fa fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006534:	b900      	cbnz	r0, 8006538 <_dtoa_r+0x168>
 8006536:	3f01      	subs	r7, #1
 8006538:	2f16      	cmp	r7, #22
 800653a:	d851      	bhi.n	80065e0 <_dtoa_r+0x210>
 800653c:	4b5b      	ldr	r3, [pc, #364]	@ (80066ac <_dtoa_r+0x2dc>)
 800653e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800654a:	f7fa facf 	bl	8000aec <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	d048      	beq.n	80065e4 <_dtoa_r+0x214>
 8006552:	3f01      	subs	r7, #1
 8006554:	2300      	movs	r3, #0
 8006556:	9312      	str	r3, [sp, #72]	@ 0x48
 8006558:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800655a:	1b9b      	subs	r3, r3, r6
 800655c:	1e5a      	subs	r2, r3, #1
 800655e:	bf44      	itt	mi
 8006560:	f1c3 0801 	rsbmi	r8, r3, #1
 8006564:	2300      	movmi	r3, #0
 8006566:	9208      	str	r2, [sp, #32]
 8006568:	bf54      	ite	pl
 800656a:	f04f 0800 	movpl.w	r8, #0
 800656e:	9308      	strmi	r3, [sp, #32]
 8006570:	2f00      	cmp	r7, #0
 8006572:	db39      	blt.n	80065e8 <_dtoa_r+0x218>
 8006574:	9b08      	ldr	r3, [sp, #32]
 8006576:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006578:	443b      	add	r3, r7
 800657a:	9308      	str	r3, [sp, #32]
 800657c:	2300      	movs	r3, #0
 800657e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006582:	2b09      	cmp	r3, #9
 8006584:	d864      	bhi.n	8006650 <_dtoa_r+0x280>
 8006586:	2b05      	cmp	r3, #5
 8006588:	bfc4      	itt	gt
 800658a:	3b04      	subgt	r3, #4
 800658c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800658e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006590:	f1a3 0302 	sub.w	r3, r3, #2
 8006594:	bfcc      	ite	gt
 8006596:	2400      	movgt	r4, #0
 8006598:	2401      	movle	r4, #1
 800659a:	2b03      	cmp	r3, #3
 800659c:	d863      	bhi.n	8006666 <_dtoa_r+0x296>
 800659e:	e8df f003 	tbb	[pc, r3]
 80065a2:	372a      	.short	0x372a
 80065a4:	5535      	.short	0x5535
 80065a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80065aa:	441e      	add	r6, r3
 80065ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	bfc1      	itttt	gt
 80065b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065b8:	409f      	lslgt	r7, r3
 80065ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065c2:	bfd6      	itet	le
 80065c4:	f1c3 0320 	rsble	r3, r3, #32
 80065c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80065cc:	fa04 f003 	lslle.w	r0, r4, r3
 80065d0:	f7f9 ffa0 	bl	8000514 <__aeabi_ui2d>
 80065d4:	2201      	movs	r2, #1
 80065d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065da:	3e01      	subs	r6, #1
 80065dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80065de:	e777      	b.n	80064d0 <_dtoa_r+0x100>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e7b8      	b.n	8006556 <_dtoa_r+0x186>
 80065e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80065e6:	e7b7      	b.n	8006558 <_dtoa_r+0x188>
 80065e8:	427b      	negs	r3, r7
 80065ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ec:	2300      	movs	r3, #0
 80065ee:	eba8 0807 	sub.w	r8, r8, r7
 80065f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065f4:	e7c4      	b.n	8006580 <_dtoa_r+0x1b0>
 80065f6:	2300      	movs	r3, #0
 80065f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dc35      	bgt.n	800666c <_dtoa_r+0x29c>
 8006600:	2301      	movs	r3, #1
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	9307      	str	r3, [sp, #28]
 8006606:	461a      	mov	r2, r3
 8006608:	920e      	str	r2, [sp, #56]	@ 0x38
 800660a:	e00b      	b.n	8006624 <_dtoa_r+0x254>
 800660c:	2301      	movs	r3, #1
 800660e:	e7f3      	b.n	80065f8 <_dtoa_r+0x228>
 8006610:	2300      	movs	r3, #0
 8006612:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	9307      	str	r3, [sp, #28]
 8006620:	bfb8      	it	lt
 8006622:	2301      	movlt	r3, #1
 8006624:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006628:	2100      	movs	r1, #0
 800662a:	2204      	movs	r2, #4
 800662c:	f102 0514 	add.w	r5, r2, #20
 8006630:	429d      	cmp	r5, r3
 8006632:	d91f      	bls.n	8006674 <_dtoa_r+0x2a4>
 8006634:	6041      	str	r1, [r0, #4]
 8006636:	4658      	mov	r0, fp
 8006638:	f000 fd8e 	bl	8007158 <_Balloc>
 800663c:	4682      	mov	sl, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	d13c      	bne.n	80066bc <_dtoa_r+0x2ec>
 8006642:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <_dtoa_r+0x2e0>)
 8006644:	4602      	mov	r2, r0
 8006646:	f240 11af 	movw	r1, #431	@ 0x1af
 800664a:	e6d8      	b.n	80063fe <_dtoa_r+0x2e>
 800664c:	2301      	movs	r3, #1
 800664e:	e7e0      	b.n	8006612 <_dtoa_r+0x242>
 8006650:	2401      	movs	r4, #1
 8006652:	2300      	movs	r3, #0
 8006654:	9309      	str	r3, [sp, #36]	@ 0x24
 8006656:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006658:	f04f 33ff 	mov.w	r3, #4294967295
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	2200      	movs	r2, #0
 8006662:	2312      	movs	r3, #18
 8006664:	e7d0      	b.n	8006608 <_dtoa_r+0x238>
 8006666:	2301      	movs	r3, #1
 8006668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800666a:	e7f5      	b.n	8006658 <_dtoa_r+0x288>
 800666c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	e7d7      	b.n	8006624 <_dtoa_r+0x254>
 8006674:	3101      	adds	r1, #1
 8006676:	0052      	lsls	r2, r2, #1
 8006678:	e7d8      	b.n	800662c <_dtoa_r+0x25c>
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w
 8006680:	636f4361 	.word	0x636f4361
 8006684:	3fd287a7 	.word	0x3fd287a7
 8006688:	8b60c8b3 	.word	0x8b60c8b3
 800668c:	3fc68a28 	.word	0x3fc68a28
 8006690:	509f79fb 	.word	0x509f79fb
 8006694:	3fd34413 	.word	0x3fd34413
 8006698:	080099f6 	.word	0x080099f6
 800669c:	08009a0d 	.word	0x08009a0d
 80066a0:	7ff00000 	.word	0x7ff00000
 80066a4:	080099c1 	.word	0x080099c1
 80066a8:	3ff80000 	.word	0x3ff80000
 80066ac:	08009b08 	.word	0x08009b08
 80066b0:	08009a65 	.word	0x08009a65
 80066b4:	080099f2 	.word	0x080099f2
 80066b8:	080099c0 	.word	0x080099c0
 80066bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	9b07      	ldr	r3, [sp, #28]
 80066c4:	2b0e      	cmp	r3, #14
 80066c6:	f200 80a4 	bhi.w	8006812 <_dtoa_r+0x442>
 80066ca:	2c00      	cmp	r4, #0
 80066cc:	f000 80a1 	beq.w	8006812 <_dtoa_r+0x442>
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	dd33      	ble.n	800673c <_dtoa_r+0x36c>
 80066d4:	4bad      	ldr	r3, [pc, #692]	@ (800698c <_dtoa_r+0x5bc>)
 80066d6:	f007 020f 	and.w	r2, r7, #15
 80066da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066de:	ed93 7b00 	vldr	d7, [r3]
 80066e2:	05f8      	lsls	r0, r7, #23
 80066e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066ec:	d516      	bpl.n	800671c <_dtoa_r+0x34c>
 80066ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006990 <_dtoa_r+0x5c0>)
 80066f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066f8:	f7fa f8b0 	bl	800085c <__aeabi_ddiv>
 80066fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006700:	f004 040f 	and.w	r4, r4, #15
 8006704:	2603      	movs	r6, #3
 8006706:	4da2      	ldr	r5, [pc, #648]	@ (8006990 <_dtoa_r+0x5c0>)
 8006708:	b954      	cbnz	r4, 8006720 <_dtoa_r+0x350>
 800670a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800670e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006712:	f7fa f8a3 	bl	800085c <__aeabi_ddiv>
 8006716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800671a:	e028      	b.n	800676e <_dtoa_r+0x39e>
 800671c:	2602      	movs	r6, #2
 800671e:	e7f2      	b.n	8006706 <_dtoa_r+0x336>
 8006720:	07e1      	lsls	r1, r4, #31
 8006722:	d508      	bpl.n	8006736 <_dtoa_r+0x366>
 8006724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006728:	e9d5 2300 	ldrd	r2, r3, [r5]
 800672c:	f7f9 ff6c 	bl	8000608 <__aeabi_dmul>
 8006730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006734:	3601      	adds	r6, #1
 8006736:	1064      	asrs	r4, r4, #1
 8006738:	3508      	adds	r5, #8
 800673a:	e7e5      	b.n	8006708 <_dtoa_r+0x338>
 800673c:	f000 80d2 	beq.w	80068e4 <_dtoa_r+0x514>
 8006740:	427c      	negs	r4, r7
 8006742:	4b92      	ldr	r3, [pc, #584]	@ (800698c <_dtoa_r+0x5bc>)
 8006744:	4d92      	ldr	r5, [pc, #584]	@ (8006990 <_dtoa_r+0x5c0>)
 8006746:	f004 020f 	and.w	r2, r4, #15
 800674a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006756:	f7f9 ff57 	bl	8000608 <__aeabi_dmul>
 800675a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800675e:	1124      	asrs	r4, r4, #4
 8006760:	2300      	movs	r3, #0
 8006762:	2602      	movs	r6, #2
 8006764:	2c00      	cmp	r4, #0
 8006766:	f040 80b2 	bne.w	80068ce <_dtoa_r+0x4fe>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1d3      	bne.n	8006716 <_dtoa_r+0x346>
 800676e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006770:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80b7 	beq.w	80068e8 <_dtoa_r+0x518>
 800677a:	4b86      	ldr	r3, [pc, #536]	@ (8006994 <_dtoa_r+0x5c4>)
 800677c:	2200      	movs	r2, #0
 800677e:	4620      	mov	r0, r4
 8006780:	4629      	mov	r1, r5
 8006782:	f7fa f9b3 	bl	8000aec <__aeabi_dcmplt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f000 80ae 	beq.w	80068e8 <_dtoa_r+0x518>
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80aa 	beq.w	80068e8 <_dtoa_r+0x518>
 8006794:	9b00      	ldr	r3, [sp, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	dd37      	ble.n	800680a <_dtoa_r+0x43a>
 800679a:	1e7b      	subs	r3, r7, #1
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	4620      	mov	r0, r4
 80067a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006998 <_dtoa_r+0x5c8>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7f9 ff2f 	bl	8000608 <__aeabi_dmul>
 80067aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ae:	9c00      	ldr	r4, [sp, #0]
 80067b0:	3601      	adds	r6, #1
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7f9 febe 	bl	8000534 <__aeabi_i2d>
 80067b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067bc:	f7f9 ff24 	bl	8000608 <__aeabi_dmul>
 80067c0:	4b76      	ldr	r3, [pc, #472]	@ (800699c <_dtoa_r+0x5cc>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	f7f9 fd6a 	bl	800029c <__adddf3>
 80067c8:	4605      	mov	r5, r0
 80067ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	f040 808d 	bne.w	80068ee <_dtoa_r+0x51e>
 80067d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d8:	4b71      	ldr	r3, [pc, #452]	@ (80069a0 <_dtoa_r+0x5d0>)
 80067da:	2200      	movs	r2, #0
 80067dc:	f7f9 fd5c 	bl	8000298 <__aeabi_dsub>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e8:	462a      	mov	r2, r5
 80067ea:	4633      	mov	r3, r6
 80067ec:	f7fa f99c 	bl	8000b28 <__aeabi_dcmpgt>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	f040 828b 	bne.w	8006d0c <_dtoa_r+0x93c>
 80067f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067fa:	462a      	mov	r2, r5
 80067fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006800:	f7fa f974 	bl	8000aec <__aeabi_dcmplt>
 8006804:	2800      	cmp	r0, #0
 8006806:	f040 8128 	bne.w	8006a5a <_dtoa_r+0x68a>
 800680a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800680e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006812:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006814:	2b00      	cmp	r3, #0
 8006816:	f2c0 815a 	blt.w	8006ace <_dtoa_r+0x6fe>
 800681a:	2f0e      	cmp	r7, #14
 800681c:	f300 8157 	bgt.w	8006ace <_dtoa_r+0x6fe>
 8006820:	4b5a      	ldr	r3, [pc, #360]	@ (800698c <_dtoa_r+0x5bc>)
 8006822:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006826:	ed93 7b00 	vldr	d7, [r3]
 800682a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800682c:	2b00      	cmp	r3, #0
 800682e:	ed8d 7b00 	vstr	d7, [sp]
 8006832:	da03      	bge.n	800683c <_dtoa_r+0x46c>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f340 8101 	ble.w	8006a3e <_dtoa_r+0x66e>
 800683c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006840:	4656      	mov	r6, sl
 8006842:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7fa f807 	bl	800085c <__aeabi_ddiv>
 800684e:	f7fa f98b 	bl	8000b68 <__aeabi_d2iz>
 8006852:	4680      	mov	r8, r0
 8006854:	f7f9 fe6e 	bl	8000534 <__aeabi_i2d>
 8006858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800685c:	f7f9 fed4 	bl	8000608 <__aeabi_dmul>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4620      	mov	r0, r4
 8006866:	4629      	mov	r1, r5
 8006868:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800686c:	f7f9 fd14 	bl	8000298 <__aeabi_dsub>
 8006870:	f806 4b01 	strb.w	r4, [r6], #1
 8006874:	9d07      	ldr	r5, [sp, #28]
 8006876:	eba6 040a 	sub.w	r4, r6, sl
 800687a:	42a5      	cmp	r5, r4
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	f040 8117 	bne.w	8006ab2 <_dtoa_r+0x6e2>
 8006884:	f7f9 fd0a 	bl	800029c <__adddf3>
 8006888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800688c:	4604      	mov	r4, r0
 800688e:	460d      	mov	r5, r1
 8006890:	f7fa f94a 	bl	8000b28 <__aeabi_dcmpgt>
 8006894:	2800      	cmp	r0, #0
 8006896:	f040 80f9 	bne.w	8006a8c <_dtoa_r+0x6bc>
 800689a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7fa f919 	bl	8000ad8 <__aeabi_dcmpeq>
 80068a6:	b118      	cbz	r0, 80068b0 <_dtoa_r+0x4e0>
 80068a8:	f018 0f01 	tst.w	r8, #1
 80068ac:	f040 80ee 	bne.w	8006a8c <_dtoa_r+0x6bc>
 80068b0:	4649      	mov	r1, r9
 80068b2:	4658      	mov	r0, fp
 80068b4:	f000 fc90 	bl	80071d8 <_Bfree>
 80068b8:	2300      	movs	r3, #0
 80068ba:	7033      	strb	r3, [r6, #0]
 80068bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068be:	3701      	adds	r7, #1
 80068c0:	601f      	str	r7, [r3, #0]
 80068c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 831d 	beq.w	8006f04 <_dtoa_r+0xb34>
 80068ca:	601e      	str	r6, [r3, #0]
 80068cc:	e31a      	b.n	8006f04 <_dtoa_r+0xb34>
 80068ce:	07e2      	lsls	r2, r4, #31
 80068d0:	d505      	bpl.n	80068de <_dtoa_r+0x50e>
 80068d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068d6:	f7f9 fe97 	bl	8000608 <__aeabi_dmul>
 80068da:	3601      	adds	r6, #1
 80068dc:	2301      	movs	r3, #1
 80068de:	1064      	asrs	r4, r4, #1
 80068e0:	3508      	adds	r5, #8
 80068e2:	e73f      	b.n	8006764 <_dtoa_r+0x394>
 80068e4:	2602      	movs	r6, #2
 80068e6:	e742      	b.n	800676e <_dtoa_r+0x39e>
 80068e8:	9c07      	ldr	r4, [sp, #28]
 80068ea:	9704      	str	r7, [sp, #16]
 80068ec:	e761      	b.n	80067b2 <_dtoa_r+0x3e2>
 80068ee:	4b27      	ldr	r3, [pc, #156]	@ (800698c <_dtoa_r+0x5bc>)
 80068f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068fa:	4454      	add	r4, sl
 80068fc:	2900      	cmp	r1, #0
 80068fe:	d053      	beq.n	80069a8 <_dtoa_r+0x5d8>
 8006900:	4928      	ldr	r1, [pc, #160]	@ (80069a4 <_dtoa_r+0x5d4>)
 8006902:	2000      	movs	r0, #0
 8006904:	f7f9 ffaa 	bl	800085c <__aeabi_ddiv>
 8006908:	4633      	mov	r3, r6
 800690a:	462a      	mov	r2, r5
 800690c:	f7f9 fcc4 	bl	8000298 <__aeabi_dsub>
 8006910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006914:	4656      	mov	r6, sl
 8006916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691a:	f7fa f925 	bl	8000b68 <__aeabi_d2iz>
 800691e:	4605      	mov	r5, r0
 8006920:	f7f9 fe08 	bl	8000534 <__aeabi_i2d>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692c:	f7f9 fcb4 	bl	8000298 <__aeabi_dsub>
 8006930:	3530      	adds	r5, #48	@ 0x30
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800693a:	f806 5b01 	strb.w	r5, [r6], #1
 800693e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006942:	f7fa f8d3 	bl	8000aec <__aeabi_dcmplt>
 8006946:	2800      	cmp	r0, #0
 8006948:	d171      	bne.n	8006a2e <_dtoa_r+0x65e>
 800694a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800694e:	4911      	ldr	r1, [pc, #68]	@ (8006994 <_dtoa_r+0x5c4>)
 8006950:	2000      	movs	r0, #0
 8006952:	f7f9 fca1 	bl	8000298 <__aeabi_dsub>
 8006956:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800695a:	f7fa f8c7 	bl	8000aec <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	f040 8095 	bne.w	8006a8e <_dtoa_r+0x6be>
 8006964:	42a6      	cmp	r6, r4
 8006966:	f43f af50 	beq.w	800680a <_dtoa_r+0x43a>
 800696a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <_dtoa_r+0x5c8>)
 8006970:	2200      	movs	r2, #0
 8006972:	f7f9 fe49 	bl	8000608 <__aeabi_dmul>
 8006976:	4b08      	ldr	r3, [pc, #32]	@ (8006998 <_dtoa_r+0x5c8>)
 8006978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800697c:	2200      	movs	r2, #0
 800697e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006982:	f7f9 fe41 	bl	8000608 <__aeabi_dmul>
 8006986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698a:	e7c4      	b.n	8006916 <_dtoa_r+0x546>
 800698c:	08009b08 	.word	0x08009b08
 8006990:	08009ae0 	.word	0x08009ae0
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	40240000 	.word	0x40240000
 800699c:	401c0000 	.word	0x401c0000
 80069a0:	40140000 	.word	0x40140000
 80069a4:	3fe00000 	.word	0x3fe00000
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	f7f9 fe2c 	bl	8000608 <__aeabi_dmul>
 80069b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80069b6:	4656      	mov	r6, sl
 80069b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069bc:	f7fa f8d4 	bl	8000b68 <__aeabi_d2iz>
 80069c0:	4605      	mov	r5, r0
 80069c2:	f7f9 fdb7 	bl	8000534 <__aeabi_i2d>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ce:	f7f9 fc63 	bl	8000298 <__aeabi_dsub>
 80069d2:	3530      	adds	r5, #48	@ 0x30
 80069d4:	f806 5b01 	strb.w	r5, [r6], #1
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	42a6      	cmp	r6, r4
 80069de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	d124      	bne.n	8006a32 <_dtoa_r+0x662>
 80069e8:	4bac      	ldr	r3, [pc, #688]	@ (8006c9c <_dtoa_r+0x8cc>)
 80069ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069ee:	f7f9 fc55 	bl	800029c <__adddf3>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069fa:	f7fa f895 	bl	8000b28 <__aeabi_dcmpgt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d145      	bne.n	8006a8e <_dtoa_r+0x6be>
 8006a02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a06:	49a5      	ldr	r1, [pc, #660]	@ (8006c9c <_dtoa_r+0x8cc>)
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f7f9 fc45 	bl	8000298 <__aeabi_dsub>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a16:	f7fa f869 	bl	8000aec <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f43f aef5 	beq.w	800680a <_dtoa_r+0x43a>
 8006a20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a22:	1e73      	subs	r3, r6, #1
 8006a24:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a2a:	2b30      	cmp	r3, #48	@ 0x30
 8006a2c:	d0f8      	beq.n	8006a20 <_dtoa_r+0x650>
 8006a2e:	9f04      	ldr	r7, [sp, #16]
 8006a30:	e73e      	b.n	80068b0 <_dtoa_r+0x4e0>
 8006a32:	4b9b      	ldr	r3, [pc, #620]	@ (8006ca0 <_dtoa_r+0x8d0>)
 8006a34:	f7f9 fde8 	bl	8000608 <__aeabi_dmul>
 8006a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a3c:	e7bc      	b.n	80069b8 <_dtoa_r+0x5e8>
 8006a3e:	d10c      	bne.n	8006a5a <_dtoa_r+0x68a>
 8006a40:	4b98      	ldr	r3, [pc, #608]	@ (8006ca4 <_dtoa_r+0x8d4>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a48:	f7f9 fdde 	bl	8000608 <__aeabi_dmul>
 8006a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a50:	f7fa f860 	bl	8000b14 <__aeabi_dcmpge>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f000 8157 	beq.w	8006d08 <_dtoa_r+0x938>
 8006a5a:	2400      	movs	r4, #0
 8006a5c:	4625      	mov	r5, r4
 8006a5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a60:	43db      	mvns	r3, r3
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	4656      	mov	r6, sl
 8006a66:	2700      	movs	r7, #0
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4658      	mov	r0, fp
 8006a6c:	f000 fbb4 	bl	80071d8 <_Bfree>
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	d0dc      	beq.n	8006a2e <_dtoa_r+0x65e>
 8006a74:	b12f      	cbz	r7, 8006a82 <_dtoa_r+0x6b2>
 8006a76:	42af      	cmp	r7, r5
 8006a78:	d003      	beq.n	8006a82 <_dtoa_r+0x6b2>
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f000 fbab 	bl	80071d8 <_Bfree>
 8006a82:	4629      	mov	r1, r5
 8006a84:	4658      	mov	r0, fp
 8006a86:	f000 fba7 	bl	80071d8 <_Bfree>
 8006a8a:	e7d0      	b.n	8006a2e <_dtoa_r+0x65e>
 8006a8c:	9704      	str	r7, [sp, #16]
 8006a8e:	4633      	mov	r3, r6
 8006a90:	461e      	mov	r6, r3
 8006a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a96:	2a39      	cmp	r2, #57	@ 0x39
 8006a98:	d107      	bne.n	8006aaa <_dtoa_r+0x6da>
 8006a9a:	459a      	cmp	sl, r3
 8006a9c:	d1f8      	bne.n	8006a90 <_dtoa_r+0x6c0>
 8006a9e:	9a04      	ldr	r2, [sp, #16]
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	9204      	str	r2, [sp, #16]
 8006aa4:	2230      	movs	r2, #48	@ 0x30
 8006aa6:	f88a 2000 	strb.w	r2, [sl]
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	3201      	adds	r2, #1
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	e7bd      	b.n	8006a2e <_dtoa_r+0x65e>
 8006ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ca0 <_dtoa_r+0x8d0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	f7fa f809 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f aebb 	beq.w	8006842 <_dtoa_r+0x472>
 8006acc:	e6f0      	b.n	80068b0 <_dtoa_r+0x4e0>
 8006ace:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	f000 80db 	beq.w	8006c8c <_dtoa_r+0x8bc>
 8006ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad8:	2a01      	cmp	r2, #1
 8006ada:	f300 80bf 	bgt.w	8006c5c <_dtoa_r+0x88c>
 8006ade:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	f000 80b7 	beq.w	8006c54 <_dtoa_r+0x884>
 8006ae6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006aea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aec:	4646      	mov	r6, r8
 8006aee:	9a08      	ldr	r2, [sp, #32]
 8006af0:	2101      	movs	r1, #1
 8006af2:	441a      	add	r2, r3
 8006af4:	4658      	mov	r0, fp
 8006af6:	4498      	add	r8, r3
 8006af8:	9208      	str	r2, [sp, #32]
 8006afa:	f000 fc6b 	bl	80073d4 <__i2b>
 8006afe:	4605      	mov	r5, r0
 8006b00:	b15e      	cbz	r6, 8006b1a <_dtoa_r+0x74a>
 8006b02:	9b08      	ldr	r3, [sp, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dd08      	ble.n	8006b1a <_dtoa_r+0x74a>
 8006b08:	42b3      	cmp	r3, r6
 8006b0a:	9a08      	ldr	r2, [sp, #32]
 8006b0c:	bfa8      	it	ge
 8006b0e:	4633      	movge	r3, r6
 8006b10:	eba8 0803 	sub.w	r8, r8, r3
 8006b14:	1af6      	subs	r6, r6, r3
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	9308      	str	r3, [sp, #32]
 8006b1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b1c:	b1f3      	cbz	r3, 8006b5c <_dtoa_r+0x78c>
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80b7 	beq.w	8006c94 <_dtoa_r+0x8c4>
 8006b26:	b18c      	cbz	r4, 8006b4c <_dtoa_r+0x77c>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fd11 	bl	8007554 <__pow5mult>
 8006b32:	464a      	mov	r2, r9
 8006b34:	4601      	mov	r1, r0
 8006b36:	4605      	mov	r5, r0
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f000 fc61 	bl	8007400 <__multiply>
 8006b3e:	4649      	mov	r1, r9
 8006b40:	9004      	str	r0, [sp, #16]
 8006b42:	4658      	mov	r0, fp
 8006b44:	f000 fb48 	bl	80071d8 <_Bfree>
 8006b48:	9b04      	ldr	r3, [sp, #16]
 8006b4a:	4699      	mov	r9, r3
 8006b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4e:	1b1a      	subs	r2, r3, r4
 8006b50:	d004      	beq.n	8006b5c <_dtoa_r+0x78c>
 8006b52:	4649      	mov	r1, r9
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fcfd 	bl	8007554 <__pow5mult>
 8006b5a:	4681      	mov	r9, r0
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 fc38 	bl	80073d4 <__i2b>
 8006b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b66:	4604      	mov	r4, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 81cf 	beq.w	8006f0c <_dtoa_r+0xb3c>
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4601      	mov	r1, r0
 8006b72:	4658      	mov	r0, fp
 8006b74:	f000 fcee 	bl	8007554 <__pow5mult>
 8006b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	f300 8095 	bgt.w	8006cac <_dtoa_r+0x8dc>
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 8087 	bne.w	8006c98 <_dtoa_r+0x8c8>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 8089 	bne.w	8006ca8 <_dtoa_r+0x8d8>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	051b      	lsls	r3, r3, #20
 8006ba0:	b12b      	cbz	r3, 8006bae <_dtoa_r+0x7de>
 8006ba2:	9b08      	ldr	r3, [sp, #32]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	9308      	str	r3, [sp, #32]
 8006ba8:	f108 0801 	add.w	r8, r8, #1
 8006bac:	2301      	movs	r3, #1
 8006bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 81b0 	beq.w	8006f18 <_dtoa_r+0xb48>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bbe:	6918      	ldr	r0, [r3, #16]
 8006bc0:	f000 fbbc 	bl	800733c <__hi0bits>
 8006bc4:	f1c0 0020 	rsb	r0, r0, #32
 8006bc8:	9b08      	ldr	r3, [sp, #32]
 8006bca:	4418      	add	r0, r3
 8006bcc:	f010 001f 	ands.w	r0, r0, #31
 8006bd0:	d077      	beq.n	8006cc2 <_dtoa_r+0x8f2>
 8006bd2:	f1c0 0320 	rsb	r3, r0, #32
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	dd6b      	ble.n	8006cb2 <_dtoa_r+0x8e2>
 8006bda:	9b08      	ldr	r3, [sp, #32]
 8006bdc:	f1c0 001c 	rsb	r0, r0, #28
 8006be0:	4403      	add	r3, r0
 8006be2:	4480      	add	r8, r0
 8006be4:	4406      	add	r6, r0
 8006be6:	9308      	str	r3, [sp, #32]
 8006be8:	f1b8 0f00 	cmp.w	r8, #0
 8006bec:	dd05      	ble.n	8006bfa <_dtoa_r+0x82a>
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fd08 	bl	8007608 <__lshift>
 8006bf8:	4681      	mov	r9, r0
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dd05      	ble.n	8006c0c <_dtoa_r+0x83c>
 8006c00:	4621      	mov	r1, r4
 8006c02:	461a      	mov	r2, r3
 8006c04:	4658      	mov	r0, fp
 8006c06:	f000 fcff 	bl	8007608 <__lshift>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d059      	beq.n	8006cc6 <_dtoa_r+0x8f6>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4648      	mov	r0, r9
 8006c16:	f000 fd63 	bl	80076e0 <__mcmp>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	da53      	bge.n	8006cc6 <_dtoa_r+0x8f6>
 8006c1e:	1e7b      	subs	r3, r7, #1
 8006c20:	9304      	str	r3, [sp, #16]
 8006c22:	4649      	mov	r1, r9
 8006c24:	2300      	movs	r3, #0
 8006c26:	220a      	movs	r2, #10
 8006c28:	4658      	mov	r0, fp
 8006c2a:	f000 faf7 	bl	800721c <__multadd>
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c30:	4681      	mov	r9, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8172 	beq.w	8006f1c <_dtoa_r+0xb4c>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	4658      	mov	r0, fp
 8006c40:	f000 faec 	bl	800721c <__multadd>
 8006c44:	9b00      	ldr	r3, [sp, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	4605      	mov	r5, r0
 8006c4a:	dc67      	bgt.n	8006d1c <_dtoa_r+0x94c>
 8006c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	dc41      	bgt.n	8006cd6 <_dtoa_r+0x906>
 8006c52:	e063      	b.n	8006d1c <_dtoa_r+0x94c>
 8006c54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c5a:	e746      	b.n	8006aea <_dtoa_r+0x71a>
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	1e5c      	subs	r4, r3, #1
 8006c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c62:	42a3      	cmp	r3, r4
 8006c64:	bfbf      	itttt	lt
 8006c66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c6c:	1ae3      	sublt	r3, r4, r3
 8006c6e:	bfb4      	ite	lt
 8006c70:	18d2      	addlt	r2, r2, r3
 8006c72:	1b1c      	subge	r4, r3, r4
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	bfbc      	itt	lt
 8006c78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c7a:	2400      	movlt	r4, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb5      	itete	lt
 8006c80:	eba8 0603 	sublt.w	r6, r8, r3
 8006c84:	9b07      	ldrge	r3, [sp, #28]
 8006c86:	2300      	movlt	r3, #0
 8006c88:	4646      	movge	r6, r8
 8006c8a:	e730      	b.n	8006aee <_dtoa_r+0x71e>
 8006c8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c90:	4646      	mov	r6, r8
 8006c92:	e735      	b.n	8006b00 <_dtoa_r+0x730>
 8006c94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c96:	e75c      	b.n	8006b52 <_dtoa_r+0x782>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e788      	b.n	8006bae <_dtoa_r+0x7de>
 8006c9c:	3fe00000 	.word	0x3fe00000
 8006ca0:	40240000 	.word	0x40240000
 8006ca4:	40140000 	.word	0x40140000
 8006ca8:	9b02      	ldr	r3, [sp, #8]
 8006caa:	e780      	b.n	8006bae <_dtoa_r+0x7de>
 8006cac:	2300      	movs	r3, #0
 8006cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb0:	e782      	b.n	8006bb8 <_dtoa_r+0x7e8>
 8006cb2:	d099      	beq.n	8006be8 <_dtoa_r+0x818>
 8006cb4:	9a08      	ldr	r2, [sp, #32]
 8006cb6:	331c      	adds	r3, #28
 8006cb8:	441a      	add	r2, r3
 8006cba:	4498      	add	r8, r3
 8006cbc:	441e      	add	r6, r3
 8006cbe:	9208      	str	r2, [sp, #32]
 8006cc0:	e792      	b.n	8006be8 <_dtoa_r+0x818>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	e7f6      	b.n	8006cb4 <_dtoa_r+0x8e4>
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	9704      	str	r7, [sp, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dc20      	bgt.n	8006d10 <_dtoa_r+0x940>
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	dd1e      	ble.n	8006d14 <_dtoa_r+0x944>
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f aec0 	bne.w	8006a5e <_dtoa_r+0x68e>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	2205      	movs	r2, #5
 8006ce2:	4658      	mov	r0, fp
 8006ce4:	f000 fa9a 	bl	800721c <__multadd>
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4648      	mov	r0, r9
 8006cee:	f000 fcf7 	bl	80076e0 <__mcmp>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f77f aeb3 	ble.w	8006a5e <_dtoa_r+0x68e>
 8006cf8:	4656      	mov	r6, sl
 8006cfa:	2331      	movs	r3, #49	@ 0x31
 8006cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	3301      	adds	r3, #1
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	e6ae      	b.n	8006a66 <_dtoa_r+0x696>
 8006d08:	9c07      	ldr	r4, [sp, #28]
 8006d0a:	9704      	str	r7, [sp, #16]
 8006d0c:	4625      	mov	r5, r4
 8006d0e:	e7f3      	b.n	8006cf8 <_dtoa_r+0x928>
 8006d10:	9b07      	ldr	r3, [sp, #28]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8104 	beq.w	8006f24 <_dtoa_r+0xb54>
 8006d1c:	2e00      	cmp	r6, #0
 8006d1e:	dd05      	ble.n	8006d2c <_dtoa_r+0x95c>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4632      	mov	r2, r6
 8006d24:	4658      	mov	r0, fp
 8006d26:	f000 fc6f 	bl	8007608 <__lshift>
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d05a      	beq.n	8006de8 <_dtoa_r+0xa18>
 8006d32:	6869      	ldr	r1, [r5, #4]
 8006d34:	4658      	mov	r0, fp
 8006d36:	f000 fa0f 	bl	8007158 <_Balloc>
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	b928      	cbnz	r0, 8006d4a <_dtoa_r+0x97a>
 8006d3e:	4b84      	ldr	r3, [pc, #528]	@ (8006f50 <_dtoa_r+0xb80>)
 8006d40:	4602      	mov	r2, r0
 8006d42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d46:	f7ff bb5a 	b.w	80063fe <_dtoa_r+0x2e>
 8006d4a:	692a      	ldr	r2, [r5, #16]
 8006d4c:	3202      	adds	r2, #2
 8006d4e:	0092      	lsls	r2, r2, #2
 8006d50:	f105 010c 	add.w	r1, r5, #12
 8006d54:	300c      	adds	r0, #12
 8006d56:	f001 ff75 	bl	8008c44 <memcpy>
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4658      	mov	r0, fp
 8006d60:	f000 fc52 	bl	8007608 <__lshift>
 8006d64:	f10a 0301 	add.w	r3, sl, #1
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	9b00      	ldr	r3, [sp, #0]
 8006d6c:	4453      	add	r3, sl
 8006d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d70:	9b02      	ldr	r3, [sp, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	462f      	mov	r7, r5
 8006d78:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	9b07      	ldr	r3, [sp, #28]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	3b01      	subs	r3, #1
 8006d82:	4648      	mov	r0, r9
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	f7ff fa99 	bl	80062bc <quorem>
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d92:	4648      	mov	r0, r9
 8006d94:	f000 fca4 	bl	80076e0 <__mcmp>
 8006d98:	462a      	mov	r2, r5
 8006d9a:	9008      	str	r0, [sp, #32]
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4658      	mov	r0, fp
 8006da0:	f000 fcba 	bl	8007718 <__mdiff>
 8006da4:	68c2      	ldr	r2, [r0, #12]
 8006da6:	4606      	mov	r6, r0
 8006da8:	bb02      	cbnz	r2, 8006dec <_dtoa_r+0xa1c>
 8006daa:	4601      	mov	r1, r0
 8006dac:	4648      	mov	r0, r9
 8006dae:	f000 fc97 	bl	80076e0 <__mcmp>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4631      	mov	r1, r6
 8006db6:	4658      	mov	r0, fp
 8006db8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dba:	f000 fa0d 	bl	80071d8 <_Bfree>
 8006dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dc2:	9e07      	ldr	r6, [sp, #28]
 8006dc4:	ea43 0102 	orr.w	r1, r3, r2
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dca:	4319      	orrs	r1, r3
 8006dcc:	d110      	bne.n	8006df0 <_dtoa_r+0xa20>
 8006dce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dd2:	d029      	beq.n	8006e28 <_dtoa_r+0xa58>
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd02      	ble.n	8006de0 <_dtoa_r+0xa10>
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006de0:	9b00      	ldr	r3, [sp, #0]
 8006de2:	f883 8000 	strb.w	r8, [r3]
 8006de6:	e63f      	b.n	8006a68 <_dtoa_r+0x698>
 8006de8:	4628      	mov	r0, r5
 8006dea:	e7bb      	b.n	8006d64 <_dtoa_r+0x994>
 8006dec:	2201      	movs	r2, #1
 8006dee:	e7e1      	b.n	8006db4 <_dtoa_r+0x9e4>
 8006df0:	9b08      	ldr	r3, [sp, #32]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	db04      	blt.n	8006e00 <_dtoa_r+0xa30>
 8006df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	d120      	bne.n	8006e42 <_dtoa_r+0xa72>
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	dded      	ble.n	8006de0 <_dtoa_r+0xa10>
 8006e04:	4649      	mov	r1, r9
 8006e06:	2201      	movs	r2, #1
 8006e08:	4658      	mov	r0, fp
 8006e0a:	f000 fbfd 	bl	8007608 <__lshift>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4681      	mov	r9, r0
 8006e12:	f000 fc65 	bl	80076e0 <__mcmp>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	dc03      	bgt.n	8006e22 <_dtoa_r+0xa52>
 8006e1a:	d1e1      	bne.n	8006de0 <_dtoa_r+0xa10>
 8006e1c:	f018 0f01 	tst.w	r8, #1
 8006e20:	d0de      	beq.n	8006de0 <_dtoa_r+0xa10>
 8006e22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e26:	d1d8      	bne.n	8006dda <_dtoa_r+0xa0a>
 8006e28:	9a00      	ldr	r2, [sp, #0]
 8006e2a:	2339      	movs	r3, #57	@ 0x39
 8006e2c:	7013      	strb	r3, [r2, #0]
 8006e2e:	4633      	mov	r3, r6
 8006e30:	461e      	mov	r6, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e38:	2a39      	cmp	r2, #57	@ 0x39
 8006e3a:	d052      	beq.n	8006ee2 <_dtoa_r+0xb12>
 8006e3c:	3201      	adds	r2, #1
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e612      	b.n	8006a68 <_dtoa_r+0x698>
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	dd07      	ble.n	8006e56 <_dtoa_r+0xa86>
 8006e46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e4a:	d0ed      	beq.n	8006e28 <_dtoa_r+0xa58>
 8006e4c:	9a00      	ldr	r2, [sp, #0]
 8006e4e:	f108 0301 	add.w	r3, r8, #1
 8006e52:	7013      	strb	r3, [r2, #0]
 8006e54:	e608      	b.n	8006a68 <_dtoa_r+0x698>
 8006e56:	9b07      	ldr	r3, [sp, #28]
 8006e58:	9a07      	ldr	r2, [sp, #28]
 8006e5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d028      	beq.n	8006eb6 <_dtoa_r+0xae6>
 8006e64:	4649      	mov	r1, r9
 8006e66:	2300      	movs	r3, #0
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4658      	mov	r0, fp
 8006e6c:	f000 f9d6 	bl	800721c <__multadd>
 8006e70:	42af      	cmp	r7, r5
 8006e72:	4681      	mov	r9, r0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	f04f 020a 	mov.w	r2, #10
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	4658      	mov	r0, fp
 8006e80:	d107      	bne.n	8006e92 <_dtoa_r+0xac2>
 8006e82:	f000 f9cb 	bl	800721c <__multadd>
 8006e86:	4607      	mov	r7, r0
 8006e88:	4605      	mov	r5, r0
 8006e8a:	9b07      	ldr	r3, [sp, #28]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	e774      	b.n	8006d7c <_dtoa_r+0x9ac>
 8006e92:	f000 f9c3 	bl	800721c <__multadd>
 8006e96:	4629      	mov	r1, r5
 8006e98:	4607      	mov	r7, r0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	f000 f9bc 	bl	800721c <__multadd>
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	e7f0      	b.n	8006e8a <_dtoa_r+0xaba>
 8006ea8:	9b00      	ldr	r3, [sp, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfcc      	ite	gt
 8006eae:	461e      	movgt	r6, r3
 8006eb0:	2601      	movle	r6, #1
 8006eb2:	4456      	add	r6, sl
 8006eb4:	2700      	movs	r7, #0
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4658      	mov	r0, fp
 8006ebc:	f000 fba4 	bl	8007608 <__lshift>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4681      	mov	r9, r0
 8006ec4:	f000 fc0c 	bl	80076e0 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dcb0      	bgt.n	8006e2e <_dtoa_r+0xa5e>
 8006ecc:	d102      	bne.n	8006ed4 <_dtoa_r+0xb04>
 8006ece:	f018 0f01 	tst.w	r8, #1
 8006ed2:	d1ac      	bne.n	8006e2e <_dtoa_r+0xa5e>
 8006ed4:	4633      	mov	r3, r6
 8006ed6:	461e      	mov	r6, r3
 8006ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006edc:	2a30      	cmp	r2, #48	@ 0x30
 8006ede:	d0fa      	beq.n	8006ed6 <_dtoa_r+0xb06>
 8006ee0:	e5c2      	b.n	8006a68 <_dtoa_r+0x698>
 8006ee2:	459a      	cmp	sl, r3
 8006ee4:	d1a4      	bne.n	8006e30 <_dtoa_r+0xa60>
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	2331      	movs	r3, #49	@ 0x31
 8006eee:	f88a 3000 	strb.w	r3, [sl]
 8006ef2:	e5b9      	b.n	8006a68 <_dtoa_r+0x698>
 8006ef4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ef6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f54 <_dtoa_r+0xb84>
 8006efa:	b11b      	cbz	r3, 8006f04 <_dtoa_r+0xb34>
 8006efc:	f10a 0308 	add.w	r3, sl, #8
 8006f00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4650      	mov	r0, sl
 8006f06:	b019      	add	sp, #100	@ 0x64
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	f77f ae37 	ble.w	8006b82 <_dtoa_r+0x7b2>
 8006f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f18:	2001      	movs	r0, #1
 8006f1a:	e655      	b.n	8006bc8 <_dtoa_r+0x7f8>
 8006f1c:	9b00      	ldr	r3, [sp, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f77f aed6 	ble.w	8006cd0 <_dtoa_r+0x900>
 8006f24:	4656      	mov	r6, sl
 8006f26:	4621      	mov	r1, r4
 8006f28:	4648      	mov	r0, r9
 8006f2a:	f7ff f9c7 	bl	80062bc <quorem>
 8006f2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f32:	f806 8b01 	strb.w	r8, [r6], #1
 8006f36:	9b00      	ldr	r3, [sp, #0]
 8006f38:	eba6 020a 	sub.w	r2, r6, sl
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	ddb3      	ble.n	8006ea8 <_dtoa_r+0xad8>
 8006f40:	4649      	mov	r1, r9
 8006f42:	2300      	movs	r3, #0
 8006f44:	220a      	movs	r2, #10
 8006f46:	4658      	mov	r0, fp
 8006f48:	f000 f968 	bl	800721c <__multadd>
 8006f4c:	4681      	mov	r9, r0
 8006f4e:	e7ea      	b.n	8006f26 <_dtoa_r+0xb56>
 8006f50:	08009a65 	.word	0x08009a65
 8006f54:	080099e9 	.word	0x080099e9

08006f58 <_free_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d041      	beq.n	8006fe4 <_free_r+0x8c>
 8006f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f64:	1f0c      	subs	r4, r1, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bfb8      	it	lt
 8006f6a:	18e4      	addlt	r4, r4, r3
 8006f6c:	f000 f8e8 	bl	8007140 <__malloc_lock>
 8006f70:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe8 <_free_r+0x90>)
 8006f72:	6813      	ldr	r3, [r2, #0]
 8006f74:	b933      	cbnz	r3, 8006f84 <_free_r+0x2c>
 8006f76:	6063      	str	r3, [r4, #4]
 8006f78:	6014      	str	r4, [r2, #0]
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f80:	f000 b8e4 	b.w	800714c <__malloc_unlock>
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d908      	bls.n	8006f9a <_free_r+0x42>
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	1821      	adds	r1, r4, r0
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	bf01      	itttt	eq
 8006f90:	6819      	ldreq	r1, [r3, #0]
 8006f92:	685b      	ldreq	r3, [r3, #4]
 8006f94:	1809      	addeq	r1, r1, r0
 8006f96:	6021      	streq	r1, [r4, #0]
 8006f98:	e7ed      	b.n	8006f76 <_free_r+0x1e>
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	b10b      	cbz	r3, 8006fa4 <_free_r+0x4c>
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d9fa      	bls.n	8006f9a <_free_r+0x42>
 8006fa4:	6811      	ldr	r1, [r2, #0]
 8006fa6:	1850      	adds	r0, r2, r1
 8006fa8:	42a0      	cmp	r0, r4
 8006faa:	d10b      	bne.n	8006fc4 <_free_r+0x6c>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	4401      	add	r1, r0
 8006fb0:	1850      	adds	r0, r2, r1
 8006fb2:	4283      	cmp	r3, r0
 8006fb4:	6011      	str	r1, [r2, #0]
 8006fb6:	d1e0      	bne.n	8006f7a <_free_r+0x22>
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	6053      	str	r3, [r2, #4]
 8006fbe:	4408      	add	r0, r1
 8006fc0:	6010      	str	r0, [r2, #0]
 8006fc2:	e7da      	b.n	8006f7a <_free_r+0x22>
 8006fc4:	d902      	bls.n	8006fcc <_free_r+0x74>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	e7d6      	b.n	8006f7a <_free_r+0x22>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	1821      	adds	r1, r4, r0
 8006fd0:	428b      	cmp	r3, r1
 8006fd2:	bf04      	itt	eq
 8006fd4:	6819      	ldreq	r1, [r3, #0]
 8006fd6:	685b      	ldreq	r3, [r3, #4]
 8006fd8:	6063      	str	r3, [r4, #4]
 8006fda:	bf04      	itt	eq
 8006fdc:	1809      	addeq	r1, r1, r0
 8006fde:	6021      	streq	r1, [r4, #0]
 8006fe0:	6054      	str	r4, [r2, #4]
 8006fe2:	e7ca      	b.n	8006f7a <_free_r+0x22>
 8006fe4:	bd38      	pop	{r3, r4, r5, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200004b0 	.word	0x200004b0

08006fec <malloc>:
 8006fec:	4b02      	ldr	r3, [pc, #8]	@ (8006ff8 <malloc+0xc>)
 8006fee:	4601      	mov	r1, r0
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f000 b825 	b.w	8007040 <_malloc_r>
 8006ff6:	bf00      	nop
 8006ff8:	20000028 	.word	0x20000028

08006ffc <sbrk_aligned>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800703c <sbrk_aligned+0x40>)
 8007000:	460c      	mov	r4, r1
 8007002:	6831      	ldr	r1, [r6, #0]
 8007004:	4605      	mov	r5, r0
 8007006:	b911      	cbnz	r1, 800700e <sbrk_aligned+0x12>
 8007008:	f001 fe0c 	bl	8008c24 <_sbrk_r>
 800700c:	6030      	str	r0, [r6, #0]
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f001 fe07 	bl	8008c24 <_sbrk_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d103      	bne.n	8007022 <sbrk_aligned+0x26>
 800701a:	f04f 34ff 	mov.w	r4, #4294967295
 800701e:	4620      	mov	r0, r4
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	1cc4      	adds	r4, r0, #3
 8007024:	f024 0403 	bic.w	r4, r4, #3
 8007028:	42a0      	cmp	r0, r4
 800702a:	d0f8      	beq.n	800701e <sbrk_aligned+0x22>
 800702c:	1a21      	subs	r1, r4, r0
 800702e:	4628      	mov	r0, r5
 8007030:	f001 fdf8 	bl	8008c24 <_sbrk_r>
 8007034:	3001      	adds	r0, #1
 8007036:	d1f2      	bne.n	800701e <sbrk_aligned+0x22>
 8007038:	e7ef      	b.n	800701a <sbrk_aligned+0x1e>
 800703a:	bf00      	nop
 800703c:	200004ac 	.word	0x200004ac

08007040 <_malloc_r>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	1ccd      	adds	r5, r1, #3
 8007046:	f025 0503 	bic.w	r5, r5, #3
 800704a:	3508      	adds	r5, #8
 800704c:	2d0c      	cmp	r5, #12
 800704e:	bf38      	it	cc
 8007050:	250c      	movcc	r5, #12
 8007052:	2d00      	cmp	r5, #0
 8007054:	4606      	mov	r6, r0
 8007056:	db01      	blt.n	800705c <_malloc_r+0x1c>
 8007058:	42a9      	cmp	r1, r5
 800705a:	d904      	bls.n	8007066 <_malloc_r+0x26>
 800705c:	230c      	movs	r3, #12
 800705e:	6033      	str	r3, [r6, #0]
 8007060:	2000      	movs	r0, #0
 8007062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800713c <_malloc_r+0xfc>
 800706a:	f000 f869 	bl	8007140 <__malloc_lock>
 800706e:	f8d8 3000 	ldr.w	r3, [r8]
 8007072:	461c      	mov	r4, r3
 8007074:	bb44      	cbnz	r4, 80070c8 <_malloc_r+0x88>
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	f7ff ffbf 	bl	8006ffc <sbrk_aligned>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	4604      	mov	r4, r0
 8007082:	d158      	bne.n	8007136 <_malloc_r+0xf6>
 8007084:	f8d8 4000 	ldr.w	r4, [r8]
 8007088:	4627      	mov	r7, r4
 800708a:	2f00      	cmp	r7, #0
 800708c:	d143      	bne.n	8007116 <_malloc_r+0xd6>
 800708e:	2c00      	cmp	r4, #0
 8007090:	d04b      	beq.n	800712a <_malloc_r+0xea>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	4639      	mov	r1, r7
 8007096:	4630      	mov	r0, r6
 8007098:	eb04 0903 	add.w	r9, r4, r3
 800709c:	f001 fdc2 	bl	8008c24 <_sbrk_r>
 80070a0:	4581      	cmp	r9, r0
 80070a2:	d142      	bne.n	800712a <_malloc_r+0xea>
 80070a4:	6821      	ldr	r1, [r4, #0]
 80070a6:	1a6d      	subs	r5, r5, r1
 80070a8:	4629      	mov	r1, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ffa6 	bl	8006ffc <sbrk_aligned>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d03a      	beq.n	800712a <_malloc_r+0xea>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	442b      	add	r3, r5
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	f8d8 3000 	ldr.w	r3, [r8]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	bb62      	cbnz	r2, 800711c <_malloc_r+0xdc>
 80070c2:	f8c8 7000 	str.w	r7, [r8]
 80070c6:	e00f      	b.n	80070e8 <_malloc_r+0xa8>
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	1b52      	subs	r2, r2, r5
 80070cc:	d420      	bmi.n	8007110 <_malloc_r+0xd0>
 80070ce:	2a0b      	cmp	r2, #11
 80070d0:	d917      	bls.n	8007102 <_malloc_r+0xc2>
 80070d2:	1961      	adds	r1, r4, r5
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	6025      	str	r5, [r4, #0]
 80070d8:	bf18      	it	ne
 80070da:	6059      	strne	r1, [r3, #4]
 80070dc:	6863      	ldr	r3, [r4, #4]
 80070de:	bf08      	it	eq
 80070e0:	f8c8 1000 	streq.w	r1, [r8]
 80070e4:	5162      	str	r2, [r4, r5]
 80070e6:	604b      	str	r3, [r1, #4]
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 f82f 	bl	800714c <__malloc_unlock>
 80070ee:	f104 000b 	add.w	r0, r4, #11
 80070f2:	1d23      	adds	r3, r4, #4
 80070f4:	f020 0007 	bic.w	r0, r0, #7
 80070f8:	1ac2      	subs	r2, r0, r3
 80070fa:	bf1c      	itt	ne
 80070fc:	1a1b      	subne	r3, r3, r0
 80070fe:	50a3      	strne	r3, [r4, r2]
 8007100:	e7af      	b.n	8007062 <_malloc_r+0x22>
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	42a3      	cmp	r3, r4
 8007106:	bf0c      	ite	eq
 8007108:	f8c8 2000 	streq.w	r2, [r8]
 800710c:	605a      	strne	r2, [r3, #4]
 800710e:	e7eb      	b.n	80070e8 <_malloc_r+0xa8>
 8007110:	4623      	mov	r3, r4
 8007112:	6864      	ldr	r4, [r4, #4]
 8007114:	e7ae      	b.n	8007074 <_malloc_r+0x34>
 8007116:	463c      	mov	r4, r7
 8007118:	687f      	ldr	r7, [r7, #4]
 800711a:	e7b6      	b.n	800708a <_malloc_r+0x4a>
 800711c:	461a      	mov	r2, r3
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	42a3      	cmp	r3, r4
 8007122:	d1fb      	bne.n	800711c <_malloc_r+0xdc>
 8007124:	2300      	movs	r3, #0
 8007126:	6053      	str	r3, [r2, #4]
 8007128:	e7de      	b.n	80070e8 <_malloc_r+0xa8>
 800712a:	230c      	movs	r3, #12
 800712c:	6033      	str	r3, [r6, #0]
 800712e:	4630      	mov	r0, r6
 8007130:	f000 f80c 	bl	800714c <__malloc_unlock>
 8007134:	e794      	b.n	8007060 <_malloc_r+0x20>
 8007136:	6005      	str	r5, [r0, #0]
 8007138:	e7d6      	b.n	80070e8 <_malloc_r+0xa8>
 800713a:	bf00      	nop
 800713c:	200004b0 	.word	0x200004b0

08007140 <__malloc_lock>:
 8007140:	4801      	ldr	r0, [pc, #4]	@ (8007148 <__malloc_lock+0x8>)
 8007142:	f7ff b8b2 	b.w	80062aa <__retarget_lock_acquire_recursive>
 8007146:	bf00      	nop
 8007148:	200004a8 	.word	0x200004a8

0800714c <__malloc_unlock>:
 800714c:	4801      	ldr	r0, [pc, #4]	@ (8007154 <__malloc_unlock+0x8>)
 800714e:	f7ff b8ad 	b.w	80062ac <__retarget_lock_release_recursive>
 8007152:	bf00      	nop
 8007154:	200004a8 	.word	0x200004a8

08007158 <_Balloc>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	69c6      	ldr	r6, [r0, #28]
 800715c:	4604      	mov	r4, r0
 800715e:	460d      	mov	r5, r1
 8007160:	b976      	cbnz	r6, 8007180 <_Balloc+0x28>
 8007162:	2010      	movs	r0, #16
 8007164:	f7ff ff42 	bl	8006fec <malloc>
 8007168:	4602      	mov	r2, r0
 800716a:	61e0      	str	r0, [r4, #28]
 800716c:	b920      	cbnz	r0, 8007178 <_Balloc+0x20>
 800716e:	4b18      	ldr	r3, [pc, #96]	@ (80071d0 <_Balloc+0x78>)
 8007170:	4818      	ldr	r0, [pc, #96]	@ (80071d4 <_Balloc+0x7c>)
 8007172:	216b      	movs	r1, #107	@ 0x6b
 8007174:	f001 fd7c 	bl	8008c70 <__assert_func>
 8007178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800717c:	6006      	str	r6, [r0, #0]
 800717e:	60c6      	str	r6, [r0, #12]
 8007180:	69e6      	ldr	r6, [r4, #28]
 8007182:	68f3      	ldr	r3, [r6, #12]
 8007184:	b183      	cbz	r3, 80071a8 <_Balloc+0x50>
 8007186:	69e3      	ldr	r3, [r4, #28]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800718e:	b9b8      	cbnz	r0, 80071c0 <_Balloc+0x68>
 8007190:	2101      	movs	r1, #1
 8007192:	fa01 f605 	lsl.w	r6, r1, r5
 8007196:	1d72      	adds	r2, r6, #5
 8007198:	0092      	lsls	r2, r2, #2
 800719a:	4620      	mov	r0, r4
 800719c:	f001 fd86 	bl	8008cac <_calloc_r>
 80071a0:	b160      	cbz	r0, 80071bc <_Balloc+0x64>
 80071a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071a6:	e00e      	b.n	80071c6 <_Balloc+0x6e>
 80071a8:	2221      	movs	r2, #33	@ 0x21
 80071aa:	2104      	movs	r1, #4
 80071ac:	4620      	mov	r0, r4
 80071ae:	f001 fd7d 	bl	8008cac <_calloc_r>
 80071b2:	69e3      	ldr	r3, [r4, #28]
 80071b4:	60f0      	str	r0, [r6, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e4      	bne.n	8007186 <_Balloc+0x2e>
 80071bc:	2000      	movs	r0, #0
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	6802      	ldr	r2, [r0, #0]
 80071c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071c6:	2300      	movs	r3, #0
 80071c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071cc:	e7f7      	b.n	80071be <_Balloc+0x66>
 80071ce:	bf00      	nop
 80071d0:	080099f6 	.word	0x080099f6
 80071d4:	08009a76 	.word	0x08009a76

080071d8 <_Bfree>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	69c6      	ldr	r6, [r0, #28]
 80071dc:	4605      	mov	r5, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	b976      	cbnz	r6, 8007200 <_Bfree+0x28>
 80071e2:	2010      	movs	r0, #16
 80071e4:	f7ff ff02 	bl	8006fec <malloc>
 80071e8:	4602      	mov	r2, r0
 80071ea:	61e8      	str	r0, [r5, #28]
 80071ec:	b920      	cbnz	r0, 80071f8 <_Bfree+0x20>
 80071ee:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <_Bfree+0x3c>)
 80071f0:	4809      	ldr	r0, [pc, #36]	@ (8007218 <_Bfree+0x40>)
 80071f2:	218f      	movs	r1, #143	@ 0x8f
 80071f4:	f001 fd3c 	bl	8008c70 <__assert_func>
 80071f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071fc:	6006      	str	r6, [r0, #0]
 80071fe:	60c6      	str	r6, [r0, #12]
 8007200:	b13c      	cbz	r4, 8007212 <_Bfree+0x3a>
 8007202:	69eb      	ldr	r3, [r5, #28]
 8007204:	6862      	ldr	r2, [r4, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800720c:	6021      	str	r1, [r4, #0]
 800720e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	080099f6 	.word	0x080099f6
 8007218:	08009a76 	.word	0x08009a76

0800721c <__multadd>:
 800721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	690d      	ldr	r5, [r1, #16]
 8007222:	4607      	mov	r7, r0
 8007224:	460c      	mov	r4, r1
 8007226:	461e      	mov	r6, r3
 8007228:	f101 0c14 	add.w	ip, r1, #20
 800722c:	2000      	movs	r0, #0
 800722e:	f8dc 3000 	ldr.w	r3, [ip]
 8007232:	b299      	uxth	r1, r3
 8007234:	fb02 6101 	mla	r1, r2, r1, r6
 8007238:	0c1e      	lsrs	r6, r3, #16
 800723a:	0c0b      	lsrs	r3, r1, #16
 800723c:	fb02 3306 	mla	r3, r2, r6, r3
 8007240:	b289      	uxth	r1, r1
 8007242:	3001      	adds	r0, #1
 8007244:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007248:	4285      	cmp	r5, r0
 800724a:	f84c 1b04 	str.w	r1, [ip], #4
 800724e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007252:	dcec      	bgt.n	800722e <__multadd+0x12>
 8007254:	b30e      	cbz	r6, 800729a <__multadd+0x7e>
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	42ab      	cmp	r3, r5
 800725a:	dc19      	bgt.n	8007290 <__multadd+0x74>
 800725c:	6861      	ldr	r1, [r4, #4]
 800725e:	4638      	mov	r0, r7
 8007260:	3101      	adds	r1, #1
 8007262:	f7ff ff79 	bl	8007158 <_Balloc>
 8007266:	4680      	mov	r8, r0
 8007268:	b928      	cbnz	r0, 8007276 <__multadd+0x5a>
 800726a:	4602      	mov	r2, r0
 800726c:	4b0c      	ldr	r3, [pc, #48]	@ (80072a0 <__multadd+0x84>)
 800726e:	480d      	ldr	r0, [pc, #52]	@ (80072a4 <__multadd+0x88>)
 8007270:	21ba      	movs	r1, #186	@ 0xba
 8007272:	f001 fcfd 	bl	8008c70 <__assert_func>
 8007276:	6922      	ldr	r2, [r4, #16]
 8007278:	3202      	adds	r2, #2
 800727a:	f104 010c 	add.w	r1, r4, #12
 800727e:	0092      	lsls	r2, r2, #2
 8007280:	300c      	adds	r0, #12
 8007282:	f001 fcdf 	bl	8008c44 <memcpy>
 8007286:	4621      	mov	r1, r4
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff ffa5 	bl	80071d8 <_Bfree>
 800728e:	4644      	mov	r4, r8
 8007290:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007294:	3501      	adds	r5, #1
 8007296:	615e      	str	r6, [r3, #20]
 8007298:	6125      	str	r5, [r4, #16]
 800729a:	4620      	mov	r0, r4
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a0:	08009a65 	.word	0x08009a65
 80072a4:	08009a76 	.word	0x08009a76

080072a8 <__s2b>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	4615      	mov	r5, r2
 80072b0:	461f      	mov	r7, r3
 80072b2:	2209      	movs	r2, #9
 80072b4:	3308      	adds	r3, #8
 80072b6:	4606      	mov	r6, r0
 80072b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072bc:	2100      	movs	r1, #0
 80072be:	2201      	movs	r2, #1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	db09      	blt.n	80072d8 <__s2b+0x30>
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7ff ff47 	bl	8007158 <_Balloc>
 80072ca:	b940      	cbnz	r0, 80072de <__s2b+0x36>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b19      	ldr	r3, [pc, #100]	@ (8007334 <__s2b+0x8c>)
 80072d0:	4819      	ldr	r0, [pc, #100]	@ (8007338 <__s2b+0x90>)
 80072d2:	21d3      	movs	r1, #211	@ 0xd3
 80072d4:	f001 fccc 	bl	8008c70 <__assert_func>
 80072d8:	0052      	lsls	r2, r2, #1
 80072da:	3101      	adds	r1, #1
 80072dc:	e7f0      	b.n	80072c0 <__s2b+0x18>
 80072de:	9b08      	ldr	r3, [sp, #32]
 80072e0:	6143      	str	r3, [r0, #20]
 80072e2:	2d09      	cmp	r5, #9
 80072e4:	f04f 0301 	mov.w	r3, #1
 80072e8:	6103      	str	r3, [r0, #16]
 80072ea:	dd16      	ble.n	800731a <__s2b+0x72>
 80072ec:	f104 0909 	add.w	r9, r4, #9
 80072f0:	46c8      	mov	r8, r9
 80072f2:	442c      	add	r4, r5
 80072f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80072f8:	4601      	mov	r1, r0
 80072fa:	3b30      	subs	r3, #48	@ 0x30
 80072fc:	220a      	movs	r2, #10
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ff8c 	bl	800721c <__multadd>
 8007304:	45a0      	cmp	r8, r4
 8007306:	d1f5      	bne.n	80072f4 <__s2b+0x4c>
 8007308:	f1a5 0408 	sub.w	r4, r5, #8
 800730c:	444c      	add	r4, r9
 800730e:	1b2d      	subs	r5, r5, r4
 8007310:	1963      	adds	r3, r4, r5
 8007312:	42bb      	cmp	r3, r7
 8007314:	db04      	blt.n	8007320 <__s2b+0x78>
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731a:	340a      	adds	r4, #10
 800731c:	2509      	movs	r5, #9
 800731e:	e7f6      	b.n	800730e <__s2b+0x66>
 8007320:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007324:	4601      	mov	r1, r0
 8007326:	3b30      	subs	r3, #48	@ 0x30
 8007328:	220a      	movs	r2, #10
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff ff76 	bl	800721c <__multadd>
 8007330:	e7ee      	b.n	8007310 <__s2b+0x68>
 8007332:	bf00      	nop
 8007334:	08009a65 	.word	0x08009a65
 8007338:	08009a76 	.word	0x08009a76

0800733c <__hi0bits>:
 800733c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007340:	4603      	mov	r3, r0
 8007342:	bf36      	itet	cc
 8007344:	0403      	lslcc	r3, r0, #16
 8007346:	2000      	movcs	r0, #0
 8007348:	2010      	movcc	r0, #16
 800734a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800734e:	bf3c      	itt	cc
 8007350:	021b      	lslcc	r3, r3, #8
 8007352:	3008      	addcc	r0, #8
 8007354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007358:	bf3c      	itt	cc
 800735a:	011b      	lslcc	r3, r3, #4
 800735c:	3004      	addcc	r0, #4
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	bf3c      	itt	cc
 8007364:	009b      	lslcc	r3, r3, #2
 8007366:	3002      	addcc	r0, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	db05      	blt.n	8007378 <__hi0bits+0x3c>
 800736c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007370:	f100 0001 	add.w	r0, r0, #1
 8007374:	bf08      	it	eq
 8007376:	2020      	moveq	r0, #32
 8007378:	4770      	bx	lr

0800737a <__lo0bits>:
 800737a:	6803      	ldr	r3, [r0, #0]
 800737c:	4602      	mov	r2, r0
 800737e:	f013 0007 	ands.w	r0, r3, #7
 8007382:	d00b      	beq.n	800739c <__lo0bits+0x22>
 8007384:	07d9      	lsls	r1, r3, #31
 8007386:	d421      	bmi.n	80073cc <__lo0bits+0x52>
 8007388:	0798      	lsls	r0, r3, #30
 800738a:	bf49      	itett	mi
 800738c:	085b      	lsrmi	r3, r3, #1
 800738e:	089b      	lsrpl	r3, r3, #2
 8007390:	2001      	movmi	r0, #1
 8007392:	6013      	strmi	r3, [r2, #0]
 8007394:	bf5c      	itt	pl
 8007396:	6013      	strpl	r3, [r2, #0]
 8007398:	2002      	movpl	r0, #2
 800739a:	4770      	bx	lr
 800739c:	b299      	uxth	r1, r3
 800739e:	b909      	cbnz	r1, 80073a4 <__lo0bits+0x2a>
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	2010      	movs	r0, #16
 80073a4:	b2d9      	uxtb	r1, r3
 80073a6:	b909      	cbnz	r1, 80073ac <__lo0bits+0x32>
 80073a8:	3008      	adds	r0, #8
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	0719      	lsls	r1, r3, #28
 80073ae:	bf04      	itt	eq
 80073b0:	091b      	lsreq	r3, r3, #4
 80073b2:	3004      	addeq	r0, #4
 80073b4:	0799      	lsls	r1, r3, #30
 80073b6:	bf04      	itt	eq
 80073b8:	089b      	lsreq	r3, r3, #2
 80073ba:	3002      	addeq	r0, #2
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	d403      	bmi.n	80073c8 <__lo0bits+0x4e>
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	f100 0001 	add.w	r0, r0, #1
 80073c6:	d003      	beq.n	80073d0 <__lo0bits+0x56>
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	4770      	bx	lr
 80073cc:	2000      	movs	r0, #0
 80073ce:	4770      	bx	lr
 80073d0:	2020      	movs	r0, #32
 80073d2:	4770      	bx	lr

080073d4 <__i2b>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	460c      	mov	r4, r1
 80073d8:	2101      	movs	r1, #1
 80073da:	f7ff febd 	bl	8007158 <_Balloc>
 80073de:	4602      	mov	r2, r0
 80073e0:	b928      	cbnz	r0, 80073ee <__i2b+0x1a>
 80073e2:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <__i2b+0x24>)
 80073e4:	4805      	ldr	r0, [pc, #20]	@ (80073fc <__i2b+0x28>)
 80073e6:	f240 1145 	movw	r1, #325	@ 0x145
 80073ea:	f001 fc41 	bl	8008c70 <__assert_func>
 80073ee:	2301      	movs	r3, #1
 80073f0:	6144      	str	r4, [r0, #20]
 80073f2:	6103      	str	r3, [r0, #16]
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	bf00      	nop
 80073f8:	08009a65 	.word	0x08009a65
 80073fc:	08009a76 	.word	0x08009a76

08007400 <__multiply>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	4614      	mov	r4, r2
 8007406:	690a      	ldr	r2, [r1, #16]
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	429a      	cmp	r2, r3
 800740c:	bfa8      	it	ge
 800740e:	4623      	movge	r3, r4
 8007410:	460f      	mov	r7, r1
 8007412:	bfa4      	itt	ge
 8007414:	460c      	movge	r4, r1
 8007416:	461f      	movge	r7, r3
 8007418:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800741c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007420:	68a3      	ldr	r3, [r4, #8]
 8007422:	6861      	ldr	r1, [r4, #4]
 8007424:	eb0a 0609 	add.w	r6, sl, r9
 8007428:	42b3      	cmp	r3, r6
 800742a:	b085      	sub	sp, #20
 800742c:	bfb8      	it	lt
 800742e:	3101      	addlt	r1, #1
 8007430:	f7ff fe92 	bl	8007158 <_Balloc>
 8007434:	b930      	cbnz	r0, 8007444 <__multiply+0x44>
 8007436:	4602      	mov	r2, r0
 8007438:	4b44      	ldr	r3, [pc, #272]	@ (800754c <__multiply+0x14c>)
 800743a:	4845      	ldr	r0, [pc, #276]	@ (8007550 <__multiply+0x150>)
 800743c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007440:	f001 fc16 	bl	8008c70 <__assert_func>
 8007444:	f100 0514 	add.w	r5, r0, #20
 8007448:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800744c:	462b      	mov	r3, r5
 800744e:	2200      	movs	r2, #0
 8007450:	4543      	cmp	r3, r8
 8007452:	d321      	bcc.n	8007498 <__multiply+0x98>
 8007454:	f107 0114 	add.w	r1, r7, #20
 8007458:	f104 0214 	add.w	r2, r4, #20
 800745c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007460:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	1b13      	subs	r3, r2, r4
 8007468:	3b15      	subs	r3, #21
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	3304      	adds	r3, #4
 8007470:	f104 0715 	add.w	r7, r4, #21
 8007474:	42ba      	cmp	r2, r7
 8007476:	bf38      	it	cc
 8007478:	2304      	movcc	r3, #4
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	9b02      	ldr	r3, [sp, #8]
 800747e:	9103      	str	r1, [sp, #12]
 8007480:	428b      	cmp	r3, r1
 8007482:	d80c      	bhi.n	800749e <__multiply+0x9e>
 8007484:	2e00      	cmp	r6, #0
 8007486:	dd03      	ble.n	8007490 <__multiply+0x90>
 8007488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800748c:	2b00      	cmp	r3, #0
 800748e:	d05b      	beq.n	8007548 <__multiply+0x148>
 8007490:	6106      	str	r6, [r0, #16]
 8007492:	b005      	add	sp, #20
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007498:	f843 2b04 	str.w	r2, [r3], #4
 800749c:	e7d8      	b.n	8007450 <__multiply+0x50>
 800749e:	f8b1 a000 	ldrh.w	sl, [r1]
 80074a2:	f1ba 0f00 	cmp.w	sl, #0
 80074a6:	d024      	beq.n	80074f2 <__multiply+0xf2>
 80074a8:	f104 0e14 	add.w	lr, r4, #20
 80074ac:	46a9      	mov	r9, r5
 80074ae:	f04f 0c00 	mov.w	ip, #0
 80074b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074b6:	f8d9 3000 	ldr.w	r3, [r9]
 80074ba:	fa1f fb87 	uxth.w	fp, r7
 80074be:	b29b      	uxth	r3, r3
 80074c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80074c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80074c8:	f8d9 7000 	ldr.w	r7, [r9]
 80074cc:	4463      	add	r3, ip
 80074ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80074d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074da:	b29b      	uxth	r3, r3
 80074dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074e0:	4572      	cmp	r2, lr
 80074e2:	f849 3b04 	str.w	r3, [r9], #4
 80074e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074ea:	d8e2      	bhi.n	80074b2 <__multiply+0xb2>
 80074ec:	9b01      	ldr	r3, [sp, #4]
 80074ee:	f845 c003 	str.w	ip, [r5, r3]
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074f8:	3104      	adds	r1, #4
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	d021      	beq.n	8007544 <__multiply+0x144>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	f104 0c14 	add.w	ip, r4, #20
 8007506:	46ae      	mov	lr, r5
 8007508:	f04f 0a00 	mov.w	sl, #0
 800750c:	f8bc b000 	ldrh.w	fp, [ip]
 8007510:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007514:	fb09 770b 	mla	r7, r9, fp, r7
 8007518:	4457      	add	r7, sl
 800751a:	b29b      	uxth	r3, r3
 800751c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007520:	f84e 3b04 	str.w	r3, [lr], #4
 8007524:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007528:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800752c:	f8be 3000 	ldrh.w	r3, [lr]
 8007530:	fb09 330a 	mla	r3, r9, sl, r3
 8007534:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007538:	4562      	cmp	r2, ip
 800753a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800753e:	d8e5      	bhi.n	800750c <__multiply+0x10c>
 8007540:	9f01      	ldr	r7, [sp, #4]
 8007542:	51eb      	str	r3, [r5, r7]
 8007544:	3504      	adds	r5, #4
 8007546:	e799      	b.n	800747c <__multiply+0x7c>
 8007548:	3e01      	subs	r6, #1
 800754a:	e79b      	b.n	8007484 <__multiply+0x84>
 800754c:	08009a65 	.word	0x08009a65
 8007550:	08009a76 	.word	0x08009a76

08007554 <__pow5mult>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4615      	mov	r5, r2
 800755a:	f012 0203 	ands.w	r2, r2, #3
 800755e:	4607      	mov	r7, r0
 8007560:	460e      	mov	r6, r1
 8007562:	d007      	beq.n	8007574 <__pow5mult+0x20>
 8007564:	4c25      	ldr	r4, [pc, #148]	@ (80075fc <__pow5mult+0xa8>)
 8007566:	3a01      	subs	r2, #1
 8007568:	2300      	movs	r3, #0
 800756a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800756e:	f7ff fe55 	bl	800721c <__multadd>
 8007572:	4606      	mov	r6, r0
 8007574:	10ad      	asrs	r5, r5, #2
 8007576:	d03d      	beq.n	80075f4 <__pow5mult+0xa0>
 8007578:	69fc      	ldr	r4, [r7, #28]
 800757a:	b97c      	cbnz	r4, 800759c <__pow5mult+0x48>
 800757c:	2010      	movs	r0, #16
 800757e:	f7ff fd35 	bl	8006fec <malloc>
 8007582:	4602      	mov	r2, r0
 8007584:	61f8      	str	r0, [r7, #28]
 8007586:	b928      	cbnz	r0, 8007594 <__pow5mult+0x40>
 8007588:	4b1d      	ldr	r3, [pc, #116]	@ (8007600 <__pow5mult+0xac>)
 800758a:	481e      	ldr	r0, [pc, #120]	@ (8007604 <__pow5mult+0xb0>)
 800758c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007590:	f001 fb6e 	bl	8008c70 <__assert_func>
 8007594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007598:	6004      	str	r4, [r0, #0]
 800759a:	60c4      	str	r4, [r0, #12]
 800759c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075a4:	b94c      	cbnz	r4, 80075ba <__pow5mult+0x66>
 80075a6:	f240 2171 	movw	r1, #625	@ 0x271
 80075aa:	4638      	mov	r0, r7
 80075ac:	f7ff ff12 	bl	80073d4 <__i2b>
 80075b0:	2300      	movs	r3, #0
 80075b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80075b6:	4604      	mov	r4, r0
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	07eb      	lsls	r3, r5, #31
 80075c0:	d50a      	bpl.n	80075d8 <__pow5mult+0x84>
 80075c2:	4631      	mov	r1, r6
 80075c4:	4622      	mov	r2, r4
 80075c6:	4638      	mov	r0, r7
 80075c8:	f7ff ff1a 	bl	8007400 <__multiply>
 80075cc:	4631      	mov	r1, r6
 80075ce:	4680      	mov	r8, r0
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fe01 	bl	80071d8 <_Bfree>
 80075d6:	4646      	mov	r6, r8
 80075d8:	106d      	asrs	r5, r5, #1
 80075da:	d00b      	beq.n	80075f4 <__pow5mult+0xa0>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	b938      	cbnz	r0, 80075f0 <__pow5mult+0x9c>
 80075e0:	4622      	mov	r2, r4
 80075e2:	4621      	mov	r1, r4
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff ff0b 	bl	8007400 <__multiply>
 80075ea:	6020      	str	r0, [r4, #0]
 80075ec:	f8c0 9000 	str.w	r9, [r0]
 80075f0:	4604      	mov	r4, r0
 80075f2:	e7e4      	b.n	80075be <__pow5mult+0x6a>
 80075f4:	4630      	mov	r0, r6
 80075f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fa:	bf00      	nop
 80075fc:	08009ad0 	.word	0x08009ad0
 8007600:	080099f6 	.word	0x080099f6
 8007604:	08009a76 	.word	0x08009a76

08007608 <__lshift>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	6849      	ldr	r1, [r1, #4]
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007616:	68a3      	ldr	r3, [r4, #8]
 8007618:	4607      	mov	r7, r0
 800761a:	4691      	mov	r9, r2
 800761c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007620:	f108 0601 	add.w	r6, r8, #1
 8007624:	42b3      	cmp	r3, r6
 8007626:	db0b      	blt.n	8007640 <__lshift+0x38>
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff fd95 	bl	8007158 <_Balloc>
 800762e:	4605      	mov	r5, r0
 8007630:	b948      	cbnz	r0, 8007646 <__lshift+0x3e>
 8007632:	4602      	mov	r2, r0
 8007634:	4b28      	ldr	r3, [pc, #160]	@ (80076d8 <__lshift+0xd0>)
 8007636:	4829      	ldr	r0, [pc, #164]	@ (80076dc <__lshift+0xd4>)
 8007638:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800763c:	f001 fb18 	bl	8008c70 <__assert_func>
 8007640:	3101      	adds	r1, #1
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	e7ee      	b.n	8007624 <__lshift+0x1c>
 8007646:	2300      	movs	r3, #0
 8007648:	f100 0114 	add.w	r1, r0, #20
 800764c:	f100 0210 	add.w	r2, r0, #16
 8007650:	4618      	mov	r0, r3
 8007652:	4553      	cmp	r3, sl
 8007654:	db33      	blt.n	80076be <__lshift+0xb6>
 8007656:	6920      	ldr	r0, [r4, #16]
 8007658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800765c:	f104 0314 	add.w	r3, r4, #20
 8007660:	f019 091f 	ands.w	r9, r9, #31
 8007664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800766c:	d02b      	beq.n	80076c6 <__lshift+0xbe>
 800766e:	f1c9 0e20 	rsb	lr, r9, #32
 8007672:	468a      	mov	sl, r1
 8007674:	2200      	movs	r2, #0
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	fa00 f009 	lsl.w	r0, r0, r9
 800767c:	4310      	orrs	r0, r2
 800767e:	f84a 0b04 	str.w	r0, [sl], #4
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	459c      	cmp	ip, r3
 8007688:	fa22 f20e 	lsr.w	r2, r2, lr
 800768c:	d8f3      	bhi.n	8007676 <__lshift+0x6e>
 800768e:	ebac 0304 	sub.w	r3, ip, r4
 8007692:	3b15      	subs	r3, #21
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	3304      	adds	r3, #4
 800769a:	f104 0015 	add.w	r0, r4, #21
 800769e:	4584      	cmp	ip, r0
 80076a0:	bf38      	it	cc
 80076a2:	2304      	movcc	r3, #4
 80076a4:	50ca      	str	r2, [r1, r3]
 80076a6:	b10a      	cbz	r2, 80076ac <__lshift+0xa4>
 80076a8:	f108 0602 	add.w	r6, r8, #2
 80076ac:	3e01      	subs	r6, #1
 80076ae:	4638      	mov	r0, r7
 80076b0:	612e      	str	r6, [r5, #16]
 80076b2:	4621      	mov	r1, r4
 80076b4:	f7ff fd90 	bl	80071d8 <_Bfree>
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	f842 0f04 	str.w	r0, [r2, #4]!
 80076c2:	3301      	adds	r3, #1
 80076c4:	e7c5      	b.n	8007652 <__lshift+0x4a>
 80076c6:	3904      	subs	r1, #4
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80076d0:	459c      	cmp	ip, r3
 80076d2:	d8f9      	bhi.n	80076c8 <__lshift+0xc0>
 80076d4:	e7ea      	b.n	80076ac <__lshift+0xa4>
 80076d6:	bf00      	nop
 80076d8:	08009a65 	.word	0x08009a65
 80076dc:	08009a76 	.word	0x08009a76

080076e0 <__mcmp>:
 80076e0:	690a      	ldr	r2, [r1, #16]
 80076e2:	4603      	mov	r3, r0
 80076e4:	6900      	ldr	r0, [r0, #16]
 80076e6:	1a80      	subs	r0, r0, r2
 80076e8:	b530      	push	{r4, r5, lr}
 80076ea:	d10e      	bne.n	800770a <__mcmp+0x2a>
 80076ec:	3314      	adds	r3, #20
 80076ee:	3114      	adds	r1, #20
 80076f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007700:	4295      	cmp	r5, r2
 8007702:	d003      	beq.n	800770c <__mcmp+0x2c>
 8007704:	d205      	bcs.n	8007712 <__mcmp+0x32>
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	bd30      	pop	{r4, r5, pc}
 800770c:	42a3      	cmp	r3, r4
 800770e:	d3f3      	bcc.n	80076f8 <__mcmp+0x18>
 8007710:	e7fb      	b.n	800770a <__mcmp+0x2a>
 8007712:	2001      	movs	r0, #1
 8007714:	e7f9      	b.n	800770a <__mcmp+0x2a>
	...

08007718 <__mdiff>:
 8007718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	4689      	mov	r9, r1
 800771e:	4606      	mov	r6, r0
 8007720:	4611      	mov	r1, r2
 8007722:	4648      	mov	r0, r9
 8007724:	4614      	mov	r4, r2
 8007726:	f7ff ffdb 	bl	80076e0 <__mcmp>
 800772a:	1e05      	subs	r5, r0, #0
 800772c:	d112      	bne.n	8007754 <__mdiff+0x3c>
 800772e:	4629      	mov	r1, r5
 8007730:	4630      	mov	r0, r6
 8007732:	f7ff fd11 	bl	8007158 <_Balloc>
 8007736:	4602      	mov	r2, r0
 8007738:	b928      	cbnz	r0, 8007746 <__mdiff+0x2e>
 800773a:	4b3f      	ldr	r3, [pc, #252]	@ (8007838 <__mdiff+0x120>)
 800773c:	f240 2137 	movw	r1, #567	@ 0x237
 8007740:	483e      	ldr	r0, [pc, #248]	@ (800783c <__mdiff+0x124>)
 8007742:	f001 fa95 	bl	8008c70 <__assert_func>
 8007746:	2301      	movs	r3, #1
 8007748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800774c:	4610      	mov	r0, r2
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	bfbc      	itt	lt
 8007756:	464b      	movlt	r3, r9
 8007758:	46a1      	movlt	r9, r4
 800775a:	4630      	mov	r0, r6
 800775c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007760:	bfba      	itte	lt
 8007762:	461c      	movlt	r4, r3
 8007764:	2501      	movlt	r5, #1
 8007766:	2500      	movge	r5, #0
 8007768:	f7ff fcf6 	bl	8007158 <_Balloc>
 800776c:	4602      	mov	r2, r0
 800776e:	b918      	cbnz	r0, 8007778 <__mdiff+0x60>
 8007770:	4b31      	ldr	r3, [pc, #196]	@ (8007838 <__mdiff+0x120>)
 8007772:	f240 2145 	movw	r1, #581	@ 0x245
 8007776:	e7e3      	b.n	8007740 <__mdiff+0x28>
 8007778:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800777c:	6926      	ldr	r6, [r4, #16]
 800777e:	60c5      	str	r5, [r0, #12]
 8007780:	f109 0310 	add.w	r3, r9, #16
 8007784:	f109 0514 	add.w	r5, r9, #20
 8007788:	f104 0e14 	add.w	lr, r4, #20
 800778c:	f100 0b14 	add.w	fp, r0, #20
 8007790:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007794:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	46d9      	mov	r9, fp
 800779c:	f04f 0c00 	mov.w	ip, #0
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	fa1f f38a 	uxth.w	r3, sl
 80077b0:	4619      	mov	r1, r3
 80077b2:	b283      	uxth	r3, r0
 80077b4:	1acb      	subs	r3, r1, r3
 80077b6:	0c00      	lsrs	r0, r0, #16
 80077b8:	4463      	add	r3, ip
 80077ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077c8:	4576      	cmp	r6, lr
 80077ca:	f849 3b04 	str.w	r3, [r9], #4
 80077ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077d2:	d8e5      	bhi.n	80077a0 <__mdiff+0x88>
 80077d4:	1b33      	subs	r3, r6, r4
 80077d6:	3b15      	subs	r3, #21
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	3415      	adds	r4, #21
 80077de:	3304      	adds	r3, #4
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	bf38      	it	cc
 80077e4:	2304      	movcc	r3, #4
 80077e6:	441d      	add	r5, r3
 80077e8:	445b      	add	r3, fp
 80077ea:	461e      	mov	r6, r3
 80077ec:	462c      	mov	r4, r5
 80077ee:	4544      	cmp	r4, r8
 80077f0:	d30e      	bcc.n	8007810 <__mdiff+0xf8>
 80077f2:	f108 0103 	add.w	r1, r8, #3
 80077f6:	1b49      	subs	r1, r1, r5
 80077f8:	f021 0103 	bic.w	r1, r1, #3
 80077fc:	3d03      	subs	r5, #3
 80077fe:	45a8      	cmp	r8, r5
 8007800:	bf38      	it	cc
 8007802:	2100      	movcc	r1, #0
 8007804:	440b      	add	r3, r1
 8007806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800780a:	b191      	cbz	r1, 8007832 <__mdiff+0x11a>
 800780c:	6117      	str	r7, [r2, #16]
 800780e:	e79d      	b.n	800774c <__mdiff+0x34>
 8007810:	f854 1b04 	ldr.w	r1, [r4], #4
 8007814:	46e6      	mov	lr, ip
 8007816:	0c08      	lsrs	r0, r1, #16
 8007818:	fa1c fc81 	uxtah	ip, ip, r1
 800781c:	4471      	add	r1, lr
 800781e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007822:	b289      	uxth	r1, r1
 8007824:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007828:	f846 1b04 	str.w	r1, [r6], #4
 800782c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007830:	e7dd      	b.n	80077ee <__mdiff+0xd6>
 8007832:	3f01      	subs	r7, #1
 8007834:	e7e7      	b.n	8007806 <__mdiff+0xee>
 8007836:	bf00      	nop
 8007838:	08009a65 	.word	0x08009a65
 800783c:	08009a76 	.word	0x08009a76

08007840 <__ulp>:
 8007840:	b082      	sub	sp, #8
 8007842:	ed8d 0b00 	vstr	d0, [sp]
 8007846:	9a01      	ldr	r2, [sp, #4]
 8007848:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <__ulp+0x48>)
 800784a:	4013      	ands	r3, r2
 800784c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007850:	2b00      	cmp	r3, #0
 8007852:	dc08      	bgt.n	8007866 <__ulp+0x26>
 8007854:	425b      	negs	r3, r3
 8007856:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800785a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800785e:	da04      	bge.n	800786a <__ulp+0x2a>
 8007860:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007864:	4113      	asrs	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	e008      	b.n	800787c <__ulp+0x3c>
 800786a:	f1a2 0314 	sub.w	r3, r2, #20
 800786e:	2b1e      	cmp	r3, #30
 8007870:	bfda      	itte	le
 8007872:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007876:	40da      	lsrle	r2, r3
 8007878:	2201      	movgt	r2, #1
 800787a:	2300      	movs	r3, #0
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	ec41 0b10 	vmov	d0, r0, r1
 8007884:	b002      	add	sp, #8
 8007886:	4770      	bx	lr
 8007888:	7ff00000 	.word	0x7ff00000

0800788c <__b2d>:
 800788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007890:	6906      	ldr	r6, [r0, #16]
 8007892:	f100 0814 	add.w	r8, r0, #20
 8007896:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800789a:	1f37      	subs	r7, r6, #4
 800789c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7ff fd4b 	bl	800733c <__hi0bits>
 80078a6:	f1c0 0320 	rsb	r3, r0, #32
 80078aa:	280a      	cmp	r0, #10
 80078ac:	600b      	str	r3, [r1, #0]
 80078ae:	491b      	ldr	r1, [pc, #108]	@ (800791c <__b2d+0x90>)
 80078b0:	dc15      	bgt.n	80078de <__b2d+0x52>
 80078b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80078b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80078ba:	45b8      	cmp	r8, r7
 80078bc:	ea43 0501 	orr.w	r5, r3, r1
 80078c0:	bf34      	ite	cc
 80078c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80078c6:	2300      	movcs	r3, #0
 80078c8:	3015      	adds	r0, #21
 80078ca:	fa02 f000 	lsl.w	r0, r2, r0
 80078ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80078d2:	4303      	orrs	r3, r0
 80078d4:	461c      	mov	r4, r3
 80078d6:	ec45 4b10 	vmov	d0, r4, r5
 80078da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078de:	45b8      	cmp	r8, r7
 80078e0:	bf3a      	itte	cc
 80078e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80078e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80078ea:	2300      	movcs	r3, #0
 80078ec:	380b      	subs	r0, #11
 80078ee:	d012      	beq.n	8007916 <__b2d+0x8a>
 80078f0:	f1c0 0120 	rsb	r1, r0, #32
 80078f4:	fa23 f401 	lsr.w	r4, r3, r1
 80078f8:	4082      	lsls	r2, r0
 80078fa:	4322      	orrs	r2, r4
 80078fc:	4547      	cmp	r7, r8
 80078fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007902:	bf8c      	ite	hi
 8007904:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007908:	2200      	movls	r2, #0
 800790a:	4083      	lsls	r3, r0
 800790c:	40ca      	lsrs	r2, r1
 800790e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007912:	4313      	orrs	r3, r2
 8007914:	e7de      	b.n	80078d4 <__b2d+0x48>
 8007916:	ea42 0501 	orr.w	r5, r2, r1
 800791a:	e7db      	b.n	80078d4 <__b2d+0x48>
 800791c:	3ff00000 	.word	0x3ff00000

08007920 <__d2b>:
 8007920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007924:	460f      	mov	r7, r1
 8007926:	2101      	movs	r1, #1
 8007928:	ec59 8b10 	vmov	r8, r9, d0
 800792c:	4616      	mov	r6, r2
 800792e:	f7ff fc13 	bl	8007158 <_Balloc>
 8007932:	4604      	mov	r4, r0
 8007934:	b930      	cbnz	r0, 8007944 <__d2b+0x24>
 8007936:	4602      	mov	r2, r0
 8007938:	4b23      	ldr	r3, [pc, #140]	@ (80079c8 <__d2b+0xa8>)
 800793a:	4824      	ldr	r0, [pc, #144]	@ (80079cc <__d2b+0xac>)
 800793c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007940:	f001 f996 	bl	8008c70 <__assert_func>
 8007944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800794c:	b10d      	cbz	r5, 8007952 <__d2b+0x32>
 800794e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	f1b8 0300 	subs.w	r3, r8, #0
 8007958:	d023      	beq.n	80079a2 <__d2b+0x82>
 800795a:	4668      	mov	r0, sp
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	f7ff fd0c 	bl	800737a <__lo0bits>
 8007962:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007966:	b1d0      	cbz	r0, 800799e <__d2b+0x7e>
 8007968:	f1c0 0320 	rsb	r3, r0, #32
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	430b      	orrs	r3, r1
 8007972:	40c2      	lsrs	r2, r0
 8007974:	6163      	str	r3, [r4, #20]
 8007976:	9201      	str	r2, [sp, #4]
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	61a3      	str	r3, [r4, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf0c      	ite	eq
 8007980:	2201      	moveq	r2, #1
 8007982:	2202      	movne	r2, #2
 8007984:	6122      	str	r2, [r4, #16]
 8007986:	b1a5      	cbz	r5, 80079b2 <__d2b+0x92>
 8007988:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800798c:	4405      	add	r5, r0
 800798e:	603d      	str	r5, [r7, #0]
 8007990:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007994:	6030      	str	r0, [r6, #0]
 8007996:	4620      	mov	r0, r4
 8007998:	b003      	add	sp, #12
 800799a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800799e:	6161      	str	r1, [r4, #20]
 80079a0:	e7ea      	b.n	8007978 <__d2b+0x58>
 80079a2:	a801      	add	r0, sp, #4
 80079a4:	f7ff fce9 	bl	800737a <__lo0bits>
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	6163      	str	r3, [r4, #20]
 80079ac:	3020      	adds	r0, #32
 80079ae:	2201      	movs	r2, #1
 80079b0:	e7e8      	b.n	8007984 <__d2b+0x64>
 80079b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079ba:	6038      	str	r0, [r7, #0]
 80079bc:	6918      	ldr	r0, [r3, #16]
 80079be:	f7ff fcbd 	bl	800733c <__hi0bits>
 80079c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079c6:	e7e5      	b.n	8007994 <__d2b+0x74>
 80079c8:	08009a65 	.word	0x08009a65
 80079cc:	08009a76 	.word	0x08009a76

080079d0 <__ratio>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	b085      	sub	sp, #20
 80079d6:	e9cd 1000 	strd	r1, r0, [sp]
 80079da:	a902      	add	r1, sp, #8
 80079dc:	f7ff ff56 	bl	800788c <__b2d>
 80079e0:	9800      	ldr	r0, [sp, #0]
 80079e2:	a903      	add	r1, sp, #12
 80079e4:	ec55 4b10 	vmov	r4, r5, d0
 80079e8:	f7ff ff50 	bl	800788c <__b2d>
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	6919      	ldr	r1, [r3, #16]
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	1ac9      	subs	r1, r1, r3
 80079f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	ec5b ab10 	vmov	sl, fp, d0
 8007a00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfce      	itee	gt
 8007a08:	462a      	movgt	r2, r5
 8007a0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a0e:	465a      	movle	r2, fp
 8007a10:	462f      	mov	r7, r5
 8007a12:	46d9      	mov	r9, fp
 8007a14:	bfcc      	ite	gt
 8007a16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007a1e:	464b      	mov	r3, r9
 8007a20:	4652      	mov	r2, sl
 8007a22:	4620      	mov	r0, r4
 8007a24:	4639      	mov	r1, r7
 8007a26:	f7f8 ff19 	bl	800085c <__aeabi_ddiv>
 8007a2a:	ec41 0b10 	vmov	d0, r0, r1
 8007a2e:	b005      	add	sp, #20
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a34 <__copybits>:
 8007a34:	3901      	subs	r1, #1
 8007a36:	b570      	push	{r4, r5, r6, lr}
 8007a38:	1149      	asrs	r1, r1, #5
 8007a3a:	6914      	ldr	r4, [r2, #16]
 8007a3c:	3101      	adds	r1, #1
 8007a3e:	f102 0314 	add.w	r3, r2, #20
 8007a42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a4a:	1f05      	subs	r5, r0, #4
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	d30c      	bcc.n	8007a6a <__copybits+0x36>
 8007a50:	1aa3      	subs	r3, r4, r2
 8007a52:	3b11      	subs	r3, #17
 8007a54:	f023 0303 	bic.w	r3, r3, #3
 8007a58:	3211      	adds	r2, #17
 8007a5a:	42a2      	cmp	r2, r4
 8007a5c:	bf88      	it	hi
 8007a5e:	2300      	movhi	r3, #0
 8007a60:	4418      	add	r0, r3
 8007a62:	2300      	movs	r3, #0
 8007a64:	4288      	cmp	r0, r1
 8007a66:	d305      	bcc.n	8007a74 <__copybits+0x40>
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a72:	e7eb      	b.n	8007a4c <__copybits+0x18>
 8007a74:	f840 3b04 	str.w	r3, [r0], #4
 8007a78:	e7f4      	b.n	8007a64 <__copybits+0x30>

08007a7a <__any_on>:
 8007a7a:	f100 0214 	add.w	r2, r0, #20
 8007a7e:	6900      	ldr	r0, [r0, #16]
 8007a80:	114b      	asrs	r3, r1, #5
 8007a82:	4298      	cmp	r0, r3
 8007a84:	b510      	push	{r4, lr}
 8007a86:	db11      	blt.n	8007aac <__any_on+0x32>
 8007a88:	dd0a      	ble.n	8007aa0 <__any_on+0x26>
 8007a8a:	f011 011f 	ands.w	r1, r1, #31
 8007a8e:	d007      	beq.n	8007aa0 <__any_on+0x26>
 8007a90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a94:	fa24 f001 	lsr.w	r0, r4, r1
 8007a98:	fa00 f101 	lsl.w	r1, r0, r1
 8007a9c:	428c      	cmp	r4, r1
 8007a9e:	d10b      	bne.n	8007ab8 <__any_on+0x3e>
 8007aa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d803      	bhi.n	8007ab0 <__any_on+0x36>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	4603      	mov	r3, r0
 8007aae:	e7f7      	b.n	8007aa0 <__any_on+0x26>
 8007ab0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	d0f5      	beq.n	8007aa4 <__any_on+0x2a>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e7f6      	b.n	8007aaa <__any_on+0x30>

08007abc <sulp>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	ec45 4b10 	vmov	d0, r4, r5
 8007ac6:	4616      	mov	r6, r2
 8007ac8:	f7ff feba 	bl	8007840 <__ulp>
 8007acc:	ec51 0b10 	vmov	r0, r1, d0
 8007ad0:	b17e      	cbz	r6, 8007af2 <sulp+0x36>
 8007ad2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ad6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dd09      	ble.n	8007af2 <sulp+0x36>
 8007ade:	051b      	lsls	r3, r3, #20
 8007ae0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007aea:	4622      	mov	r2, r4
 8007aec:	462b      	mov	r3, r5
 8007aee:	f7f8 fd8b 	bl	8000608 <__aeabi_dmul>
 8007af2:	ec41 0b10 	vmov	d0, r0, r1
 8007af6:	bd70      	pop	{r4, r5, r6, pc}

08007af8 <_strtod_l>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	b09f      	sub	sp, #124	@ 0x7c
 8007afe:	460c      	mov	r4, r1
 8007b00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b02:	2200      	movs	r2, #0
 8007b04:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b06:	9005      	str	r0, [sp, #20]
 8007b08:	f04f 0a00 	mov.w	sl, #0
 8007b0c:	f04f 0b00 	mov.w	fp, #0
 8007b10:	460a      	mov	r2, r1
 8007b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b14:	7811      	ldrb	r1, [r2, #0]
 8007b16:	292b      	cmp	r1, #43	@ 0x2b
 8007b18:	d04a      	beq.n	8007bb0 <_strtod_l+0xb8>
 8007b1a:	d838      	bhi.n	8007b8e <_strtod_l+0x96>
 8007b1c:	290d      	cmp	r1, #13
 8007b1e:	d832      	bhi.n	8007b86 <_strtod_l+0x8e>
 8007b20:	2908      	cmp	r1, #8
 8007b22:	d832      	bhi.n	8007b8a <_strtod_l+0x92>
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d03b      	beq.n	8007ba0 <_strtod_l+0xa8>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007b2e:	782a      	ldrb	r2, [r5, #0]
 8007b30:	2a30      	cmp	r2, #48	@ 0x30
 8007b32:	f040 80b3 	bne.w	8007c9c <_strtod_l+0x1a4>
 8007b36:	786a      	ldrb	r2, [r5, #1]
 8007b38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b3c:	2a58      	cmp	r2, #88	@ 0x58
 8007b3e:	d16e      	bne.n	8007c1e <_strtod_l+0x126>
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	ab1a      	add	r3, sp, #104	@ 0x68
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	4a8e      	ldr	r2, [pc, #568]	@ (8007d84 <_strtod_l+0x28c>)
 8007b4c:	9805      	ldr	r0, [sp, #20]
 8007b4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b50:	a919      	add	r1, sp, #100	@ 0x64
 8007b52:	f001 f927 	bl	8008da4 <__gethex>
 8007b56:	f010 060f 	ands.w	r6, r0, #15
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	d005      	beq.n	8007b6a <_strtod_l+0x72>
 8007b5e:	2e06      	cmp	r6, #6
 8007b60:	d128      	bne.n	8007bb4 <_strtod_l+0xbc>
 8007b62:	3501      	adds	r5, #1
 8007b64:	2300      	movs	r3, #0
 8007b66:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 858e 	bne.w	800868e <_strtod_l+0xb96>
 8007b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b74:	b1cb      	cbz	r3, 8007baa <_strtod_l+0xb2>
 8007b76:	4652      	mov	r2, sl
 8007b78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007b7c:	ec43 2b10 	vmov	d0, r2, r3
 8007b80:	b01f      	add	sp, #124	@ 0x7c
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	2920      	cmp	r1, #32
 8007b88:	d1ce      	bne.n	8007b28 <_strtod_l+0x30>
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	e7c1      	b.n	8007b12 <_strtod_l+0x1a>
 8007b8e:	292d      	cmp	r1, #45	@ 0x2d
 8007b90:	d1ca      	bne.n	8007b28 <_strtod_l+0x30>
 8007b92:	2101      	movs	r1, #1
 8007b94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b96:	1c51      	adds	r1, r2, #1
 8007b98:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b9a:	7852      	ldrb	r2, [r2, #1]
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	d1c5      	bne.n	8007b2c <_strtod_l+0x34>
 8007ba0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ba2:	9419      	str	r4, [sp, #100]	@ 0x64
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f040 8570 	bne.w	800868a <_strtod_l+0xb92>
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	e7e5      	b.n	8007b7c <_strtod_l+0x84>
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	e7ef      	b.n	8007b94 <_strtod_l+0x9c>
 8007bb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007bb6:	b13a      	cbz	r2, 8007bc8 <_strtod_l+0xd0>
 8007bb8:	2135      	movs	r1, #53	@ 0x35
 8007bba:	a81c      	add	r0, sp, #112	@ 0x70
 8007bbc:	f7ff ff3a 	bl	8007a34 <__copybits>
 8007bc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bc2:	9805      	ldr	r0, [sp, #20]
 8007bc4:	f7ff fb08 	bl	80071d8 <_Bfree>
 8007bc8:	3e01      	subs	r6, #1
 8007bca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007bcc:	2e04      	cmp	r6, #4
 8007bce:	d806      	bhi.n	8007bde <_strtod_l+0xe6>
 8007bd0:	e8df f006 	tbb	[pc, r6]
 8007bd4:	201d0314 	.word	0x201d0314
 8007bd8:	14          	.byte	0x14
 8007bd9:	00          	.byte	0x00
 8007bda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007bde:	05e1      	lsls	r1, r4, #23
 8007be0:	bf48      	it	mi
 8007be2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007be6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bea:	0d1b      	lsrs	r3, r3, #20
 8007bec:	051b      	lsls	r3, r3, #20
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1bb      	bne.n	8007b6a <_strtod_l+0x72>
 8007bf2:	f7fe fb2f 	bl	8006254 <__errno>
 8007bf6:	2322      	movs	r3, #34	@ 0x22
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	e7b6      	b.n	8007b6a <_strtod_l+0x72>
 8007bfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c0c:	e7e7      	b.n	8007bde <_strtod_l+0xe6>
 8007c0e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007d8c <_strtod_l+0x294>
 8007c12:	e7e4      	b.n	8007bde <_strtod_l+0xe6>
 8007c14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c18:	f04f 3aff 	mov.w	sl, #4294967295
 8007c1c:	e7df      	b.n	8007bde <_strtod_l+0xe6>
 8007c1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b30      	cmp	r3, #48	@ 0x30
 8007c28:	d0f9      	beq.n	8007c1e <_strtod_l+0x126>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d09d      	beq.n	8007b6a <_strtod_l+0x72>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c34:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c36:	2300      	movs	r3, #0
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3c:	461f      	mov	r7, r3
 8007c3e:	220a      	movs	r2, #10
 8007c40:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007c42:	7805      	ldrb	r5, [r0, #0]
 8007c44:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007c48:	b2d9      	uxtb	r1, r3
 8007c4a:	2909      	cmp	r1, #9
 8007c4c:	d928      	bls.n	8007ca0 <_strtod_l+0x1a8>
 8007c4e:	494e      	ldr	r1, [pc, #312]	@ (8007d88 <_strtod_l+0x290>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	f000 ffd5 	bl	8008c00 <strncmp>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d032      	beq.n	8007cc0 <_strtod_l+0x1c8>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4681      	mov	r9, r0
 8007c60:	463d      	mov	r5, r7
 8007c62:	4603      	mov	r3, r0
 8007c64:	2a65      	cmp	r2, #101	@ 0x65
 8007c66:	d001      	beq.n	8007c6c <_strtod_l+0x174>
 8007c68:	2a45      	cmp	r2, #69	@ 0x45
 8007c6a:	d114      	bne.n	8007c96 <_strtod_l+0x19e>
 8007c6c:	b91d      	cbnz	r5, 8007c76 <_strtod_l+0x17e>
 8007c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c70:	4302      	orrs	r2, r0
 8007c72:	d095      	beq.n	8007ba0 <_strtod_l+0xa8>
 8007c74:	2500      	movs	r5, #0
 8007c76:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c78:	1c62      	adds	r2, r4, #1
 8007c7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c7c:	7862      	ldrb	r2, [r4, #1]
 8007c7e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c80:	d077      	beq.n	8007d72 <_strtod_l+0x27a>
 8007c82:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c84:	d07b      	beq.n	8007d7e <_strtod_l+0x286>
 8007c86:	f04f 0c00 	mov.w	ip, #0
 8007c8a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c8e:	2909      	cmp	r1, #9
 8007c90:	f240 8082 	bls.w	8007d98 <_strtod_l+0x2a0>
 8007c94:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	e0a2      	b.n	8007de2 <_strtod_l+0x2ea>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e7c7      	b.n	8007c30 <_strtod_l+0x138>
 8007ca0:	2f08      	cmp	r7, #8
 8007ca2:	bfd5      	itete	le
 8007ca4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007ca6:	9908      	ldrgt	r1, [sp, #32]
 8007ca8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007cac:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007cb0:	f100 0001 	add.w	r0, r0, #1
 8007cb4:	bfd4      	ite	le
 8007cb6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007cb8:	9308      	strgt	r3, [sp, #32]
 8007cba:	3701      	adds	r7, #1
 8007cbc:	9019      	str	r0, [sp, #100]	@ 0x64
 8007cbe:	e7bf      	b.n	8007c40 <_strtod_l+0x148>
 8007cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cc6:	785a      	ldrb	r2, [r3, #1]
 8007cc8:	b37f      	cbz	r7, 8007d2a <_strtod_l+0x232>
 8007cca:	4681      	mov	r9, r0
 8007ccc:	463d      	mov	r5, r7
 8007cce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d912      	bls.n	8007cfc <_strtod_l+0x204>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7c4      	b.n	8007c64 <_strtod_l+0x16c>
 8007cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ce0:	785a      	ldrb	r2, [r3, #1]
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	2a30      	cmp	r2, #48	@ 0x30
 8007ce6:	d0f8      	beq.n	8007cda <_strtod_l+0x1e2>
 8007ce8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	f200 84d3 	bhi.w	8008698 <_strtod_l+0xba0>
 8007cf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cf4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cf6:	4681      	mov	r9, r0
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	3a30      	subs	r2, #48	@ 0x30
 8007cfe:	f100 0301 	add.w	r3, r0, #1
 8007d02:	d02a      	beq.n	8007d5a <_strtod_l+0x262>
 8007d04:	4499      	add	r9, r3
 8007d06:	eb00 0c05 	add.w	ip, r0, r5
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	210a      	movs	r1, #10
 8007d0e:	4563      	cmp	r3, ip
 8007d10:	d10d      	bne.n	8007d2e <_strtod_l+0x236>
 8007d12:	1c69      	adds	r1, r5, #1
 8007d14:	4401      	add	r1, r0
 8007d16:	4428      	add	r0, r5
 8007d18:	2808      	cmp	r0, #8
 8007d1a:	dc16      	bgt.n	8007d4a <_strtod_l+0x252>
 8007d1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d1e:	230a      	movs	r3, #10
 8007d20:	fb03 2300 	mla	r3, r3, r0, r2
 8007d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d26:	2300      	movs	r3, #0
 8007d28:	e018      	b.n	8007d5c <_strtod_l+0x264>
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	e7da      	b.n	8007ce4 <_strtod_l+0x1ec>
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	f103 0301 	add.w	r3, r3, #1
 8007d34:	dc03      	bgt.n	8007d3e <_strtod_l+0x246>
 8007d36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d38:	434e      	muls	r6, r1
 8007d3a:	960a      	str	r6, [sp, #40]	@ 0x28
 8007d3c:	e7e7      	b.n	8007d0e <_strtod_l+0x216>
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	bfde      	ittt	le
 8007d42:	9e08      	ldrle	r6, [sp, #32]
 8007d44:	434e      	mulle	r6, r1
 8007d46:	9608      	strle	r6, [sp, #32]
 8007d48:	e7e1      	b.n	8007d0e <_strtod_l+0x216>
 8007d4a:	280f      	cmp	r0, #15
 8007d4c:	dceb      	bgt.n	8007d26 <_strtod_l+0x22e>
 8007d4e:	9808      	ldr	r0, [sp, #32]
 8007d50:	230a      	movs	r3, #10
 8007d52:	fb03 2300 	mla	r3, r3, r0, r2
 8007d56:	9308      	str	r3, [sp, #32]
 8007d58:	e7e5      	b.n	8007d26 <_strtod_l+0x22e>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d5e:	1c50      	adds	r0, r2, #1
 8007d60:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d62:	7852      	ldrb	r2, [r2, #1]
 8007d64:	4618      	mov	r0, r3
 8007d66:	460d      	mov	r5, r1
 8007d68:	e7b1      	b.n	8007cce <_strtod_l+0x1d6>
 8007d6a:	f04f 0900 	mov.w	r9, #0
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e77d      	b.n	8007c6e <_strtod_l+0x176>
 8007d72:	f04f 0c00 	mov.w	ip, #0
 8007d76:	1ca2      	adds	r2, r4, #2
 8007d78:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d7a:	78a2      	ldrb	r2, [r4, #2]
 8007d7c:	e785      	b.n	8007c8a <_strtod_l+0x192>
 8007d7e:	f04f 0c01 	mov.w	ip, #1
 8007d82:	e7f8      	b.n	8007d76 <_strtod_l+0x27e>
 8007d84:	08009be8 	.word	0x08009be8
 8007d88:	08009bd0 	.word	0x08009bd0
 8007d8c:	7ff00000 	.word	0x7ff00000
 8007d90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d92:	1c51      	adds	r1, r2, #1
 8007d94:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d96:	7852      	ldrb	r2, [r2, #1]
 8007d98:	2a30      	cmp	r2, #48	@ 0x30
 8007d9a:	d0f9      	beq.n	8007d90 <_strtod_l+0x298>
 8007d9c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007da0:	2908      	cmp	r1, #8
 8007da2:	f63f af78 	bhi.w	8007c96 <_strtod_l+0x19e>
 8007da6:	3a30      	subs	r2, #48	@ 0x30
 8007da8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007daa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007dae:	f04f 080a 	mov.w	r8, #10
 8007db2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007db4:	1c56      	adds	r6, r2, #1
 8007db6:	9619      	str	r6, [sp, #100]	@ 0x64
 8007db8:	7852      	ldrb	r2, [r2, #1]
 8007dba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007dbe:	f1be 0f09 	cmp.w	lr, #9
 8007dc2:	d939      	bls.n	8007e38 <_strtod_l+0x340>
 8007dc4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007dc6:	1a76      	subs	r6, r6, r1
 8007dc8:	2e08      	cmp	r6, #8
 8007dca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007dce:	dc03      	bgt.n	8007dd8 <_strtod_l+0x2e0>
 8007dd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dd2:	4588      	cmp	r8, r1
 8007dd4:	bfa8      	it	ge
 8007dd6:	4688      	movge	r8, r1
 8007dd8:	f1bc 0f00 	cmp.w	ip, #0
 8007ddc:	d001      	beq.n	8007de2 <_strtod_l+0x2ea>
 8007dde:	f1c8 0800 	rsb	r8, r8, #0
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	d14e      	bne.n	8007e84 <_strtod_l+0x38c>
 8007de6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007de8:	4308      	orrs	r0, r1
 8007dea:	f47f aebe 	bne.w	8007b6a <_strtod_l+0x72>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f47f aed6 	bne.w	8007ba0 <_strtod_l+0xa8>
 8007df4:	2a69      	cmp	r2, #105	@ 0x69
 8007df6:	d028      	beq.n	8007e4a <_strtod_l+0x352>
 8007df8:	dc25      	bgt.n	8007e46 <_strtod_l+0x34e>
 8007dfa:	2a49      	cmp	r2, #73	@ 0x49
 8007dfc:	d025      	beq.n	8007e4a <_strtod_l+0x352>
 8007dfe:	2a4e      	cmp	r2, #78	@ 0x4e
 8007e00:	f47f aece 	bne.w	8007ba0 <_strtod_l+0xa8>
 8007e04:	499b      	ldr	r1, [pc, #620]	@ (8008074 <_strtod_l+0x57c>)
 8007e06:	a819      	add	r0, sp, #100	@ 0x64
 8007e08:	f001 f9ee 	bl	80091e8 <__match>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f aec7 	beq.w	8007ba0 <_strtod_l+0xa8>
 8007e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b28      	cmp	r3, #40	@ 0x28
 8007e18:	d12e      	bne.n	8007e78 <_strtod_l+0x380>
 8007e1a:	4997      	ldr	r1, [pc, #604]	@ (8008078 <_strtod_l+0x580>)
 8007e1c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e1e:	a819      	add	r0, sp, #100	@ 0x64
 8007e20:	f001 f9f6 	bl	8009210 <__hexnan>
 8007e24:	2805      	cmp	r0, #5
 8007e26:	d127      	bne.n	8007e78 <_strtod_l+0x380>
 8007e28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e2a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007e2e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007e32:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e36:	e698      	b.n	8007b6a <_strtod_l+0x72>
 8007e38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e3a:	fb08 2101 	mla	r1, r8, r1, r2
 8007e3e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007e42:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e44:	e7b5      	b.n	8007db2 <_strtod_l+0x2ba>
 8007e46:	2a6e      	cmp	r2, #110	@ 0x6e
 8007e48:	e7da      	b.n	8007e00 <_strtod_l+0x308>
 8007e4a:	498c      	ldr	r1, [pc, #560]	@ (800807c <_strtod_l+0x584>)
 8007e4c:	a819      	add	r0, sp, #100	@ 0x64
 8007e4e:	f001 f9cb 	bl	80091e8 <__match>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f43f aea4 	beq.w	8007ba0 <_strtod_l+0xa8>
 8007e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e5a:	4989      	ldr	r1, [pc, #548]	@ (8008080 <_strtod_l+0x588>)
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	a819      	add	r0, sp, #100	@ 0x64
 8007e60:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e62:	f001 f9c1 	bl	80091e8 <__match>
 8007e66:	b910      	cbnz	r0, 8007e6e <_strtod_l+0x376>
 8007e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e6e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008090 <_strtod_l+0x598>
 8007e72:	f04f 0a00 	mov.w	sl, #0
 8007e76:	e678      	b.n	8007b6a <_strtod_l+0x72>
 8007e78:	4882      	ldr	r0, [pc, #520]	@ (8008084 <_strtod_l+0x58c>)
 8007e7a:	f000 fef1 	bl	8008c60 <nan>
 8007e7e:	ec5b ab10 	vmov	sl, fp, d0
 8007e82:	e672      	b.n	8007b6a <_strtod_l+0x72>
 8007e84:	eba8 0309 	sub.w	r3, r8, r9
 8007e88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	bf08      	it	eq
 8007e90:	462f      	moveq	r7, r5
 8007e92:	2d10      	cmp	r5, #16
 8007e94:	462c      	mov	r4, r5
 8007e96:	bfa8      	it	ge
 8007e98:	2410      	movge	r4, #16
 8007e9a:	f7f8 fb3b 	bl	8000514 <__aeabi_ui2d>
 8007e9e:	2d09      	cmp	r5, #9
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	dc13      	bgt.n	8007ece <_strtod_l+0x3d6>
 8007ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f43f ae5e 	beq.w	8007b6a <_strtod_l+0x72>
 8007eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb0:	dd78      	ble.n	8007fa4 <_strtod_l+0x4ac>
 8007eb2:	2b16      	cmp	r3, #22
 8007eb4:	dc5f      	bgt.n	8007f76 <_strtod_l+0x47e>
 8007eb6:	4974      	ldr	r1, [pc, #464]	@ (8008088 <_strtod_l+0x590>)
 8007eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	f7f8 fba0 	bl	8000608 <__aeabi_dmul>
 8007ec8:	4682      	mov	sl, r0
 8007eca:	468b      	mov	fp, r1
 8007ecc:	e64d      	b.n	8007b6a <_strtod_l+0x72>
 8007ece:	4b6e      	ldr	r3, [pc, #440]	@ (8008088 <_strtod_l+0x590>)
 8007ed0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ed4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	4682      	mov	sl, r0
 8007ede:	9808      	ldr	r0, [sp, #32]
 8007ee0:	468b      	mov	fp, r1
 8007ee2:	f7f8 fb17 	bl	8000514 <__aeabi_ui2d>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4650      	mov	r0, sl
 8007eec:	4659      	mov	r1, fp
 8007eee:	f7f8 f9d5 	bl	800029c <__adddf3>
 8007ef2:	2d0f      	cmp	r5, #15
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	468b      	mov	fp, r1
 8007ef8:	ddd5      	ble.n	8007ea6 <_strtod_l+0x3ae>
 8007efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007efc:	1b2c      	subs	r4, r5, r4
 8007efe:	441c      	add	r4, r3
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	f340 8096 	ble.w	8008032 <_strtod_l+0x53a>
 8007f06:	f014 030f 	ands.w	r3, r4, #15
 8007f0a:	d00a      	beq.n	8007f22 <_strtod_l+0x42a>
 8007f0c:	495e      	ldr	r1, [pc, #376]	@ (8008088 <_strtod_l+0x590>)
 8007f0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f12:	4652      	mov	r2, sl
 8007f14:	465b      	mov	r3, fp
 8007f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f1a:	f7f8 fb75 	bl	8000608 <__aeabi_dmul>
 8007f1e:	4682      	mov	sl, r0
 8007f20:	468b      	mov	fp, r1
 8007f22:	f034 040f 	bics.w	r4, r4, #15
 8007f26:	d073      	beq.n	8008010 <_strtod_l+0x518>
 8007f28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007f2c:	dd48      	ble.n	8007fc0 <_strtod_l+0x4c8>
 8007f2e:	2400      	movs	r4, #0
 8007f30:	46a0      	mov	r8, r4
 8007f32:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f34:	46a1      	mov	r9, r4
 8007f36:	9a05      	ldr	r2, [sp, #20]
 8007f38:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008090 <_strtod_l+0x598>
 8007f3c:	2322      	movs	r3, #34	@ 0x22
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	f04f 0a00 	mov.w	sl, #0
 8007f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f43f ae0f 	beq.w	8007b6a <_strtod_l+0x72>
 8007f4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f4e:	9805      	ldr	r0, [sp, #20]
 8007f50:	f7ff f942 	bl	80071d8 <_Bfree>
 8007f54:	9805      	ldr	r0, [sp, #20]
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7ff f93e 	bl	80071d8 <_Bfree>
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	4641      	mov	r1, r8
 8007f60:	f7ff f93a 	bl	80071d8 <_Bfree>
 8007f64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f66:	9805      	ldr	r0, [sp, #20]
 8007f68:	f7ff f936 	bl	80071d8 <_Bfree>
 8007f6c:	9805      	ldr	r0, [sp, #20]
 8007f6e:	4621      	mov	r1, r4
 8007f70:	f7ff f932 	bl	80071d8 <_Bfree>
 8007f74:	e5f9      	b.n	8007b6a <_strtod_l+0x72>
 8007f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	dbbc      	blt.n	8007efa <_strtod_l+0x402>
 8007f80:	4c41      	ldr	r4, [pc, #260]	@ (8008088 <_strtod_l+0x590>)
 8007f82:	f1c5 050f 	rsb	r5, r5, #15
 8007f86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f8a:	4652      	mov	r2, sl
 8007f8c:	465b      	mov	r3, fp
 8007f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f92:	f7f8 fb39 	bl	8000608 <__aeabi_dmul>
 8007f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f98:	1b5d      	subs	r5, r3, r5
 8007f9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007fa2:	e78f      	b.n	8007ec4 <_strtod_l+0x3cc>
 8007fa4:	3316      	adds	r3, #22
 8007fa6:	dba8      	blt.n	8007efa <_strtod_l+0x402>
 8007fa8:	4b37      	ldr	r3, [pc, #220]	@ (8008088 <_strtod_l+0x590>)
 8007faa:	eba9 0808 	sub.w	r8, r9, r8
 8007fae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007fb2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	4659      	mov	r1, fp
 8007fba:	f7f8 fc4f 	bl	800085c <__aeabi_ddiv>
 8007fbe:	e783      	b.n	8007ec8 <_strtod_l+0x3d0>
 8007fc0:	4b32      	ldr	r3, [pc, #200]	@ (800808c <_strtod_l+0x594>)
 8007fc2:	9308      	str	r3, [sp, #32]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	1124      	asrs	r4, r4, #4
 8007fc8:	4650      	mov	r0, sl
 8007fca:	4659      	mov	r1, fp
 8007fcc:	461e      	mov	r6, r3
 8007fce:	2c01      	cmp	r4, #1
 8007fd0:	dc21      	bgt.n	8008016 <_strtod_l+0x51e>
 8007fd2:	b10b      	cbz	r3, 8007fd8 <_strtod_l+0x4e0>
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	468b      	mov	fp, r1
 8007fd8:	492c      	ldr	r1, [pc, #176]	@ (800808c <_strtod_l+0x594>)
 8007fda:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007fde:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fea:	f7f8 fb0d 	bl	8000608 <__aeabi_dmul>
 8007fee:	4b28      	ldr	r3, [pc, #160]	@ (8008090 <_strtod_l+0x598>)
 8007ff0:	460a      	mov	r2, r1
 8007ff2:	400b      	ands	r3, r1
 8007ff4:	4927      	ldr	r1, [pc, #156]	@ (8008094 <_strtod_l+0x59c>)
 8007ff6:	428b      	cmp	r3, r1
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	d898      	bhi.n	8007f2e <_strtod_l+0x436>
 8007ffc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008000:	428b      	cmp	r3, r1
 8008002:	bf86      	itte	hi
 8008004:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008098 <_strtod_l+0x5a0>
 8008008:	f04f 3aff 	movhi.w	sl, #4294967295
 800800c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008010:	2300      	movs	r3, #0
 8008012:	9308      	str	r3, [sp, #32]
 8008014:	e07a      	b.n	800810c <_strtod_l+0x614>
 8008016:	07e2      	lsls	r2, r4, #31
 8008018:	d505      	bpl.n	8008026 <_strtod_l+0x52e>
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 faf2 	bl	8000608 <__aeabi_dmul>
 8008024:	2301      	movs	r3, #1
 8008026:	9a08      	ldr	r2, [sp, #32]
 8008028:	3208      	adds	r2, #8
 800802a:	3601      	adds	r6, #1
 800802c:	1064      	asrs	r4, r4, #1
 800802e:	9208      	str	r2, [sp, #32]
 8008030:	e7cd      	b.n	8007fce <_strtod_l+0x4d6>
 8008032:	d0ed      	beq.n	8008010 <_strtod_l+0x518>
 8008034:	4264      	negs	r4, r4
 8008036:	f014 020f 	ands.w	r2, r4, #15
 800803a:	d00a      	beq.n	8008052 <_strtod_l+0x55a>
 800803c:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <_strtod_l+0x590>)
 800803e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008042:	4650      	mov	r0, sl
 8008044:	4659      	mov	r1, fp
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 fc07 	bl	800085c <__aeabi_ddiv>
 800804e:	4682      	mov	sl, r0
 8008050:	468b      	mov	fp, r1
 8008052:	1124      	asrs	r4, r4, #4
 8008054:	d0dc      	beq.n	8008010 <_strtod_l+0x518>
 8008056:	2c1f      	cmp	r4, #31
 8008058:	dd20      	ble.n	800809c <_strtod_l+0x5a4>
 800805a:	2400      	movs	r4, #0
 800805c:	46a0      	mov	r8, r4
 800805e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008060:	46a1      	mov	r9, r4
 8008062:	9a05      	ldr	r2, [sp, #20]
 8008064:	2322      	movs	r3, #34	@ 0x22
 8008066:	f04f 0a00 	mov.w	sl, #0
 800806a:	f04f 0b00 	mov.w	fp, #0
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	e768      	b.n	8007f44 <_strtod_l+0x44c>
 8008072:	bf00      	nop
 8008074:	080099bd 	.word	0x080099bd
 8008078:	08009bd4 	.word	0x08009bd4
 800807c:	080099b5 	.word	0x080099b5
 8008080:	080099ec 	.word	0x080099ec
 8008084:	08009d7d 	.word	0x08009d7d
 8008088:	08009b08 	.word	0x08009b08
 800808c:	08009ae0 	.word	0x08009ae0
 8008090:	7ff00000 	.word	0x7ff00000
 8008094:	7ca00000 	.word	0x7ca00000
 8008098:	7fefffff 	.word	0x7fefffff
 800809c:	f014 0310 	ands.w	r3, r4, #16
 80080a0:	bf18      	it	ne
 80080a2:	236a      	movne	r3, #106	@ 0x6a
 80080a4:	4ea9      	ldr	r6, [pc, #676]	@ (800834c <_strtod_l+0x854>)
 80080a6:	9308      	str	r3, [sp, #32]
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	2300      	movs	r3, #0
 80080ae:	07e2      	lsls	r2, r4, #31
 80080b0:	d504      	bpl.n	80080bc <_strtod_l+0x5c4>
 80080b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080b6:	f7f8 faa7 	bl	8000608 <__aeabi_dmul>
 80080ba:	2301      	movs	r3, #1
 80080bc:	1064      	asrs	r4, r4, #1
 80080be:	f106 0608 	add.w	r6, r6, #8
 80080c2:	d1f4      	bne.n	80080ae <_strtod_l+0x5b6>
 80080c4:	b10b      	cbz	r3, 80080ca <_strtod_l+0x5d2>
 80080c6:	4682      	mov	sl, r0
 80080c8:	468b      	mov	fp, r1
 80080ca:	9b08      	ldr	r3, [sp, #32]
 80080cc:	b1b3      	cbz	r3, 80080fc <_strtod_l+0x604>
 80080ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80080d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	4659      	mov	r1, fp
 80080da:	dd0f      	ble.n	80080fc <_strtod_l+0x604>
 80080dc:	2b1f      	cmp	r3, #31
 80080de:	dd55      	ble.n	800818c <_strtod_l+0x694>
 80080e0:	2b34      	cmp	r3, #52	@ 0x34
 80080e2:	bfde      	ittt	le
 80080e4:	f04f 33ff 	movle.w	r3, #4294967295
 80080e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80080ec:	4093      	lslle	r3, r2
 80080ee:	f04f 0a00 	mov.w	sl, #0
 80080f2:	bfcc      	ite	gt
 80080f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80080f8:	ea03 0b01 	andle.w	fp, r3, r1
 80080fc:	2200      	movs	r2, #0
 80080fe:	2300      	movs	r3, #0
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008108:	2800      	cmp	r0, #0
 800810a:	d1a6      	bne.n	800805a <_strtod_l+0x562>
 800810c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008112:	9805      	ldr	r0, [sp, #20]
 8008114:	462b      	mov	r3, r5
 8008116:	463a      	mov	r2, r7
 8008118:	f7ff f8c6 	bl	80072a8 <__s2b>
 800811c:	900a      	str	r0, [sp, #40]	@ 0x28
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f af05 	beq.w	8007f2e <_strtod_l+0x436>
 8008124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008126:	2a00      	cmp	r2, #0
 8008128:	eba9 0308 	sub.w	r3, r9, r8
 800812c:	bfa8      	it	ge
 800812e:	2300      	movge	r3, #0
 8008130:	9312      	str	r3, [sp, #72]	@ 0x48
 8008132:	2400      	movs	r4, #0
 8008134:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008138:	9316      	str	r3, [sp, #88]	@ 0x58
 800813a:	46a0      	mov	r8, r4
 800813c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800813e:	9805      	ldr	r0, [sp, #20]
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	f7ff f809 	bl	8007158 <_Balloc>
 8008146:	4681      	mov	r9, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	f43f aef4 	beq.w	8007f36 <_strtod_l+0x43e>
 800814e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	3202      	adds	r2, #2
 8008154:	f103 010c 	add.w	r1, r3, #12
 8008158:	0092      	lsls	r2, r2, #2
 800815a:	300c      	adds	r0, #12
 800815c:	f000 fd72 	bl	8008c44 <memcpy>
 8008160:	ec4b ab10 	vmov	d0, sl, fp
 8008164:	9805      	ldr	r0, [sp, #20]
 8008166:	aa1c      	add	r2, sp, #112	@ 0x70
 8008168:	a91b      	add	r1, sp, #108	@ 0x6c
 800816a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800816e:	f7ff fbd7 	bl	8007920 <__d2b>
 8008172:	901a      	str	r0, [sp, #104]	@ 0x68
 8008174:	2800      	cmp	r0, #0
 8008176:	f43f aede 	beq.w	8007f36 <_strtod_l+0x43e>
 800817a:	9805      	ldr	r0, [sp, #20]
 800817c:	2101      	movs	r1, #1
 800817e:	f7ff f929 	bl	80073d4 <__i2b>
 8008182:	4680      	mov	r8, r0
 8008184:	b948      	cbnz	r0, 800819a <_strtod_l+0x6a2>
 8008186:	f04f 0800 	mov.w	r8, #0
 800818a:	e6d4      	b.n	8007f36 <_strtod_l+0x43e>
 800818c:	f04f 32ff 	mov.w	r2, #4294967295
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	ea03 0a0a 	and.w	sl, r3, sl
 8008198:	e7b0      	b.n	80080fc <_strtod_l+0x604>
 800819a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800819c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800819e:	2d00      	cmp	r5, #0
 80081a0:	bfab      	itete	ge
 80081a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80081a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80081a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80081a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80081aa:	bfac      	ite	ge
 80081ac:	18ef      	addge	r7, r5, r3
 80081ae:	1b5e      	sublt	r6, r3, r5
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	1aed      	subs	r5, r5, r3
 80081b4:	4415      	add	r5, r2
 80081b6:	4b66      	ldr	r3, [pc, #408]	@ (8008350 <_strtod_l+0x858>)
 80081b8:	3d01      	subs	r5, #1
 80081ba:	429d      	cmp	r5, r3
 80081bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80081c0:	da50      	bge.n	8008264 <_strtod_l+0x76c>
 80081c2:	1b5b      	subs	r3, r3, r5
 80081c4:	2b1f      	cmp	r3, #31
 80081c6:	eba2 0203 	sub.w	r2, r2, r3
 80081ca:	f04f 0101 	mov.w	r1, #1
 80081ce:	dc3d      	bgt.n	800824c <_strtod_l+0x754>
 80081d0:	fa01 f303 	lsl.w	r3, r1, r3
 80081d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081d6:	2300      	movs	r3, #0
 80081d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80081da:	18bd      	adds	r5, r7, r2
 80081dc:	9b08      	ldr	r3, [sp, #32]
 80081de:	42af      	cmp	r7, r5
 80081e0:	4416      	add	r6, r2
 80081e2:	441e      	add	r6, r3
 80081e4:	463b      	mov	r3, r7
 80081e6:	bfa8      	it	ge
 80081e8:	462b      	movge	r3, r5
 80081ea:	42b3      	cmp	r3, r6
 80081ec:	bfa8      	it	ge
 80081ee:	4633      	movge	r3, r6
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfc2      	ittt	gt
 80081f4:	1aed      	subgt	r5, r5, r3
 80081f6:	1af6      	subgt	r6, r6, r3
 80081f8:	1aff      	subgt	r7, r7, r3
 80081fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dd16      	ble.n	800822e <_strtod_l+0x736>
 8008200:	4641      	mov	r1, r8
 8008202:	9805      	ldr	r0, [sp, #20]
 8008204:	461a      	mov	r2, r3
 8008206:	f7ff f9a5 	bl	8007554 <__pow5mult>
 800820a:	4680      	mov	r8, r0
 800820c:	2800      	cmp	r0, #0
 800820e:	d0ba      	beq.n	8008186 <_strtod_l+0x68e>
 8008210:	4601      	mov	r1, r0
 8008212:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	f7ff f8f3 	bl	8007400 <__multiply>
 800821a:	900e      	str	r0, [sp, #56]	@ 0x38
 800821c:	2800      	cmp	r0, #0
 800821e:	f43f ae8a 	beq.w	8007f36 <_strtod_l+0x43e>
 8008222:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008224:	9805      	ldr	r0, [sp, #20]
 8008226:	f7fe ffd7 	bl	80071d8 <_Bfree>
 800822a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800822c:	931a      	str	r3, [sp, #104]	@ 0x68
 800822e:	2d00      	cmp	r5, #0
 8008230:	dc1d      	bgt.n	800826e <_strtod_l+0x776>
 8008232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd23      	ble.n	8008280 <_strtod_l+0x788>
 8008238:	4649      	mov	r1, r9
 800823a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800823c:	9805      	ldr	r0, [sp, #20]
 800823e:	f7ff f989 	bl	8007554 <__pow5mult>
 8008242:	4681      	mov	r9, r0
 8008244:	b9e0      	cbnz	r0, 8008280 <_strtod_l+0x788>
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	e674      	b.n	8007f36 <_strtod_l+0x43e>
 800824c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008250:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008254:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008258:	35e2      	adds	r5, #226	@ 0xe2
 800825a:	fa01 f305 	lsl.w	r3, r1, r5
 800825e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008260:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008262:	e7ba      	b.n	80081da <_strtod_l+0x6e2>
 8008264:	2300      	movs	r3, #0
 8008266:	9310      	str	r3, [sp, #64]	@ 0x40
 8008268:	2301      	movs	r3, #1
 800826a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800826c:	e7b5      	b.n	80081da <_strtod_l+0x6e2>
 800826e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008270:	9805      	ldr	r0, [sp, #20]
 8008272:	462a      	mov	r2, r5
 8008274:	f7ff f9c8 	bl	8007608 <__lshift>
 8008278:	901a      	str	r0, [sp, #104]	@ 0x68
 800827a:	2800      	cmp	r0, #0
 800827c:	d1d9      	bne.n	8008232 <_strtod_l+0x73a>
 800827e:	e65a      	b.n	8007f36 <_strtod_l+0x43e>
 8008280:	2e00      	cmp	r6, #0
 8008282:	dd07      	ble.n	8008294 <_strtod_l+0x79c>
 8008284:	4649      	mov	r1, r9
 8008286:	9805      	ldr	r0, [sp, #20]
 8008288:	4632      	mov	r2, r6
 800828a:	f7ff f9bd 	bl	8007608 <__lshift>
 800828e:	4681      	mov	r9, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	d0d8      	beq.n	8008246 <_strtod_l+0x74e>
 8008294:	2f00      	cmp	r7, #0
 8008296:	dd08      	ble.n	80082aa <_strtod_l+0x7b2>
 8008298:	4641      	mov	r1, r8
 800829a:	9805      	ldr	r0, [sp, #20]
 800829c:	463a      	mov	r2, r7
 800829e:	f7ff f9b3 	bl	8007608 <__lshift>
 80082a2:	4680      	mov	r8, r0
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f43f ae46 	beq.w	8007f36 <_strtod_l+0x43e>
 80082aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ac:	9805      	ldr	r0, [sp, #20]
 80082ae:	464a      	mov	r2, r9
 80082b0:	f7ff fa32 	bl	8007718 <__mdiff>
 80082b4:	4604      	mov	r4, r0
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f43f ae3d 	beq.w	8007f36 <_strtod_l+0x43e>
 80082bc:	68c3      	ldr	r3, [r0, #12]
 80082be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082c0:	2300      	movs	r3, #0
 80082c2:	60c3      	str	r3, [r0, #12]
 80082c4:	4641      	mov	r1, r8
 80082c6:	f7ff fa0b 	bl	80076e0 <__mcmp>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	da46      	bge.n	800835c <_strtod_l+0x864>
 80082ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d0:	ea53 030a 	orrs.w	r3, r3, sl
 80082d4:	d16c      	bne.n	80083b0 <_strtod_l+0x8b8>
 80082d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d168      	bne.n	80083b0 <_strtod_l+0x8b8>
 80082de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082e2:	0d1b      	lsrs	r3, r3, #20
 80082e4:	051b      	lsls	r3, r3, #20
 80082e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082ea:	d961      	bls.n	80083b0 <_strtod_l+0x8b8>
 80082ec:	6963      	ldr	r3, [r4, #20]
 80082ee:	b913      	cbnz	r3, 80082f6 <_strtod_l+0x7fe>
 80082f0:	6923      	ldr	r3, [r4, #16]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	dd5c      	ble.n	80083b0 <_strtod_l+0x8b8>
 80082f6:	4621      	mov	r1, r4
 80082f8:	2201      	movs	r2, #1
 80082fa:	9805      	ldr	r0, [sp, #20]
 80082fc:	f7ff f984 	bl	8007608 <__lshift>
 8008300:	4641      	mov	r1, r8
 8008302:	4604      	mov	r4, r0
 8008304:	f7ff f9ec 	bl	80076e0 <__mcmp>
 8008308:	2800      	cmp	r0, #0
 800830a:	dd51      	ble.n	80083b0 <_strtod_l+0x8b8>
 800830c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008310:	9a08      	ldr	r2, [sp, #32]
 8008312:	0d1b      	lsrs	r3, r3, #20
 8008314:	051b      	lsls	r3, r3, #20
 8008316:	2a00      	cmp	r2, #0
 8008318:	d06b      	beq.n	80083f2 <_strtod_l+0x8fa>
 800831a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800831e:	d868      	bhi.n	80083f2 <_strtod_l+0x8fa>
 8008320:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008324:	f67f ae9d 	bls.w	8008062 <_strtod_l+0x56a>
 8008328:	4b0a      	ldr	r3, [pc, #40]	@ (8008354 <_strtod_l+0x85c>)
 800832a:	4650      	mov	r0, sl
 800832c:	4659      	mov	r1, fp
 800832e:	2200      	movs	r2, #0
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	4b08      	ldr	r3, [pc, #32]	@ (8008358 <_strtod_l+0x860>)
 8008336:	400b      	ands	r3, r1
 8008338:	4682      	mov	sl, r0
 800833a:	468b      	mov	fp, r1
 800833c:	2b00      	cmp	r3, #0
 800833e:	f47f ae05 	bne.w	8007f4c <_strtod_l+0x454>
 8008342:	9a05      	ldr	r2, [sp, #20]
 8008344:	2322      	movs	r3, #34	@ 0x22
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	e600      	b.n	8007f4c <_strtod_l+0x454>
 800834a:	bf00      	nop
 800834c:	08009c00 	.word	0x08009c00
 8008350:	fffffc02 	.word	0xfffffc02
 8008354:	39500000 	.word	0x39500000
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008360:	d165      	bne.n	800842e <_strtod_l+0x936>
 8008362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008368:	b35a      	cbz	r2, 80083c2 <_strtod_l+0x8ca>
 800836a:	4a9f      	ldr	r2, [pc, #636]	@ (80085e8 <_strtod_l+0xaf0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d12b      	bne.n	80083c8 <_strtod_l+0x8d0>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	4651      	mov	r1, sl
 8008374:	b303      	cbz	r3, 80083b8 <_strtod_l+0x8c0>
 8008376:	4b9d      	ldr	r3, [pc, #628]	@ (80085ec <_strtod_l+0xaf4>)
 8008378:	465a      	mov	r2, fp
 800837a:	4013      	ands	r3, r2
 800837c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008380:	f04f 32ff 	mov.w	r2, #4294967295
 8008384:	d81b      	bhi.n	80083be <_strtod_l+0x8c6>
 8008386:	0d1b      	lsrs	r3, r3, #20
 8008388:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	4299      	cmp	r1, r3
 8008392:	d119      	bne.n	80083c8 <_strtod_l+0x8d0>
 8008394:	4b96      	ldr	r3, [pc, #600]	@ (80085f0 <_strtod_l+0xaf8>)
 8008396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008398:	429a      	cmp	r2, r3
 800839a:	d102      	bne.n	80083a2 <_strtod_l+0x8aa>
 800839c:	3101      	adds	r1, #1
 800839e:	f43f adca 	beq.w	8007f36 <_strtod_l+0x43e>
 80083a2:	4b92      	ldr	r3, [pc, #584]	@ (80085ec <_strtod_l+0xaf4>)
 80083a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083a6:	401a      	ands	r2, r3
 80083a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80083ac:	f04f 0a00 	mov.w	sl, #0
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1b8      	bne.n	8008328 <_strtod_l+0x830>
 80083b6:	e5c9      	b.n	8007f4c <_strtod_l+0x454>
 80083b8:	f04f 33ff 	mov.w	r3, #4294967295
 80083bc:	e7e8      	b.n	8008390 <_strtod_l+0x898>
 80083be:	4613      	mov	r3, r2
 80083c0:	e7e6      	b.n	8008390 <_strtod_l+0x898>
 80083c2:	ea53 030a 	orrs.w	r3, r3, sl
 80083c6:	d0a1      	beq.n	800830c <_strtod_l+0x814>
 80083c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083ca:	b1db      	cbz	r3, 8008404 <_strtod_l+0x90c>
 80083cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ce:	4213      	tst	r3, r2
 80083d0:	d0ee      	beq.n	80083b0 <_strtod_l+0x8b8>
 80083d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d4:	9a08      	ldr	r2, [sp, #32]
 80083d6:	4650      	mov	r0, sl
 80083d8:	4659      	mov	r1, fp
 80083da:	b1bb      	cbz	r3, 800840c <_strtod_l+0x914>
 80083dc:	f7ff fb6e 	bl	8007abc <sulp>
 80083e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083e4:	ec53 2b10 	vmov	r2, r3, d0
 80083e8:	f7f7 ff58 	bl	800029c <__adddf3>
 80083ec:	4682      	mov	sl, r0
 80083ee:	468b      	mov	fp, r1
 80083f0:	e7de      	b.n	80083b0 <_strtod_l+0x8b8>
 80083f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80083f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083fe:	f04f 3aff 	mov.w	sl, #4294967295
 8008402:	e7d5      	b.n	80083b0 <_strtod_l+0x8b8>
 8008404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008406:	ea13 0f0a 	tst.w	r3, sl
 800840a:	e7e1      	b.n	80083d0 <_strtod_l+0x8d8>
 800840c:	f7ff fb56 	bl	8007abc <sulp>
 8008410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008414:	ec53 2b10 	vmov	r2, r3, d0
 8008418:	f7f7 ff3e 	bl	8000298 <__aeabi_dsub>
 800841c:	2200      	movs	r2, #0
 800841e:	2300      	movs	r3, #0
 8008420:	4682      	mov	sl, r0
 8008422:	468b      	mov	fp, r1
 8008424:	f7f8 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008428:	2800      	cmp	r0, #0
 800842a:	d0c1      	beq.n	80083b0 <_strtod_l+0x8b8>
 800842c:	e619      	b.n	8008062 <_strtod_l+0x56a>
 800842e:	4641      	mov	r1, r8
 8008430:	4620      	mov	r0, r4
 8008432:	f7ff facd 	bl	80079d0 <__ratio>
 8008436:	ec57 6b10 	vmov	r6, r7, d0
 800843a:	2200      	movs	r2, #0
 800843c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f8 fb5c 	bl	8000b00 <__aeabi_dcmple>
 8008448:	2800      	cmp	r0, #0
 800844a:	d06f      	beq.n	800852c <_strtod_l+0xa34>
 800844c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d17a      	bne.n	8008548 <_strtod_l+0xa50>
 8008452:	f1ba 0f00 	cmp.w	sl, #0
 8008456:	d158      	bne.n	800850a <_strtod_l+0xa12>
 8008458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800845a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800845e:	2b00      	cmp	r3, #0
 8008460:	d15a      	bne.n	8008518 <_strtod_l+0xa20>
 8008462:	4b64      	ldr	r3, [pc, #400]	@ (80085f4 <_strtod_l+0xafc>)
 8008464:	2200      	movs	r2, #0
 8008466:	4630      	mov	r0, r6
 8008468:	4639      	mov	r1, r7
 800846a:	f7f8 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	d159      	bne.n	8008526 <_strtod_l+0xa2e>
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	4b60      	ldr	r3, [pc, #384]	@ (80085f8 <_strtod_l+0xb00>)
 8008478:	2200      	movs	r2, #0
 800847a:	f7f8 f8c5 	bl	8000608 <__aeabi_dmul>
 800847e:	4606      	mov	r6, r0
 8008480:	460f      	mov	r7, r1
 8008482:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008486:	9606      	str	r6, [sp, #24]
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800848e:	4d57      	ldr	r5, [pc, #348]	@ (80085ec <_strtod_l+0xaf4>)
 8008490:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008496:	401d      	ands	r5, r3
 8008498:	4b58      	ldr	r3, [pc, #352]	@ (80085fc <_strtod_l+0xb04>)
 800849a:	429d      	cmp	r5, r3
 800849c:	f040 80b2 	bne.w	8008604 <_strtod_l+0xb0c>
 80084a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80084a6:	ec4b ab10 	vmov	d0, sl, fp
 80084aa:	f7ff f9c9 	bl	8007840 <__ulp>
 80084ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084b2:	ec51 0b10 	vmov	r0, r1, d0
 80084b6:	f7f8 f8a7 	bl	8000608 <__aeabi_dmul>
 80084ba:	4652      	mov	r2, sl
 80084bc:	465b      	mov	r3, fp
 80084be:	f7f7 feed 	bl	800029c <__adddf3>
 80084c2:	460b      	mov	r3, r1
 80084c4:	4949      	ldr	r1, [pc, #292]	@ (80085ec <_strtod_l+0xaf4>)
 80084c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008600 <_strtod_l+0xb08>)
 80084c8:	4019      	ands	r1, r3
 80084ca:	4291      	cmp	r1, r2
 80084cc:	4682      	mov	sl, r0
 80084ce:	d942      	bls.n	8008556 <_strtod_l+0xa5e>
 80084d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084d2:	4b47      	ldr	r3, [pc, #284]	@ (80085f0 <_strtod_l+0xaf8>)
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d103      	bne.n	80084e0 <_strtod_l+0x9e8>
 80084d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084da:	3301      	adds	r3, #1
 80084dc:	f43f ad2b 	beq.w	8007f36 <_strtod_l+0x43e>
 80084e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80085f0 <_strtod_l+0xaf8>
 80084e4:	f04f 3aff 	mov.w	sl, #4294967295
 80084e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084ea:	9805      	ldr	r0, [sp, #20]
 80084ec:	f7fe fe74 	bl	80071d8 <_Bfree>
 80084f0:	9805      	ldr	r0, [sp, #20]
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7fe fe70 	bl	80071d8 <_Bfree>
 80084f8:	9805      	ldr	r0, [sp, #20]
 80084fa:	4641      	mov	r1, r8
 80084fc:	f7fe fe6c 	bl	80071d8 <_Bfree>
 8008500:	9805      	ldr	r0, [sp, #20]
 8008502:	4621      	mov	r1, r4
 8008504:	f7fe fe68 	bl	80071d8 <_Bfree>
 8008508:	e618      	b.n	800813c <_strtod_l+0x644>
 800850a:	f1ba 0f01 	cmp.w	sl, #1
 800850e:	d103      	bne.n	8008518 <_strtod_l+0xa20>
 8008510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008512:	2b00      	cmp	r3, #0
 8008514:	f43f ada5 	beq.w	8008062 <_strtod_l+0x56a>
 8008518:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80085c8 <_strtod_l+0xad0>
 800851c:	4f35      	ldr	r7, [pc, #212]	@ (80085f4 <_strtod_l+0xafc>)
 800851e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008522:	2600      	movs	r6, #0
 8008524:	e7b1      	b.n	800848a <_strtod_l+0x992>
 8008526:	4f34      	ldr	r7, [pc, #208]	@ (80085f8 <_strtod_l+0xb00>)
 8008528:	2600      	movs	r6, #0
 800852a:	e7aa      	b.n	8008482 <_strtod_l+0x98a>
 800852c:	4b32      	ldr	r3, [pc, #200]	@ (80085f8 <_strtod_l+0xb00>)
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	2200      	movs	r2, #0
 8008534:	f7f8 f868 	bl	8000608 <__aeabi_dmul>
 8008538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d09f      	beq.n	8008482 <_strtod_l+0x98a>
 8008542:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008546:	e7a0      	b.n	800848a <_strtod_l+0x992>
 8008548:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80085d0 <_strtod_l+0xad8>
 800854c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008550:	ec57 6b17 	vmov	r6, r7, d7
 8008554:	e799      	b.n	800848a <_strtod_l+0x992>
 8008556:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800855a:	9b08      	ldr	r3, [sp, #32]
 800855c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1c1      	bne.n	80084e8 <_strtod_l+0x9f0>
 8008564:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008568:	0d1b      	lsrs	r3, r3, #20
 800856a:	051b      	lsls	r3, r3, #20
 800856c:	429d      	cmp	r5, r3
 800856e:	d1bb      	bne.n	80084e8 <_strtod_l+0x9f0>
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f8 fb90 	bl	8000c98 <__aeabi_d2lz>
 8008578:	f7f8 f818 	bl	80005ac <__aeabi_l2d>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	460b      	mov	r3, r1
 800858a:	4602      	mov	r2, r0
 800858c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008590:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008596:	ea46 060a 	orr.w	r6, r6, sl
 800859a:	431e      	orrs	r6, r3
 800859c:	d06f      	beq.n	800867e <_strtod_l+0xb86>
 800859e:	a30e      	add	r3, pc, #56	@ (adr r3, 80085d8 <_strtod_l+0xae0>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	f7f8 faa2 	bl	8000aec <__aeabi_dcmplt>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	f47f accf 	bne.w	8007f4c <_strtod_l+0x454>
 80085ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80085e0 <_strtod_l+0xae8>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085b8:	f7f8 fab6 	bl	8000b28 <__aeabi_dcmpgt>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d093      	beq.n	80084e8 <_strtod_l+0x9f0>
 80085c0:	e4c4      	b.n	8007f4c <_strtod_l+0x454>
 80085c2:	bf00      	nop
 80085c4:	f3af 8000 	nop.w
 80085c8:	00000000 	.word	0x00000000
 80085cc:	bff00000 	.word	0xbff00000
 80085d0:	00000000 	.word	0x00000000
 80085d4:	3ff00000 	.word	0x3ff00000
 80085d8:	94a03595 	.word	0x94a03595
 80085dc:	3fdfffff 	.word	0x3fdfffff
 80085e0:	35afe535 	.word	0x35afe535
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	000fffff 	.word	0x000fffff
 80085ec:	7ff00000 	.word	0x7ff00000
 80085f0:	7fefffff 	.word	0x7fefffff
 80085f4:	3ff00000 	.word	0x3ff00000
 80085f8:	3fe00000 	.word	0x3fe00000
 80085fc:	7fe00000 	.word	0x7fe00000
 8008600:	7c9fffff 	.word	0x7c9fffff
 8008604:	9b08      	ldr	r3, [sp, #32]
 8008606:	b323      	cbz	r3, 8008652 <_strtod_l+0xb5a>
 8008608:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800860c:	d821      	bhi.n	8008652 <_strtod_l+0xb5a>
 800860e:	a328      	add	r3, pc, #160	@ (adr r3, 80086b0 <_strtod_l+0xbb8>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f7f8 fa72 	bl	8000b00 <__aeabi_dcmple>
 800861c:	b1a0      	cbz	r0, 8008648 <_strtod_l+0xb50>
 800861e:	4639      	mov	r1, r7
 8008620:	4630      	mov	r0, r6
 8008622:	f7f8 fac9 	bl	8000bb8 <__aeabi_d2uiz>
 8008626:	2801      	cmp	r0, #1
 8008628:	bf38      	it	cc
 800862a:	2001      	movcc	r0, #1
 800862c:	f7f7 ff72 	bl	8000514 <__aeabi_ui2d>
 8008630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	b9fb      	cbnz	r3, 8008678 <_strtod_l+0xb80>
 8008638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800863c:	9014      	str	r0, [sp, #80]	@ 0x50
 800863e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008640:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008644:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800864a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800864e:	1b5b      	subs	r3, r3, r5
 8008650:	9311      	str	r3, [sp, #68]	@ 0x44
 8008652:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008656:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800865a:	f7ff f8f1 	bl	8007840 <__ulp>
 800865e:	4650      	mov	r0, sl
 8008660:	ec53 2b10 	vmov	r2, r3, d0
 8008664:	4659      	mov	r1, fp
 8008666:	f7f7 ffcf 	bl	8000608 <__aeabi_dmul>
 800866a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800866e:	f7f7 fe15 	bl	800029c <__adddf3>
 8008672:	4682      	mov	sl, r0
 8008674:	468b      	mov	fp, r1
 8008676:	e770      	b.n	800855a <_strtod_l+0xa62>
 8008678:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800867c:	e7e0      	b.n	8008640 <_strtod_l+0xb48>
 800867e:	a30e      	add	r3, pc, #56	@ (adr r3, 80086b8 <_strtod_l+0xbc0>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f8 fa32 	bl	8000aec <__aeabi_dcmplt>
 8008688:	e798      	b.n	80085bc <_strtod_l+0xac4>
 800868a:	2300      	movs	r3, #0
 800868c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800868e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	f7ff ba6d 	b.w	8007b72 <_strtod_l+0x7a>
 8008698:	2a65      	cmp	r2, #101	@ 0x65
 800869a:	f43f ab66 	beq.w	8007d6a <_strtod_l+0x272>
 800869e:	2a45      	cmp	r2, #69	@ 0x45
 80086a0:	f43f ab63 	beq.w	8007d6a <_strtod_l+0x272>
 80086a4:	2301      	movs	r3, #1
 80086a6:	f7ff bb9e 	b.w	8007de6 <_strtod_l+0x2ee>
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w
 80086b0:	ffc00000 	.word	0xffc00000
 80086b4:	41dfffff 	.word	0x41dfffff
 80086b8:	94a03595 	.word	0x94a03595
 80086bc:	3fcfffff 	.word	0x3fcfffff

080086c0 <_strtod_r>:
 80086c0:	4b01      	ldr	r3, [pc, #4]	@ (80086c8 <_strtod_r+0x8>)
 80086c2:	f7ff ba19 	b.w	8007af8 <_strtod_l>
 80086c6:	bf00      	nop
 80086c8:	20000078 	.word	0x20000078

080086cc <_strtol_l.constprop.0>:
 80086cc:	2b24      	cmp	r3, #36	@ 0x24
 80086ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d2:	4686      	mov	lr, r0
 80086d4:	4690      	mov	r8, r2
 80086d6:	d801      	bhi.n	80086dc <_strtol_l.constprop.0+0x10>
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d106      	bne.n	80086ea <_strtol_l.constprop.0+0x1e>
 80086dc:	f7fd fdba 	bl	8006254 <__errno>
 80086e0:	2316      	movs	r3, #22
 80086e2:	6003      	str	r3, [r0, #0]
 80086e4:	2000      	movs	r0, #0
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	4834      	ldr	r0, [pc, #208]	@ (80087bc <_strtol_l.constprop.0+0xf0>)
 80086ec:	460d      	mov	r5, r1
 80086ee:	462a      	mov	r2, r5
 80086f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086f4:	5d06      	ldrb	r6, [r0, r4]
 80086f6:	f016 0608 	ands.w	r6, r6, #8
 80086fa:	d1f8      	bne.n	80086ee <_strtol_l.constprop.0+0x22>
 80086fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80086fe:	d12d      	bne.n	800875c <_strtol_l.constprop.0+0x90>
 8008700:	782c      	ldrb	r4, [r5, #0]
 8008702:	2601      	movs	r6, #1
 8008704:	1c95      	adds	r5, r2, #2
 8008706:	f033 0210 	bics.w	r2, r3, #16
 800870a:	d109      	bne.n	8008720 <_strtol_l.constprop.0+0x54>
 800870c:	2c30      	cmp	r4, #48	@ 0x30
 800870e:	d12a      	bne.n	8008766 <_strtol_l.constprop.0+0x9a>
 8008710:	782a      	ldrb	r2, [r5, #0]
 8008712:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008716:	2a58      	cmp	r2, #88	@ 0x58
 8008718:	d125      	bne.n	8008766 <_strtol_l.constprop.0+0x9a>
 800871a:	786c      	ldrb	r4, [r5, #1]
 800871c:	2310      	movs	r3, #16
 800871e:	3502      	adds	r5, #2
 8008720:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008724:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008728:	2200      	movs	r2, #0
 800872a:	fbbc f9f3 	udiv	r9, ip, r3
 800872e:	4610      	mov	r0, r2
 8008730:	fb03 ca19 	mls	sl, r3, r9, ip
 8008734:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008738:	2f09      	cmp	r7, #9
 800873a:	d81b      	bhi.n	8008774 <_strtol_l.constprop.0+0xa8>
 800873c:	463c      	mov	r4, r7
 800873e:	42a3      	cmp	r3, r4
 8008740:	dd27      	ble.n	8008792 <_strtol_l.constprop.0+0xc6>
 8008742:	1c57      	adds	r7, r2, #1
 8008744:	d007      	beq.n	8008756 <_strtol_l.constprop.0+0x8a>
 8008746:	4581      	cmp	r9, r0
 8008748:	d320      	bcc.n	800878c <_strtol_l.constprop.0+0xc0>
 800874a:	d101      	bne.n	8008750 <_strtol_l.constprop.0+0x84>
 800874c:	45a2      	cmp	sl, r4
 800874e:	db1d      	blt.n	800878c <_strtol_l.constprop.0+0xc0>
 8008750:	fb00 4003 	mla	r0, r0, r3, r4
 8008754:	2201      	movs	r2, #1
 8008756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800875a:	e7eb      	b.n	8008734 <_strtol_l.constprop.0+0x68>
 800875c:	2c2b      	cmp	r4, #43	@ 0x2b
 800875e:	bf04      	itt	eq
 8008760:	782c      	ldrbeq	r4, [r5, #0]
 8008762:	1c95      	addeq	r5, r2, #2
 8008764:	e7cf      	b.n	8008706 <_strtol_l.constprop.0+0x3a>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1da      	bne.n	8008720 <_strtol_l.constprop.0+0x54>
 800876a:	2c30      	cmp	r4, #48	@ 0x30
 800876c:	bf0c      	ite	eq
 800876e:	2308      	moveq	r3, #8
 8008770:	230a      	movne	r3, #10
 8008772:	e7d5      	b.n	8008720 <_strtol_l.constprop.0+0x54>
 8008774:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008778:	2f19      	cmp	r7, #25
 800877a:	d801      	bhi.n	8008780 <_strtol_l.constprop.0+0xb4>
 800877c:	3c37      	subs	r4, #55	@ 0x37
 800877e:	e7de      	b.n	800873e <_strtol_l.constprop.0+0x72>
 8008780:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008784:	2f19      	cmp	r7, #25
 8008786:	d804      	bhi.n	8008792 <_strtol_l.constprop.0+0xc6>
 8008788:	3c57      	subs	r4, #87	@ 0x57
 800878a:	e7d8      	b.n	800873e <_strtol_l.constprop.0+0x72>
 800878c:	f04f 32ff 	mov.w	r2, #4294967295
 8008790:	e7e1      	b.n	8008756 <_strtol_l.constprop.0+0x8a>
 8008792:	1c53      	adds	r3, r2, #1
 8008794:	d108      	bne.n	80087a8 <_strtol_l.constprop.0+0xdc>
 8008796:	2322      	movs	r3, #34	@ 0x22
 8008798:	f8ce 3000 	str.w	r3, [lr]
 800879c:	4660      	mov	r0, ip
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	d0a0      	beq.n	80086e6 <_strtol_l.constprop.0+0x1a>
 80087a4:	1e69      	subs	r1, r5, #1
 80087a6:	e006      	b.n	80087b6 <_strtol_l.constprop.0+0xea>
 80087a8:	b106      	cbz	r6, 80087ac <_strtol_l.constprop.0+0xe0>
 80087aa:	4240      	negs	r0, r0
 80087ac:	f1b8 0f00 	cmp.w	r8, #0
 80087b0:	d099      	beq.n	80086e6 <_strtol_l.constprop.0+0x1a>
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	d1f6      	bne.n	80087a4 <_strtol_l.constprop.0+0xd8>
 80087b6:	f8c8 1000 	str.w	r1, [r8]
 80087ba:	e794      	b.n	80086e6 <_strtol_l.constprop.0+0x1a>
 80087bc:	08009c29 	.word	0x08009c29

080087c0 <_strtol_r>:
 80087c0:	f7ff bf84 	b.w	80086cc <_strtol_l.constprop.0>

080087c4 <__ssputs_r>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	688e      	ldr	r6, [r1, #8]
 80087ca:	461f      	mov	r7, r3
 80087cc:	42be      	cmp	r6, r7
 80087ce:	680b      	ldr	r3, [r1, #0]
 80087d0:	4682      	mov	sl, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4690      	mov	r8, r2
 80087d6:	d82d      	bhi.n	8008834 <__ssputs_r+0x70>
 80087d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087e0:	d026      	beq.n	8008830 <__ssputs_r+0x6c>
 80087e2:	6965      	ldr	r5, [r4, #20]
 80087e4:	6909      	ldr	r1, [r1, #16]
 80087e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ea:	eba3 0901 	sub.w	r9, r3, r1
 80087ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f2:	1c7b      	adds	r3, r7, #1
 80087f4:	444b      	add	r3, r9
 80087f6:	106d      	asrs	r5, r5, #1
 80087f8:	429d      	cmp	r5, r3
 80087fa:	bf38      	it	cc
 80087fc:	461d      	movcc	r5, r3
 80087fe:	0553      	lsls	r3, r2, #21
 8008800:	d527      	bpl.n	8008852 <__ssputs_r+0x8e>
 8008802:	4629      	mov	r1, r5
 8008804:	f7fe fc1c 	bl	8007040 <_malloc_r>
 8008808:	4606      	mov	r6, r0
 800880a:	b360      	cbz	r0, 8008866 <__ssputs_r+0xa2>
 800880c:	6921      	ldr	r1, [r4, #16]
 800880e:	464a      	mov	r2, r9
 8008810:	f000 fa18 	bl	8008c44 <memcpy>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800881a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	6126      	str	r6, [r4, #16]
 8008822:	6165      	str	r5, [r4, #20]
 8008824:	444e      	add	r6, r9
 8008826:	eba5 0509 	sub.w	r5, r5, r9
 800882a:	6026      	str	r6, [r4, #0]
 800882c:	60a5      	str	r5, [r4, #8]
 800882e:	463e      	mov	r6, r7
 8008830:	42be      	cmp	r6, r7
 8008832:	d900      	bls.n	8008836 <__ssputs_r+0x72>
 8008834:	463e      	mov	r6, r7
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	4632      	mov	r2, r6
 800883a:	4641      	mov	r1, r8
 800883c:	f000 f9c6 	bl	8008bcc <memmove>
 8008840:	68a3      	ldr	r3, [r4, #8]
 8008842:	1b9b      	subs	r3, r3, r6
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4433      	add	r3, r6
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	2000      	movs	r0, #0
 800884e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008852:	462a      	mov	r2, r5
 8008854:	f000 fd89 	bl	800936a <_realloc_r>
 8008858:	4606      	mov	r6, r0
 800885a:	2800      	cmp	r0, #0
 800885c:	d1e0      	bne.n	8008820 <__ssputs_r+0x5c>
 800885e:	6921      	ldr	r1, [r4, #16]
 8008860:	4650      	mov	r0, sl
 8008862:	f7fe fb79 	bl	8006f58 <_free_r>
 8008866:	230c      	movs	r3, #12
 8008868:	f8ca 3000 	str.w	r3, [sl]
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	e7e9      	b.n	800884e <__ssputs_r+0x8a>
	...

0800887c <_svfiprintf_r>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	4698      	mov	r8, r3
 8008882:	898b      	ldrh	r3, [r1, #12]
 8008884:	061b      	lsls	r3, r3, #24
 8008886:	b09d      	sub	sp, #116	@ 0x74
 8008888:	4607      	mov	r7, r0
 800888a:	460d      	mov	r5, r1
 800888c:	4614      	mov	r4, r2
 800888e:	d510      	bpl.n	80088b2 <_svfiprintf_r+0x36>
 8008890:	690b      	ldr	r3, [r1, #16]
 8008892:	b973      	cbnz	r3, 80088b2 <_svfiprintf_r+0x36>
 8008894:	2140      	movs	r1, #64	@ 0x40
 8008896:	f7fe fbd3 	bl	8007040 <_malloc_r>
 800889a:	6028      	str	r0, [r5, #0]
 800889c:	6128      	str	r0, [r5, #16]
 800889e:	b930      	cbnz	r0, 80088ae <_svfiprintf_r+0x32>
 80088a0:	230c      	movs	r3, #12
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	b01d      	add	sp, #116	@ 0x74
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	2340      	movs	r3, #64	@ 0x40
 80088b0:	616b      	str	r3, [r5, #20]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b6:	2320      	movs	r3, #32
 80088b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c0:	2330      	movs	r3, #48	@ 0x30
 80088c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a60 <_svfiprintf_r+0x1e4>
 80088c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088ca:	f04f 0901 	mov.w	r9, #1
 80088ce:	4623      	mov	r3, r4
 80088d0:	469a      	mov	sl, r3
 80088d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d6:	b10a      	cbz	r2, 80088dc <_svfiprintf_r+0x60>
 80088d8:	2a25      	cmp	r2, #37	@ 0x25
 80088da:	d1f9      	bne.n	80088d0 <_svfiprintf_r+0x54>
 80088dc:	ebba 0b04 	subs.w	fp, sl, r4
 80088e0:	d00b      	beq.n	80088fa <_svfiprintf_r+0x7e>
 80088e2:	465b      	mov	r3, fp
 80088e4:	4622      	mov	r2, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ff6b 	bl	80087c4 <__ssputs_r>
 80088ee:	3001      	adds	r0, #1
 80088f0:	f000 80a7 	beq.w	8008a42 <_svfiprintf_r+0x1c6>
 80088f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088f6:	445a      	add	r2, fp
 80088f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80088fa:	f89a 3000 	ldrb.w	r3, [sl]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 809f 	beq.w	8008a42 <_svfiprintf_r+0x1c6>
 8008904:	2300      	movs	r3, #0
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800890e:	f10a 0a01 	add.w	sl, sl, #1
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	9307      	str	r3, [sp, #28]
 8008916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800891a:	931a      	str	r3, [sp, #104]	@ 0x68
 800891c:	4654      	mov	r4, sl
 800891e:	2205      	movs	r2, #5
 8008920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008924:	484e      	ldr	r0, [pc, #312]	@ (8008a60 <_svfiprintf_r+0x1e4>)
 8008926:	f7f7 fc5b 	bl	80001e0 <memchr>
 800892a:	9a04      	ldr	r2, [sp, #16]
 800892c:	b9d8      	cbnz	r0, 8008966 <_svfiprintf_r+0xea>
 800892e:	06d0      	lsls	r0, r2, #27
 8008930:	bf44      	itt	mi
 8008932:	2320      	movmi	r3, #32
 8008934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008938:	0711      	lsls	r1, r2, #28
 800893a:	bf44      	itt	mi
 800893c:	232b      	movmi	r3, #43	@ 0x2b
 800893e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008942:	f89a 3000 	ldrb.w	r3, [sl]
 8008946:	2b2a      	cmp	r3, #42	@ 0x2a
 8008948:	d015      	beq.n	8008976 <_svfiprintf_r+0xfa>
 800894a:	9a07      	ldr	r2, [sp, #28]
 800894c:	4654      	mov	r4, sl
 800894e:	2000      	movs	r0, #0
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4621      	mov	r1, r4
 8008956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895a:	3b30      	subs	r3, #48	@ 0x30
 800895c:	2b09      	cmp	r3, #9
 800895e:	d94b      	bls.n	80089f8 <_svfiprintf_r+0x17c>
 8008960:	b1b0      	cbz	r0, 8008990 <_svfiprintf_r+0x114>
 8008962:	9207      	str	r2, [sp, #28]
 8008964:	e014      	b.n	8008990 <_svfiprintf_r+0x114>
 8008966:	eba0 0308 	sub.w	r3, r0, r8
 800896a:	fa09 f303 	lsl.w	r3, r9, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	46a2      	mov	sl, r4
 8008974:	e7d2      	b.n	800891c <_svfiprintf_r+0xa0>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	1d19      	adds	r1, r3, #4
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	9103      	str	r1, [sp, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	bfbb      	ittet	lt
 8008982:	425b      	neglt	r3, r3
 8008984:	f042 0202 	orrlt.w	r2, r2, #2
 8008988:	9307      	strge	r3, [sp, #28]
 800898a:	9307      	strlt	r3, [sp, #28]
 800898c:	bfb8      	it	lt
 800898e:	9204      	strlt	r2, [sp, #16]
 8008990:	7823      	ldrb	r3, [r4, #0]
 8008992:	2b2e      	cmp	r3, #46	@ 0x2e
 8008994:	d10a      	bne.n	80089ac <_svfiprintf_r+0x130>
 8008996:	7863      	ldrb	r3, [r4, #1]
 8008998:	2b2a      	cmp	r3, #42	@ 0x2a
 800899a:	d132      	bne.n	8008a02 <_svfiprintf_r+0x186>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1d1a      	adds	r2, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	9203      	str	r2, [sp, #12]
 80089a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089a8:	3402      	adds	r4, #2
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a70 <_svfiprintf_r+0x1f4>
 80089b0:	7821      	ldrb	r1, [r4, #0]
 80089b2:	2203      	movs	r2, #3
 80089b4:	4650      	mov	r0, sl
 80089b6:	f7f7 fc13 	bl	80001e0 <memchr>
 80089ba:	b138      	cbz	r0, 80089cc <_svfiprintf_r+0x150>
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	eba0 000a 	sub.w	r0, r0, sl
 80089c2:	2240      	movs	r2, #64	@ 0x40
 80089c4:	4082      	lsls	r2, r0
 80089c6:	4313      	orrs	r3, r2
 80089c8:	3401      	adds	r4, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d0:	4824      	ldr	r0, [pc, #144]	@ (8008a64 <_svfiprintf_r+0x1e8>)
 80089d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089d6:	2206      	movs	r2, #6
 80089d8:	f7f7 fc02 	bl	80001e0 <memchr>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d036      	beq.n	8008a4e <_svfiprintf_r+0x1d2>
 80089e0:	4b21      	ldr	r3, [pc, #132]	@ (8008a68 <_svfiprintf_r+0x1ec>)
 80089e2:	bb1b      	cbnz	r3, 8008a2c <_svfiprintf_r+0x1b0>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	3307      	adds	r3, #7
 80089e8:	f023 0307 	bic.w	r3, r3, #7
 80089ec:	3308      	adds	r3, #8
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f2:	4433      	add	r3, r6
 80089f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089f6:	e76a      	b.n	80088ce <_svfiprintf_r+0x52>
 80089f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089fc:	460c      	mov	r4, r1
 80089fe:	2001      	movs	r0, #1
 8008a00:	e7a8      	b.n	8008954 <_svfiprintf_r+0xd8>
 8008a02:	2300      	movs	r3, #0
 8008a04:	3401      	adds	r4, #1
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f04f 0c0a 	mov.w	ip, #10
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a14:	3a30      	subs	r2, #48	@ 0x30
 8008a16:	2a09      	cmp	r2, #9
 8008a18:	d903      	bls.n	8008a22 <_svfiprintf_r+0x1a6>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0c6      	beq.n	80089ac <_svfiprintf_r+0x130>
 8008a1e:	9105      	str	r1, [sp, #20]
 8008a20:	e7c4      	b.n	80089ac <_svfiprintf_r+0x130>
 8008a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a26:	4604      	mov	r4, r0
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e7f0      	b.n	8008a0e <_svfiprintf_r+0x192>
 8008a2c:	ab03      	add	r3, sp, #12
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	462a      	mov	r2, r5
 8008a32:	4b0e      	ldr	r3, [pc, #56]	@ (8008a6c <_svfiprintf_r+0x1f0>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	4638      	mov	r0, r7
 8008a38:	f7fc fcc8 	bl	80053cc <_printf_float>
 8008a3c:	1c42      	adds	r2, r0, #1
 8008a3e:	4606      	mov	r6, r0
 8008a40:	d1d6      	bne.n	80089f0 <_svfiprintf_r+0x174>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	065b      	lsls	r3, r3, #25
 8008a46:	f53f af2d 	bmi.w	80088a4 <_svfiprintf_r+0x28>
 8008a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a4c:	e72c      	b.n	80088a8 <_svfiprintf_r+0x2c>
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	462a      	mov	r2, r5
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <_svfiprintf_r+0x1f0>)
 8008a56:	a904      	add	r1, sp, #16
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7fc ff4f 	bl	80058fc <_printf_i>
 8008a5e:	e7ed      	b.n	8008a3c <_svfiprintf_r+0x1c0>
 8008a60:	08009d29 	.word	0x08009d29
 8008a64:	08009d33 	.word	0x08009d33
 8008a68:	080053cd 	.word	0x080053cd
 8008a6c:	080087c5 	.word	0x080087c5
 8008a70:	08009d2f 	.word	0x08009d2f

08008a74 <__sflush_r>:
 8008a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7c:	0716      	lsls	r6, r2, #28
 8008a7e:	4605      	mov	r5, r0
 8008a80:	460c      	mov	r4, r1
 8008a82:	d454      	bmi.n	8008b2e <__sflush_r+0xba>
 8008a84:	684b      	ldr	r3, [r1, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dc02      	bgt.n	8008a90 <__sflush_r+0x1c>
 8008a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dd48      	ble.n	8008b22 <__sflush_r+0xae>
 8008a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	d045      	beq.n	8008b22 <__sflush_r+0xae>
 8008a96:	2300      	movs	r3, #0
 8008a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a9c:	682f      	ldr	r7, [r5, #0]
 8008a9e:	6a21      	ldr	r1, [r4, #32]
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	d030      	beq.n	8008b06 <__sflush_r+0x92>
 8008aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	0759      	lsls	r1, r3, #29
 8008aaa:	d505      	bpl.n	8008ab8 <__sflush_r+0x44>
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ab2:	b10b      	cbz	r3, 8008ab8 <__sflush_r+0x44>
 8008ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ab6:	1ad2      	subs	r2, r2, r3
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008abc:	6a21      	ldr	r1, [r4, #32]
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b0      	blx	r6
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	d106      	bne.n	8008ad6 <__sflush_r+0x62>
 8008ac8:	6829      	ldr	r1, [r5, #0]
 8008aca:	291d      	cmp	r1, #29
 8008acc:	d82b      	bhi.n	8008b26 <__sflush_r+0xb2>
 8008ace:	4a2a      	ldr	r2, [pc, #168]	@ (8008b78 <__sflush_r+0x104>)
 8008ad0:	410a      	asrs	r2, r1
 8008ad2:	07d6      	lsls	r6, r2, #31
 8008ad4:	d427      	bmi.n	8008b26 <__sflush_r+0xb2>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	6062      	str	r2, [r4, #4]
 8008ada:	04d9      	lsls	r1, r3, #19
 8008adc:	6922      	ldr	r2, [r4, #16]
 8008ade:	6022      	str	r2, [r4, #0]
 8008ae0:	d504      	bpl.n	8008aec <__sflush_r+0x78>
 8008ae2:	1c42      	adds	r2, r0, #1
 8008ae4:	d101      	bne.n	8008aea <__sflush_r+0x76>
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	b903      	cbnz	r3, 8008aec <__sflush_r+0x78>
 8008aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aee:	602f      	str	r7, [r5, #0]
 8008af0:	b1b9      	cbz	r1, 8008b22 <__sflush_r+0xae>
 8008af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af6:	4299      	cmp	r1, r3
 8008af8:	d002      	beq.n	8008b00 <__sflush_r+0x8c>
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7fe fa2c 	bl	8006f58 <_free_r>
 8008b00:	2300      	movs	r3, #0
 8008b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b04:	e00d      	b.n	8008b22 <__sflush_r+0xae>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b0      	blx	r6
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	1c50      	adds	r0, r2, #1
 8008b10:	d1c9      	bne.n	8008aa6 <__sflush_r+0x32>
 8008b12:	682b      	ldr	r3, [r5, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0c6      	beq.n	8008aa6 <__sflush_r+0x32>
 8008b18:	2b1d      	cmp	r3, #29
 8008b1a:	d001      	beq.n	8008b20 <__sflush_r+0xac>
 8008b1c:	2b16      	cmp	r3, #22
 8008b1e:	d11e      	bne.n	8008b5e <__sflush_r+0xea>
 8008b20:	602f      	str	r7, [r5, #0]
 8008b22:	2000      	movs	r0, #0
 8008b24:	e022      	b.n	8008b6c <__sflush_r+0xf8>
 8008b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2a:	b21b      	sxth	r3, r3
 8008b2c:	e01b      	b.n	8008b66 <__sflush_r+0xf2>
 8008b2e:	690f      	ldr	r7, [r1, #16]
 8008b30:	2f00      	cmp	r7, #0
 8008b32:	d0f6      	beq.n	8008b22 <__sflush_r+0xae>
 8008b34:	0793      	lsls	r3, r2, #30
 8008b36:	680e      	ldr	r6, [r1, #0]
 8008b38:	bf08      	it	eq
 8008b3a:	694b      	ldreq	r3, [r1, #20]
 8008b3c:	600f      	str	r7, [r1, #0]
 8008b3e:	bf18      	it	ne
 8008b40:	2300      	movne	r3, #0
 8008b42:	eba6 0807 	sub.w	r8, r6, r7
 8008b46:	608b      	str	r3, [r1, #8]
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	dde9      	ble.n	8008b22 <__sflush_r+0xae>
 8008b4e:	6a21      	ldr	r1, [r4, #32]
 8008b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b52:	4643      	mov	r3, r8
 8008b54:	463a      	mov	r2, r7
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b0      	blx	r6
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	dc08      	bgt.n	8008b70 <__sflush_r+0xfc>
 8008b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	4407      	add	r7, r0
 8008b72:	eba8 0800 	sub.w	r8, r8, r0
 8008b76:	e7e7      	b.n	8008b48 <__sflush_r+0xd4>
 8008b78:	dfbffffe 	.word	0xdfbffffe

08008b7c <_fflush_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	690b      	ldr	r3, [r1, #16]
 8008b80:	4605      	mov	r5, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	b913      	cbnz	r3, 8008b8c <_fflush_r+0x10>
 8008b86:	2500      	movs	r5, #0
 8008b88:	4628      	mov	r0, r5
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	b118      	cbz	r0, 8008b96 <_fflush_r+0x1a>
 8008b8e:	6a03      	ldr	r3, [r0, #32]
 8008b90:	b90b      	cbnz	r3, 8008b96 <_fflush_r+0x1a>
 8008b92:	f7fd fa73 	bl	800607c <__sinit>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0f3      	beq.n	8008b86 <_fflush_r+0xa>
 8008b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ba0:	07d0      	lsls	r0, r2, #31
 8008ba2:	d404      	bmi.n	8008bae <_fflush_r+0x32>
 8008ba4:	0599      	lsls	r1, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_fflush_r+0x32>
 8008ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008baa:	f7fd fb7e 	bl	80062aa <__retarget_lock_acquire_recursive>
 8008bae:	4628      	mov	r0, r5
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f7ff ff5f 	bl	8008a74 <__sflush_r>
 8008bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bb8:	07da      	lsls	r2, r3, #31
 8008bba:	4605      	mov	r5, r0
 8008bbc:	d4e4      	bmi.n	8008b88 <_fflush_r+0xc>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	059b      	lsls	r3, r3, #22
 8008bc2:	d4e1      	bmi.n	8008b88 <_fflush_r+0xc>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc6:	f7fd fb71 	bl	80062ac <__retarget_lock_release_recursive>
 8008bca:	e7dd      	b.n	8008b88 <_fflush_r+0xc>

08008bcc <memmove>:
 8008bcc:	4288      	cmp	r0, r1
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	eb01 0402 	add.w	r4, r1, r2
 8008bd4:	d902      	bls.n	8008bdc <memmove+0x10>
 8008bd6:	4284      	cmp	r4, r0
 8008bd8:	4623      	mov	r3, r4
 8008bda:	d807      	bhi.n	8008bec <memmove+0x20>
 8008bdc:	1e43      	subs	r3, r0, #1
 8008bde:	42a1      	cmp	r1, r4
 8008be0:	d008      	beq.n	8008bf4 <memmove+0x28>
 8008be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bea:	e7f8      	b.n	8008bde <memmove+0x12>
 8008bec:	4402      	add	r2, r0
 8008bee:	4601      	mov	r1, r0
 8008bf0:	428a      	cmp	r2, r1
 8008bf2:	d100      	bne.n	8008bf6 <memmove+0x2a>
 8008bf4:	bd10      	pop	{r4, pc}
 8008bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bfe:	e7f7      	b.n	8008bf0 <memmove+0x24>

08008c00 <strncmp>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	b16a      	cbz	r2, 8008c20 <strncmp+0x20>
 8008c04:	3901      	subs	r1, #1
 8008c06:	1884      	adds	r4, r0, r2
 8008c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d103      	bne.n	8008c1c <strncmp+0x1c>
 8008c14:	42a0      	cmp	r0, r4
 8008c16:	d001      	beq.n	8008c1c <strncmp+0x1c>
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d1f5      	bne.n	8008c08 <strncmp+0x8>
 8008c1c:	1ad0      	subs	r0, r2, r3
 8008c1e:	bd10      	pop	{r4, pc}
 8008c20:	4610      	mov	r0, r2
 8008c22:	e7fc      	b.n	8008c1e <strncmp+0x1e>

08008c24 <_sbrk_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	@ (8008c40 <_sbrk_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7f8 fcc6 	bl	80015c0 <_sbrk>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_sbrk_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_sbrk_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	200004a4 	.word	0x200004a4

08008c44 <memcpy>:
 8008c44:	440a      	add	r2, r1
 8008c46:	4291      	cmp	r1, r2
 8008c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c4c:	d100      	bne.n	8008c50 <memcpy+0xc>
 8008c4e:	4770      	bx	lr
 8008c50:	b510      	push	{r4, lr}
 8008c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5a:	4291      	cmp	r1, r2
 8008c5c:	d1f9      	bne.n	8008c52 <memcpy+0xe>
 8008c5e:	bd10      	pop	{r4, pc}

08008c60 <nan>:
 8008c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c68 <nan+0x8>
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	7ff80000 	.word	0x7ff80000

08008c70 <__assert_func>:
 8008c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c72:	4614      	mov	r4, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <__assert_func+0x2c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	68d8      	ldr	r0, [r3, #12]
 8008c7e:	b954      	cbnz	r4, 8008c96 <__assert_func+0x26>
 8008c80:	4b07      	ldr	r3, [pc, #28]	@ (8008ca0 <__assert_func+0x30>)
 8008c82:	461c      	mov	r4, r3
 8008c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c88:	9100      	str	r1, [sp, #0]
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	4905      	ldr	r1, [pc, #20]	@ (8008ca4 <__assert_func+0x34>)
 8008c8e:	f000 fba7 	bl	80093e0 <fiprintf>
 8008c92:	f000 fbb7 	bl	8009404 <abort>
 8008c96:	4b04      	ldr	r3, [pc, #16]	@ (8008ca8 <__assert_func+0x38>)
 8008c98:	e7f4      	b.n	8008c84 <__assert_func+0x14>
 8008c9a:	bf00      	nop
 8008c9c:	20000028 	.word	0x20000028
 8008ca0:	08009d7d 	.word	0x08009d7d
 8008ca4:	08009d4f 	.word	0x08009d4f
 8008ca8:	08009d42 	.word	0x08009d42

08008cac <_calloc_r>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	fba1 5402 	umull	r5, r4, r1, r2
 8008cb2:	b93c      	cbnz	r4, 8008cc4 <_calloc_r+0x18>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	f7fe f9c3 	bl	8007040 <_malloc_r>
 8008cba:	4606      	mov	r6, r0
 8008cbc:	b928      	cbnz	r0, 8008cca <_calloc_r+0x1e>
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	220c      	movs	r2, #12
 8008cc6:	6002      	str	r2, [r0, #0]
 8008cc8:	e7f9      	b.n	8008cbe <_calloc_r+0x12>
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f7fd fa6e 	bl	80061ae <memset>
 8008cd2:	e7f5      	b.n	8008cc0 <_calloc_r+0x14>

08008cd4 <rshift>:
 8008cd4:	6903      	ldr	r3, [r0, #16]
 8008cd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ce2:	f100 0414 	add.w	r4, r0, #20
 8008ce6:	dd45      	ble.n	8008d74 <rshift+0xa0>
 8008ce8:	f011 011f 	ands.w	r1, r1, #31
 8008cec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cf4:	d10c      	bne.n	8008d10 <rshift+0x3c>
 8008cf6:	f100 0710 	add.w	r7, r0, #16
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	42b1      	cmp	r1, r6
 8008cfe:	d334      	bcc.n	8008d6a <rshift+0x96>
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	1eea      	subs	r2, r5, #3
 8008d06:	4296      	cmp	r6, r2
 8008d08:	bf38      	it	cc
 8008d0a:	2300      	movcc	r3, #0
 8008d0c:	4423      	add	r3, r4
 8008d0e:	e015      	b.n	8008d3c <rshift+0x68>
 8008d10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d14:	f1c1 0820 	rsb	r8, r1, #32
 8008d18:	40cf      	lsrs	r7, r1
 8008d1a:	f105 0e04 	add.w	lr, r5, #4
 8008d1e:	46a1      	mov	r9, r4
 8008d20:	4576      	cmp	r6, lr
 8008d22:	46f4      	mov	ip, lr
 8008d24:	d815      	bhi.n	8008d52 <rshift+0x7e>
 8008d26:	1a9a      	subs	r2, r3, r2
 8008d28:	0092      	lsls	r2, r2, #2
 8008d2a:	3a04      	subs	r2, #4
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	42ae      	cmp	r6, r5
 8008d30:	bf38      	it	cc
 8008d32:	2200      	movcc	r2, #0
 8008d34:	18a3      	adds	r3, r4, r2
 8008d36:	50a7      	str	r7, [r4, r2]
 8008d38:	b107      	cbz	r7, 8008d3c <rshift+0x68>
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	1b1a      	subs	r2, r3, r4
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d44:	bf08      	it	eq
 8008d46:	2300      	moveq	r3, #0
 8008d48:	6102      	str	r2, [r0, #16]
 8008d4a:	bf08      	it	eq
 8008d4c:	6143      	streq	r3, [r0, #20]
 8008d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d52:	f8dc c000 	ldr.w	ip, [ip]
 8008d56:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d5a:	ea4c 0707 	orr.w	r7, ip, r7
 8008d5e:	f849 7b04 	str.w	r7, [r9], #4
 8008d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d66:	40cf      	lsrs	r7, r1
 8008d68:	e7da      	b.n	8008d20 <rshift+0x4c>
 8008d6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d72:	e7c3      	b.n	8008cfc <rshift+0x28>
 8008d74:	4623      	mov	r3, r4
 8008d76:	e7e1      	b.n	8008d3c <rshift+0x68>

08008d78 <__hexdig_fun>:
 8008d78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d802      	bhi.n	8008d86 <__hexdig_fun+0xe>
 8008d80:	3820      	subs	r0, #32
 8008d82:	b2c0      	uxtb	r0, r0
 8008d84:	4770      	bx	lr
 8008d86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d801      	bhi.n	8008d92 <__hexdig_fun+0x1a>
 8008d8e:	3847      	subs	r0, #71	@ 0x47
 8008d90:	e7f7      	b.n	8008d82 <__hexdig_fun+0xa>
 8008d92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d801      	bhi.n	8008d9e <__hexdig_fun+0x26>
 8008d9a:	3827      	subs	r0, #39	@ 0x27
 8008d9c:	e7f1      	b.n	8008d82 <__hexdig_fun+0xa>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	4770      	bx	lr
	...

08008da4 <__gethex>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	b085      	sub	sp, #20
 8008daa:	468a      	mov	sl, r1
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	680b      	ldr	r3, [r1, #0]
 8008db0:	9001      	str	r0, [sp, #4]
 8008db2:	4690      	mov	r8, r2
 8008db4:	1c9c      	adds	r4, r3, #2
 8008db6:	46a1      	mov	r9, r4
 8008db8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008dbc:	2830      	cmp	r0, #48	@ 0x30
 8008dbe:	d0fa      	beq.n	8008db6 <__gethex+0x12>
 8008dc0:	eba9 0303 	sub.w	r3, r9, r3
 8008dc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008dc8:	f7ff ffd6 	bl	8008d78 <__hexdig_fun>
 8008dcc:	4605      	mov	r5, r0
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d168      	bne.n	8008ea4 <__gethex+0x100>
 8008dd2:	49a0      	ldr	r1, [pc, #640]	@ (8009054 <__gethex+0x2b0>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	4648      	mov	r0, r9
 8008dd8:	f7ff ff12 	bl	8008c00 <strncmp>
 8008ddc:	4607      	mov	r7, r0
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d167      	bne.n	8008eb2 <__gethex+0x10e>
 8008de2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008de6:	4626      	mov	r6, r4
 8008de8:	f7ff ffc6 	bl	8008d78 <__hexdig_fun>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d062      	beq.n	8008eb6 <__gethex+0x112>
 8008df0:	4623      	mov	r3, r4
 8008df2:	7818      	ldrb	r0, [r3, #0]
 8008df4:	2830      	cmp	r0, #48	@ 0x30
 8008df6:	4699      	mov	r9, r3
 8008df8:	f103 0301 	add.w	r3, r3, #1
 8008dfc:	d0f9      	beq.n	8008df2 <__gethex+0x4e>
 8008dfe:	f7ff ffbb 	bl	8008d78 <__hexdig_fun>
 8008e02:	fab0 f580 	clz	r5, r0
 8008e06:	096d      	lsrs	r5, r5, #5
 8008e08:	f04f 0b01 	mov.w	fp, #1
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	4616      	mov	r6, r2
 8008e10:	3201      	adds	r2, #1
 8008e12:	7830      	ldrb	r0, [r6, #0]
 8008e14:	f7ff ffb0 	bl	8008d78 <__hexdig_fun>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d1f8      	bne.n	8008e0e <__gethex+0x6a>
 8008e1c:	498d      	ldr	r1, [pc, #564]	@ (8009054 <__gethex+0x2b0>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7ff feed 	bl	8008c00 <strncmp>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d13f      	bne.n	8008eaa <__gethex+0x106>
 8008e2a:	b944      	cbnz	r4, 8008e3e <__gethex+0x9a>
 8008e2c:	1c74      	adds	r4, r6, #1
 8008e2e:	4622      	mov	r2, r4
 8008e30:	4616      	mov	r6, r2
 8008e32:	3201      	adds	r2, #1
 8008e34:	7830      	ldrb	r0, [r6, #0]
 8008e36:	f7ff ff9f 	bl	8008d78 <__hexdig_fun>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d1f8      	bne.n	8008e30 <__gethex+0x8c>
 8008e3e:	1ba4      	subs	r4, r4, r6
 8008e40:	00a7      	lsls	r7, r4, #2
 8008e42:	7833      	ldrb	r3, [r6, #0]
 8008e44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008e48:	2b50      	cmp	r3, #80	@ 0x50
 8008e4a:	d13e      	bne.n	8008eca <__gethex+0x126>
 8008e4c:	7873      	ldrb	r3, [r6, #1]
 8008e4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e50:	d033      	beq.n	8008eba <__gethex+0x116>
 8008e52:	2b2d      	cmp	r3, #45	@ 0x2d
 8008e54:	d034      	beq.n	8008ec0 <__gethex+0x11c>
 8008e56:	1c71      	adds	r1, r6, #1
 8008e58:	2400      	movs	r4, #0
 8008e5a:	7808      	ldrb	r0, [r1, #0]
 8008e5c:	f7ff ff8c 	bl	8008d78 <__hexdig_fun>
 8008e60:	1e43      	subs	r3, r0, #1
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b18      	cmp	r3, #24
 8008e66:	d830      	bhi.n	8008eca <__gethex+0x126>
 8008e68:	f1a0 0210 	sub.w	r2, r0, #16
 8008e6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e70:	f7ff ff82 	bl	8008d78 <__hexdig_fun>
 8008e74:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e78:	fa5f fc8c 	uxtb.w	ip, ip
 8008e7c:	f1bc 0f18 	cmp.w	ip, #24
 8008e80:	f04f 030a 	mov.w	r3, #10
 8008e84:	d91e      	bls.n	8008ec4 <__gethex+0x120>
 8008e86:	b104      	cbz	r4, 8008e8a <__gethex+0xe6>
 8008e88:	4252      	negs	r2, r2
 8008e8a:	4417      	add	r7, r2
 8008e8c:	f8ca 1000 	str.w	r1, [sl]
 8008e90:	b1ed      	cbz	r5, 8008ece <__gethex+0x12a>
 8008e92:	f1bb 0f00 	cmp.w	fp, #0
 8008e96:	bf0c      	ite	eq
 8008e98:	2506      	moveq	r5, #6
 8008e9a:	2500      	movne	r5, #0
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	b005      	add	sp, #20
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	462c      	mov	r4, r5
 8008ea8:	e7b0      	b.n	8008e0c <__gethex+0x68>
 8008eaa:	2c00      	cmp	r4, #0
 8008eac:	d1c7      	bne.n	8008e3e <__gethex+0x9a>
 8008eae:	4627      	mov	r7, r4
 8008eb0:	e7c7      	b.n	8008e42 <__gethex+0x9e>
 8008eb2:	464e      	mov	r6, r9
 8008eb4:	462f      	mov	r7, r5
 8008eb6:	2501      	movs	r5, #1
 8008eb8:	e7c3      	b.n	8008e42 <__gethex+0x9e>
 8008eba:	2400      	movs	r4, #0
 8008ebc:	1cb1      	adds	r1, r6, #2
 8008ebe:	e7cc      	b.n	8008e5a <__gethex+0xb6>
 8008ec0:	2401      	movs	r4, #1
 8008ec2:	e7fb      	b.n	8008ebc <__gethex+0x118>
 8008ec4:	fb03 0002 	mla	r0, r3, r2, r0
 8008ec8:	e7ce      	b.n	8008e68 <__gethex+0xc4>
 8008eca:	4631      	mov	r1, r6
 8008ecc:	e7de      	b.n	8008e8c <__gethex+0xe8>
 8008ece:	eba6 0309 	sub.w	r3, r6, r9
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	2b07      	cmp	r3, #7
 8008ed8:	dc0a      	bgt.n	8008ef0 <__gethex+0x14c>
 8008eda:	9801      	ldr	r0, [sp, #4]
 8008edc:	f7fe f93c 	bl	8007158 <_Balloc>
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	b940      	cbnz	r0, 8008ef6 <__gethex+0x152>
 8008ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8009058 <__gethex+0x2b4>)
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	21e4      	movs	r1, #228	@ 0xe4
 8008eea:	485c      	ldr	r0, [pc, #368]	@ (800905c <__gethex+0x2b8>)
 8008eec:	f7ff fec0 	bl	8008c70 <__assert_func>
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	105b      	asrs	r3, r3, #1
 8008ef4:	e7ef      	b.n	8008ed6 <__gethex+0x132>
 8008ef6:	f100 0a14 	add.w	sl, r0, #20
 8008efa:	2300      	movs	r3, #0
 8008efc:	4655      	mov	r5, sl
 8008efe:	469b      	mov	fp, r3
 8008f00:	45b1      	cmp	r9, r6
 8008f02:	d337      	bcc.n	8008f74 <__gethex+0x1d0>
 8008f04:	f845 bb04 	str.w	fp, [r5], #4
 8008f08:	eba5 050a 	sub.w	r5, r5, sl
 8008f0c:	10ad      	asrs	r5, r5, #2
 8008f0e:	6125      	str	r5, [r4, #16]
 8008f10:	4658      	mov	r0, fp
 8008f12:	f7fe fa13 	bl	800733c <__hi0bits>
 8008f16:	016d      	lsls	r5, r5, #5
 8008f18:	f8d8 6000 	ldr.w	r6, [r8]
 8008f1c:	1a2d      	subs	r5, r5, r0
 8008f1e:	42b5      	cmp	r5, r6
 8008f20:	dd54      	ble.n	8008fcc <__gethex+0x228>
 8008f22:	1bad      	subs	r5, r5, r6
 8008f24:	4629      	mov	r1, r5
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7fe fda7 	bl	8007a7a <__any_on>
 8008f2c:	4681      	mov	r9, r0
 8008f2e:	b178      	cbz	r0, 8008f50 <__gethex+0x1ac>
 8008f30:	1e6b      	subs	r3, r5, #1
 8008f32:	1159      	asrs	r1, r3, #5
 8008f34:	f003 021f 	and.w	r2, r3, #31
 8008f38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f3c:	f04f 0901 	mov.w	r9, #1
 8008f40:	fa09 f202 	lsl.w	r2, r9, r2
 8008f44:	420a      	tst	r2, r1
 8008f46:	d003      	beq.n	8008f50 <__gethex+0x1ac>
 8008f48:	454b      	cmp	r3, r9
 8008f4a:	dc36      	bgt.n	8008fba <__gethex+0x216>
 8008f4c:	f04f 0902 	mov.w	r9, #2
 8008f50:	4629      	mov	r1, r5
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff febe 	bl	8008cd4 <rshift>
 8008f58:	442f      	add	r7, r5
 8008f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f5e:	42bb      	cmp	r3, r7
 8008f60:	da42      	bge.n	8008fe8 <__gethex+0x244>
 8008f62:	9801      	ldr	r0, [sp, #4]
 8008f64:	4621      	mov	r1, r4
 8008f66:	f7fe f937 	bl	80071d8 <_Bfree>
 8008f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	25a3      	movs	r5, #163	@ 0xa3
 8008f72:	e793      	b.n	8008e9c <__gethex+0xf8>
 8008f74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f78:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f7a:	d012      	beq.n	8008fa2 <__gethex+0x1fe>
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	d104      	bne.n	8008f8a <__gethex+0x1e6>
 8008f80:	f845 bb04 	str.w	fp, [r5], #4
 8008f84:	f04f 0b00 	mov.w	fp, #0
 8008f88:	465b      	mov	r3, fp
 8008f8a:	7830      	ldrb	r0, [r6, #0]
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	f7ff fef3 	bl	8008d78 <__hexdig_fun>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	f000 000f 	and.w	r0, r0, #15
 8008f98:	4098      	lsls	r0, r3
 8008f9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	e7ae      	b.n	8008f00 <__gethex+0x15c>
 8008fa2:	45b1      	cmp	r9, r6
 8008fa4:	d8ea      	bhi.n	8008f7c <__gethex+0x1d8>
 8008fa6:	492b      	ldr	r1, [pc, #172]	@ (8009054 <__gethex+0x2b0>)
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	2201      	movs	r2, #1
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff fe27 	bl	8008c00 <strncmp>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1e1      	bne.n	8008f7c <__gethex+0x1d8>
 8008fb8:	e7a2      	b.n	8008f00 <__gethex+0x15c>
 8008fba:	1ea9      	subs	r1, r5, #2
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f7fe fd5c 	bl	8007a7a <__any_on>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d0c2      	beq.n	8008f4c <__gethex+0x1a8>
 8008fc6:	f04f 0903 	mov.w	r9, #3
 8008fca:	e7c1      	b.n	8008f50 <__gethex+0x1ac>
 8008fcc:	da09      	bge.n	8008fe2 <__gethex+0x23e>
 8008fce:	1b75      	subs	r5, r6, r5
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	9801      	ldr	r0, [sp, #4]
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	f7fe fb17 	bl	8007608 <__lshift>
 8008fda:	1b7f      	subs	r7, r7, r5
 8008fdc:	4604      	mov	r4, r0
 8008fde:	f100 0a14 	add.w	sl, r0, #20
 8008fe2:	f04f 0900 	mov.w	r9, #0
 8008fe6:	e7b8      	b.n	8008f5a <__gethex+0x1b6>
 8008fe8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fec:	42bd      	cmp	r5, r7
 8008fee:	dd6f      	ble.n	80090d0 <__gethex+0x32c>
 8008ff0:	1bed      	subs	r5, r5, r7
 8008ff2:	42ae      	cmp	r6, r5
 8008ff4:	dc34      	bgt.n	8009060 <__gethex+0x2bc>
 8008ff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d022      	beq.n	8009044 <__gethex+0x2a0>
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d024      	beq.n	800904c <__gethex+0x2a8>
 8009002:	2b01      	cmp	r3, #1
 8009004:	d115      	bne.n	8009032 <__gethex+0x28e>
 8009006:	42ae      	cmp	r6, r5
 8009008:	d113      	bne.n	8009032 <__gethex+0x28e>
 800900a:	2e01      	cmp	r6, #1
 800900c:	d10b      	bne.n	8009026 <__gethex+0x282>
 800900e:	9a02      	ldr	r2, [sp, #8]
 8009010:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	2301      	movs	r3, #1
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	f8ca 3000 	str.w	r3, [sl]
 800901e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009020:	2562      	movs	r5, #98	@ 0x62
 8009022:	601c      	str	r4, [r3, #0]
 8009024:	e73a      	b.n	8008e9c <__gethex+0xf8>
 8009026:	1e71      	subs	r1, r6, #1
 8009028:	4620      	mov	r0, r4
 800902a:	f7fe fd26 	bl	8007a7a <__any_on>
 800902e:	2800      	cmp	r0, #0
 8009030:	d1ed      	bne.n	800900e <__gethex+0x26a>
 8009032:	9801      	ldr	r0, [sp, #4]
 8009034:	4621      	mov	r1, r4
 8009036:	f7fe f8cf 	bl	80071d8 <_Bfree>
 800903a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800903c:	2300      	movs	r3, #0
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	2550      	movs	r5, #80	@ 0x50
 8009042:	e72b      	b.n	8008e9c <__gethex+0xf8>
 8009044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f3      	bne.n	8009032 <__gethex+0x28e>
 800904a:	e7e0      	b.n	800900e <__gethex+0x26a>
 800904c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1dd      	bne.n	800900e <__gethex+0x26a>
 8009052:	e7ee      	b.n	8009032 <__gethex+0x28e>
 8009054:	08009bd0 	.word	0x08009bd0
 8009058:	08009a65 	.word	0x08009a65
 800905c:	08009d7e 	.word	0x08009d7e
 8009060:	1e6f      	subs	r7, r5, #1
 8009062:	f1b9 0f00 	cmp.w	r9, #0
 8009066:	d130      	bne.n	80090ca <__gethex+0x326>
 8009068:	b127      	cbz	r7, 8009074 <__gethex+0x2d0>
 800906a:	4639      	mov	r1, r7
 800906c:	4620      	mov	r0, r4
 800906e:	f7fe fd04 	bl	8007a7a <__any_on>
 8009072:	4681      	mov	r9, r0
 8009074:	117a      	asrs	r2, r7, #5
 8009076:	2301      	movs	r3, #1
 8009078:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800907c:	f007 071f 	and.w	r7, r7, #31
 8009080:	40bb      	lsls	r3, r7
 8009082:	4213      	tst	r3, r2
 8009084:	4629      	mov	r1, r5
 8009086:	4620      	mov	r0, r4
 8009088:	bf18      	it	ne
 800908a:	f049 0902 	orrne.w	r9, r9, #2
 800908e:	f7ff fe21 	bl	8008cd4 <rshift>
 8009092:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009096:	1b76      	subs	r6, r6, r5
 8009098:	2502      	movs	r5, #2
 800909a:	f1b9 0f00 	cmp.w	r9, #0
 800909e:	d047      	beq.n	8009130 <__gethex+0x38c>
 80090a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d015      	beq.n	80090d4 <__gethex+0x330>
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d017      	beq.n	80090dc <__gethex+0x338>
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d109      	bne.n	80090c4 <__gethex+0x320>
 80090b0:	f019 0f02 	tst.w	r9, #2
 80090b4:	d006      	beq.n	80090c4 <__gethex+0x320>
 80090b6:	f8da 3000 	ldr.w	r3, [sl]
 80090ba:	ea49 0903 	orr.w	r9, r9, r3
 80090be:	f019 0f01 	tst.w	r9, #1
 80090c2:	d10e      	bne.n	80090e2 <__gethex+0x33e>
 80090c4:	f045 0510 	orr.w	r5, r5, #16
 80090c8:	e032      	b.n	8009130 <__gethex+0x38c>
 80090ca:	f04f 0901 	mov.w	r9, #1
 80090ce:	e7d1      	b.n	8009074 <__gethex+0x2d0>
 80090d0:	2501      	movs	r5, #1
 80090d2:	e7e2      	b.n	800909a <__gethex+0x2f6>
 80090d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090d6:	f1c3 0301 	rsb	r3, r3, #1
 80090da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <__gethex+0x320>
 80090e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090e6:	f104 0314 	add.w	r3, r4, #20
 80090ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090f2:	f04f 0c00 	mov.w	ip, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009100:	d01b      	beq.n	800913a <__gethex+0x396>
 8009102:	3201      	adds	r2, #1
 8009104:	6002      	str	r2, [r0, #0]
 8009106:	2d02      	cmp	r5, #2
 8009108:	f104 0314 	add.w	r3, r4, #20
 800910c:	d13c      	bne.n	8009188 <__gethex+0x3e4>
 800910e:	f8d8 2000 	ldr.w	r2, [r8]
 8009112:	3a01      	subs	r2, #1
 8009114:	42b2      	cmp	r2, r6
 8009116:	d109      	bne.n	800912c <__gethex+0x388>
 8009118:	1171      	asrs	r1, r6, #5
 800911a:	2201      	movs	r2, #1
 800911c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009120:	f006 061f 	and.w	r6, r6, #31
 8009124:	fa02 f606 	lsl.w	r6, r2, r6
 8009128:	421e      	tst	r6, r3
 800912a:	d13a      	bne.n	80091a2 <__gethex+0x3fe>
 800912c:	f045 0520 	orr.w	r5, r5, #32
 8009130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009132:	601c      	str	r4, [r3, #0]
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	601f      	str	r7, [r3, #0]
 8009138:	e6b0      	b.n	8008e9c <__gethex+0xf8>
 800913a:	4299      	cmp	r1, r3
 800913c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009140:	d8d9      	bhi.n	80090f6 <__gethex+0x352>
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	459b      	cmp	fp, r3
 8009146:	db17      	blt.n	8009178 <__gethex+0x3d4>
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	9801      	ldr	r0, [sp, #4]
 800914c:	3101      	adds	r1, #1
 800914e:	f7fe f803 	bl	8007158 <_Balloc>
 8009152:	4681      	mov	r9, r0
 8009154:	b918      	cbnz	r0, 800915e <__gethex+0x3ba>
 8009156:	4b1a      	ldr	r3, [pc, #104]	@ (80091c0 <__gethex+0x41c>)
 8009158:	4602      	mov	r2, r0
 800915a:	2184      	movs	r1, #132	@ 0x84
 800915c:	e6c5      	b.n	8008eea <__gethex+0x146>
 800915e:	6922      	ldr	r2, [r4, #16]
 8009160:	3202      	adds	r2, #2
 8009162:	f104 010c 	add.w	r1, r4, #12
 8009166:	0092      	lsls	r2, r2, #2
 8009168:	300c      	adds	r0, #12
 800916a:	f7ff fd6b 	bl	8008c44 <memcpy>
 800916e:	4621      	mov	r1, r4
 8009170:	9801      	ldr	r0, [sp, #4]
 8009172:	f7fe f831 	bl	80071d8 <_Bfree>
 8009176:	464c      	mov	r4, r9
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009180:	6122      	str	r2, [r4, #16]
 8009182:	2201      	movs	r2, #1
 8009184:	615a      	str	r2, [r3, #20]
 8009186:	e7be      	b.n	8009106 <__gethex+0x362>
 8009188:	6922      	ldr	r2, [r4, #16]
 800918a:	455a      	cmp	r2, fp
 800918c:	dd0b      	ble.n	80091a6 <__gethex+0x402>
 800918e:	2101      	movs	r1, #1
 8009190:	4620      	mov	r0, r4
 8009192:	f7ff fd9f 	bl	8008cd4 <rshift>
 8009196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800919a:	3701      	adds	r7, #1
 800919c:	42bb      	cmp	r3, r7
 800919e:	f6ff aee0 	blt.w	8008f62 <__gethex+0x1be>
 80091a2:	2501      	movs	r5, #1
 80091a4:	e7c2      	b.n	800912c <__gethex+0x388>
 80091a6:	f016 061f 	ands.w	r6, r6, #31
 80091aa:	d0fa      	beq.n	80091a2 <__gethex+0x3fe>
 80091ac:	4453      	add	r3, sl
 80091ae:	f1c6 0620 	rsb	r6, r6, #32
 80091b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80091b6:	f7fe f8c1 	bl	800733c <__hi0bits>
 80091ba:	42b0      	cmp	r0, r6
 80091bc:	dbe7      	blt.n	800918e <__gethex+0x3ea>
 80091be:	e7f0      	b.n	80091a2 <__gethex+0x3fe>
 80091c0:	08009a65 	.word	0x08009a65

080091c4 <L_shift>:
 80091c4:	f1c2 0208 	rsb	r2, r2, #8
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	b570      	push	{r4, r5, r6, lr}
 80091cc:	f1c2 0620 	rsb	r6, r2, #32
 80091d0:	6843      	ldr	r3, [r0, #4]
 80091d2:	6804      	ldr	r4, [r0, #0]
 80091d4:	fa03 f506 	lsl.w	r5, r3, r6
 80091d8:	432c      	orrs	r4, r5
 80091da:	40d3      	lsrs	r3, r2
 80091dc:	6004      	str	r4, [r0, #0]
 80091de:	f840 3f04 	str.w	r3, [r0, #4]!
 80091e2:	4288      	cmp	r0, r1
 80091e4:	d3f4      	bcc.n	80091d0 <L_shift+0xc>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}

080091e8 <__match>:
 80091e8:	b530      	push	{r4, r5, lr}
 80091ea:	6803      	ldr	r3, [r0, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f2:	b914      	cbnz	r4, 80091fa <__match+0x12>
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	2001      	movs	r0, #1
 80091f8:	bd30      	pop	{r4, r5, pc}
 80091fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009202:	2d19      	cmp	r5, #25
 8009204:	bf98      	it	ls
 8009206:	3220      	addls	r2, #32
 8009208:	42a2      	cmp	r2, r4
 800920a:	d0f0      	beq.n	80091ee <__match+0x6>
 800920c:	2000      	movs	r0, #0
 800920e:	e7f3      	b.n	80091f8 <__match+0x10>

08009210 <__hexnan>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	680b      	ldr	r3, [r1, #0]
 8009216:	6801      	ldr	r1, [r0, #0]
 8009218:	115e      	asrs	r6, r3, #5
 800921a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800921e:	f013 031f 	ands.w	r3, r3, #31
 8009222:	b087      	sub	sp, #28
 8009224:	bf18      	it	ne
 8009226:	3604      	addne	r6, #4
 8009228:	2500      	movs	r5, #0
 800922a:	1f37      	subs	r7, r6, #4
 800922c:	4682      	mov	sl, r0
 800922e:	4690      	mov	r8, r2
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	f846 5c04 	str.w	r5, [r6, #-4]
 8009236:	46b9      	mov	r9, r7
 8009238:	463c      	mov	r4, r7
 800923a:	9502      	str	r5, [sp, #8]
 800923c:	46ab      	mov	fp, r5
 800923e:	784a      	ldrb	r2, [r1, #1]
 8009240:	1c4b      	adds	r3, r1, #1
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	b342      	cbz	r2, 8009298 <__hexnan+0x88>
 8009246:	4610      	mov	r0, r2
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	9204      	str	r2, [sp, #16]
 800924c:	f7ff fd94 	bl	8008d78 <__hexdig_fun>
 8009250:	2800      	cmp	r0, #0
 8009252:	d151      	bne.n	80092f8 <__hexnan+0xe8>
 8009254:	9a04      	ldr	r2, [sp, #16]
 8009256:	9905      	ldr	r1, [sp, #20]
 8009258:	2a20      	cmp	r2, #32
 800925a:	d818      	bhi.n	800928e <__hexnan+0x7e>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	459b      	cmp	fp, r3
 8009260:	dd13      	ble.n	800928a <__hexnan+0x7a>
 8009262:	454c      	cmp	r4, r9
 8009264:	d206      	bcs.n	8009274 <__hexnan+0x64>
 8009266:	2d07      	cmp	r5, #7
 8009268:	dc04      	bgt.n	8009274 <__hexnan+0x64>
 800926a:	462a      	mov	r2, r5
 800926c:	4649      	mov	r1, r9
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff ffa8 	bl	80091c4 <L_shift>
 8009274:	4544      	cmp	r4, r8
 8009276:	d952      	bls.n	800931e <__hexnan+0x10e>
 8009278:	2300      	movs	r3, #0
 800927a:	f1a4 0904 	sub.w	r9, r4, #4
 800927e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009282:	f8cd b008 	str.w	fp, [sp, #8]
 8009286:	464c      	mov	r4, r9
 8009288:	461d      	mov	r5, r3
 800928a:	9903      	ldr	r1, [sp, #12]
 800928c:	e7d7      	b.n	800923e <__hexnan+0x2e>
 800928e:	2a29      	cmp	r2, #41	@ 0x29
 8009290:	d157      	bne.n	8009342 <__hexnan+0x132>
 8009292:	3102      	adds	r1, #2
 8009294:	f8ca 1000 	str.w	r1, [sl]
 8009298:	f1bb 0f00 	cmp.w	fp, #0
 800929c:	d051      	beq.n	8009342 <__hexnan+0x132>
 800929e:	454c      	cmp	r4, r9
 80092a0:	d206      	bcs.n	80092b0 <__hexnan+0xa0>
 80092a2:	2d07      	cmp	r5, #7
 80092a4:	dc04      	bgt.n	80092b0 <__hexnan+0xa0>
 80092a6:	462a      	mov	r2, r5
 80092a8:	4649      	mov	r1, r9
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff ff8a 	bl	80091c4 <L_shift>
 80092b0:	4544      	cmp	r4, r8
 80092b2:	d936      	bls.n	8009322 <__hexnan+0x112>
 80092b4:	f1a8 0204 	sub.w	r2, r8, #4
 80092b8:	4623      	mov	r3, r4
 80092ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80092be:	f842 1f04 	str.w	r1, [r2, #4]!
 80092c2:	429f      	cmp	r7, r3
 80092c4:	d2f9      	bcs.n	80092ba <__hexnan+0xaa>
 80092c6:	1b3b      	subs	r3, r7, r4
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	3304      	adds	r3, #4
 80092ce:	3401      	adds	r4, #1
 80092d0:	3e03      	subs	r6, #3
 80092d2:	42b4      	cmp	r4, r6
 80092d4:	bf88      	it	hi
 80092d6:	2304      	movhi	r3, #4
 80092d8:	4443      	add	r3, r8
 80092da:	2200      	movs	r2, #0
 80092dc:	f843 2b04 	str.w	r2, [r3], #4
 80092e0:	429f      	cmp	r7, r3
 80092e2:	d2fb      	bcs.n	80092dc <__hexnan+0xcc>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	b91b      	cbnz	r3, 80092f0 <__hexnan+0xe0>
 80092e8:	4547      	cmp	r7, r8
 80092ea:	d128      	bne.n	800933e <__hexnan+0x12e>
 80092ec:	2301      	movs	r3, #1
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	2005      	movs	r0, #5
 80092f2:	b007      	add	sp, #28
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	3501      	adds	r5, #1
 80092fa:	2d08      	cmp	r5, #8
 80092fc:	f10b 0b01 	add.w	fp, fp, #1
 8009300:	dd06      	ble.n	8009310 <__hexnan+0x100>
 8009302:	4544      	cmp	r4, r8
 8009304:	d9c1      	bls.n	800928a <__hexnan+0x7a>
 8009306:	2300      	movs	r3, #0
 8009308:	f844 3c04 	str.w	r3, [r4, #-4]
 800930c:	2501      	movs	r5, #1
 800930e:	3c04      	subs	r4, #4
 8009310:	6822      	ldr	r2, [r4, #0]
 8009312:	f000 000f 	and.w	r0, r0, #15
 8009316:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800931a:	6020      	str	r0, [r4, #0]
 800931c:	e7b5      	b.n	800928a <__hexnan+0x7a>
 800931e:	2508      	movs	r5, #8
 8009320:	e7b3      	b.n	800928a <__hexnan+0x7a>
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0dd      	beq.n	80092e4 <__hexnan+0xd4>
 8009328:	f1c3 0320 	rsb	r3, r3, #32
 800932c:	f04f 32ff 	mov.w	r2, #4294967295
 8009330:	40da      	lsrs	r2, r3
 8009332:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009336:	4013      	ands	r3, r2
 8009338:	f846 3c04 	str.w	r3, [r6, #-4]
 800933c:	e7d2      	b.n	80092e4 <__hexnan+0xd4>
 800933e:	3f04      	subs	r7, #4
 8009340:	e7d0      	b.n	80092e4 <__hexnan+0xd4>
 8009342:	2004      	movs	r0, #4
 8009344:	e7d5      	b.n	80092f2 <__hexnan+0xe2>

08009346 <__ascii_mbtowc>:
 8009346:	b082      	sub	sp, #8
 8009348:	b901      	cbnz	r1, 800934c <__ascii_mbtowc+0x6>
 800934a:	a901      	add	r1, sp, #4
 800934c:	b142      	cbz	r2, 8009360 <__ascii_mbtowc+0x1a>
 800934e:	b14b      	cbz	r3, 8009364 <__ascii_mbtowc+0x1e>
 8009350:	7813      	ldrb	r3, [r2, #0]
 8009352:	600b      	str	r3, [r1, #0]
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	1e10      	subs	r0, r2, #0
 8009358:	bf18      	it	ne
 800935a:	2001      	movne	r0, #1
 800935c:	b002      	add	sp, #8
 800935e:	4770      	bx	lr
 8009360:	4610      	mov	r0, r2
 8009362:	e7fb      	b.n	800935c <__ascii_mbtowc+0x16>
 8009364:	f06f 0001 	mvn.w	r0, #1
 8009368:	e7f8      	b.n	800935c <__ascii_mbtowc+0x16>

0800936a <_realloc_r>:
 800936a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936e:	4680      	mov	r8, r0
 8009370:	4615      	mov	r5, r2
 8009372:	460c      	mov	r4, r1
 8009374:	b921      	cbnz	r1, 8009380 <_realloc_r+0x16>
 8009376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	4611      	mov	r1, r2
 800937c:	f7fd be60 	b.w	8007040 <_malloc_r>
 8009380:	b92a      	cbnz	r2, 800938e <_realloc_r+0x24>
 8009382:	f7fd fde9 	bl	8006f58 <_free_r>
 8009386:	2400      	movs	r4, #0
 8009388:	4620      	mov	r0, r4
 800938a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800938e:	f000 f840 	bl	8009412 <_malloc_usable_size_r>
 8009392:	4285      	cmp	r5, r0
 8009394:	4606      	mov	r6, r0
 8009396:	d802      	bhi.n	800939e <_realloc_r+0x34>
 8009398:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800939c:	d8f4      	bhi.n	8009388 <_realloc_r+0x1e>
 800939e:	4629      	mov	r1, r5
 80093a0:	4640      	mov	r0, r8
 80093a2:	f7fd fe4d 	bl	8007040 <_malloc_r>
 80093a6:	4607      	mov	r7, r0
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0ec      	beq.n	8009386 <_realloc_r+0x1c>
 80093ac:	42b5      	cmp	r5, r6
 80093ae:	462a      	mov	r2, r5
 80093b0:	4621      	mov	r1, r4
 80093b2:	bf28      	it	cs
 80093b4:	4632      	movcs	r2, r6
 80093b6:	f7ff fc45 	bl	8008c44 <memcpy>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4640      	mov	r0, r8
 80093be:	f7fd fdcb 	bl	8006f58 <_free_r>
 80093c2:	463c      	mov	r4, r7
 80093c4:	e7e0      	b.n	8009388 <_realloc_r+0x1e>

080093c6 <__ascii_wctomb>:
 80093c6:	4603      	mov	r3, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	b141      	cbz	r1, 80093de <__ascii_wctomb+0x18>
 80093cc:	2aff      	cmp	r2, #255	@ 0xff
 80093ce:	d904      	bls.n	80093da <__ascii_wctomb+0x14>
 80093d0:	228a      	movs	r2, #138	@ 0x8a
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	4770      	bx	lr
 80093da:	700a      	strb	r2, [r1, #0]
 80093dc:	2001      	movs	r0, #1
 80093de:	4770      	bx	lr

080093e0 <fiprintf>:
 80093e0:	b40e      	push	{r1, r2, r3}
 80093e2:	b503      	push	{r0, r1, lr}
 80093e4:	4601      	mov	r1, r0
 80093e6:	ab03      	add	r3, sp, #12
 80093e8:	4805      	ldr	r0, [pc, #20]	@ (8009400 <fiprintf+0x20>)
 80093ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ee:	6800      	ldr	r0, [r0, #0]
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	f000 f83f 	bl	8009474 <_vfiprintf_r>
 80093f6:	b002      	add	sp, #8
 80093f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093fc:	b003      	add	sp, #12
 80093fe:	4770      	bx	lr
 8009400:	20000028 	.word	0x20000028

08009404 <abort>:
 8009404:	b508      	push	{r3, lr}
 8009406:	2006      	movs	r0, #6
 8009408:	f000 fa08 	bl	800981c <raise>
 800940c:	2001      	movs	r0, #1
 800940e:	f7f8 f85e 	bl	80014ce <_exit>

08009412 <_malloc_usable_size_r>:
 8009412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009416:	1f18      	subs	r0, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	bfbc      	itt	lt
 800941c:	580b      	ldrlt	r3, [r1, r0]
 800941e:	18c0      	addlt	r0, r0, r3
 8009420:	4770      	bx	lr

08009422 <__sfputc_r>:
 8009422:	6893      	ldr	r3, [r2, #8]
 8009424:	3b01      	subs	r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	b410      	push	{r4}
 800942a:	6093      	str	r3, [r2, #8]
 800942c:	da08      	bge.n	8009440 <__sfputc_r+0x1e>
 800942e:	6994      	ldr	r4, [r2, #24]
 8009430:	42a3      	cmp	r3, r4
 8009432:	db01      	blt.n	8009438 <__sfputc_r+0x16>
 8009434:	290a      	cmp	r1, #10
 8009436:	d103      	bne.n	8009440 <__sfputc_r+0x1e>
 8009438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800943c:	f000 b932 	b.w	80096a4 <__swbuf_r>
 8009440:	6813      	ldr	r3, [r2, #0]
 8009442:	1c58      	adds	r0, r3, #1
 8009444:	6010      	str	r0, [r2, #0]
 8009446:	7019      	strb	r1, [r3, #0]
 8009448:	4608      	mov	r0, r1
 800944a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944e:	4770      	bx	lr

08009450 <__sfputs_r>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	4606      	mov	r6, r0
 8009454:	460f      	mov	r7, r1
 8009456:	4614      	mov	r4, r2
 8009458:	18d5      	adds	r5, r2, r3
 800945a:	42ac      	cmp	r4, r5
 800945c:	d101      	bne.n	8009462 <__sfputs_r+0x12>
 800945e:	2000      	movs	r0, #0
 8009460:	e007      	b.n	8009472 <__sfputs_r+0x22>
 8009462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009466:	463a      	mov	r2, r7
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff ffda 	bl	8009422 <__sfputc_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d1f3      	bne.n	800945a <__sfputs_r+0xa>
 8009472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009474 <_vfiprintf_r>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	460d      	mov	r5, r1
 800947a:	b09d      	sub	sp, #116	@ 0x74
 800947c:	4614      	mov	r4, r2
 800947e:	4698      	mov	r8, r3
 8009480:	4606      	mov	r6, r0
 8009482:	b118      	cbz	r0, 800948c <_vfiprintf_r+0x18>
 8009484:	6a03      	ldr	r3, [r0, #32]
 8009486:	b90b      	cbnz	r3, 800948c <_vfiprintf_r+0x18>
 8009488:	f7fc fdf8 	bl	800607c <__sinit>
 800948c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800948e:	07d9      	lsls	r1, r3, #31
 8009490:	d405      	bmi.n	800949e <_vfiprintf_r+0x2a>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	059a      	lsls	r2, r3, #22
 8009496:	d402      	bmi.n	800949e <_vfiprintf_r+0x2a>
 8009498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800949a:	f7fc ff06 	bl	80062aa <__retarget_lock_acquire_recursive>
 800949e:	89ab      	ldrh	r3, [r5, #12]
 80094a0:	071b      	lsls	r3, r3, #28
 80094a2:	d501      	bpl.n	80094a8 <_vfiprintf_r+0x34>
 80094a4:	692b      	ldr	r3, [r5, #16]
 80094a6:	b99b      	cbnz	r3, 80094d0 <_vfiprintf_r+0x5c>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4630      	mov	r0, r6
 80094ac:	f000 f938 	bl	8009720 <__swsetup_r>
 80094b0:	b170      	cbz	r0, 80094d0 <_vfiprintf_r+0x5c>
 80094b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094b4:	07dc      	lsls	r4, r3, #31
 80094b6:	d504      	bpl.n	80094c2 <_vfiprintf_r+0x4e>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	b01d      	add	sp, #116	@ 0x74
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	0598      	lsls	r0, r3, #22
 80094c6:	d4f7      	bmi.n	80094b8 <_vfiprintf_r+0x44>
 80094c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ca:	f7fc feef 	bl	80062ac <__retarget_lock_release_recursive>
 80094ce:	e7f3      	b.n	80094b8 <_vfiprintf_r+0x44>
 80094d0:	2300      	movs	r3, #0
 80094d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d4:	2320      	movs	r3, #32
 80094d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094da:	f8cd 800c 	str.w	r8, [sp, #12]
 80094de:	2330      	movs	r3, #48	@ 0x30
 80094e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009690 <_vfiprintf_r+0x21c>
 80094e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094e8:	f04f 0901 	mov.w	r9, #1
 80094ec:	4623      	mov	r3, r4
 80094ee:	469a      	mov	sl, r3
 80094f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f4:	b10a      	cbz	r2, 80094fa <_vfiprintf_r+0x86>
 80094f6:	2a25      	cmp	r2, #37	@ 0x25
 80094f8:	d1f9      	bne.n	80094ee <_vfiprintf_r+0x7a>
 80094fa:	ebba 0b04 	subs.w	fp, sl, r4
 80094fe:	d00b      	beq.n	8009518 <_vfiprintf_r+0xa4>
 8009500:	465b      	mov	r3, fp
 8009502:	4622      	mov	r2, r4
 8009504:	4629      	mov	r1, r5
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff ffa2 	bl	8009450 <__sfputs_r>
 800950c:	3001      	adds	r0, #1
 800950e:	f000 80a7 	beq.w	8009660 <_vfiprintf_r+0x1ec>
 8009512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009514:	445a      	add	r2, fp
 8009516:	9209      	str	r2, [sp, #36]	@ 0x24
 8009518:	f89a 3000 	ldrb.w	r3, [sl]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 809f 	beq.w	8009660 <_vfiprintf_r+0x1ec>
 8009522:	2300      	movs	r3, #0
 8009524:	f04f 32ff 	mov.w	r2, #4294967295
 8009528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800952c:	f10a 0a01 	add.w	sl, sl, #1
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	9307      	str	r3, [sp, #28]
 8009534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009538:	931a      	str	r3, [sp, #104]	@ 0x68
 800953a:	4654      	mov	r4, sl
 800953c:	2205      	movs	r2, #5
 800953e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009542:	4853      	ldr	r0, [pc, #332]	@ (8009690 <_vfiprintf_r+0x21c>)
 8009544:	f7f6 fe4c 	bl	80001e0 <memchr>
 8009548:	9a04      	ldr	r2, [sp, #16]
 800954a:	b9d8      	cbnz	r0, 8009584 <_vfiprintf_r+0x110>
 800954c:	06d1      	lsls	r1, r2, #27
 800954e:	bf44      	itt	mi
 8009550:	2320      	movmi	r3, #32
 8009552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009556:	0713      	lsls	r3, r2, #28
 8009558:	bf44      	itt	mi
 800955a:	232b      	movmi	r3, #43	@ 0x2b
 800955c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009560:	f89a 3000 	ldrb.w	r3, [sl]
 8009564:	2b2a      	cmp	r3, #42	@ 0x2a
 8009566:	d015      	beq.n	8009594 <_vfiprintf_r+0x120>
 8009568:	9a07      	ldr	r2, [sp, #28]
 800956a:	4654      	mov	r4, sl
 800956c:	2000      	movs	r0, #0
 800956e:	f04f 0c0a 	mov.w	ip, #10
 8009572:	4621      	mov	r1, r4
 8009574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009578:	3b30      	subs	r3, #48	@ 0x30
 800957a:	2b09      	cmp	r3, #9
 800957c:	d94b      	bls.n	8009616 <_vfiprintf_r+0x1a2>
 800957e:	b1b0      	cbz	r0, 80095ae <_vfiprintf_r+0x13a>
 8009580:	9207      	str	r2, [sp, #28]
 8009582:	e014      	b.n	80095ae <_vfiprintf_r+0x13a>
 8009584:	eba0 0308 	sub.w	r3, r0, r8
 8009588:	fa09 f303 	lsl.w	r3, r9, r3
 800958c:	4313      	orrs	r3, r2
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	46a2      	mov	sl, r4
 8009592:	e7d2      	b.n	800953a <_vfiprintf_r+0xc6>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	1d19      	adds	r1, r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	9103      	str	r1, [sp, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	bfbb      	ittet	lt
 80095a0:	425b      	neglt	r3, r3
 80095a2:	f042 0202 	orrlt.w	r2, r2, #2
 80095a6:	9307      	strge	r3, [sp, #28]
 80095a8:	9307      	strlt	r3, [sp, #28]
 80095aa:	bfb8      	it	lt
 80095ac:	9204      	strlt	r2, [sp, #16]
 80095ae:	7823      	ldrb	r3, [r4, #0]
 80095b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80095b2:	d10a      	bne.n	80095ca <_vfiprintf_r+0x156>
 80095b4:	7863      	ldrb	r3, [r4, #1]
 80095b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80095b8:	d132      	bne.n	8009620 <_vfiprintf_r+0x1ac>
 80095ba:	9b03      	ldr	r3, [sp, #12]
 80095bc:	1d1a      	adds	r2, r3, #4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	9203      	str	r2, [sp, #12]
 80095c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095c6:	3402      	adds	r4, #2
 80095c8:	9305      	str	r3, [sp, #20]
 80095ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096a0 <_vfiprintf_r+0x22c>
 80095ce:	7821      	ldrb	r1, [r4, #0]
 80095d0:	2203      	movs	r2, #3
 80095d2:	4650      	mov	r0, sl
 80095d4:	f7f6 fe04 	bl	80001e0 <memchr>
 80095d8:	b138      	cbz	r0, 80095ea <_vfiprintf_r+0x176>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	eba0 000a 	sub.w	r0, r0, sl
 80095e0:	2240      	movs	r2, #64	@ 0x40
 80095e2:	4082      	lsls	r2, r0
 80095e4:	4313      	orrs	r3, r2
 80095e6:	3401      	adds	r4, #1
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ee:	4829      	ldr	r0, [pc, #164]	@ (8009694 <_vfiprintf_r+0x220>)
 80095f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095f4:	2206      	movs	r2, #6
 80095f6:	f7f6 fdf3 	bl	80001e0 <memchr>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d03f      	beq.n	800967e <_vfiprintf_r+0x20a>
 80095fe:	4b26      	ldr	r3, [pc, #152]	@ (8009698 <_vfiprintf_r+0x224>)
 8009600:	bb1b      	cbnz	r3, 800964a <_vfiprintf_r+0x1d6>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	3307      	adds	r3, #7
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	3308      	adds	r3, #8
 800960c:	9303      	str	r3, [sp, #12]
 800960e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009610:	443b      	add	r3, r7
 8009612:	9309      	str	r3, [sp, #36]	@ 0x24
 8009614:	e76a      	b.n	80094ec <_vfiprintf_r+0x78>
 8009616:	fb0c 3202 	mla	r2, ip, r2, r3
 800961a:	460c      	mov	r4, r1
 800961c:	2001      	movs	r0, #1
 800961e:	e7a8      	b.n	8009572 <_vfiprintf_r+0xfe>
 8009620:	2300      	movs	r3, #0
 8009622:	3401      	adds	r4, #1
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0c0a 	mov.w	ip, #10
 800962c:	4620      	mov	r0, r4
 800962e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009632:	3a30      	subs	r2, #48	@ 0x30
 8009634:	2a09      	cmp	r2, #9
 8009636:	d903      	bls.n	8009640 <_vfiprintf_r+0x1cc>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0c6      	beq.n	80095ca <_vfiprintf_r+0x156>
 800963c:	9105      	str	r1, [sp, #20]
 800963e:	e7c4      	b.n	80095ca <_vfiprintf_r+0x156>
 8009640:	fb0c 2101 	mla	r1, ip, r1, r2
 8009644:	4604      	mov	r4, r0
 8009646:	2301      	movs	r3, #1
 8009648:	e7f0      	b.n	800962c <_vfiprintf_r+0x1b8>
 800964a:	ab03      	add	r3, sp, #12
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	462a      	mov	r2, r5
 8009650:	4b12      	ldr	r3, [pc, #72]	@ (800969c <_vfiprintf_r+0x228>)
 8009652:	a904      	add	r1, sp, #16
 8009654:	4630      	mov	r0, r6
 8009656:	f7fb feb9 	bl	80053cc <_printf_float>
 800965a:	4607      	mov	r7, r0
 800965c:	1c78      	adds	r0, r7, #1
 800965e:	d1d6      	bne.n	800960e <_vfiprintf_r+0x19a>
 8009660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d405      	bmi.n	8009672 <_vfiprintf_r+0x1fe>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d402      	bmi.n	8009672 <_vfiprintf_r+0x1fe>
 800966c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800966e:	f7fc fe1d 	bl	80062ac <__retarget_lock_release_recursive>
 8009672:	89ab      	ldrh	r3, [r5, #12]
 8009674:	065b      	lsls	r3, r3, #25
 8009676:	f53f af1f 	bmi.w	80094b8 <_vfiprintf_r+0x44>
 800967a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800967c:	e71e      	b.n	80094bc <_vfiprintf_r+0x48>
 800967e:	ab03      	add	r3, sp, #12
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	462a      	mov	r2, r5
 8009684:	4b05      	ldr	r3, [pc, #20]	@ (800969c <_vfiprintf_r+0x228>)
 8009686:	a904      	add	r1, sp, #16
 8009688:	4630      	mov	r0, r6
 800968a:	f7fc f937 	bl	80058fc <_printf_i>
 800968e:	e7e4      	b.n	800965a <_vfiprintf_r+0x1e6>
 8009690:	08009d29 	.word	0x08009d29
 8009694:	08009d33 	.word	0x08009d33
 8009698:	080053cd 	.word	0x080053cd
 800969c:	08009451 	.word	0x08009451
 80096a0:	08009d2f 	.word	0x08009d2f

080096a4 <__swbuf_r>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	460e      	mov	r6, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	4605      	mov	r5, r0
 80096ac:	b118      	cbz	r0, 80096b6 <__swbuf_r+0x12>
 80096ae:	6a03      	ldr	r3, [r0, #32]
 80096b0:	b90b      	cbnz	r3, 80096b6 <__swbuf_r+0x12>
 80096b2:	f7fc fce3 	bl	800607c <__sinit>
 80096b6:	69a3      	ldr	r3, [r4, #24]
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	071a      	lsls	r2, r3, #28
 80096be:	d501      	bpl.n	80096c4 <__swbuf_r+0x20>
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	b943      	cbnz	r3, 80096d6 <__swbuf_r+0x32>
 80096c4:	4621      	mov	r1, r4
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 f82a 	bl	8009720 <__swsetup_r>
 80096cc:	b118      	cbz	r0, 80096d6 <__swbuf_r+0x32>
 80096ce:	f04f 37ff 	mov.w	r7, #4294967295
 80096d2:	4638      	mov	r0, r7
 80096d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	6922      	ldr	r2, [r4, #16]
 80096da:	1a98      	subs	r0, r3, r2
 80096dc:	6963      	ldr	r3, [r4, #20]
 80096de:	b2f6      	uxtb	r6, r6
 80096e0:	4283      	cmp	r3, r0
 80096e2:	4637      	mov	r7, r6
 80096e4:	dc05      	bgt.n	80096f2 <__swbuf_r+0x4e>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7ff fa47 	bl	8008b7c <_fflush_r>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d1ed      	bne.n	80096ce <__swbuf_r+0x2a>
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	6022      	str	r2, [r4, #0]
 80096fe:	701e      	strb	r6, [r3, #0]
 8009700:	6962      	ldr	r2, [r4, #20]
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	429a      	cmp	r2, r3
 8009706:	d004      	beq.n	8009712 <__swbuf_r+0x6e>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	07db      	lsls	r3, r3, #31
 800970c:	d5e1      	bpl.n	80096d2 <__swbuf_r+0x2e>
 800970e:	2e0a      	cmp	r6, #10
 8009710:	d1df      	bne.n	80096d2 <__swbuf_r+0x2e>
 8009712:	4621      	mov	r1, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f7ff fa31 	bl	8008b7c <_fflush_r>
 800971a:	2800      	cmp	r0, #0
 800971c:	d0d9      	beq.n	80096d2 <__swbuf_r+0x2e>
 800971e:	e7d6      	b.n	80096ce <__swbuf_r+0x2a>

08009720 <__swsetup_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4b29      	ldr	r3, [pc, #164]	@ (80097c8 <__swsetup_r+0xa8>)
 8009724:	4605      	mov	r5, r0
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	460c      	mov	r4, r1
 800972a:	b118      	cbz	r0, 8009734 <__swsetup_r+0x14>
 800972c:	6a03      	ldr	r3, [r0, #32]
 800972e:	b90b      	cbnz	r3, 8009734 <__swsetup_r+0x14>
 8009730:	f7fc fca4 	bl	800607c <__sinit>
 8009734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009738:	0719      	lsls	r1, r3, #28
 800973a:	d422      	bmi.n	8009782 <__swsetup_r+0x62>
 800973c:	06da      	lsls	r2, r3, #27
 800973e:	d407      	bmi.n	8009750 <__swsetup_r+0x30>
 8009740:	2209      	movs	r2, #9
 8009742:	602a      	str	r2, [r5, #0]
 8009744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009748:	81a3      	strh	r3, [r4, #12]
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	e033      	b.n	80097b8 <__swsetup_r+0x98>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x5a>
 8009754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x4a>
 8009758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x46>
 8009760:	4628      	mov	r0, r5
 8009762:	f7fd fbf9 	bl	8006f58 <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	@ 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x7a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x7a>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f883 	bl	80098a0 <__smakebuf_r>
 800979a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979e:	f013 0201 	ands.w	r2, r3, #1
 80097a2:	d00a      	beq.n	80097ba <__swsetup_r+0x9a>
 80097a4:	2200      	movs	r2, #0
 80097a6:	60a2      	str	r2, [r4, #8]
 80097a8:	6962      	ldr	r2, [r4, #20]
 80097aa:	4252      	negs	r2, r2
 80097ac:	61a2      	str	r2, [r4, #24]
 80097ae:	6922      	ldr	r2, [r4, #16]
 80097b0:	b942      	cbnz	r2, 80097c4 <__swsetup_r+0xa4>
 80097b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097b6:	d1c5      	bne.n	8009744 <__swsetup_r+0x24>
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	0799      	lsls	r1, r3, #30
 80097bc:	bf58      	it	pl
 80097be:	6962      	ldrpl	r2, [r4, #20]
 80097c0:	60a2      	str	r2, [r4, #8]
 80097c2:	e7f4      	b.n	80097ae <__swsetup_r+0x8e>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7f7      	b.n	80097b8 <__swsetup_r+0x98>
 80097c8:	20000028 	.word	0x20000028

080097cc <_raise_r>:
 80097cc:	291f      	cmp	r1, #31
 80097ce:	b538      	push	{r3, r4, r5, lr}
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	d904      	bls.n	80097e0 <_raise_r+0x14>
 80097d6:	2316      	movs	r3, #22
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097e2:	b112      	cbz	r2, 80097ea <_raise_r+0x1e>
 80097e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097e8:	b94b      	cbnz	r3, 80097fe <_raise_r+0x32>
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 f830 	bl	8009850 <_getpid_r>
 80097f0:	4622      	mov	r2, r4
 80097f2:	4601      	mov	r1, r0
 80097f4:	4628      	mov	r0, r5
 80097f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fa:	f000 b817 	b.w	800982c <_kill_r>
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d00a      	beq.n	8009818 <_raise_r+0x4c>
 8009802:	1c59      	adds	r1, r3, #1
 8009804:	d103      	bne.n	800980e <_raise_r+0x42>
 8009806:	2316      	movs	r3, #22
 8009808:	6003      	str	r3, [r0, #0]
 800980a:	2001      	movs	r0, #1
 800980c:	e7e7      	b.n	80097de <_raise_r+0x12>
 800980e:	2100      	movs	r1, #0
 8009810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009814:	4620      	mov	r0, r4
 8009816:	4798      	blx	r3
 8009818:	2000      	movs	r0, #0
 800981a:	e7e0      	b.n	80097de <_raise_r+0x12>

0800981c <raise>:
 800981c:	4b02      	ldr	r3, [pc, #8]	@ (8009828 <raise+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f7ff bfd3 	b.w	80097cc <_raise_r>
 8009826:	bf00      	nop
 8009828:	20000028 	.word	0x20000028

0800982c <_kill_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	@ (800984c <_kill_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f7 fe38 	bl	80014ae <_kill>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_kill_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_kill_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	200004a4 	.word	0x200004a4

08009850 <_getpid_r>:
 8009850:	f7f7 be25 	b.w	800149e <_getpid>

08009854 <__swhatbuf_r>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	2900      	cmp	r1, #0
 800985e:	b096      	sub	sp, #88	@ 0x58
 8009860:	4615      	mov	r5, r2
 8009862:	461e      	mov	r6, r3
 8009864:	da0d      	bge.n	8009882 <__swhatbuf_r+0x2e>
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800986c:	f04f 0100 	mov.w	r1, #0
 8009870:	bf14      	ite	ne
 8009872:	2340      	movne	r3, #64	@ 0x40
 8009874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009878:	2000      	movs	r0, #0
 800987a:	6031      	str	r1, [r6, #0]
 800987c:	602b      	str	r3, [r5, #0]
 800987e:	b016      	add	sp, #88	@ 0x58
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	466a      	mov	r2, sp
 8009884:	f000 f848 	bl	8009918 <_fstat_r>
 8009888:	2800      	cmp	r0, #0
 800988a:	dbec      	blt.n	8009866 <__swhatbuf_r+0x12>
 800988c:	9901      	ldr	r1, [sp, #4]
 800988e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009896:	4259      	negs	r1, r3
 8009898:	4159      	adcs	r1, r3
 800989a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800989e:	e7eb      	b.n	8009878 <__swhatbuf_r+0x24>

080098a0 <__smakebuf_r>:
 80098a0:	898b      	ldrh	r3, [r1, #12]
 80098a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098a4:	079d      	lsls	r5, r3, #30
 80098a6:	4606      	mov	r6, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	d507      	bpl.n	80098bc <__smakebuf_r+0x1c>
 80098ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	2301      	movs	r3, #1
 80098b6:	6163      	str	r3, [r4, #20]
 80098b8:	b003      	add	sp, #12
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	ab01      	add	r3, sp, #4
 80098be:	466a      	mov	r2, sp
 80098c0:	f7ff ffc8 	bl	8009854 <__swhatbuf_r>
 80098c4:	9f00      	ldr	r7, [sp, #0]
 80098c6:	4605      	mov	r5, r0
 80098c8:	4639      	mov	r1, r7
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7fd fbb8 	bl	8007040 <_malloc_r>
 80098d0:	b948      	cbnz	r0, 80098e6 <__smakebuf_r+0x46>
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	059a      	lsls	r2, r3, #22
 80098d8:	d4ee      	bmi.n	80098b8 <__smakebuf_r+0x18>
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	f043 0302 	orr.w	r3, r3, #2
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	e7e2      	b.n	80098ac <__smakebuf_r+0xc>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	6020      	str	r0, [r4, #0]
 80098ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098f6:	b15b      	cbz	r3, 8009910 <__smakebuf_r+0x70>
 80098f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 f81d 	bl	800993c <_isatty_r>
 8009902:	b128      	cbz	r0, 8009910 <__smakebuf_r+0x70>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f023 0303 	bic.w	r3, r3, #3
 800990a:	f043 0301 	orr.w	r3, r3, #1
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	431d      	orrs	r5, r3
 8009914:	81a5      	strh	r5, [r4, #12]
 8009916:	e7cf      	b.n	80098b8 <__smakebuf_r+0x18>

08009918 <_fstat_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	@ (8009938 <_fstat_r+0x20>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	f7f7 fe22 	bl	800156e <_fstat>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d102      	bne.n	8009934 <_fstat_r+0x1c>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	b103      	cbz	r3, 8009934 <_fstat_r+0x1c>
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	200004a4 	.word	0x200004a4

0800993c <_isatty_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d06      	ldr	r5, [pc, #24]	@ (8009958 <_isatty_r+0x1c>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	f7f7 fe21 	bl	800158e <_isatty>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_isatty_r+0x1a>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_isatty_r+0x1a>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	200004a4 	.word	0x200004a4

0800995c <_init>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr

08009968 <_fini>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	bf00      	nop
 800996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996e:	bc08      	pop	{r3}
 8009970:	469e      	mov	lr, r3
 8009972:	4770      	bx	lr
