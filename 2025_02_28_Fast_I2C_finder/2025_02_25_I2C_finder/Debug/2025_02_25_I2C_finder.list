
2025_02_25_I2C_finder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00006104  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  00006104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000052fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08004304  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006104  2**0
                  CONTENTS
 10 .bss          0000027c  20000104  20000104  00006104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  00006104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000beb4  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019be  00000000  00000000  00011fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  000139a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076d  00000000  00000000  00014330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fef1  00000000  00000000  00014a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1db  00000000  00000000  0003498e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1172  00000000  00000000  00042b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103cdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf0  00000000  00000000  00103d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00106910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004268 	.word	0x08004268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	08004268 	.word	0x08004268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb4f 	bl	8000928 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t i = 0, ret;
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f8a5 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f973 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000296:	f000 f941 	bl	800051c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800029a:	f000 f8ff 	bl	800049c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, Data_line, sizeof(Data_line), HAL_MAX_DELAY);
 800029e:	f04f 33ff 	mov.w	r3, #4294967295
 80002a2:	2223      	movs	r2, #35	@ 0x23
 80002a4:	4942      	ldr	r1, [pc, #264]	@ (80003b0 <main+0x130>)
 80002a6:	4843      	ldr	r0, [pc, #268]	@ (80003b4 <main+0x134>)
 80002a8:	f002 fec4 	bl	8003034 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, clk_line, sizeof(clk_line), HAL_MAX_DELAY);
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
 80002b0:	2223      	movs	r2, #35	@ 0x23
 80002b2:	4941      	ldr	r1, [pc, #260]	@ (80003b8 <main+0x138>)
 80002b4:	483f      	ldr	r0, [pc, #252]	@ (80003b4 <main+0x134>)
 80002b6:	f002 febd 	bl	8003034 <HAL_UART_Transmit>
  HAL_Delay(200);
 80002ba:	20c8      	movs	r0, #200	@ 0xc8
 80002bc:	f000 fb9a 	bl	80009f4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	2231      	movs	r2, #49	@ 0x31
 80002c6:	493d      	ldr	r1, [pc, #244]	@ (80003bc <main+0x13c>)
 80002c8:	483a      	ldr	r0, [pc, #232]	@ (80003b4 <main+0x134>)
 80002ca:	f002 feb3 	bl	8003034 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 80002ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d2:	483b      	ldr	r0, [pc, #236]	@ (80003c0 <main+0x140>)
 80002d4:	f000 fe22 	bl	8000f1c <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d106      	bne.n	80002ec <main+0x6c>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e6:	f000 fe31 	bl	8000f4c <HAL_GPIO_WritePin>
 80002ea:	e7f0      	b.n	80002ce <main+0x4e>

	  else{
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2120      	movs	r1, #32
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f4:	f000 fe2a 	bl	8000f4c <HAL_GPIO_WritePin>
	  	  /*-[ I2C Bus Scanning ]-*/
	      HAL_UART_Transmit(&huart2, RunMSG, sizeof(RunMSG), HAL_MAX_DELAY);
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	2218      	movs	r2, #24
 80002fe:	4931      	ldr	r1, [pc, #196]	@ (80003c4 <main+0x144>)
 8000300:	482c      	ldr	r0, [pc, #176]	@ (80003b4 <main+0x134>)
 8000302:	f002 fe97 	bl	8003034 <HAL_UART_Transmit>
	      for(i=1; i<255; i++)
 8000306:	2301      	movs	r3, #1
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	e028      	b.n	800035e <main+0xde>
	      {
	          ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 10, 50);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	b29b      	uxth	r3, r3
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	b299      	uxth	r1, r3
 8000314:	2332      	movs	r3, #50	@ 0x32
 8000316:	220a      	movs	r2, #10
 8000318:	482b      	ldr	r0, [pc, #172]	@ (80003c8 <main+0x148>)
 800031a:	f000 feca 	bl	80010b2 <HAL_I2C_IsDeviceReady>
 800031e:	4603      	mov	r3, r0
 8000320:	71bb      	strb	r3, [r7, #6]
	          if (ret != HAL_OK) /* No ACK Received At That Address */
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d007      	beq.n	8000338 <main+0xb8>
	          {
	              HAL_UART_Transmit(&huart2, Space, sizeof(Space), HAL_MAX_DELAY);
 8000328:	f04f 33ff 	mov.w	r3, #4294967295
 800032c:	2203      	movs	r2, #3
 800032e:	4927      	ldr	r1, [pc, #156]	@ (80003cc <main+0x14c>)
 8000330:	4820      	ldr	r0, [pc, #128]	@ (80003b4 <main+0x134>)
 8000332:	f002 fe7f 	bl	8003034 <HAL_UART_Transmit>
 8000336:	e00f      	b.n	8000358 <main+0xd8>
	          }
	          else if(ret == HAL_OK)
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d10c      	bne.n	8000358 <main+0xd8>
	          {
	              sprintf((char *)Buffer, "0x%X", i);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	461a      	mov	r2, r3
 8000342:	4923      	ldr	r1, [pc, #140]	@ (80003d0 <main+0x150>)
 8000344:	4823      	ldr	r0, [pc, #140]	@ (80003d4 <main+0x154>)
 8000346:	f003 faef 	bl	8003928 <siprintf>
	              HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 800034a:	f04f 33ff 	mov.w	r3, #4294967295
 800034e:	2232      	movs	r2, #50	@ 0x32
 8000350:	4920      	ldr	r1, [pc, #128]	@ (80003d4 <main+0x154>)
 8000352:	4818      	ldr	r0, [pc, #96]	@ (80003b4 <main+0x134>)
 8000354:	f002 fe6e 	bl	8003034 <HAL_UART_Transmit>
	      for(i=1; i<255; i++)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	3301      	adds	r3, #1
 800035c:	71fb      	strb	r3, [r7, #7]
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2bff      	cmp	r3, #255	@ 0xff
 8000362:	d1d3      	bne.n	800030c <main+0x8c>
	          }
	      }
	      HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	220d      	movs	r2, #13
 800036a:	491b      	ldr	r1, [pc, #108]	@ (80003d8 <main+0x158>)
 800036c:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <main+0x134>)
 800036e:	f002 fe61 	bl	8003034 <HAL_UART_Transmit>
	      HAL_Delay(100);
 8000372:	2064      	movs	r0, #100	@ 0x64
 8000374:	f000 fb3e 	bl	80009f4 <HAL_Delay>
	      HAL_UART_Transmit(&huart2, Data_line, sizeof(Data_line), HAL_MAX_DELAY);
 8000378:	f04f 33ff 	mov.w	r3, #4294967295
 800037c:	2223      	movs	r2, #35	@ 0x23
 800037e:	490c      	ldr	r1, [pc, #48]	@ (80003b0 <main+0x130>)
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <main+0x134>)
 8000382:	f002 fe57 	bl	8003034 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, clk_line, sizeof(clk_line), HAL_MAX_DELAY);
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	2223      	movs	r2, #35	@ 0x23
 800038c:	490a      	ldr	r1, [pc, #40]	@ (80003b8 <main+0x138>)
 800038e:	4809      	ldr	r0, [pc, #36]	@ (80003b4 <main+0x134>)
 8000390:	f002 fe50 	bl	8003034 <HAL_UART_Transmit>
	      HAL_Delay(200);
 8000394:	20c8      	movs	r0, #200	@ 0xc8
 8000396:	f000 fb2d 	bl	80009f4 <HAL_Delay>
	      HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 800039a:	f04f 33ff 	mov.w	r3, #4294967295
 800039e:	2231      	movs	r2, #49	@ 0x31
 80003a0:	4906      	ldr	r1, [pc, #24]	@ (80003bc <main+0x13c>)
 80003a2:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <main+0x134>)
 80003a4:	f002 fe46 	bl	8003034 <HAL_UART_Transmit>
	      HAL_Delay(100);
 80003a8:	2064      	movs	r0, #100	@ 0x64
 80003aa:	f000 fb23 	bl	80009f4 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 80003ae:	e78e      	b.n	80002ce <main+0x4e>
 80003b0:	20000060 	.word	0x20000060
 80003b4:	20000174 	.word	0x20000174
 80003b8:	20000084 	.word	0x20000084
 80003bc:	2000001c 	.word	0x2000001c
 80003c0:	48000800 	.word	0x48000800
 80003c4:	20000004 	.word	0x20000004
 80003c8:	20000120 	.word	0x20000120
 80003cc:	20000000 	.word	0x20000000
 80003d0:	08004280 	.word	0x08004280
 80003d4:	200001fc 	.word	0x200001fc
 80003d8:	20000050 	.word	0x20000050

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b0a6      	sub	sp, #152	@ 0x98
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003e6:	2228      	movs	r2, #40	@ 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fabc 	bl	8003968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2258      	movs	r2, #88	@ 0x58
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 faae 	bl	8003968 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	2302      	movs	r3, #2
 800040e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000414:	2310      	movs	r3, #16
 8000416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000428:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800042c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800043a:	4618      	mov	r0, r3
 800043c:	f001 f91a 	bl	8001674 <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000446:	f000 f8ff 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2302      	movs	r3, #2
 8000450:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800045a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000460:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000464:	2102      	movs	r1, #2
 8000466:	4618      	mov	r0, r3
 8000468:	f002 f958 	bl	800271c <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000472:	f000 f8e9 	bl	8000648 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000476:	2322      	movs	r3, #34	@ 0x22
 8000478:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4618      	mov	r0, r3
 8000486:	f002 fb69 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000490:	f000 f8da 	bl	8000648 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3798      	adds	r7, #152	@ 0x98
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000514 <MX_I2C1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000518 <MX_I2C1_Init+0x7c>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004be:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ca:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d6:	480e      	ldr	r0, [pc, #56]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004d8:	f000 fd50 	bl	8000f7c <HAL_I2C_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004e2:	f000 f8b1 	bl	8000648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4809      	ldr	r0, [pc, #36]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004ea:	f001 f82b 	bl	8001544 <HAL_I2CEx_ConfigAnalogFilter>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f4:	f000 f8a8 	bl	8000648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <MX_I2C1_Init+0x74>)
 80004fc:	f001 f86d 	bl	80015da <HAL_I2CEx_ConfigDigitalFilter>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000506:	f000 f89f 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000120 	.word	0x20000120
 8000514:	40005400 	.word	0x40005400
 8000518:	00201d2b 	.word	0x00201d2b

0800051c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000522:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <MX_USART2_UART_Init+0x5c>)
 8000524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	@ (8000574 <MX_USART2_UART_Init+0x58>)
 8000560:	f002 fd1a 	bl	8002f98 <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800056a:	f000 f86d 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000174 	.word	0x20000174
 8000578:	40004400 	.word	0x40004400

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	4b2b      	ldr	r3, [pc, #172]	@ (8000640 <MX_GPIO_Init+0xc4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a2a      	ldr	r2, [pc, #168]	@ (8000640 <MX_GPIO_Init+0xc4>)
 8000598:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a24      	ldr	r2, [pc, #144]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a18      	ldr	r2, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_GPIO_Init+0xc4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f000 fca7 	bl	8000f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000604:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <MX_GPIO_Init+0xc8>)
 8000616:	f000 faf7 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061a:	2320      	movs	r3, #32
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f000 fae8 	bl	8000c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	@ 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	48000800 	.word	0x48000800

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <Error_Handler+0x8>

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <HAL_MspInit+0x44>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <HAL_MspInit+0x44>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <HAL_MspInit+0x44>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <HAL_MspInit+0x44>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <HAL_MspInit+0x44>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <HAL_MspInit+0x44>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800068a:	2007      	movs	r0, #7
 800068c:	f000 fa88 	bl	8000ba0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <HAL_I2C_MspInit+0xb8>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d145      	bne.n	800074a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a1f      	ldr	r2, [pc, #124]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 80006dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070e:	f000 fa7b 	bl	8000c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000716:	2312      	movs	r3, #18
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000722:	2304      	movs	r3, #4
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_I2C_MspInit+0xc0>)
 800072e:	f000 fa6b 	bl	8000c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_I2C_MspInit+0xbc>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	@ 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40005400 	.word	0x40005400
 8000758:	40021000 	.word	0x40021000
 800075c:	48000400 	.word	0x48000400

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <HAL_UART_MspInit+0x7c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d128      	bne.n	80007d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_UART_MspInit+0x80>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <HAL_UART_MspInit+0x80>)
 8000788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_UART_MspInit+0x80>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_UART_MspInit+0x80>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <HAL_UART_MspInit+0x80>)
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_UART_MspInit+0x80>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b2:	230c      	movs	r3, #12
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c2:	2307      	movs	r3, #7
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f000 fa1a 	bl	8000c08 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f8bb 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f003 f880 	bl	8003978 <__errno>
 8000878:	4603      	mov	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20010000 	.word	0x20010000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	20000230 	.word	0x20000230
 80008ac:	20000380 	.word	0x20000380

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800090c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d8:	f7ff ffea 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f003 f83f 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000906:	f7ff fcbb 	bl	8000280 <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800090c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000918:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 800091c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000920:	20000380 	.word	0x20000380

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <HAL_Init+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <HAL_Init+0x28>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f931 	bl	8000ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fe86 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f93b 	bl	8000bee <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f911 	bl	8000bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000a8 	.word	0x200000a8
 80009ac:	200000b0 	.word	0x200000b0
 80009b0:	200000ac 	.word	0x200000ac

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	200000b0 	.word	0x200000b0
 80009d8:	20000234 	.word	0x20000234

080009dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;  
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000234 	.word	0x20000234

080009f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff ffee 	bl	80009dc <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffde 	bl	80009dc <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000b0 	.word	0x200000b0

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	@ (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	@ (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	@ 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	@ 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b6c:	d301      	bcc.n	8000b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00f      	b.n	8000b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <SysTick_Config+0x40>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f7ff ff8e 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <SysTick_Config+0x40>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <SysTick_Config+0x40>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff47 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc8:	f7ff ff5c 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f7ff ff8e 	bl	8000af4 <NVIC_EncodePriority>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff5d 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffb0 	bl	8000b5c <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e160      	b.n	8000eda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 8152 	beq.w	8000ed4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <HAL_GPIO_Init+0x40>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	f003 0201 	and.w	r2, r3, #1
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d017      	beq.n	8000ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	6939      	ldr	r1, [r7, #16]
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0203 	and.w	r2, r3, #3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80ac 	beq.w	8000ed4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a5d      	ldr	r2, [pc, #372]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d94:	4a59      	ldr	r2, [pc, #356]	@ (8000efc <HAL_GPIO_Init+0x2f4>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dbe:	d025      	beq.n	8000e0c <HAL_GPIO_Init+0x204>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <HAL_GPIO_Init+0x2f8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d01f      	beq.n	8000e08 <HAL_GPIO_Init+0x200>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a4e      	ldr	r2, [pc, #312]	@ (8000f04 <HAL_GPIO_Init+0x2fc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d019      	beq.n	8000e04 <HAL_GPIO_Init+0x1fc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8000f08 <HAL_GPIO_Init+0x300>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d013      	beq.n	8000e00 <HAL_GPIO_Init+0x1f8>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a4c      	ldr	r2, [pc, #304]	@ (8000f0c <HAL_GPIO_Init+0x304>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d00d      	beq.n	8000dfc <HAL_GPIO_Init+0x1f4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4b      	ldr	r2, [pc, #300]	@ (8000f10 <HAL_GPIO_Init+0x308>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x1f0>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a4a      	ldr	r2, [pc, #296]	@ (8000f14 <HAL_GPIO_Init+0x30c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d101      	bne.n	8000df4 <HAL_GPIO_Init+0x1ec>
 8000df0:	2306      	movs	r3, #6
 8000df2:	e00c      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000df4:	2307      	movs	r3, #7
 8000df6:	e00a      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000df8:	2305      	movs	r3, #5
 8000dfa:	e008      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000e00:	2303      	movs	r3, #3
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x206>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e1e:	4937      	ldr	r1, [pc, #220]	@ (8000efc <HAL_GPIO_Init+0x2f4>)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e50:	4a31      	ldr	r2, [pc, #196]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7a:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <HAL_GPIO_Init+0x310>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f47f ae97 	bne.w	8000c18 <HAL_GPIO_Init+0x10>
  }
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	48001400 	.word	0x48001400
 8000f14:	48001800 	.word	0x48001800
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e08d      	b.n	80010aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fb7a 	bl	800069c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2224      	movs	r2, #36	@ 0x24
 8000fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d107      	bne.n	8000ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	e006      	b.n	8001004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d108      	bne.n	800101e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	e007      	b.n	800102e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800102c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800103c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69d9      	ldr	r1, [r3, #28]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2220      	movs	r2, #32
 8001096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b08a      	sub	sp, #40	@ 0x28
 80010b6:	af02      	add	r7, sp, #8
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	f040 80d6 	bne.w	8001280 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010e2:	d101      	bne.n	80010e8 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80010e4:	2302      	movs	r3, #2
 80010e6:	e0cc      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_I2C_IsDeviceReady+0x44>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e0c5      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2224      	movs	r2, #36	@ 0x24
 8001102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d107      	bne.n	8001124 <HAL_I2C_IsDeviceReady+0x72>
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800111e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001122:	e006      	b.n	8001132 <HAL_I2C_IsDeviceReady+0x80>
 8001124:	897b      	ldrh	r3, [r7, #10]
 8001126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800112a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800112e:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fc50 	bl	80009dc <HAL_GetTick>
 800113c:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b20      	cmp	r3, #32
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b10      	cmp	r3, #16
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800116a:	e034      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d01a      	beq.n	80011aa <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001174:	f7ff fc32 	bl	80009dc <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d302      	bcc.n	800118a <HAL_I2C_IsDeviceReady+0xd8>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2220      	movs	r2, #32
 800118e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f043 0220 	orr.w	r2, r3, #32
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06b      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b20      	cmp	r3, #32
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	bf0c      	ite	eq
 80011ce:	2301      	moveq	r3, #1
 80011d0:	2300      	movne	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <HAL_I2C_IsDeviceReady+0x130>
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0c4      	beq.n	800116c <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d01a      	beq.n	8001226 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f869 	bl	80012d2 <I2C_WaitOnFlagUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e03b      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2220      	movs	r2, #32
 8001210:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2220      	movs	r2, #32
 8001216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e02d      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	2120      	movs	r1, #32
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f84e 	bl	80012d2 <I2C_WaitOnFlagUntilTimeout>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e020      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2210      	movs	r2, #16
 8001246:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2220      	movs	r2, #32
 800124e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	f63f af56 	bhi.w	800110c <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2220      	movs	r2, #32
 8001264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126c:	f043 0220 	orr.w	r2, r3, #32
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001280:	2302      	movs	r3, #2
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b02      	cmp	r3, #2
 800129e:	d103      	bne.n	80012a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d007      	beq.n	80012c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	619a      	str	r2, [r3, #24]
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012e2:	e03b      	b.n	800135c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f84b 	bl	8001384 <I2C_IsErrorOccurred>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e041      	b.n	800137c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fe:	d02d      	beq.n	800135c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001300:	f7ff fb6c 	bl	80009dc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d302      	bcc.n	8001316 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d122      	bne.n	800135c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699a      	ldr	r2, [r3, #24]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4013      	ands	r3, r2
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	429a      	cmp	r2, r3
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	429a      	cmp	r2, r3
 8001332:	d113      	bne.n	800135c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	f043 0220 	orr.w	r2, r3, #32
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2220      	movs	r2, #32
 8001344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00f      	b.n	800137c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4013      	ands	r3, r2
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	429a      	cmp	r2, r3
 8001378:	d0b4      	beq.n	80012e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d068      	beq.n	8001482 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2210      	movs	r2, #16
 80013b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80013b8:	e049      	b.n	800144e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d045      	beq.n	800144e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013c2:	f7ff fb0b 	bl	80009dc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d302      	bcc.n	80013d8 <I2C_IsErrorOccurred+0x54>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d13a      	bne.n	800144e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80013ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80013fa:	d121      	bne.n	8001440 <I2C_IsErrorOccurred+0xbc>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001402:	d01d      	beq.n	8001440 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001404:	7cfb      	ldrb	r3, [r7, #19]
 8001406:	2b20      	cmp	r3, #32
 8001408:	d01a      	beq.n	8001440 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001418:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800141a:	f7ff fadf 	bl	80009dc <HAL_GetTick>
 800141e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001420:	e00e      	b.n	8001440 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001422:	f7ff fadb 	bl	80009dc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b19      	cmp	r3, #25
 800142e:	d907      	bls.n	8001440 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800143e:	e006      	b.n	800144e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b20      	cmp	r3, #32
 800144c:	d1e9      	bne.n	8001422 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b20      	cmp	r3, #32
 800145a:	d003      	beq.n	8001464 <I2C_IsErrorOccurred+0xe0>
 800145c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0aa      	beq.n	80013ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2220      	movs	r2, #32
 8001472:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80014f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d01c      	beq.n	8001532 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff fec6 	bl	800128a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <I2C_IsErrorOccurred+0x1bc>)
 800150a:	400b      	ands	r3, r1
 800150c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	431a      	orrs	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2220      	movs	r2, #32
 800151e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001532:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001536:	4618      	mov	r0, r3
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	fe00e800 	.word	0xfe00e800

08001544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b20      	cmp	r3, #32
 8001558:	d138      	bne.n	80015cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001564:	2302      	movs	r3, #2
 8001566:	e032      	b.n	80015ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2224      	movs	r2, #36	@ 0x24
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001596:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d139      	bne.n	8001664 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e033      	b.n	8001666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2224      	movs	r2, #36	@ 0x24
 800160a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800162c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001664:	2302      	movs	r3, #2
  }
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800167a:	af00      	add	r7, sp, #0
 800167c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001684:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f001 b83a 	b.w	800270e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 816f 	beq.w	800198e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016b0:	4bb5      	ldr	r3, [pc, #724]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4bb2      	ldr	r3, [pc, #712]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d15c      	bne.n	8001782 <HAL_RCC_OscConfig+0x10e>
 80016c8:	4baf      	ldr	r3, [pc, #700]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d4:	d155      	bne.n	8001782 <HAL_RCC_OscConfig+0x10e>
 80016d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016da:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d102      	bne.n	8001708 <HAL_RCC_OscConfig+0x94>
 8001702:	4ba1      	ldr	r3, [pc, #644]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	e015      	b.n	8001734 <HAL_RCC_OscConfig+0xc0>
 8001708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800170c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800171c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001720:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001724:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001730:	4b95      	ldr	r3, [pc, #596]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001738:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800173c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001740:	fa92 f2a2 	rbit	r2, r2
 8001744:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001748:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800174c:	fab2 f282 	clz	r2, r2
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f002 021f 	and.w	r2, r2, #31
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8111 	beq.w	800198c <HAL_RCC_OscConfig+0x318>
 800176a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 8108 	bne.w	800198c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f000 bfc6 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001786:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12e>
 8001794:	4b7c      	ldr	r3, [pc, #496]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7b      	ldr	r2, [pc, #492]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e036      	b.n	8001810 <HAL_RCC_OscConfig+0x19c>
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x158>
 80017b2:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a74      	ldr	r2, [pc, #464]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b72      	ldr	r3, [pc, #456]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a71      	ldr	r2, [pc, #452]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e021      	b.n	8001810 <HAL_RCC_OscConfig+0x19c>
 80017cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x184>
 80017de:	4b6a      	ldr	r3, [pc, #424]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a69      	ldr	r2, [pc, #420]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b67      	ldr	r3, [pc, #412]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a66      	ldr	r2, [pc, #408]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x19c>
 80017f8:	4b63      	ldr	r3, [pc, #396]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a62      	ldr	r2, [pc, #392]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b60      	ldr	r3, [pc, #384]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a5f      	ldr	r2, [pc, #380]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001814:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d059      	beq.n	80018d4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f8dc 	bl	80009dc <HAL_GetTick>
 8001824:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182a:	f7ff f8d7 	bl	80009dc <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	@ 0x64
 8001838:	d902      	bls.n	8001840 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	f000 bf67 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001844:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001854:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d102      	bne.n	8001872 <HAL_RCC_OscConfig+0x1fe>
 800186c:	4b46      	ldr	r3, [pc, #280]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x22a>
 8001872:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001876:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001886:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800188a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800188e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018a2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80018a6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80018aa:	fa92 f2a2 	rbit	r2, r2
 80018ae:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80018b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018b6:	fab2 f282 	clz	r2, r2
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	f042 0220 	orr.w	r2, r2, #32
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f002 021f 	and.w	r2, r2, #31
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f202 	lsl.w	r2, r1, r2
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ab      	beq.n	800182a <HAL_RCC_OscConfig+0x1b6>
 80018d2:	e05c      	b.n	800198e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f882 	bl	80009dc <HAL_GetTick>
 80018d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018de:	f7ff f87d 	bl	80009dc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d902      	bls.n	80018f4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f000 bf0d 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 80018f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001908:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d102      	bne.n	8001926 <HAL_RCC_OscConfig+0x2b2>
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x2de>
 8001926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800192a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800193a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800193e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001942:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_RCC_OscConfig+0x314>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001956:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800195a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001966:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800196a:	fab2 f282 	clz	r2, r2
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f042 0220 	orr.w	r2, r2, #32
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f002 021f 	and.w	r2, r2, #31
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ab      	bne.n	80018de <HAL_RCC_OscConfig+0x26a>
 8001986:	e002      	b.n	800198e <HAL_RCC_OscConfig+0x31a>
 8001988:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001992:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 817f 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b0:	4ba4      	ldr	r3, [pc, #656]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d173      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x430>
 80019bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019c8:	d16c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x430>
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80019dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0x386>
 80019f4:	4b93      	ldr	r3, [pc, #588]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x3ae>
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a12:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a1e:	4b89      	ldr	r3, [pc, #548]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	2202      	movs	r2, #2
 8001a24:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a28:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001a34:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00a      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3f6>
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f000 be52 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	21f8      	movs	r1, #248	@ 0xf8
 8001a80:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001a88:	fa91 f1a1 	rbit	r1, r1
 8001a8c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001a90:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a94:	fab1 f181 	clz	r1, r1
 8001a98:	b2c9      	uxtb	r1, r1
 8001a9a:	408b      	lsls	r3, r1
 8001a9c:	4969      	ldr	r1, [pc, #420]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e0fe      	b.n	8001ca2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8088 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x552>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001ac8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ad6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe ff7b 	bl	80009dc <HAL_GetTick>
 8001ae6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aec:	f7fe ff76 	bl	80009dc <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 be06 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001b14:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4be>
 8001b2c:	4b45      	ldr	r3, [pc, #276]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	e013      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b56:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b60:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b64:	fa92 f2a2 	rbit	r2, r2
 8001b68:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0af      	beq.n	8001aec <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	21f8      	movs	r1, #248	@ 0xf8
 8001ba2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001baa:	fa91 f1a1 	rbit	r1, r1
 8001bae:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001bb2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001bb6:	fab1 f181 	clz	r1, r1
 8001bba:	b2c9      	uxtb	r1, r1
 8001bbc:	408b      	lsls	r3, r1
 8001bbe:	4921      	ldr	r1, [pc, #132]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e06d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x62e>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001bd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001be6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	461a      	mov	r2, r3
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fef3 	bl	80009dc <HAL_GetTick>
 8001bf6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7fe feee 	bl	80009dc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d902      	bls.n	8001c12 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	f000 bd7e 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5d4>
 8001c3c:	4b01      	ldr	r3, [pc, #4]	@ (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e016      	b.n	8001c70 <HAL_RCC_OscConfig+0x5fc>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c6c:	4bbf      	ldr	r3, [pc, #764]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	2202      	movs	r2, #2
 8001c72:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c76:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c82:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 021f 	and.w	r2, r2, #31
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ac      	bne.n	8001bfc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8113 	beq.w	8001ede <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d07c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x74e>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4ba2      	ldr	r3, [pc, #648]	@ (8001f70 <HAL_RCC_OscConfig+0x8fc>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	461a      	mov	r2, r3
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe fe73 	bl	80009dc <HAL_GetTick>
 8001cf6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7fe fe6e 	bl	80009dc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d902      	bls.n	8001d12 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f000 bcfe 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001d12:	2302      	movs	r3, #2
 8001d14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b7e      	ldr	r3, [pc, #504]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d7e:	2102      	movs	r1, #2
 8001d80:	6019      	str	r1, [r3, #0]
 8001d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f1a3 	rbit	r1, r3
 8001d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d98:	6019      	str	r1, [r3, #0]
  return result;
 8001d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d09d      	beq.n	8001cfc <HAL_RCC_OscConfig+0x688>
 8001dc0:	e08d      	b.n	8001ede <HAL_RCC_OscConfig+0x86a>
 8001dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001de4:	601a      	str	r2, [r3, #0]
  return result;
 8001de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b5d      	ldr	r3, [pc, #372]	@ (8001f70 <HAL_RCC_OscConfig+0x8fc>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe fdea 	bl	80009dc <HAL_GetTick>
 8001e08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7fe fde5 	bl	80009dc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d902      	bls.n	8001e24 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	f000 bc75 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e50:	2202      	movs	r2, #2
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e74:	2202      	movs	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b36      	ldr	r3, [pc, #216]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	6019      	str	r1, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f1a3 	rbit	r1, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001eb6:	6019      	str	r1, [r3, #0]
  return result;
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d197      	bne.n	8001e0e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 81a5 	beq.w	800223e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_RCC_OscConfig+0x900>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d121      	bne.n	8001f84 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_RCC_OscConfig+0x900>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_RCC_OscConfig+0x900>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fd46 	bl	80009dc <HAL_GetTick>
 8001f50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e010      	b.n	8001f78 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7fe fd41 	bl	80009dc <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d908      	bls.n	8001f78 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e3d1      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	10908120 	.word	0x10908120
 8001f74:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b8d      	ldr	r3, [pc, #564]	@ (80021b0 <HAL_RCC_OscConfig+0xb3c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0e8      	beq.n	8001f56 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x92e>
 8001f94:	4b87      	ldr	r3, [pc, #540]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a86      	ldr	r2, [pc, #536]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e035      	b.n	800200e <HAL_RCC_OscConfig+0x99a>
 8001fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x958>
 8001fb2:	4b80      	ldr	r3, [pc, #512]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a7f      	ldr	r2, [pc, #508]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e020      	b.n	800200e <HAL_RCC_OscConfig+0x99a>
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x982>
 8001fdc:	4b75      	ldr	r3, [pc, #468]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a74      	ldr	r2, [pc, #464]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a71      	ldr	r2, [pc, #452]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x99a>
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b6c      	ldr	r3, [pc, #432]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a6b      	ldr	r2, [pc, #428]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002012:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8081 	beq.w	8002122 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe fcdc 	bl	80009dc <HAL_GetTick>
 8002024:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fcd7 	bl	80009dc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e365      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8002042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002046:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002052:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002060:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002076:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002084:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002088:	601a      	str	r2, [r3, #0]
  return result;
 800208a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002092:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_OscConfig+0xa3a>
 80020a8:	4b42      	ldr	r3, [pc, #264]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	e013      	b.n	80020d6 <HAL_RCC_OscConfig+0xa62>
 80020ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020cc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020da:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020de:	2102      	movs	r1, #2
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	fa92 f1a2 	rbit	r1, r2
 80020f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020f4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020f8:	6011      	str	r1, [r2, #0]
  return result;
 80020fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020fe:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d084      	beq.n	800202a <HAL_RCC_OscConfig+0x9b6>
 8002120:	e083      	b.n	800222a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fc5b 	bl	80009dc <HAL_GetTick>
 8002126:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fc56 	bl	80009dc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2e4      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8002144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002148:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002154:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002162:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002178:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002186:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800218a:	601a      	str	r2, [r3, #0]
  return result;
 800218c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002190:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002194:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0xb44>
 80021aa:	4b02      	ldr	r3, [pc, #8]	@ (80021b4 <HAL_RCC_OscConfig+0xb40>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	e017      	b.n	80021e0 <HAL_RCC_OscConfig+0xb6c>
 80021b0:	40007000 	.word	0x40007000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4bb3      	ldr	r3, [pc, #716]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021e4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021e8:	2102      	movs	r1, #2
 80021ea:	6011      	str	r1, [r2, #0]
 80021ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	fa92 f1a2 	rbit	r1, r2
 80021fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021fe:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002202:	6011      	str	r1, [r2, #0]
  return result;
 8002204:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002208:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d180      	bne.n	800212c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b9e      	ldr	r3, [pc, #632]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a9d      	ldr	r2, [pc, #628]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002242:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 825e 	beq.w	800270c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b96      	ldr	r3, [pc, #600]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	f000 821f 	beq.w	800269c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 8170 	bne.w	8002550 <HAL_RCC_OscConfig+0xedc>
 8002270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002274:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002278:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800227c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002282:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002294:	601a      	str	r2, [r3, #0]
  return result;
 8002296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800229e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fb91 	bl	80009dc <HAL_GetTick>
 80022ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fb8c 	bl	80009dc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e21c      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002302:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_RCC_OscConfig+0xcaa>
 8002318:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e027      	b.n	800236e <HAL_RCC_OscConfig+0xcfa>
 800231e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002322:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002326:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002330:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002348:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800234c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002364:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4b50      	ldr	r3, [pc, #320]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002372:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002376:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800237a:	6011      	str	r1, [r2, #0]
 800237c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002380:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	fa92 f1a2 	rbit	r1, r2
 800238a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002392:	6011      	str	r1, [r2, #0]
  return result;
 8002394:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002398:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d182      	bne.n	80022c0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	4937      	ldr	r1, [pc, #220]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80023d4:	4b35      	ldr	r3, [pc, #212]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80023dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a19      	ldr	r1, [r3, #32]
 80023e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	492d      	ldr	r1, [pc, #180]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002400:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002404:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002420:	601a      	str	r2, [r3, #0]
  return result;
 8002422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002426:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800242a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002436:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe facb 	bl	80009dc <HAL_GetTick>
 8002446:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244a:	e009      	b.n	8002460 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fac6 	bl	80009dc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e156      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002468:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800248e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0xe3c>
 80024a4:	4b01      	ldr	r3, [pc, #4]	@ (80024ac <HAL_RCC_OscConfig+0xe38>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	e02a      	b.n	8002500 <HAL_RCC_OscConfig+0xe8c>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	4b86      	ldr	r3, [pc, #536]	@ (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002504:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002508:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002512:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fa92 f1a2 	rbit	r1, r2
 800251c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002520:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002524:	6011      	str	r1, [r2, #0]
  return result;
 8002526:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800252a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	f43f af7f 	beq.w	800244c <HAL_RCC_OscConfig+0xdd8>
 800254e:	e0dd      	b.n	800270c <HAL_RCC_OscConfig+0x1098>
 8002550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002554:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800255c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002562:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f2a3 	rbit	r2, r3
 800256c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002570:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002574:	601a      	str	r2, [r3, #0]
  return result;
 8002576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800257e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800258a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fa21 	bl	80009dc <HAL_GetTick>
 800259a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e009      	b.n	80025b4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fa1c 	bl	80009dc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0ac      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 80025b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025d8:	601a      	str	r2, [r3, #0]
  return result;
 80025da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025de:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_OscConfig+0xf8a>
 80025f8:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e027      	b.n	800264e <HAL_RCC_OscConfig+0xfda>
 80025fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002602:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002610:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002628:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800262c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	4b33      	ldr	r3, [pc, #204]	@ (8002718 <HAL_RCC_OscConfig+0x10a4>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002652:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002656:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800265a:	6011      	str	r1, [r2, #0]
 800265c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002660:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fa92 f1a2 	rbit	r1, r2
 800266a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800266e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002672:	6011      	str	r1, [r2, #0]
  return result;
 8002674:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002678:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d182      	bne.n	80025a0 <HAL_RCC_OscConfig+0xf2c>
 800269a:	e037      	b.n	800270c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e02e      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026b8:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026c4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80026c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d117      	bne.n	8002708 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026dc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b09e      	sub	sp, #120	@ 0x78
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e162      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b90      	ldr	r3, [pc, #576]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b8d      	ldr	r3, [pc, #564]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	498b      	ldr	r1, [pc, #556]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b89      	ldr	r3, [pc, #548]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e14a      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b82      	ldr	r3, [pc, #520]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	497f      	ldr	r1, [pc, #508]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80dc 	beq.w	8002948 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d13c      	bne.n	8002812 <HAL_RCC_ClockConfig+0xf6>
 8002798:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800279c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xa6>
 80027bc:	4b6f      	ldr	r3, [pc, #444]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e00f      	b.n	80027e2 <HAL_RCC_ClockConfig+0xc6>
 80027c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80027d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80027d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027de:	4b67      	ldr	r3, [pc, #412]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d17b      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0f3      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d13c      	bne.n	8002894 <HAL_RCC_ClockConfig+0x178>
 800281a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800281e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_RCC_ClockConfig+0x128>
 800283e:	4b4f      	ldr	r3, [pc, #316]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e00f      	b.n	8002864 <HAL_RCC_ClockConfig+0x148>
 8002844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	647b      	str	r3, [r7, #68]	@ 0x44
 8002852:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002856:	643b      	str	r3, [r7, #64]	@ 0x40
 8002858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002860:	4b46      	ldr	r3, [pc, #280]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002868:	63ba      	str	r2, [r7, #56]	@ 0x38
 800286a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f042 0220 	orr.w	r2, r2, #32
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d13a      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b2      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_ClockConfig+0x1a0>
 80028b6:	4b31      	ldr	r3, [pc, #196]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e00d      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1bc>
 80028bc:	2302      	movs	r3, #2
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c8:	2302      	movs	r3, #2
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	4b29      	ldr	r3, [pc, #164]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	2202      	movs	r2, #2
 80028da:	61ba      	str	r2, [r7, #24]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	fa92 f2a2 	rbit	r2, r2
 80028e2:	617a      	str	r2, [r7, #20]
  return result;
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f002 021f 	and.w	r2, r2, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e079      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	491a      	ldr	r1, [pc, #104]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe f860 	bl	80009dc <HAL_GetTick>
 800291c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe f85c 	bl	80009dc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e061      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_ClockConfig+0x260>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d214      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	4906      	ldr	r1, [pc, #24]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e040      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
 8002978:	40022000 	.word	0x40022000
 800297c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	491a      	ldr	r1, [pc, #104]	@ (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4912      	ldr	r1, [pc, #72]	@ (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029be:	f000 f829 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029c2:	4601      	mov	r1, r0
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029cc:	22f0      	movs	r2, #240	@ 0xf0
 80029ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	60fa      	str	r2, [r7, #12]
  return result;
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	40d3      	lsrs	r3, r2
 80029e2:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <HAL_RCC_ClockConfig+0x2ec>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	fa21 f303 	lsr.w	r3, r1, r3
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <HAL_RCC_ClockConfig+0x2f0>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ee:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_RCC_ClockConfig+0x2f4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd ffae 	bl	8000954 <HAL_InitTick>
  
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3778      	adds	r7, #120	@ 0x78
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08004288 	.word	0x08004288
 8002a0c:	200000a8 	.word	0x200000a8
 8002a10:	200000ac 	.word	0x200000ac

08002a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x36>
 8002a42:	e029      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a46:	613b      	str	r3, [r7, #16]
      break;
 8002a48:	e029      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a70:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e007      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a82:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	693b      	ldr	r3, [r7, #16]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	080042a0 	.word	0x080042a0
 8002ab8:	080042b0 	.word	0x080042b0

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200000a8 	.word	0x200000a8

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ada:	f7ff ffef 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ae8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002aec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	fa92 f2a2 	rbit	r2, r2
 8002af4:	603a      	str	r2, [r7, #0]
  return result;
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	fab2 f282 	clz	r2, r2
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	40d3      	lsrs	r3, r2
 8002b00:	4a04      	ldr	r2, [pc, #16]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08004298 	.word	0x08004298

08002b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b1e:	f7ff ffcd 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b22:	4601      	mov	r1, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b2c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	603a      	str	r2, [r7, #0]
  return result;
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	40d3      	lsrs	r3, r2
 8002b44:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08004298 	.word	0x08004298

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b092      	sub	sp, #72	@ 0x48
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80d4 	beq.w	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b80:	4b4e      	ldr	r3, [pc, #312]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10e      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	4a4a      	ldr	r2, [pc, #296]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	61d3      	str	r3, [r2, #28]
 8002b98:	4b48      	ldr	r3, [pc, #288]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b45      	ldr	r3, [pc, #276]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a41      	ldr	r2, [pc, #260]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7fd ff0b 	bl	80009dc <HAL_GetTick>
 8002bc6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	e008      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fd ff07 	bl	80009dc <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b64      	cmp	r3, #100	@ 0x64
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1d6      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b38      	ldr	r3, [pc, #224]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be8:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8084 	beq.w	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d07c      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c08:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b26      	ldr	r3, [pc, #152]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	2301      	movs	r3, #1
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	2300      	movs	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04b      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fd feb7 	bl	80009dc <HAL_GetTick>
 8002c6e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fd feb3 	bl	80009dc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e180      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c94:	2302      	movs	r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cb6:	4b01      	ldr	r3, [pc, #4]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	e00d      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	10908100 	.word	0x10908100
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	2202      	movs	r2, #2
 8002cda:	613a      	str	r2, [r7, #16]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	fa92 f2a2 	rbit	r2, r2
 8002ce2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	fab2 f282 	clz	r2, r2
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f002 021f 	and.w	r2, r2, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0b7      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d02:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	498c      	ldr	r1, [pc, #560]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a87      	ldr	r2, [pc, #540]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d34:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	497f      	ldr	r1, [pc, #508]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d52:	4b7b      	ldr	r3, [pc, #492]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4978      	ldr	r1, [pc, #480]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d70:	4b73      	ldr	r3, [pc, #460]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4970      	ldr	r1, [pc, #448]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f023 0210 	bic.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4969      	ldr	r1, [pc, #420]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	4961      	ldr	r1, [pc, #388]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dca:	4b5d      	ldr	r3, [pc, #372]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f023 0220 	bic.w	r2, r3, #32
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	495a      	ldr	r1, [pc, #360]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de8:	4b55      	ldr	r3, [pc, #340]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	4952      	ldr	r1, [pc, #328]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e06:	4b4e      	ldr	r3, [pc, #312]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	494b      	ldr	r1, [pc, #300]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e24:	4b46      	ldr	r3, [pc, #280]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4943      	ldr	r1, [pc, #268]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e42:	4b3f      	ldr	r3, [pc, #252]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	493c      	ldr	r1, [pc, #240]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e60:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	4934      	ldr	r1, [pc, #208]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e7e:	4b30      	ldr	r3, [pc, #192]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	492d      	ldr	r1, [pc, #180]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea8:	4925      	ldr	r1, [pc, #148]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002eba:	4b21      	ldr	r3, [pc, #132]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	491e      	ldr	r1, [pc, #120]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	4916      	ldr	r1, [pc, #88]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f02:	490f      	ldr	r1, [pc, #60]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f14:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f32:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f46:	4913      	ldr	r1, [pc, #76]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f58:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	490b      	ldr	r1, [pc, #44]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f82:	4904      	ldr	r1, [pc, #16]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3748      	adds	r7, #72	@ 0x48
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e040      	b.n	800302c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fbd0 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2224      	movs	r2, #36	@ 0x24
 8002fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa86 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f8af 	bl	8003148 <UART_SetConfig>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01b      	b.n	800302c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fb05 	bl	8003634 <UART_CheckIdleState>
 800302a:	4603      	mov	r3, r0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003048:	2b20      	cmp	r3, #32
 800304a:	d177      	bne.n	800313c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Transmit+0x24>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e070      	b.n	800313e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2221      	movs	r2, #33	@ 0x21
 8003068:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800306a:	f7fd fcb7 	bl	80009dc <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003088:	d108      	bne.n	800309c <HAL_UART_Transmit+0x68>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e003      	b.n	80030a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a4:	e02f      	b.n	8003106 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	@ 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fb67 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03b      	b.n	800313e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d8:	b292      	uxth	r2, r2
 80030da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	3302      	adds	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e007      	b.n	80030f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1c9      	bne.n	80030a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	2140      	movs	r1, #64	@ 0x40
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb31 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e005      	b.n	800313e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b92      	ldr	r3, [pc, #584]	@ (80033bc <UART_SetConfig+0x274>)
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	430b      	orrs	r3, r1
 800317e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a80      	ldr	r2, [pc, #512]	@ (80033c0 <UART_SetConfig+0x278>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d120      	bne.n	8003206 <UART_SetConfig+0xbe>
 80031c4:	4b7f      	ldr	r3, [pc, #508]	@ (80033c4 <UART_SetConfig+0x27c>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d817      	bhi.n	8003200 <UART_SetConfig+0xb8>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <UART_SetConfig+0x90>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f5 	.word	0x080031f5
 80031e0:	080031fb 	.word	0x080031fb
 80031e4:	080031ef 	.word	0x080031ef
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e0b5      	b.n	800335a <UART_SetConfig+0x212>
 80031ee:	2302      	movs	r3, #2
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e0b2      	b.n	800335a <UART_SetConfig+0x212>
 80031f4:	2304      	movs	r3, #4
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e0af      	b.n	800335a <UART_SetConfig+0x212>
 80031fa:	2308      	movs	r3, #8
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e0ac      	b.n	800335a <UART_SetConfig+0x212>
 8003200:	2310      	movs	r3, #16
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e0a9      	b.n	800335a <UART_SetConfig+0x212>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6f      	ldr	r2, [pc, #444]	@ (80033c8 <UART_SetConfig+0x280>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d124      	bne.n	800325a <UART_SetConfig+0x112>
 8003210:	4b6c      	ldr	r3, [pc, #432]	@ (80033c4 <UART_SetConfig+0x27c>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003218:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800321c:	d011      	beq.n	8003242 <UART_SetConfig+0xfa>
 800321e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003222:	d817      	bhi.n	8003254 <UART_SetConfig+0x10c>
 8003224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003228:	d011      	beq.n	800324e <UART_SetConfig+0x106>
 800322a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800322e:	d811      	bhi.n	8003254 <UART_SetConfig+0x10c>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <UART_SetConfig+0xf4>
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003238:	d006      	beq.n	8003248 <UART_SetConfig+0x100>
 800323a:	e00b      	b.n	8003254 <UART_SetConfig+0x10c>
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e08b      	b.n	800335a <UART_SetConfig+0x212>
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e088      	b.n	800335a <UART_SetConfig+0x212>
 8003248:	2304      	movs	r3, #4
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e085      	b.n	800335a <UART_SetConfig+0x212>
 800324e:	2308      	movs	r3, #8
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e082      	b.n	800335a <UART_SetConfig+0x212>
 8003254:	2310      	movs	r3, #16
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e07f      	b.n	800335a <UART_SetConfig+0x212>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5b      	ldr	r2, [pc, #364]	@ (80033cc <UART_SetConfig+0x284>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d124      	bne.n	80032ae <UART_SetConfig+0x166>
 8003264:	4b57      	ldr	r3, [pc, #348]	@ (80033c4 <UART_SetConfig+0x27c>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800326c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003270:	d011      	beq.n	8003296 <UART_SetConfig+0x14e>
 8003272:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003276:	d817      	bhi.n	80032a8 <UART_SetConfig+0x160>
 8003278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800327c:	d011      	beq.n	80032a2 <UART_SetConfig+0x15a>
 800327e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003282:	d811      	bhi.n	80032a8 <UART_SetConfig+0x160>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <UART_SetConfig+0x148>
 8003288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800328c:	d006      	beq.n	800329c <UART_SetConfig+0x154>
 800328e:	e00b      	b.n	80032a8 <UART_SetConfig+0x160>
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e061      	b.n	800335a <UART_SetConfig+0x212>
 8003296:	2302      	movs	r3, #2
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e05e      	b.n	800335a <UART_SetConfig+0x212>
 800329c:	2304      	movs	r3, #4
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e05b      	b.n	800335a <UART_SetConfig+0x212>
 80032a2:	2308      	movs	r3, #8
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e058      	b.n	800335a <UART_SetConfig+0x212>
 80032a8:	2310      	movs	r3, #16
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e055      	b.n	800335a <UART_SetConfig+0x212>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a47      	ldr	r2, [pc, #284]	@ (80033d0 <UART_SetConfig+0x288>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d124      	bne.n	8003302 <UART_SetConfig+0x1ba>
 80032b8:	4b42      	ldr	r3, [pc, #264]	@ (80033c4 <UART_SetConfig+0x27c>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80032c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032c4:	d011      	beq.n	80032ea <UART_SetConfig+0x1a2>
 80032c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ca:	d817      	bhi.n	80032fc <UART_SetConfig+0x1b4>
 80032cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032d0:	d011      	beq.n	80032f6 <UART_SetConfig+0x1ae>
 80032d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032d6:	d811      	bhi.n	80032fc <UART_SetConfig+0x1b4>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <UART_SetConfig+0x19c>
 80032dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032e0:	d006      	beq.n	80032f0 <UART_SetConfig+0x1a8>
 80032e2:	e00b      	b.n	80032fc <UART_SetConfig+0x1b4>
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e037      	b.n	800335a <UART_SetConfig+0x212>
 80032ea:	2302      	movs	r3, #2
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e034      	b.n	800335a <UART_SetConfig+0x212>
 80032f0:	2304      	movs	r3, #4
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e031      	b.n	800335a <UART_SetConfig+0x212>
 80032f6:	2308      	movs	r3, #8
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e02e      	b.n	800335a <UART_SetConfig+0x212>
 80032fc:	2310      	movs	r3, #16
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e02b      	b.n	800335a <UART_SetConfig+0x212>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a33      	ldr	r2, [pc, #204]	@ (80033d4 <UART_SetConfig+0x28c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d124      	bne.n	8003356 <UART_SetConfig+0x20e>
 800330c:	4b2d      	ldr	r3, [pc, #180]	@ (80033c4 <UART_SetConfig+0x27c>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003314:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003318:	d011      	beq.n	800333e <UART_SetConfig+0x1f6>
 800331a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800331e:	d817      	bhi.n	8003350 <UART_SetConfig+0x208>
 8003320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003324:	d011      	beq.n	800334a <UART_SetConfig+0x202>
 8003326:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800332a:	d811      	bhi.n	8003350 <UART_SetConfig+0x208>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <UART_SetConfig+0x1f0>
 8003330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003334:	d006      	beq.n	8003344 <UART_SetConfig+0x1fc>
 8003336:	e00b      	b.n	8003350 <UART_SetConfig+0x208>
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e00d      	b.n	800335a <UART_SetConfig+0x212>
 800333e:	2302      	movs	r3, #2
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e00a      	b.n	800335a <UART_SetConfig+0x212>
 8003344:	2304      	movs	r3, #4
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e007      	b.n	800335a <UART_SetConfig+0x212>
 800334a:	2308      	movs	r3, #8
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e004      	b.n	800335a <UART_SetConfig+0x212>
 8003350:	2310      	movs	r3, #16
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e001      	b.n	800335a <UART_SetConfig+0x212>
 8003356:	2310      	movs	r3, #16
 8003358:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003362:	d16b      	bne.n	800343c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d838      	bhi.n	80033dc <UART_SetConfig+0x294>
 800336a:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0x228>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033dd 	.word	0x080033dd
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033dd 	.word	0x080033dd
 8003388:	080033dd 	.word	0x080033dd
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff fb9e 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e024      	b.n	80033e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff fbbc 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 80033a0:	61b8      	str	r0, [r7, #24]
        break;
 80033a2:	e020      	b.n	80033e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <UART_SetConfig+0x290>)
 80033a6:	61bb      	str	r3, [r7, #24]
        break;
 80033a8:	e01d      	b.n	80033e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7ff fb33 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80033ae:	61b8      	str	r0, [r7, #24]
        break;
 80033b0:	e019      	b.n	80033e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e015      	b.n	80033e6 <UART_SetConfig+0x29e>
 80033ba:	bf00      	nop
 80033bc:	efff69f3 	.word	0xefff69f3
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40004c00 	.word	0x40004c00
 80033d4:	40005000 	.word	0x40005000
 80033d8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	77bb      	strb	r3, [r7, #30]
        break;
 80033e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d073      	beq.n	80034d4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	005a      	lsls	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	441a      	add	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d916      	bls.n	8003436 <UART_SetConfig+0x2ee>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340e:	d212      	bcs.n	8003436 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f023 030f 	bic.w	r3, r3, #15
 8003418:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	b29a      	uxth	r2, r3
 8003426:	89fb      	ldrh	r3, [r7, #14]
 8003428:	4313      	orrs	r3, r2
 800342a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	89fa      	ldrh	r2, [r7, #14]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	e04e      	b.n	80034d4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	77bb      	strb	r3, [r7, #30]
 800343a:	e04b      	b.n	80034d4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800343c:	7ffb      	ldrb	r3, [r7, #31]
 800343e:	2b08      	cmp	r3, #8
 8003440:	d827      	bhi.n	8003492 <UART_SetConfig+0x34a>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <UART_SetConfig+0x300>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800346d 	.word	0x0800346d
 800344c:	08003475 	.word	0x08003475
 8003450:	0800347d 	.word	0x0800347d
 8003454:	08003493 	.word	0x08003493
 8003458:	08003483 	.word	0x08003483
 800345c:	08003493 	.word	0x08003493
 8003460:	08003493 	.word	0x08003493
 8003464:	08003493 	.word	0x08003493
 8003468:	0800348b 	.word	0x0800348b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800346c:	f7ff fb32 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8003470:	61b8      	str	r0, [r7, #24]
        break;
 8003472:	e013      	b.n	800349c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7ff fb50 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 8003478:	61b8      	str	r0, [r7, #24]
        break;
 800347a:	e00f      	b.n	800349c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800347c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <UART_SetConfig+0x3a4>)
 800347e:	61bb      	str	r3, [r7, #24]
        break;
 8003480:	e00c      	b.n	800349c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003482:	f7ff fac7 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003486:	61b8      	str	r0, [r7, #24]
        break;
 8003488:	e008      	b.n	800349c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800348a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e004      	b.n	800349c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	77bb      	strb	r3, [r7, #30]
        break;
 800349a:	bf00      	nop
    }

    if (pclk != 0U)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	085a      	lsrs	r2, r3, #1
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d909      	bls.n	80034d0 <UART_SetConfig+0x388>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c2:	d205      	bcs.n	80034d0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	e001      	b.n	80034d4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b098      	sub	sp, #96	@ 0x60
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd f9ca 	bl	80009dc <HAL_GetTick>
 8003648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d12e      	bne.n	80036b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f88c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d021      	beq.n	80036b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003686:	653b      	str	r3, [r7, #80]	@ 0x50
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003690:	647b      	str	r3, [r7, #68]	@ 0x44
 8003692:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800369e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e062      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d149      	bne.n	8003758 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f856 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03c      	beq.n	8003758 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	623b      	str	r3, [r7, #32]
   return(result);
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	617b      	str	r3, [r7, #20]
   return(result);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e011      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3758      	adds	r7, #88	@ 0x58
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e04f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04b      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd f91d 	bl	80009dc <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e04e      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d034      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d031      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d110      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f838 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2208      	movs	r2, #8
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e029      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d111      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f81e 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0a0      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b095      	sub	sp, #84	@ 0x54
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003884:	643b      	str	r3, [r7, #64]	@ 0x40
 8003886:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800388a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e6      	bne.n	8003866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d118      	bne.n	8003906 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800391a:	bf00      	nop
 800391c:	3754      	adds	r7, #84	@ 0x54
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <siprintf>:
 8003928:	b40e      	push	{r1, r2, r3}
 800392a:	b500      	push	{lr}
 800392c:	b09c      	sub	sp, #112	@ 0x70
 800392e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003930:	9002      	str	r0, [sp, #8]
 8003932:	9006      	str	r0, [sp, #24]
 8003934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003938:	4809      	ldr	r0, [pc, #36]	@ (8003960 <siprintf+0x38>)
 800393a:	9107      	str	r1, [sp, #28]
 800393c:	9104      	str	r1, [sp, #16]
 800393e:	4909      	ldr	r1, [pc, #36]	@ (8003964 <siprintf+0x3c>)
 8003940:	f853 2b04 	ldr.w	r2, [r3], #4
 8003944:	9105      	str	r1, [sp, #20]
 8003946:	6800      	ldr	r0, [r0, #0]
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	a902      	add	r1, sp, #8
 800394c:	f000 f994 	bl	8003c78 <_svfiprintf_r>
 8003950:	9b02      	ldr	r3, [sp, #8]
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	b01c      	add	sp, #112	@ 0x70
 8003958:	f85d eb04 	ldr.w	lr, [sp], #4
 800395c:	b003      	add	sp, #12
 800395e:	4770      	bx	lr
 8003960:	200000b4 	.word	0x200000b4
 8003964:	ffff0208 	.word	0xffff0208

08003968 <memset>:
 8003968:	4402      	add	r2, r0
 800396a:	4603      	mov	r3, r0
 800396c:	4293      	cmp	r3, r2
 800396e:	d100      	bne.n	8003972 <memset+0xa>
 8003970:	4770      	bx	lr
 8003972:	f803 1b01 	strb.w	r1, [r3], #1
 8003976:	e7f9      	b.n	800396c <memset+0x4>

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	@ (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	200000b4 	.word	0x200000b4

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	@ (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	@ (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	@ (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 fc66 	bl	8004268 <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	080042fc 	.word	0x080042fc
 80039c0:	080042fc 	.word	0x080042fc
 80039c4:	080042fc 	.word	0x080042fc
 80039c8:	08004300 	.word	0x08004300

080039cc <__retarget_lock_acquire_recursive>:
 80039cc:	4770      	bx	lr

080039ce <__retarget_lock_release_recursive>:
 80039ce:	4770      	bx	lr

080039d0 <_free_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4605      	mov	r5, r0
 80039d4:	2900      	cmp	r1, #0
 80039d6:	d041      	beq.n	8003a5c <_free_r+0x8c>
 80039d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039dc:	1f0c      	subs	r4, r1, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bfb8      	it	lt
 80039e2:	18e4      	addlt	r4, r4, r3
 80039e4:	f000 f8e0 	bl	8003ba8 <__malloc_lock>
 80039e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <_free_r+0x90>)
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	b933      	cbnz	r3, 80039fc <_free_r+0x2c>
 80039ee:	6063      	str	r3, [r4, #4]
 80039f0:	6014      	str	r4, [r2, #0]
 80039f2:	4628      	mov	r0, r5
 80039f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039f8:	f000 b8dc 	b.w	8003bb4 <__malloc_unlock>
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	d908      	bls.n	8003a12 <_free_r+0x42>
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	1821      	adds	r1, r4, r0
 8003a04:	428b      	cmp	r3, r1
 8003a06:	bf01      	itttt	eq
 8003a08:	6819      	ldreq	r1, [r3, #0]
 8003a0a:	685b      	ldreq	r3, [r3, #4]
 8003a0c:	1809      	addeq	r1, r1, r0
 8003a0e:	6021      	streq	r1, [r4, #0]
 8003a10:	e7ed      	b.n	80039ee <_free_r+0x1e>
 8003a12:	461a      	mov	r2, r3
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b10b      	cbz	r3, 8003a1c <_free_r+0x4c>
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	d9fa      	bls.n	8003a12 <_free_r+0x42>
 8003a1c:	6811      	ldr	r1, [r2, #0]
 8003a1e:	1850      	adds	r0, r2, r1
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d10b      	bne.n	8003a3c <_free_r+0x6c>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	4401      	add	r1, r0
 8003a28:	1850      	adds	r0, r2, r1
 8003a2a:	4283      	cmp	r3, r0
 8003a2c:	6011      	str	r1, [r2, #0]
 8003a2e:	d1e0      	bne.n	80039f2 <_free_r+0x22>
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	6053      	str	r3, [r2, #4]
 8003a36:	4408      	add	r0, r1
 8003a38:	6010      	str	r0, [r2, #0]
 8003a3a:	e7da      	b.n	80039f2 <_free_r+0x22>
 8003a3c:	d902      	bls.n	8003a44 <_free_r+0x74>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	e7d6      	b.n	80039f2 <_free_r+0x22>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	1821      	adds	r1, r4, r0
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	bf04      	itt	eq
 8003a4c:	6819      	ldreq	r1, [r3, #0]
 8003a4e:	685b      	ldreq	r3, [r3, #4]
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	bf04      	itt	eq
 8003a54:	1809      	addeq	r1, r1, r0
 8003a56:	6021      	streq	r1, [r4, #0]
 8003a58:	6054      	str	r4, [r2, #4]
 8003a5a:	e7ca      	b.n	80039f2 <_free_r+0x22>
 8003a5c:	bd38      	pop	{r3, r4, r5, pc}
 8003a5e:	bf00      	nop
 8003a60:	2000037c 	.word	0x2000037c

08003a64 <sbrk_aligned>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	4e0f      	ldr	r6, [pc, #60]	@ (8003aa4 <sbrk_aligned+0x40>)
 8003a68:	460c      	mov	r4, r1
 8003a6a:	6831      	ldr	r1, [r6, #0]
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	b911      	cbnz	r1, 8003a76 <sbrk_aligned+0x12>
 8003a70:	f000 fba6 	bl	80041c0 <_sbrk_r>
 8003a74:	6030      	str	r0, [r6, #0]
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 fba1 	bl	80041c0 <_sbrk_r>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d103      	bne.n	8003a8a <sbrk_aligned+0x26>
 8003a82:	f04f 34ff 	mov.w	r4, #4294967295
 8003a86:	4620      	mov	r0, r4
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
 8003a8a:	1cc4      	adds	r4, r0, #3
 8003a8c:	f024 0403 	bic.w	r4, r4, #3
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	d0f8      	beq.n	8003a86 <sbrk_aligned+0x22>
 8003a94:	1a21      	subs	r1, r4, r0
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 fb92 	bl	80041c0 <_sbrk_r>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d1f2      	bne.n	8003a86 <sbrk_aligned+0x22>
 8003aa0:	e7ef      	b.n	8003a82 <sbrk_aligned+0x1e>
 8003aa2:	bf00      	nop
 8003aa4:	20000378 	.word	0x20000378

08003aa8 <_malloc_r>:
 8003aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aac:	1ccd      	adds	r5, r1, #3
 8003aae:	f025 0503 	bic.w	r5, r5, #3
 8003ab2:	3508      	adds	r5, #8
 8003ab4:	2d0c      	cmp	r5, #12
 8003ab6:	bf38      	it	cc
 8003ab8:	250c      	movcc	r5, #12
 8003aba:	2d00      	cmp	r5, #0
 8003abc:	4606      	mov	r6, r0
 8003abe:	db01      	blt.n	8003ac4 <_malloc_r+0x1c>
 8003ac0:	42a9      	cmp	r1, r5
 8003ac2:	d904      	bls.n	8003ace <_malloc_r+0x26>
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	6033      	str	r3, [r6, #0]
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ba4 <_malloc_r+0xfc>
 8003ad2:	f000 f869 	bl	8003ba8 <__malloc_lock>
 8003ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8003ada:	461c      	mov	r4, r3
 8003adc:	bb44      	cbnz	r4, 8003b30 <_malloc_r+0x88>
 8003ade:	4629      	mov	r1, r5
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f7ff ffbf 	bl	8003a64 <sbrk_aligned>
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	4604      	mov	r4, r0
 8003aea:	d158      	bne.n	8003b9e <_malloc_r+0xf6>
 8003aec:	f8d8 4000 	ldr.w	r4, [r8]
 8003af0:	4627      	mov	r7, r4
 8003af2:	2f00      	cmp	r7, #0
 8003af4:	d143      	bne.n	8003b7e <_malloc_r+0xd6>
 8003af6:	2c00      	cmp	r4, #0
 8003af8:	d04b      	beq.n	8003b92 <_malloc_r+0xea>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	4639      	mov	r1, r7
 8003afe:	4630      	mov	r0, r6
 8003b00:	eb04 0903 	add.w	r9, r4, r3
 8003b04:	f000 fb5c 	bl	80041c0 <_sbrk_r>
 8003b08:	4581      	cmp	r9, r0
 8003b0a:	d142      	bne.n	8003b92 <_malloc_r+0xea>
 8003b0c:	6821      	ldr	r1, [r4, #0]
 8003b0e:	1a6d      	subs	r5, r5, r1
 8003b10:	4629      	mov	r1, r5
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7ff ffa6 	bl	8003a64 <sbrk_aligned>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d03a      	beq.n	8003b92 <_malloc_r+0xea>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	442b      	add	r3, r5
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	f8d8 3000 	ldr.w	r3, [r8]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	bb62      	cbnz	r2, 8003b84 <_malloc_r+0xdc>
 8003b2a:	f8c8 7000 	str.w	r7, [r8]
 8003b2e:	e00f      	b.n	8003b50 <_malloc_r+0xa8>
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	1b52      	subs	r2, r2, r5
 8003b34:	d420      	bmi.n	8003b78 <_malloc_r+0xd0>
 8003b36:	2a0b      	cmp	r2, #11
 8003b38:	d917      	bls.n	8003b6a <_malloc_r+0xc2>
 8003b3a:	1961      	adds	r1, r4, r5
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	6025      	str	r5, [r4, #0]
 8003b40:	bf18      	it	ne
 8003b42:	6059      	strne	r1, [r3, #4]
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	bf08      	it	eq
 8003b48:	f8c8 1000 	streq.w	r1, [r8]
 8003b4c:	5162      	str	r2, [r4, r5]
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 f82f 	bl	8003bb4 <__malloc_unlock>
 8003b56:	f104 000b 	add.w	r0, r4, #11
 8003b5a:	1d23      	adds	r3, r4, #4
 8003b5c:	f020 0007 	bic.w	r0, r0, #7
 8003b60:	1ac2      	subs	r2, r0, r3
 8003b62:	bf1c      	itt	ne
 8003b64:	1a1b      	subne	r3, r3, r0
 8003b66:	50a3      	strne	r3, [r4, r2]
 8003b68:	e7af      	b.n	8003aca <_malloc_r+0x22>
 8003b6a:	6862      	ldr	r2, [r4, #4]
 8003b6c:	42a3      	cmp	r3, r4
 8003b6e:	bf0c      	ite	eq
 8003b70:	f8c8 2000 	streq.w	r2, [r8]
 8003b74:	605a      	strne	r2, [r3, #4]
 8003b76:	e7eb      	b.n	8003b50 <_malloc_r+0xa8>
 8003b78:	4623      	mov	r3, r4
 8003b7a:	6864      	ldr	r4, [r4, #4]
 8003b7c:	e7ae      	b.n	8003adc <_malloc_r+0x34>
 8003b7e:	463c      	mov	r4, r7
 8003b80:	687f      	ldr	r7, [r7, #4]
 8003b82:	e7b6      	b.n	8003af2 <_malloc_r+0x4a>
 8003b84:	461a      	mov	r2, r3
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	d1fb      	bne.n	8003b84 <_malloc_r+0xdc>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	6053      	str	r3, [r2, #4]
 8003b90:	e7de      	b.n	8003b50 <_malloc_r+0xa8>
 8003b92:	230c      	movs	r3, #12
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 f80c 	bl	8003bb4 <__malloc_unlock>
 8003b9c:	e794      	b.n	8003ac8 <_malloc_r+0x20>
 8003b9e:	6005      	str	r5, [r0, #0]
 8003ba0:	e7d6      	b.n	8003b50 <_malloc_r+0xa8>
 8003ba2:	bf00      	nop
 8003ba4:	2000037c 	.word	0x2000037c

08003ba8 <__malloc_lock>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	@ (8003bb0 <__malloc_lock+0x8>)
 8003baa:	f7ff bf0f 	b.w	80039cc <__retarget_lock_acquire_recursive>
 8003bae:	bf00      	nop
 8003bb0:	20000374 	.word	0x20000374

08003bb4 <__malloc_unlock>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	@ (8003bbc <__malloc_unlock+0x8>)
 8003bb6:	f7ff bf0a 	b.w	80039ce <__retarget_lock_release_recursive>
 8003bba:	bf00      	nop
 8003bbc:	20000374 	.word	0x20000374

08003bc0 <__ssputs_r>:
 8003bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	688e      	ldr	r6, [r1, #8]
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	42be      	cmp	r6, r7
 8003bca:	680b      	ldr	r3, [r1, #0]
 8003bcc:	4682      	mov	sl, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4690      	mov	r8, r2
 8003bd2:	d82d      	bhi.n	8003c30 <__ssputs_r+0x70>
 8003bd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bdc:	d026      	beq.n	8003c2c <__ssputs_r+0x6c>
 8003bde:	6965      	ldr	r5, [r4, #20]
 8003be0:	6909      	ldr	r1, [r1, #16]
 8003be2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003be6:	eba3 0901 	sub.w	r9, r3, r1
 8003bea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bee:	1c7b      	adds	r3, r7, #1
 8003bf0:	444b      	add	r3, r9
 8003bf2:	106d      	asrs	r5, r5, #1
 8003bf4:	429d      	cmp	r5, r3
 8003bf6:	bf38      	it	cc
 8003bf8:	461d      	movcc	r5, r3
 8003bfa:	0553      	lsls	r3, r2, #21
 8003bfc:	d527      	bpl.n	8003c4e <__ssputs_r+0x8e>
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f7ff ff52 	bl	8003aa8 <_malloc_r>
 8003c04:	4606      	mov	r6, r0
 8003c06:	b360      	cbz	r0, 8003c62 <__ssputs_r+0xa2>
 8003c08:	6921      	ldr	r1, [r4, #16]
 8003c0a:	464a      	mov	r2, r9
 8003c0c:	f000 fae8 	bl	80041e0 <memcpy>
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1a:	81a3      	strh	r3, [r4, #12]
 8003c1c:	6126      	str	r6, [r4, #16]
 8003c1e:	6165      	str	r5, [r4, #20]
 8003c20:	444e      	add	r6, r9
 8003c22:	eba5 0509 	sub.w	r5, r5, r9
 8003c26:	6026      	str	r6, [r4, #0]
 8003c28:	60a5      	str	r5, [r4, #8]
 8003c2a:	463e      	mov	r6, r7
 8003c2c:	42be      	cmp	r6, r7
 8003c2e:	d900      	bls.n	8003c32 <__ssputs_r+0x72>
 8003c30:	463e      	mov	r6, r7
 8003c32:	6820      	ldr	r0, [r4, #0]
 8003c34:	4632      	mov	r2, r6
 8003c36:	4641      	mov	r1, r8
 8003c38:	f000 faa8 	bl	800418c <memmove>
 8003c3c:	68a3      	ldr	r3, [r4, #8]
 8003c3e:	1b9b      	subs	r3, r3, r6
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	4433      	add	r3, r6
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c4e:	462a      	mov	r2, r5
 8003c50:	f000 fad4 	bl	80041fc <_realloc_r>
 8003c54:	4606      	mov	r6, r0
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d1e0      	bne.n	8003c1c <__ssputs_r+0x5c>
 8003c5a:	6921      	ldr	r1, [r4, #16]
 8003c5c:	4650      	mov	r0, sl
 8003c5e:	f7ff feb7 	bl	80039d0 <_free_r>
 8003c62:	230c      	movs	r3, #12
 8003c64:	f8ca 3000 	str.w	r3, [sl]
 8003c68:	89a3      	ldrh	r3, [r4, #12]
 8003c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6e:	81a3      	strh	r3, [r4, #12]
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	e7e9      	b.n	8003c4a <__ssputs_r+0x8a>
	...

08003c78 <_svfiprintf_r>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	4698      	mov	r8, r3
 8003c7e:	898b      	ldrh	r3, [r1, #12]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	b09d      	sub	sp, #116	@ 0x74
 8003c84:	4607      	mov	r7, r0
 8003c86:	460d      	mov	r5, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	d510      	bpl.n	8003cae <_svfiprintf_r+0x36>
 8003c8c:	690b      	ldr	r3, [r1, #16]
 8003c8e:	b973      	cbnz	r3, 8003cae <_svfiprintf_r+0x36>
 8003c90:	2140      	movs	r1, #64	@ 0x40
 8003c92:	f7ff ff09 	bl	8003aa8 <_malloc_r>
 8003c96:	6028      	str	r0, [r5, #0]
 8003c98:	6128      	str	r0, [r5, #16]
 8003c9a:	b930      	cbnz	r0, 8003caa <_svfiprintf_r+0x32>
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	b01d      	add	sp, #116	@ 0x74
 8003ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003caa:	2340      	movs	r3, #64	@ 0x40
 8003cac:	616b      	str	r3, [r5, #20]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cbc:	2330      	movs	r3, #48	@ 0x30
 8003cbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e5c <_svfiprintf_r+0x1e4>
 8003cc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cc6:	f04f 0901 	mov.w	r9, #1
 8003cca:	4623      	mov	r3, r4
 8003ccc:	469a      	mov	sl, r3
 8003cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd2:	b10a      	cbz	r2, 8003cd8 <_svfiprintf_r+0x60>
 8003cd4:	2a25      	cmp	r2, #37	@ 0x25
 8003cd6:	d1f9      	bne.n	8003ccc <_svfiprintf_r+0x54>
 8003cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cdc:	d00b      	beq.n	8003cf6 <_svfiprintf_r+0x7e>
 8003cde:	465b      	mov	r3, fp
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f7ff ff6b 	bl	8003bc0 <__ssputs_r>
 8003cea:	3001      	adds	r0, #1
 8003cec:	f000 80a7 	beq.w	8003e3e <_svfiprintf_r+0x1c6>
 8003cf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cf2:	445a      	add	r2, fp
 8003cf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 809f 	beq.w	8003e3e <_svfiprintf_r+0x1c6>
 8003d00:	2300      	movs	r3, #0
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d0a:	f10a 0a01 	add.w	sl, sl, #1
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	9307      	str	r3, [sp, #28]
 8003d12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d16:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d18:	4654      	mov	r4, sl
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d20:	484e      	ldr	r0, [pc, #312]	@ (8003e5c <_svfiprintf_r+0x1e4>)
 8003d22:	f7fc fa5d 	bl	80001e0 <memchr>
 8003d26:	9a04      	ldr	r2, [sp, #16]
 8003d28:	b9d8      	cbnz	r0, 8003d62 <_svfiprintf_r+0xea>
 8003d2a:	06d0      	lsls	r0, r2, #27
 8003d2c:	bf44      	itt	mi
 8003d2e:	2320      	movmi	r3, #32
 8003d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d34:	0711      	lsls	r1, r2, #28
 8003d36:	bf44      	itt	mi
 8003d38:	232b      	movmi	r3, #43	@ 0x2b
 8003d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d44:	d015      	beq.n	8003d72 <_svfiprintf_r+0xfa>
 8003d46:	9a07      	ldr	r2, [sp, #28]
 8003d48:	4654      	mov	r4, sl
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f04f 0c0a 	mov.w	ip, #10
 8003d50:	4621      	mov	r1, r4
 8003d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d56:	3b30      	subs	r3, #48	@ 0x30
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d94b      	bls.n	8003df4 <_svfiprintf_r+0x17c>
 8003d5c:	b1b0      	cbz	r0, 8003d8c <_svfiprintf_r+0x114>
 8003d5e:	9207      	str	r2, [sp, #28]
 8003d60:	e014      	b.n	8003d8c <_svfiprintf_r+0x114>
 8003d62:	eba0 0308 	sub.w	r3, r0, r8
 8003d66:	fa09 f303 	lsl.w	r3, r9, r3
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	9304      	str	r3, [sp, #16]
 8003d6e:	46a2      	mov	sl, r4
 8003d70:	e7d2      	b.n	8003d18 <_svfiprintf_r+0xa0>
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	1d19      	adds	r1, r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	9103      	str	r1, [sp, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bfbb      	ittet	lt
 8003d7e:	425b      	neglt	r3, r3
 8003d80:	f042 0202 	orrlt.w	r2, r2, #2
 8003d84:	9307      	strge	r3, [sp, #28]
 8003d86:	9307      	strlt	r3, [sp, #28]
 8003d88:	bfb8      	it	lt
 8003d8a:	9204      	strlt	r2, [sp, #16]
 8003d8c:	7823      	ldrb	r3, [r4, #0]
 8003d8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d90:	d10a      	bne.n	8003da8 <_svfiprintf_r+0x130>
 8003d92:	7863      	ldrb	r3, [r4, #1]
 8003d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d96:	d132      	bne.n	8003dfe <_svfiprintf_r+0x186>
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	9203      	str	r2, [sp, #12]
 8003da0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003da4:	3402      	adds	r4, #2
 8003da6:	9305      	str	r3, [sp, #20]
 8003da8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e6c <_svfiprintf_r+0x1f4>
 8003dac:	7821      	ldrb	r1, [r4, #0]
 8003dae:	2203      	movs	r2, #3
 8003db0:	4650      	mov	r0, sl
 8003db2:	f7fc fa15 	bl	80001e0 <memchr>
 8003db6:	b138      	cbz	r0, 8003dc8 <_svfiprintf_r+0x150>
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	eba0 000a 	sub.w	r0, r0, sl
 8003dbe:	2240      	movs	r2, #64	@ 0x40
 8003dc0:	4082      	lsls	r2, r0
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	3401      	adds	r4, #1
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dcc:	4824      	ldr	r0, [pc, #144]	@ (8003e60 <_svfiprintf_r+0x1e8>)
 8003dce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dd2:	2206      	movs	r2, #6
 8003dd4:	f7fc fa04 	bl	80001e0 <memchr>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d036      	beq.n	8003e4a <_svfiprintf_r+0x1d2>
 8003ddc:	4b21      	ldr	r3, [pc, #132]	@ (8003e64 <_svfiprintf_r+0x1ec>)
 8003dde:	bb1b      	cbnz	r3, 8003e28 <_svfiprintf_r+0x1b0>
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	3307      	adds	r3, #7
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	3308      	adds	r3, #8
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dee:	4433      	add	r3, r6
 8003df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003df2:	e76a      	b.n	8003cca <_svfiprintf_r+0x52>
 8003df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df8:	460c      	mov	r4, r1
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	e7a8      	b.n	8003d50 <_svfiprintf_r+0xd8>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	3401      	adds	r4, #1
 8003e02:	9305      	str	r3, [sp, #20]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f04f 0c0a 	mov.w	ip, #10
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e10:	3a30      	subs	r2, #48	@ 0x30
 8003e12:	2a09      	cmp	r2, #9
 8003e14:	d903      	bls.n	8003e1e <_svfiprintf_r+0x1a6>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0c6      	beq.n	8003da8 <_svfiprintf_r+0x130>
 8003e1a:	9105      	str	r1, [sp, #20]
 8003e1c:	e7c4      	b.n	8003da8 <_svfiprintf_r+0x130>
 8003e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e22:	4604      	mov	r4, r0
 8003e24:	2301      	movs	r3, #1
 8003e26:	e7f0      	b.n	8003e0a <_svfiprintf_r+0x192>
 8003e28:	ab03      	add	r3, sp, #12
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	462a      	mov	r2, r5
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <_svfiprintf_r+0x1f0>)
 8003e30:	a904      	add	r1, sp, #16
 8003e32:	4638      	mov	r0, r7
 8003e34:	f3af 8000 	nop.w
 8003e38:	1c42      	adds	r2, r0, #1
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	d1d6      	bne.n	8003dec <_svfiprintf_r+0x174>
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	065b      	lsls	r3, r3, #25
 8003e42:	f53f af2d 	bmi.w	8003ca0 <_svfiprintf_r+0x28>
 8003e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e48:	e72c      	b.n	8003ca4 <_svfiprintf_r+0x2c>
 8003e4a:	ab03      	add	r3, sp, #12
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	462a      	mov	r2, r5
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <_svfiprintf_r+0x1f0>)
 8003e52:	a904      	add	r1, sp, #16
 8003e54:	4638      	mov	r0, r7
 8003e56:	f000 f879 	bl	8003f4c <_printf_i>
 8003e5a:	e7ed      	b.n	8003e38 <_svfiprintf_r+0x1c0>
 8003e5c:	080042c0 	.word	0x080042c0
 8003e60:	080042ca 	.word	0x080042ca
 8003e64:	00000000 	.word	0x00000000
 8003e68:	08003bc1 	.word	0x08003bc1
 8003e6c:	080042c6 	.word	0x080042c6

08003e70 <_printf_common>:
 8003e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	4616      	mov	r6, r2
 8003e76:	4698      	mov	r8, r3
 8003e78:	688a      	ldr	r2, [r1, #8]
 8003e7a:	690b      	ldr	r3, [r1, #16]
 8003e7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bfb8      	it	lt
 8003e84:	4613      	movlt	r3, r2
 8003e86:	6033      	str	r3, [r6, #0]
 8003e88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	b10a      	cbz	r2, 8003e96 <_printf_common+0x26>
 8003e92:	3301      	adds	r3, #1
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	0699      	lsls	r1, r3, #26
 8003e9a:	bf42      	ittt	mi
 8003e9c:	6833      	ldrmi	r3, [r6, #0]
 8003e9e:	3302      	addmi	r3, #2
 8003ea0:	6033      	strmi	r3, [r6, #0]
 8003ea2:	6825      	ldr	r5, [r4, #0]
 8003ea4:	f015 0506 	ands.w	r5, r5, #6
 8003ea8:	d106      	bne.n	8003eb8 <_printf_common+0x48>
 8003eaa:	f104 0a19 	add.w	sl, r4, #25
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	6832      	ldr	r2, [r6, #0]
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	42ab      	cmp	r3, r5
 8003eb6:	dc26      	bgt.n	8003f06 <_printf_common+0x96>
 8003eb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	3b00      	subs	r3, #0
 8003ec0:	bf18      	it	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	0692      	lsls	r2, r2, #26
 8003ec6:	d42b      	bmi.n	8003f20 <_printf_common+0xb0>
 8003ec8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ecc:	4641      	mov	r1, r8
 8003ece:	4638      	mov	r0, r7
 8003ed0:	47c8      	blx	r9
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d01e      	beq.n	8003f14 <_printf_common+0xa4>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	6922      	ldr	r2, [r4, #16]
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf02      	ittt	eq
 8003ee2:	68e5      	ldreq	r5, [r4, #12]
 8003ee4:	6833      	ldreq	r3, [r6, #0]
 8003ee6:	1aed      	subeq	r5, r5, r3
 8003ee8:	68a3      	ldr	r3, [r4, #8]
 8003eea:	bf0c      	ite	eq
 8003eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef0:	2500      	movne	r5, #0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfc4      	itt	gt
 8003ef6:	1a9b      	subgt	r3, r3, r2
 8003ef8:	18ed      	addgt	r5, r5, r3
 8003efa:	2600      	movs	r6, #0
 8003efc:	341a      	adds	r4, #26
 8003efe:	42b5      	cmp	r5, r6
 8003f00:	d11a      	bne.n	8003f38 <_printf_common+0xc8>
 8003f02:	2000      	movs	r0, #0
 8003f04:	e008      	b.n	8003f18 <_printf_common+0xa8>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4652      	mov	r2, sl
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	47c8      	blx	r9
 8003f10:	3001      	adds	r0, #1
 8003f12:	d103      	bne.n	8003f1c <_printf_common+0xac>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1c:	3501      	adds	r5, #1
 8003f1e:	e7c6      	b.n	8003eae <_printf_common+0x3e>
 8003f20:	18e1      	adds	r1, r4, r3
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	2030      	movs	r0, #48	@ 0x30
 8003f26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f2a:	4422      	add	r2, r4
 8003f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f34:	3302      	adds	r3, #2
 8003f36:	e7c7      	b.n	8003ec8 <_printf_common+0x58>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	4638      	mov	r0, r7
 8003f40:	47c8      	blx	r9
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0e6      	beq.n	8003f14 <_printf_common+0xa4>
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7d9      	b.n	8003efe <_printf_common+0x8e>
	...

08003f4c <_printf_i>:
 8003f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	7e0f      	ldrb	r7, [r1, #24]
 8003f52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f54:	2f78      	cmp	r7, #120	@ 0x78
 8003f56:	4691      	mov	r9, r2
 8003f58:	4680      	mov	r8, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	469a      	mov	sl, r3
 8003f5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f62:	d807      	bhi.n	8003f74 <_printf_i+0x28>
 8003f64:	2f62      	cmp	r7, #98	@ 0x62
 8003f66:	d80a      	bhi.n	8003f7e <_printf_i+0x32>
 8003f68:	2f00      	cmp	r7, #0
 8003f6a:	f000 80d2 	beq.w	8004112 <_printf_i+0x1c6>
 8003f6e:	2f58      	cmp	r7, #88	@ 0x58
 8003f70:	f000 80b9 	beq.w	80040e6 <_printf_i+0x19a>
 8003f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f7c:	e03a      	b.n	8003ff4 <_printf_i+0xa8>
 8003f7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f82:	2b15      	cmp	r3, #21
 8003f84:	d8f6      	bhi.n	8003f74 <_printf_i+0x28>
 8003f86:	a101      	add	r1, pc, #4	@ (adr r1, 8003f8c <_printf_i+0x40>)
 8003f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003ff9 	.word	0x08003ff9
 8003f94:	08003f75 	.word	0x08003f75
 8003f98:	08003f75 	.word	0x08003f75
 8003f9c:	08003f75 	.word	0x08003f75
 8003fa0:	08003f75 	.word	0x08003f75
 8003fa4:	08003ff9 	.word	0x08003ff9
 8003fa8:	08003f75 	.word	0x08003f75
 8003fac:	08003f75 	.word	0x08003f75
 8003fb0:	08003f75 	.word	0x08003f75
 8003fb4:	08003f75 	.word	0x08003f75
 8003fb8:	080040f9 	.word	0x080040f9
 8003fbc:	08004023 	.word	0x08004023
 8003fc0:	080040b3 	.word	0x080040b3
 8003fc4:	08003f75 	.word	0x08003f75
 8003fc8:	08003f75 	.word	0x08003f75
 8003fcc:	0800411b 	.word	0x0800411b
 8003fd0:	08003f75 	.word	0x08003f75
 8003fd4:	08004023 	.word	0x08004023
 8003fd8:	08003f75 	.word	0x08003f75
 8003fdc:	08003f75 	.word	0x08003f75
 8003fe0:	080040bb 	.word	0x080040bb
 8003fe4:	6833      	ldr	r3, [r6, #0]
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6032      	str	r2, [r6, #0]
 8003fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e09d      	b.n	8004134 <_printf_i+0x1e8>
 8003ff8:	6833      	ldr	r3, [r6, #0]
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	1d19      	adds	r1, r3, #4
 8003ffe:	6031      	str	r1, [r6, #0]
 8004000:	0606      	lsls	r6, r0, #24
 8004002:	d501      	bpl.n	8004008 <_printf_i+0xbc>
 8004004:	681d      	ldr	r5, [r3, #0]
 8004006:	e003      	b.n	8004010 <_printf_i+0xc4>
 8004008:	0645      	lsls	r5, r0, #25
 800400a:	d5fb      	bpl.n	8004004 <_printf_i+0xb8>
 800400c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004010:	2d00      	cmp	r5, #0
 8004012:	da03      	bge.n	800401c <_printf_i+0xd0>
 8004014:	232d      	movs	r3, #45	@ 0x2d
 8004016:	426d      	negs	r5, r5
 8004018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800401c:	4859      	ldr	r0, [pc, #356]	@ (8004184 <_printf_i+0x238>)
 800401e:	230a      	movs	r3, #10
 8004020:	e011      	b.n	8004046 <_printf_i+0xfa>
 8004022:	6821      	ldr	r1, [r4, #0]
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	0608      	lsls	r0, r1, #24
 8004028:	f853 5b04 	ldr.w	r5, [r3], #4
 800402c:	d402      	bmi.n	8004034 <_printf_i+0xe8>
 800402e:	0649      	lsls	r1, r1, #25
 8004030:	bf48      	it	mi
 8004032:	b2ad      	uxthmi	r5, r5
 8004034:	2f6f      	cmp	r7, #111	@ 0x6f
 8004036:	4853      	ldr	r0, [pc, #332]	@ (8004184 <_printf_i+0x238>)
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	bf14      	ite	ne
 800403c:	230a      	movne	r3, #10
 800403e:	2308      	moveq	r3, #8
 8004040:	2100      	movs	r1, #0
 8004042:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004046:	6866      	ldr	r6, [r4, #4]
 8004048:	60a6      	str	r6, [r4, #8]
 800404a:	2e00      	cmp	r6, #0
 800404c:	bfa2      	ittt	ge
 800404e:	6821      	ldrge	r1, [r4, #0]
 8004050:	f021 0104 	bicge.w	r1, r1, #4
 8004054:	6021      	strge	r1, [r4, #0]
 8004056:	b90d      	cbnz	r5, 800405c <_printf_i+0x110>
 8004058:	2e00      	cmp	r6, #0
 800405a:	d04b      	beq.n	80040f4 <_printf_i+0x1a8>
 800405c:	4616      	mov	r6, r2
 800405e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004062:	fb03 5711 	mls	r7, r3, r1, r5
 8004066:	5dc7      	ldrb	r7, [r0, r7]
 8004068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800406c:	462f      	mov	r7, r5
 800406e:	42bb      	cmp	r3, r7
 8004070:	460d      	mov	r5, r1
 8004072:	d9f4      	bls.n	800405e <_printf_i+0x112>
 8004074:	2b08      	cmp	r3, #8
 8004076:	d10b      	bne.n	8004090 <_printf_i+0x144>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	07df      	lsls	r7, r3, #31
 800407c:	d508      	bpl.n	8004090 <_printf_i+0x144>
 800407e:	6923      	ldr	r3, [r4, #16]
 8004080:	6861      	ldr	r1, [r4, #4]
 8004082:	4299      	cmp	r1, r3
 8004084:	bfde      	ittt	le
 8004086:	2330      	movle	r3, #48	@ 0x30
 8004088:	f806 3c01 	strble.w	r3, [r6, #-1]
 800408c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004090:	1b92      	subs	r2, r2, r6
 8004092:	6122      	str	r2, [r4, #16]
 8004094:	f8cd a000 	str.w	sl, [sp]
 8004098:	464b      	mov	r3, r9
 800409a:	aa03      	add	r2, sp, #12
 800409c:	4621      	mov	r1, r4
 800409e:	4640      	mov	r0, r8
 80040a0:	f7ff fee6 	bl	8003e70 <_printf_common>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d14a      	bne.n	800413e <_printf_i+0x1f2>
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	b004      	add	sp, #16
 80040ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f043 0320 	orr.w	r3, r3, #32
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	4833      	ldr	r0, [pc, #204]	@ (8004188 <_printf_i+0x23c>)
 80040bc:	2778      	movs	r7, #120	@ 0x78
 80040be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	6831      	ldr	r1, [r6, #0]
 80040c6:	061f      	lsls	r7, r3, #24
 80040c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80040cc:	d402      	bmi.n	80040d4 <_printf_i+0x188>
 80040ce:	065f      	lsls	r7, r3, #25
 80040d0:	bf48      	it	mi
 80040d2:	b2ad      	uxthmi	r5, r5
 80040d4:	6031      	str	r1, [r6, #0]
 80040d6:	07d9      	lsls	r1, r3, #31
 80040d8:	bf44      	itt	mi
 80040da:	f043 0320 	orrmi.w	r3, r3, #32
 80040de:	6023      	strmi	r3, [r4, #0]
 80040e0:	b11d      	cbz	r5, 80040ea <_printf_i+0x19e>
 80040e2:	2310      	movs	r3, #16
 80040e4:	e7ac      	b.n	8004040 <_printf_i+0xf4>
 80040e6:	4827      	ldr	r0, [pc, #156]	@ (8004184 <_printf_i+0x238>)
 80040e8:	e7e9      	b.n	80040be <_printf_i+0x172>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	f023 0320 	bic.w	r3, r3, #32
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	e7f6      	b.n	80040e2 <_printf_i+0x196>
 80040f4:	4616      	mov	r6, r2
 80040f6:	e7bd      	b.n	8004074 <_printf_i+0x128>
 80040f8:	6833      	ldr	r3, [r6, #0]
 80040fa:	6825      	ldr	r5, [r4, #0]
 80040fc:	6961      	ldr	r1, [r4, #20]
 80040fe:	1d18      	adds	r0, r3, #4
 8004100:	6030      	str	r0, [r6, #0]
 8004102:	062e      	lsls	r6, r5, #24
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	d501      	bpl.n	800410c <_printf_i+0x1c0>
 8004108:	6019      	str	r1, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0x1c6>
 800410c:	0668      	lsls	r0, r5, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0x1bc>
 8004110:	8019      	strh	r1, [r3, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	4616      	mov	r6, r2
 8004118:	e7bc      	b.n	8004094 <_printf_i+0x148>
 800411a:	6833      	ldr	r3, [r6, #0]
 800411c:	1d1a      	adds	r2, r3, #4
 800411e:	6032      	str	r2, [r6, #0]
 8004120:	681e      	ldr	r6, [r3, #0]
 8004122:	6862      	ldr	r2, [r4, #4]
 8004124:	2100      	movs	r1, #0
 8004126:	4630      	mov	r0, r6
 8004128:	f7fc f85a 	bl	80001e0 <memchr>
 800412c:	b108      	cbz	r0, 8004132 <_printf_i+0x1e6>
 800412e:	1b80      	subs	r0, r0, r6
 8004130:	6060      	str	r0, [r4, #4]
 8004132:	6863      	ldr	r3, [r4, #4]
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	2300      	movs	r3, #0
 8004138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800413c:	e7aa      	b.n	8004094 <_printf_i+0x148>
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	4632      	mov	r2, r6
 8004142:	4649      	mov	r1, r9
 8004144:	4640      	mov	r0, r8
 8004146:	47d0      	blx	sl
 8004148:	3001      	adds	r0, #1
 800414a:	d0ad      	beq.n	80040a8 <_printf_i+0x15c>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	079b      	lsls	r3, r3, #30
 8004150:	d413      	bmi.n	800417a <_printf_i+0x22e>
 8004152:	68e0      	ldr	r0, [r4, #12]
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	4298      	cmp	r0, r3
 8004158:	bfb8      	it	lt
 800415a:	4618      	movlt	r0, r3
 800415c:	e7a6      	b.n	80040ac <_printf_i+0x160>
 800415e:	2301      	movs	r3, #1
 8004160:	4632      	mov	r2, r6
 8004162:	4649      	mov	r1, r9
 8004164:	4640      	mov	r0, r8
 8004166:	47d0      	blx	sl
 8004168:	3001      	adds	r0, #1
 800416a:	d09d      	beq.n	80040a8 <_printf_i+0x15c>
 800416c:	3501      	adds	r5, #1
 800416e:	68e3      	ldr	r3, [r4, #12]
 8004170:	9903      	ldr	r1, [sp, #12]
 8004172:	1a5b      	subs	r3, r3, r1
 8004174:	42ab      	cmp	r3, r5
 8004176:	dcf2      	bgt.n	800415e <_printf_i+0x212>
 8004178:	e7eb      	b.n	8004152 <_printf_i+0x206>
 800417a:	2500      	movs	r5, #0
 800417c:	f104 0619 	add.w	r6, r4, #25
 8004180:	e7f5      	b.n	800416e <_printf_i+0x222>
 8004182:	bf00      	nop
 8004184:	080042d1 	.word	0x080042d1
 8004188:	080042e2 	.word	0x080042e2

0800418c <memmove>:
 800418c:	4288      	cmp	r0, r1
 800418e:	b510      	push	{r4, lr}
 8004190:	eb01 0402 	add.w	r4, r1, r2
 8004194:	d902      	bls.n	800419c <memmove+0x10>
 8004196:	4284      	cmp	r4, r0
 8004198:	4623      	mov	r3, r4
 800419a:	d807      	bhi.n	80041ac <memmove+0x20>
 800419c:	1e43      	subs	r3, r0, #1
 800419e:	42a1      	cmp	r1, r4
 80041a0:	d008      	beq.n	80041b4 <memmove+0x28>
 80041a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041aa:	e7f8      	b.n	800419e <memmove+0x12>
 80041ac:	4402      	add	r2, r0
 80041ae:	4601      	mov	r1, r0
 80041b0:	428a      	cmp	r2, r1
 80041b2:	d100      	bne.n	80041b6 <memmove+0x2a>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041be:	e7f7      	b.n	80041b0 <memmove+0x24>

080041c0 <_sbrk_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4d06      	ldr	r5, [pc, #24]	@ (80041dc <_sbrk_r+0x1c>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	4604      	mov	r4, r0
 80041c8:	4608      	mov	r0, r1
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f7fc fb3a 	bl	8000844 <_sbrk>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d102      	bne.n	80041da <_sbrk_r+0x1a>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	b103      	cbz	r3, 80041da <_sbrk_r+0x1a>
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	bd38      	pop	{r3, r4, r5, pc}
 80041dc:	20000370 	.word	0x20000370

080041e0 <memcpy>:
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041e8:	d100      	bne.n	80041ec <memcpy+0xc>
 80041ea:	4770      	bx	lr
 80041ec:	b510      	push	{r4, lr}
 80041ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f6:	4291      	cmp	r1, r2
 80041f8:	d1f9      	bne.n	80041ee <memcpy+0xe>
 80041fa:	bd10      	pop	{r4, pc}

080041fc <_realloc_r>:
 80041fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004200:	4680      	mov	r8, r0
 8004202:	4615      	mov	r5, r2
 8004204:	460c      	mov	r4, r1
 8004206:	b921      	cbnz	r1, 8004212 <_realloc_r+0x16>
 8004208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800420c:	4611      	mov	r1, r2
 800420e:	f7ff bc4b 	b.w	8003aa8 <_malloc_r>
 8004212:	b92a      	cbnz	r2, 8004220 <_realloc_r+0x24>
 8004214:	f7ff fbdc 	bl	80039d0 <_free_r>
 8004218:	2400      	movs	r4, #0
 800421a:	4620      	mov	r0, r4
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004220:	f000 f81a 	bl	8004258 <_malloc_usable_size_r>
 8004224:	4285      	cmp	r5, r0
 8004226:	4606      	mov	r6, r0
 8004228:	d802      	bhi.n	8004230 <_realloc_r+0x34>
 800422a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800422e:	d8f4      	bhi.n	800421a <_realloc_r+0x1e>
 8004230:	4629      	mov	r1, r5
 8004232:	4640      	mov	r0, r8
 8004234:	f7ff fc38 	bl	8003aa8 <_malloc_r>
 8004238:	4607      	mov	r7, r0
 800423a:	2800      	cmp	r0, #0
 800423c:	d0ec      	beq.n	8004218 <_realloc_r+0x1c>
 800423e:	42b5      	cmp	r5, r6
 8004240:	462a      	mov	r2, r5
 8004242:	4621      	mov	r1, r4
 8004244:	bf28      	it	cs
 8004246:	4632      	movcs	r2, r6
 8004248:	f7ff ffca 	bl	80041e0 <memcpy>
 800424c:	4621      	mov	r1, r4
 800424e:	4640      	mov	r0, r8
 8004250:	f7ff fbbe 	bl	80039d0 <_free_r>
 8004254:	463c      	mov	r4, r7
 8004256:	e7e0      	b.n	800421a <_realloc_r+0x1e>

08004258 <_malloc_usable_size_r>:
 8004258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425c:	1f18      	subs	r0, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbc      	itt	lt
 8004262:	580b      	ldrlt	r3, [r1, r0]
 8004264:	18c0      	addlt	r0, r0, r3
 8004266:	4770      	bx	lr

08004268 <_init>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr

08004274 <_fini>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr
